// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles
parcelRequire = (function (modules, cache, entry, globalName) {
  // Save the require from previous bundle to this closure if any
  var previousRequire = typeof parcelRequire === 'function' && parcelRequire;
  var nodeRequire = typeof require === 'function' && require;

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire = typeof parcelRequire === 'function' && parcelRequire;
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error('Cannot find module \'' + name + '\'');
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = cache[name] = new newRequire.Module(name);

      modules[name][0].call(module.exports, localRequire, module, module.exports, this);
    }

    return cache[name].exports;

    function localRequire(x){
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x){
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [function (require, module) {
      module.exports = exports;
    }, {}];
  };

  var error;
  for (var i = 0; i < entry.length; i++) {
    try {
      newRequire(entry[i]);
    } catch (e) {
      // Save first error but execute all entries
      if (!error) {
        error = e;
      }
    }
  }

  if (entry.length) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(entry[entry.length - 1]);

    // CommonJS
    if (typeof exports === "object" && typeof module !== "undefined") {
      module.exports = mainExports;

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
     define(function () {
       return mainExports;
     });

    // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }

  // Override the current require with this new one
  parcelRequire = newRequire;

  if (error) {
    // throw error from earlier, _after updating parcelRequire_
    throw error;
  }

  return newRequire;
})({"../node_modules/process/browser.js":[function(require,module,exports) {

// shim for using process in browser
var process = module.exports = {}; // cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
  throw new Error('setTimeout has not been defined');
}

function defaultClearTimeout() {
  throw new Error('clearTimeout has not been defined');
}

(function () {
  try {
    if (typeof setTimeout === 'function') {
      cachedSetTimeout = setTimeout;
    } else {
      cachedSetTimeout = defaultSetTimout;
    }
  } catch (e) {
    cachedSetTimeout = defaultSetTimout;
  }

  try {
    if (typeof clearTimeout === 'function') {
      cachedClearTimeout = clearTimeout;
    } else {
      cachedClearTimeout = defaultClearTimeout;
    }
  } catch (e) {
    cachedClearTimeout = defaultClearTimeout;
  }
})();

function runTimeout(fun) {
  if (cachedSetTimeout === setTimeout) {
    //normal enviroments in sane situations
    return setTimeout(fun, 0);
  } // if setTimeout wasn't available but was latter defined


  if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
    cachedSetTimeout = setTimeout;
    return setTimeout(fun, 0);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedSetTimeout(fun, 0);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
      return cachedSetTimeout.call(null, fun, 0);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
      return cachedSetTimeout.call(this, fun, 0);
    }
  }
}

function runClearTimeout(marker) {
  if (cachedClearTimeout === clearTimeout) {
    //normal enviroments in sane situations
    return clearTimeout(marker);
  } // if clearTimeout wasn't available but was latter defined


  if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
    cachedClearTimeout = clearTimeout;
    return clearTimeout(marker);
  }

  try {
    // when when somebody has screwed with setTimeout but no I.E. maddness
    return cachedClearTimeout(marker);
  } catch (e) {
    try {
      // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
      return cachedClearTimeout.call(null, marker);
    } catch (e) {
      // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
      // Some versions of I.E. have different rules for clearTimeout vs setTimeout
      return cachedClearTimeout.call(this, marker);
    }
  }
}

var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
  if (!draining || !currentQueue) {
    return;
  }

  draining = false;

  if (currentQueue.length) {
    queue = currentQueue.concat(queue);
  } else {
    queueIndex = -1;
  }

  if (queue.length) {
    drainQueue();
  }
}

function drainQueue() {
  if (draining) {
    return;
  }

  var timeout = runTimeout(cleanUpNextTick);
  draining = true;
  var len = queue.length;

  while (len) {
    currentQueue = queue;
    queue = [];

    while (++queueIndex < len) {
      if (currentQueue) {
        currentQueue[queueIndex].run();
      }
    }

    queueIndex = -1;
    len = queue.length;
  }

  currentQueue = null;
  draining = false;
  runClearTimeout(timeout);
}

process.nextTick = function (fun) {
  var args = new Array(arguments.length - 1);

  if (arguments.length > 1) {
    for (var i = 1; i < arguments.length; i++) {
      args[i - 1] = arguments[i];
    }
  }

  queue.push(new Item(fun, args));

  if (queue.length === 1 && !draining) {
    runTimeout(drainQueue);
  }
}; // v8 likes predictible objects


function Item(fun, array) {
  this.fun = fun;
  this.array = array;
}

Item.prototype.run = function () {
  this.fun.apply(null, this.array);
};

process.title = 'browser';
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues

process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) {
  return [];
};

process.binding = function (name) {
  throw new Error('process.binding is not supported');
};

process.cwd = function () {
  return '/';
};

process.chdir = function (dir) {
  throw new Error('process.chdir is not supported');
};

process.umask = function () {
  return 0;
};
},{}],"../node_modules/jquery/dist/jquery.js":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
var define;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		nonce: true,
		noModule: true
	};

	function DOMEval( code, node, doc ) {
		doc = doc || document;

		var i, val,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {

				// Support: Firefox 64+, Edge 18+
				// Some browsers don't support the "nonce" property on scripts.
				// On the other hand, just using `getAttribute` is not enough as
				// the `nonce` attribute is reset to an empty string whenever it
				// becomes browsing-context connected.
				// See https://github.com/whatwg/html/issues/2369
				// See https://html.spec.whatwg.org/#nonce-attributes
				// The `node.getAttribute` check was added for the sake of
				// `jQuery.globalEval` so that it can fake a nonce-containing node
				// via an object.
				val = node[ i ] || node.getAttribute && node.getAttribute( i );
				if ( val ) {
					script.setAttribute( i, val );
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.4.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				copy = options[ name ];

				// Prevent Object.prototype pollution
				// Prevent never-ending loop
				if ( name === "__proto__" || target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {
					src = target[ name ];

					// Ensure proper type for the source value
					if ( copyIsArray && !Array.isArray( src ) ) {
						clone = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clone = {};
					} else {
						clone = src;
					}
					copyIsArray = false;

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code, options ) {
		DOMEval( code, { nonce: options && options.nonce } );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	nonnativeSelectorCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),
	rdescend = new RegExp( whitespace + "|>" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rhtml = /HTML$/i,
	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		function( elem ) {
			return elem.disabled === true && elem.nodeName.toLowerCase() === "fieldset";
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!nonnativeSelectorCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) &&

				// Support: IE 8 only
				// Exclude object elements
				(nodeType !== 1 || context.nodeName.toLowerCase() !== "object") ) {

				newSelector = selector;
				newContext = context;

				// qSA considers elements outside a scoping root when evaluating child or
				// descendant combinators, which is not what we want.
				// In such cases, we work around the behavior by prefixing every selector in the
				// list with an ID selector referencing the scope context.
				// Thanks to Andrew Dupont for this technique.
				if ( nodeType === 1 && rdescend.test( selector ) ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch ( qsaError ) {
					nonnativeSelectorCache( selector, true );
				} finally {
					if ( nid === expando ) {
						context.removeAttribute( "id" );
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						inDisabledFieldset( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	var namespace = elem.namespaceURI,
		docElem = (elem.ownerDocument || elem).documentElement;

	// Support: IE <=8
	// Assume HTML when documentElement doesn't yet exist, such as inside loading iframes
	// https://bugs.jquery.com/ticket/4833
	return !rhtml.test( namespace || docElem && docElem.nodeName || "HTML" );
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	if ( support.matchesSelector && documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {
			nonnativeSelectorCache( expr, true );
		}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ?
				argument + length :
				argument > length ?
					length :
					argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
		if ( typeof elem.contentDocument !== "undefined" ) {
			return elem.contentDocument;
		}

		// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
		// Treat the template element as a regular one in browsers that
		// don't support it.
		if ( nodeName( elem, "template" ) ) {
			elem = elem.content || elem;
		}

		return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var documentElement = document.documentElement;



	var isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem );
		},
		composed = { composed: true };

	// Support: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 only
	// Check attachment across shadow DOM boundaries when possible (gh-3504)
	// Support: iOS 10.0-10.2 only
	// Early iOS 10 versions support `attachShadow` but not `getRootNode`,
	// leading to errors. We need to check for `getRootNode`.
	if ( documentElement.getRootNode ) {
		isAttached = function( elem ) {
			return jQuery.contains( elem.ownerDocument, elem ) ||
				elem.getRootNode( composed ) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			isAttached( elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, attached, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		attached = isAttached( elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( attached ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 - 11+
// focus() and blur() are asynchronous, except when they are no-op.
// So expect focus to be synchronous when the element is already active,
// and blur to be synchronous when the element is not already active.
// (focus and blur are always synchronous in other supported browsers,
// this just defines when we can count on it).
function expectSync( elem, type ) {
	return ( elem === safeActiveElement() ) === ( type === "focus" );
}

// Support: IE <=9 only
// Accessing document.activeElement can throw unexpectedly
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// If the event is namespaced, then each handler is only invoked if it is
				// specially universal or its namespaces are a superset of the event's.
				if ( !event.rnamespace || handleObj.namespace === false ||
					event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		click: {

			// Utilize native event to ensure correct state for checkable inputs
			setup: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Claim the first handler
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					// dataPriv.set( el, "click", ... )
					leverageNative( el, "click", returnTrue );
				}

				// Return false to allow normal processing in the caller
				return false;
			},
			trigger: function( data ) {

				// For mutual compressibility with _default, replace `this` access with a local var.
				// `|| data` is dead code meant only to preserve the variable through minification.
				var el = this || data;

				// Force setup before triggering a click
				if ( rcheckableType.test( el.type ) &&
					el.click && nodeName( el, "input" ) ) {

					leverageNative( el, "click" );
				}

				// Return non-false to allow normal event-path propagation
				return true;
			},

			// For cross-browser consistency, suppress native .click() on links
			// Also prevent it if we're currently inside a leveraged native-event stack
			_default: function( event ) {
				var target = event.target;
				return rcheckableType.test( target.type ) &&
					target.click && nodeName( target, "input" ) &&
					dataPriv.get( target, "click" ) ||
					nodeName( target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

// Ensure the presence of an event listener that handles manually-triggered
// synthetic events by interrupting progress until reinvoked in response to
// *native* events that it fires directly, ensuring that state changes have
// already occurred before other listeners are invoked.
function leverageNative( el, type, expectSync ) {

	// Missing expectSync indicates a trigger call, which must force setup through jQuery.event.add
	if ( !expectSync ) {
		if ( dataPriv.get( el, type ) === undefined ) {
			jQuery.event.add( el, type, returnTrue );
		}
		return;
	}

	// Register the controller as a special universal handler for all event namespaces
	dataPriv.set( el, type, false );
	jQuery.event.add( el, type, {
		namespace: false,
		handler: function( event ) {
			var notAsync, result,
				saved = dataPriv.get( this, type );

			if ( ( event.isTrigger & 1 ) && this[ type ] ) {

				// Interrupt processing of the outer synthetic .trigger()ed event
				// Saved data should be false in such cases, but might be a leftover capture object
				// from an async native handler (gh-4350)
				if ( !saved.length ) {

					// Store arguments for use when handling the inner native event
					// There will always be at least one argument (an event object), so this array
					// will not be confused with a leftover capture object.
					saved = slice.call( arguments );
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					// Support: IE <=9 - 11+
					// focus() and blur() are asynchronous
					notAsync = expectSync( this, type );
					this[ type ]();
					result = dataPriv.get( this, type );
					if ( saved !== result || notAsync ) {
						dataPriv.set( this, type, false );
					} else {
						result = {};
					}
					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();
						return result.value;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering the
				// native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved.length ) {

				// ...and capture the result
				dataPriv.set( this, type, {
					value: jQuery.event.trigger(

						// Support: IE <=9 - 11+
						// Extend with the prototype to reset the above stopImmediatePropagation()
						jQuery.extend( saved[ 0 ], jQuery.Event.prototype ),
						saved.slice( 1 ),
						this
					)
				} );

				// Abort handling of the native event
				event.stopImmediatePropagation();
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {
	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, expectSync );

			// Return false to allow normal processing in the caller
			return false;
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		delegateType: delegateType
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								} );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	// Support: IE 9-11 only
	// Also use offsetWidth/offsetHeight for when box sizing is unreliable
	// We use getClientRects() to check for hidden/disconnected.
	// In those cases, the computed value can be trusted to be border-box
	if ( ( !support.boxSizingReliable() && isBorderBox ||
		val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"gridArea": true,
		"gridColumn": true,
		"gridColumnEnd": true,
		"gridColumnStart": true,
		"gridRow": true,
		"gridRowEnd": true,
		"gridRowStart": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
					jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url, options ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );

},{"process":"../node_modules/process/browser.js"}],"../node_modules/popper.js/dist/esm/popper.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**!
 * @fileOverview Kickass library to create and place poppers near their reference elements.
 * @version 1.16.0
 * @license
 * Copyright (c) 2016 Federico Zivolo and contributors
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
var isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';

var timeoutDuration = function () {
  var longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];

  for (var i = 0; i < longerTimeoutBrowsers.length; i += 1) {
    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {
      return 1;
    }
  }

  return 0;
}();

function microtaskDebounce(fn) {
  var called = false;
  return function () {
    if (called) {
      return;
    }

    called = true;
    window.Promise.resolve().then(function () {
      called = false;
      fn();
    });
  };
}

function taskDebounce(fn) {
  var scheduled = false;
  return function () {
    if (!scheduled) {
      scheduled = true;
      setTimeout(function () {
        scheduled = false;
        fn();
      }, timeoutDuration);
    }
  };
}

var supportsMicroTasks = isBrowser && window.Promise;
/**
* Create a debounced version of a method, that's asynchronously deferred
* but called in the minimum time possible.
*
* @method
* @memberof Popper.Utils
* @argument {Function} fn
* @returns {Function}
*/

var debounce = supportsMicroTasks ? microtaskDebounce : taskDebounce;
/**
 * Check if the given variable is a function
 * @method
 * @memberof Popper.Utils
 * @argument {Any} functionToCheck - variable to check
 * @returns {Boolean} answer to: is a function?
 */

function isFunction(functionToCheck) {
  var getType = {};
  return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
}
/**
 * Get CSS computed property of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Eement} element
 * @argument {String} property
 */


function getStyleComputedProperty(element, property) {
  if (element.nodeType !== 1) {
    return [];
  } // NOTE: 1 DOM access here


  var window = element.ownerDocument.defaultView;
  var css = window.getComputedStyle(element, null);
  return property ? css[property] : css;
}
/**
 * Returns the parentNode or the host of the element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} parent
 */


function getParentNode(element) {
  if (element.nodeName === 'HTML') {
    return element;
  }

  return element.parentNode || element.host;
}
/**
 * Returns the scrolling parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} scroll parent
 */


function getScrollParent(element) {
  // Return body, `getScroll` will take care to get the correct `scrollTop` from it
  if (!element) {
    return document.body;
  }

  switch (element.nodeName) {
    case 'HTML':
    case 'BODY':
      return element.ownerDocument.body;

    case '#document':
      return element.body;
  } // Firefox want us to check `-x` and `-y` variations as well


  var _getStyleComputedProp = getStyleComputedProperty(element),
      overflow = _getStyleComputedProp.overflow,
      overflowX = _getStyleComputedProp.overflowX,
      overflowY = _getStyleComputedProp.overflowY;

  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {
    return element;
  }

  return getScrollParent(getParentNode(element));
}
/**
 * Returns the reference node of the reference object, or the reference object itself.
 * @method
 * @memberof Popper.Utils
 * @param {Element|Object} reference - the reference element (the popper will be relative to this)
 * @returns {Element} parent
 */


function getReferenceNode(reference) {
  return reference && reference.referenceNode ? reference.referenceNode : reference;
}

var isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);
var isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);
/**
 * Determines if the browser is Internet Explorer
 * @method
 * @memberof Popper.Utils
 * @param {Number} version to check
 * @returns {Boolean} isIE
 */

function isIE(version) {
  if (version === 11) {
    return isIE11;
  }

  if (version === 10) {
    return isIE10;
  }

  return isIE11 || isIE10;
}
/**
 * Returns the offset parent of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} offset parent
 */


function getOffsetParent(element) {
  if (!element) {
    return document.documentElement;
  }

  var noOffsetParent = isIE(10) ? document.body : null; // NOTE: 1 DOM access here

  var offsetParent = element.offsetParent || null; // Skip hidden elements which don't have an offsetParent

  while (offsetParent === noOffsetParent && element.nextElementSibling) {
    offsetParent = (element = element.nextElementSibling).offsetParent;
  }

  var nodeName = offsetParent && offsetParent.nodeName;

  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {
    return element ? element.ownerDocument.documentElement : document.documentElement;
  } // .offsetParent will return the closest TH, TD or TABLE in case
  // no offsetParent is present, I hate this job...


  if (['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 && getStyleComputedProperty(offsetParent, 'position') === 'static') {
    return getOffsetParent(offsetParent);
  }

  return offsetParent;
}

function isOffsetContainer(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY') {
    return false;
  }

  return nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element;
}
/**
 * Finds the root node (document, shadowDOM root) of the given element
 * @method
 * @memberof Popper.Utils
 * @argument {Element} node
 * @returns {Element} root node
 */


function getRoot(node) {
  if (node.parentNode !== null) {
    return getRoot(node.parentNode);
  }

  return node;
}
/**
 * Finds the offset parent common to the two provided nodes
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element1
 * @argument {Element} element2
 * @returns {Element} common offset parent
 */


function findCommonOffsetParent(element1, element2) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {
    return document.documentElement;
  } // Here we make sure to give as "start" the element that comes first in the DOM


  var order = element1.compareDocumentPosition(element2) & Node.DOCUMENT_POSITION_FOLLOWING;
  var start = order ? element1 : element2;
  var end = order ? element2 : element1; // Get common ancestor container

  var range = document.createRange();
  range.setStart(start, 0);
  range.setEnd(end, 0);
  var commonAncestorContainer = range.commonAncestorContainer; // Both nodes are inside #document

  if (element1 !== commonAncestorContainer && element2 !== commonAncestorContainer || start.contains(end)) {
    if (isOffsetContainer(commonAncestorContainer)) {
      return commonAncestorContainer;
    }

    return getOffsetParent(commonAncestorContainer);
  } // one of the nodes is inside shadowDOM, find which one


  var element1root = getRoot(element1);

  if (element1root.host) {
    return findCommonOffsetParent(element1root.host, element2);
  } else {
    return findCommonOffsetParent(element1, getRoot(element2).host);
  }
}
/**
 * Gets the scroll value of the given element in the given side (top and left)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {String} side `top` or `left`
 * @returns {number} amount of scrolled pixels
 */


function getScroll(element) {
  var side = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'top';
  var upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    var html = element.ownerDocument.documentElement;
    var scrollingElement = element.ownerDocument.scrollingElement || html;
    return scrollingElement[upperSide];
  }

  return element[upperSide];
}
/*
 * Sum or subtract the element scroll values (left and top) from a given rect object
 * @method
 * @memberof Popper.Utils
 * @param {Object} rect - Rect object you want to change
 * @param {HTMLElement} element - The element from the function reads the scroll values
 * @param {Boolean} subtract - set to true if you want to subtract the scroll values
 * @return {Object} rect - The modifier rect object
 */


function includeScroll(rect, element) {
  var subtract = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var scrollTop = getScroll(element, 'top');
  var scrollLeft = getScroll(element, 'left');
  var modifier = subtract ? -1 : 1;
  rect.top += scrollTop * modifier;
  rect.bottom += scrollTop * modifier;
  rect.left += scrollLeft * modifier;
  rect.right += scrollLeft * modifier;
  return rect;
}
/*
 * Helper to detect borders of a given element
 * @method
 * @memberof Popper.Utils
 * @param {CSSStyleDeclaration} styles
 * Result of `getStyleComputedProperty` on the given element
 * @param {String} axis - `x` or `y`
 * @return {number} borders - The borders size of the given axis
 */


function getBordersSize(styles, axis) {
  var sideA = axis === 'x' ? 'Left' : 'Top';
  var sideB = sideA === 'Left' ? 'Right' : 'Bottom';
  return parseFloat(styles['border' + sideA + 'Width'], 10) + parseFloat(styles['border' + sideB + 'Width'], 10);
}

function getSize(axis, body, html, computedStyle) {
  return Math.max(body['offset' + axis], body['scroll' + axis], html['client' + axis], html['offset' + axis], html['scroll' + axis], isIE(10) ? parseInt(html['offset' + axis]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Top' : 'Left')]) + parseInt(computedStyle['margin' + (axis === 'Height' ? 'Bottom' : 'Right')]) : 0);
}

function getWindowSizes(document) {
  var body = document.body;
  var html = document.documentElement;
  var computedStyle = isIE(10) && getComputedStyle(html);
  return {
    height: getSize('Height', body, html, computedStyle),
    width: getSize('Width', body, html, computedStyle)
  };
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};
/**
 * Given element offsets, generate an output similar to getBoundingClientRect
 * @method
 * @memberof Popper.Utils
 * @argument {Object} offsets
 * @returns {Object} ClientRect like output
 */


function getClientRect(offsets) {
  return _extends({}, offsets, {
    right: offsets.left + offsets.width,
    bottom: offsets.top + offsets.height
  });
}
/**
 * Get bounding client rect of given element
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} element
 * @return {Object} client rect
 */


function getBoundingClientRect(element) {
  var rect = {}; // IE10 10 FIX: Please, don't ask, the element isn't
  // considered in DOM in some circumstances...
  // This isn't reproducible in IE10 compatibility mode of IE11

  try {
    if (isIE(10)) {
      rect = element.getBoundingClientRect();
      var scrollTop = getScroll(element, 'top');
      var scrollLeft = getScroll(element, 'left');
      rect.top += scrollTop;
      rect.left += scrollLeft;
      rect.bottom += scrollTop;
      rect.right += scrollLeft;
    } else {
      rect = element.getBoundingClientRect();
    }
  } catch (e) {}

  var result = {
    left: rect.left,
    top: rect.top,
    width: rect.right - rect.left,
    height: rect.bottom - rect.top
  }; // subtract scrollbar size from sizes

  var sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};
  var width = sizes.width || element.clientWidth || result.width;
  var height = sizes.height || element.clientHeight || result.height;
  var horizScrollbar = element.offsetWidth - width;
  var vertScrollbar = element.offsetHeight - height; // if an hypothetical scrollbar is detected, we must be sure it's not a `border`
  // we make this check conditional for performance reasons

  if (horizScrollbar || vertScrollbar) {
    var styles = getStyleComputedProperty(element);
    horizScrollbar -= getBordersSize(styles, 'x');
    vertScrollbar -= getBordersSize(styles, 'y');
    result.width -= horizScrollbar;
    result.height -= vertScrollbar;
  }

  return getClientRect(result);
}

function getOffsetRectRelativeToArbitraryNode(children, parent) {
  var fixedPosition = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var isIE10 = isIE(10);
  var isHTML = parent.nodeName === 'HTML';
  var childrenRect = getBoundingClientRect(children);
  var parentRect = getBoundingClientRect(parent);
  var scrollParent = getScrollParent(children);
  var styles = getStyleComputedProperty(parent);
  var borderTopWidth = parseFloat(styles.borderTopWidth, 10);
  var borderLeftWidth = parseFloat(styles.borderLeftWidth, 10); // In cases where the parent is fixed, we must ignore negative scroll in offset calc

  if (fixedPosition && isHTML) {
    parentRect.top = Math.max(parentRect.top, 0);
    parentRect.left = Math.max(parentRect.left, 0);
  }

  var offsets = getClientRect({
    top: childrenRect.top - parentRect.top - borderTopWidth,
    left: childrenRect.left - parentRect.left - borderLeftWidth,
    width: childrenRect.width,
    height: childrenRect.height
  });
  offsets.marginTop = 0;
  offsets.marginLeft = 0; // Subtract margins of documentElement in case it's being used as parent
  // we do this only on HTML because it's the only element that behaves
  // differently when margins are applied to it. The margins are included in
  // the box of the documentElement, in the other cases not.

  if (!isIE10 && isHTML) {
    var marginTop = parseFloat(styles.marginTop, 10);
    var marginLeft = parseFloat(styles.marginLeft, 10);
    offsets.top -= borderTopWidth - marginTop;
    offsets.bottom -= borderTopWidth - marginTop;
    offsets.left -= borderLeftWidth - marginLeft;
    offsets.right -= borderLeftWidth - marginLeft; // Attach marginTop and marginLeft because in some circumstances we may need them

    offsets.marginTop = marginTop;
    offsets.marginLeft = marginLeft;
  }

  if (isIE10 && !fixedPosition ? parent.contains(scrollParent) : parent === scrollParent && scrollParent.nodeName !== 'BODY') {
    offsets = includeScroll(offsets, parent);
  }

  return offsets;
}

function getViewportOffsetRectRelativeToArtbitraryNode(element) {
  var excludeScroll = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var html = element.ownerDocument.documentElement;
  var relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);
  var width = Math.max(html.clientWidth, window.innerWidth || 0);
  var height = Math.max(html.clientHeight, window.innerHeight || 0);
  var scrollTop = !excludeScroll ? getScroll(html) : 0;
  var scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;
  var offset = {
    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,
    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,
    width: width,
    height: height
  };
  return getClientRect(offset);
}
/**
 * Check if the given element is fixed or is inside a fixed parent
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @argument {Element} customContainer
 * @returns {Boolean} answer to "isFixed?"
 */


function isFixed(element) {
  var nodeName = element.nodeName;

  if (nodeName === 'BODY' || nodeName === 'HTML') {
    return false;
  }

  if (getStyleComputedProperty(element, 'position') === 'fixed') {
    return true;
  }

  var parentNode = getParentNode(element);

  if (!parentNode) {
    return false;
  }

  return isFixed(parentNode);
}
/**
 * Finds the first parent of an element that has a transformed property defined
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Element} first transformed parent or documentElement
 */


function getFixedPositionOffsetParent(element) {
  // This check is needed to avoid errors in case one of the elements isn't defined for any reason
  if (!element || !element.parentElement || isIE()) {
    return document.documentElement;
  }

  var el = element.parentElement;

  while (el && getStyleComputedProperty(el, 'transform') === 'none') {
    el = el.parentElement;
  }

  return el || document.documentElement;
}
/**
 * Computed the boundaries limits and return them
 * @method
 * @memberof Popper.Utils
 * @param {HTMLElement} popper
 * @param {HTMLElement} reference
 * @param {number} padding
 * @param {HTMLElement} boundariesElement - Element used to define the boundaries
 * @param {Boolean} fixedPosition - Is in fixed position mode
 * @returns {Object} Coordinates of the boundaries
 */


function getBoundaries(popper, reference, padding, boundariesElement) {
  var fixedPosition = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false; // NOTE: 1 DOM access here

  var boundaries = {
    top: 0,
    left: 0
  };
  var offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference)); // Handle viewport case

  if (boundariesElement === 'viewport') {
    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);
  } else {
    // Handle other cases based on DOM element used as boundaries
    var boundariesNode = void 0;

    if (boundariesElement === 'scrollParent') {
      boundariesNode = getScrollParent(getParentNode(reference));

      if (boundariesNode.nodeName === 'BODY') {
        boundariesNode = popper.ownerDocument.documentElement;
      }
    } else if (boundariesElement === 'window') {
      boundariesNode = popper.ownerDocument.documentElement;
    } else {
      boundariesNode = boundariesElement;
    }

    var offsets = getOffsetRectRelativeToArbitraryNode(boundariesNode, offsetParent, fixedPosition); // In case of HTML, we need a different computation

    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {
      var _getWindowSizes = getWindowSizes(popper.ownerDocument),
          height = _getWindowSizes.height,
          width = _getWindowSizes.width;

      boundaries.top += offsets.top - offsets.marginTop;
      boundaries.bottom = height + offsets.top;
      boundaries.left += offsets.left - offsets.marginLeft;
      boundaries.right = width + offsets.left;
    } else {
      // for all the other DOM elements, this one is good
      boundaries = offsets;
    }
  } // Add paddings


  padding = padding || 0;
  var isPaddingNumber = typeof padding === 'number';
  boundaries.left += isPaddingNumber ? padding : padding.left || 0;
  boundaries.top += isPaddingNumber ? padding : padding.top || 0;
  boundaries.right -= isPaddingNumber ? padding : padding.right || 0;
  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0;
  return boundaries;
}

function getArea(_ref) {
  var width = _ref.width,
      height = _ref.height;
  return width * height;
}
/**
 * Utility used to transform the `auto` placement to the placement with more
 * available space.
 * @method
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */


function computeAutoPlacement(placement, refRect, popper, reference, boundariesElement) {
  var padding = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

  if (placement.indexOf('auto') === -1) {
    return placement;
  }

  var boundaries = getBoundaries(popper, reference, padding, boundariesElement);
  var rects = {
    top: {
      width: boundaries.width,
      height: refRect.top - boundaries.top
    },
    right: {
      width: boundaries.right - refRect.right,
      height: boundaries.height
    },
    bottom: {
      width: boundaries.width,
      height: boundaries.bottom - refRect.bottom
    },
    left: {
      width: refRect.left - boundaries.left,
      height: boundaries.height
    }
  };
  var sortedAreas = Object.keys(rects).map(function (key) {
    return _extends({
      key: key
    }, rects[key], {
      area: getArea(rects[key])
    });
  }).sort(function (a, b) {
    return b.area - a.area;
  });
  var filteredAreas = sortedAreas.filter(function (_ref2) {
    var width = _ref2.width,
        height = _ref2.height;
    return width >= popper.clientWidth && height >= popper.clientHeight;
  });
  var computedPlacement = filteredAreas.length > 0 ? filteredAreas[0].key : sortedAreas[0].key;
  var variation = placement.split('-')[1];
  return computedPlacement + (variation ? '-' + variation : '');
}
/**
 * Get offsets to the reference element
 * @method
 * @memberof Popper.Utils
 * @param {Object} state
 * @param {Element} popper - the popper element
 * @param {Element} reference - the reference element (the popper will be relative to this)
 * @param {Element} fixedPosition - is in fixed position mode
 * @returns {Object} An object containing the offsets which will be applied to the popper
 */


function getReferenceOffsets(state, popper, reference) {
  var fixedPosition = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  var commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));
  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);
}
/**
 * Get the outer sizes of the given element (offset size + margins)
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element
 * @returns {Object} object containing width and height properties
 */


function getOuterSizes(element) {
  var window = element.ownerDocument.defaultView;
  var styles = window.getComputedStyle(element);
  var x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);
  var y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);
  var result = {
    width: element.offsetWidth + y,
    height: element.offsetHeight + x
  };
  return result;
}
/**
 * Get the opposite placement of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement
 * @returns {String} flipped placement
 */


function getOppositePlacement(placement) {
  var hash = {
    left: 'right',
    right: 'left',
    bottom: 'top',
    top: 'bottom'
  };
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash[matched];
  });
}
/**
 * Get offsets to the popper
 * @method
 * @memberof Popper.Utils
 * @param {Object} position - CSS position the Popper will get applied
 * @param {HTMLElement} popper - the popper element
 * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)
 * @param {String} placement - one of the valid placement options
 * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper
 */


function getPopperOffsets(popper, referenceOffsets, placement) {
  placement = placement.split('-')[0]; // Get popper node sizes

  var popperRect = getOuterSizes(popper); // Add position, width and height to our offsets object

  var popperOffsets = {
    width: popperRect.width,
    height: popperRect.height
  }; // depending by the popper placement we have to compute its offsets slightly differently

  var isHoriz = ['right', 'left'].indexOf(placement) !== -1;
  var mainSide = isHoriz ? 'top' : 'left';
  var secondarySide = isHoriz ? 'left' : 'top';
  var measurement = isHoriz ? 'height' : 'width';
  var secondaryMeasurement = !isHoriz ? 'height' : 'width';
  popperOffsets[mainSide] = referenceOffsets[mainSide] + referenceOffsets[measurement] / 2 - popperRect[measurement] / 2;

  if (placement === secondarySide) {
    popperOffsets[secondarySide] = referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];
  } else {
    popperOffsets[secondarySide] = referenceOffsets[getOppositePlacement(secondarySide)];
  }

  return popperOffsets;
}
/**
 * Mimics the `find` method of Array
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */


function find(arr, check) {
  // use native find if supported
  if (Array.prototype.find) {
    return arr.find(check);
  } // use `filter` to obtain the same behavior of `find`


  return arr.filter(check)[0];
}
/**
 * Return the index of the matching object
 * @method
 * @memberof Popper.Utils
 * @argument {Array} arr
 * @argument prop
 * @argument value
 * @returns index or -1
 */


function findIndex(arr, prop, value) {
  // use native findIndex if supported
  if (Array.prototype.findIndex) {
    return arr.findIndex(function (cur) {
      return cur[prop] === value;
    });
  } // use `find` + `indexOf` if `findIndex` isn't supported


  var match = find(arr, function (obj) {
    return obj[prop] === value;
  });
  return arr.indexOf(match);
}
/**
 * Loop trough the list of modifiers and run them in order,
 * each of them will then edit the data object.
 * @method
 * @memberof Popper.Utils
 * @param {dataObject} data
 * @param {Array} modifiers
 * @param {String} ends - Optional modifier name used as stopper
 * @returns {dataObject}
 */


function runModifiers(modifiers, data, ends) {
  var modifiersToRun = ends === undefined ? modifiers : modifiers.slice(0, findIndex(modifiers, 'name', ends));
  modifiersToRun.forEach(function (modifier) {
    if (modifier['function']) {
      // eslint-disable-line dot-notation
      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');
    }

    var fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation

    if (modifier.enabled && isFunction(fn)) {
      // Add properties to offsets to make them a complete clientRect object
      // we do this before each modifier to make sure the previous one doesn't
      // mess with these values
      data.offsets.popper = getClientRect(data.offsets.popper);
      data.offsets.reference = getClientRect(data.offsets.reference);
      data = fn(data, modifier);
    }
  });
  return data;
}
/**
 * Updates the position of the popper, computing the new offsets and applying
 * the new style.<br />
 * Prefer `scheduleUpdate` over `update` because of performance reasons.
 * @method
 * @memberof Popper
 */


function update() {
  // if popper is destroyed, don't perform any further update
  if (this.state.isDestroyed) {
    return;
  }

  var data = {
    instance: this,
    styles: {},
    arrowStyles: {},
    attributes: {},
    flipped: false,
    offsets: {}
  }; // compute reference element offsets

  data.offsets.reference = getReferenceOffsets(this.state, this.popper, this.reference, this.options.positionFixed); // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value

  data.placement = computeAutoPlacement(this.options.placement, data.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding); // store the computed placement inside `originalPlacement`

  data.originalPlacement = data.placement;
  data.positionFixed = this.options.positionFixed; // compute the popper offsets

  data.offsets.popper = getPopperOffsets(this.popper, data.offsets.reference, data.placement);
  data.offsets.popper.position = this.options.positionFixed ? 'fixed' : 'absolute'; // run the modifiers

  data = runModifiers(this.modifiers, data); // the first `update` will call `onCreate` callback
  // the other ones will call `onUpdate` callback

  if (!this.state.isCreated) {
    this.state.isCreated = true;
    this.options.onCreate(data);
  } else {
    this.options.onUpdate(data);
  }
}
/**
 * Helper used to know if the given modifier is enabled.
 * @method
 * @memberof Popper.Utils
 * @returns {Boolean}
 */


function isModifierEnabled(modifiers, modifierName) {
  return modifiers.some(function (_ref) {
    var name = _ref.name,
        enabled = _ref.enabled;
    return enabled && name === modifierName;
  });
}
/**
 * Get the prefixed supported property name
 * @method
 * @memberof Popper.Utils
 * @argument {String} property (camelCase)
 * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)
 */


function getSupportedPropertyName(property) {
  var prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];
  var upperProp = property.charAt(0).toUpperCase() + property.slice(1);

  for (var i = 0; i < prefixes.length; i++) {
    var prefix = prefixes[i];
    var toCheck = prefix ? '' + prefix + upperProp : property;

    if (typeof document.body.style[toCheck] !== 'undefined') {
      return toCheck;
    }
  }

  return null;
}
/**
 * Destroys the popper.
 * @method
 * @memberof Popper
 */


function destroy() {
  this.state.isDestroyed = true; // touch DOM only if `applyStyle` modifier is enabled

  if (isModifierEnabled(this.modifiers, 'applyStyle')) {
    this.popper.removeAttribute('x-placement');
    this.popper.style.position = '';
    this.popper.style.top = '';
    this.popper.style.left = '';
    this.popper.style.right = '';
    this.popper.style.bottom = '';
    this.popper.style.willChange = '';
    this.popper.style[getSupportedPropertyName('transform')] = '';
  }

  this.disableEventListeners(); // remove the popper if user explicitly asked for the deletion on destroy
  // do not use `remove` because IE11 doesn't support it

  if (this.options.removeOnDestroy) {
    this.popper.parentNode.removeChild(this.popper);
  }

  return this;
}
/**
 * Get the window associated with the element
 * @argument {Element} element
 * @returns {Window}
 */


function getWindow(element) {
  var ownerDocument = element.ownerDocument;
  return ownerDocument ? ownerDocument.defaultView : window;
}

function attachToScrollParents(scrollParent, event, callback, scrollParents) {
  var isBody = scrollParent.nodeName === 'BODY';
  var target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;
  target.addEventListener(event, callback, {
    passive: true
  });

  if (!isBody) {
    attachToScrollParents(getScrollParent(target.parentNode), event, callback, scrollParents);
  }

  scrollParents.push(target);
}
/**
 * Setup needed event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */


function setupEventListeners(reference, options, state, updateBound) {
  // Resize event listener on window
  state.updateBound = updateBound;
  getWindow(reference).addEventListener('resize', state.updateBound, {
    passive: true
  }); // Scroll event listener on scroll parents

  var scrollElement = getScrollParent(reference);
  attachToScrollParents(scrollElement, 'scroll', state.updateBound, state.scrollParents);
  state.scrollElement = scrollElement;
  state.eventsEnabled = true;
  return state;
}
/**
 * It will add resize/scroll events and start recalculating
 * position of the popper element when they are triggered.
 * @method
 * @memberof Popper
 */


function enableEventListeners() {
  if (!this.state.eventsEnabled) {
    this.state = setupEventListeners(this.reference, this.options, this.state, this.scheduleUpdate);
  }
}
/**
 * Remove event listeners used to update the popper position
 * @method
 * @memberof Popper.Utils
 * @private
 */


function removeEventListeners(reference, state) {
  // Remove resize event listener on window
  getWindow(reference).removeEventListener('resize', state.updateBound); // Remove scroll event listener on scroll parents

  state.scrollParents.forEach(function (target) {
    target.removeEventListener('scroll', state.updateBound);
  }); // Reset state

  state.updateBound = null;
  state.scrollParents = [];
  state.scrollElement = null;
  state.eventsEnabled = false;
  return state;
}
/**
 * It will remove resize/scroll events and won't recalculate popper position
 * when they are triggered. It also won't trigger `onUpdate` callback anymore,
 * unless you call `update` method manually.
 * @method
 * @memberof Popper
 */


function disableEventListeners() {
  if (this.state.eventsEnabled) {
    cancelAnimationFrame(this.scheduleUpdate);
    this.state = removeEventListeners(this.reference, this.state);
  }
}
/**
 * Tells if a given input is a number
 * @method
 * @memberof Popper.Utils
 * @param {*} input to check
 * @return {Boolean}
 */


function isNumeric(n) {
  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);
}
/**
 * Set the style to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the style to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */


function setStyles(element, styles) {
  Object.keys(styles).forEach(function (prop) {
    var unit = ''; // add unit if the value is numeric and is one of the following

    if (['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !== -1 && isNumeric(styles[prop])) {
      unit = 'px';
    }

    element.style[prop] = styles[prop] + unit;
  });
}
/**
 * Set the attributes to the given popper
 * @method
 * @memberof Popper.Utils
 * @argument {Element} element - Element to apply the attributes to
 * @argument {Object} styles
 * Object with a list of properties and values which will be applied to the element
 */


function setAttributes(element, attributes) {
  Object.keys(attributes).forEach(function (prop) {
    var value = attributes[prop];

    if (value !== false) {
      element.setAttribute(prop, attributes[prop]);
    } else {
      element.removeAttribute(prop);
    }
  });
}
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} data.styles - List of style properties - values to apply to popper element
 * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The same data object
 */


function applyStyle(data) {
  // any property present in `data.styles` will be applied to the popper,
  // in this way we can make the 3rd party modifiers add custom styles to it
  // Be aware, modifiers could override the properties defined in the previous
  // lines of this modifier!
  setStyles(data.instance.popper, data.styles); // any property present in `data.attributes` will be applied to the popper,
  // they will be set as HTML attributes of the element

  setAttributes(data.instance.popper, data.attributes); // if arrowElement is defined and arrowStyles has some properties

  if (data.arrowElement && Object.keys(data.arrowStyles).length) {
    setStyles(data.arrowElement, data.arrowStyles);
  }

  return data;
}
/**
 * Set the x-placement attribute before everything else because it could be used
 * to add margins to the popper margins needs to be calculated to get the
 * correct popper offsets.
 * @method
 * @memberof Popper.modifiers
 * @param {HTMLElement} reference - The reference element used to position the popper
 * @param {HTMLElement} popper - The HTML element used as popper
 * @param {Object} options - Popper.js options
 */


function applyStyleOnLoad(reference, popper, options, modifierOptions, state) {
  // compute reference element offsets
  var referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed); // compute auto placement, store placement inside the data object,
  // modifiers will be able to edit `placement` if needed
  // and refer to originalPlacement to know the original value

  var placement = computeAutoPlacement(options.placement, referenceOffsets, popper, reference, options.modifiers.flip.boundariesElement, options.modifiers.flip.padding);
  popper.setAttribute('x-placement', placement); // Apply `position` to popper before anything else because
  // without the position applied we can't guarantee correct computations

  setStyles(popper, {
    position: options.positionFixed ? 'fixed' : 'absolute'
  });
  return options;
}
/**
 * @function
 * @memberof Popper.Utils
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Boolean} shouldRound - If the offsets should be rounded at all
 * @returns {Object} The popper's position offsets rounded
 *
 * The tale of pixel-perfect positioning. It's still not 100% perfect, but as
 * good as it can be within reason.
 * Discussion here: https://github.com/FezVrasta/popper.js/pull/715
 *
 * Low DPI screens cause a popper to be blurry if not using full pixels (Safari
 * as well on High DPI screens).
 *
 * Firefox prefers no rounding for positioning and does not have blurriness on
 * high DPI screens.
 *
 * Only horizontal placement and left/right values need to be considered.
 */


function getRoundedOffsets(data, shouldRound) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var round = Math.round,
      floor = Math.floor;

  var noRound = function noRound(v) {
    return v;
  };

  var referenceWidth = round(reference.width);
  var popperWidth = round(popper.width);
  var isVertical = ['left', 'right'].indexOf(data.placement) !== -1;
  var isVariation = data.placement.indexOf('-') !== -1;
  var sameWidthParity = referenceWidth % 2 === popperWidth % 2;
  var bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;
  var horizontalToInteger = !shouldRound ? noRound : isVertical || isVariation || sameWidthParity ? round : floor;
  var verticalToInteger = !shouldRound ? noRound : round;
  return {
    left: horizontalToInteger(bothOddWidth && !isVariation && shouldRound ? popper.left - 1 : popper.left),
    top: verticalToInteger(popper.top),
    bottom: verticalToInteger(popper.bottom),
    right: horizontalToInteger(popper.right)
  };
}

var isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

function computeStyle(data, options) {
  var x = options.x,
      y = options.y;
  var popper = data.offsets.popper; // Remove this legacy support in Popper.js v2

  var legacyGpuAccelerationOption = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'applyStyle';
  }).gpuAcceleration;

  if (legacyGpuAccelerationOption !== undefined) {
    console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');
  }

  var gpuAcceleration = legacyGpuAccelerationOption !== undefined ? legacyGpuAccelerationOption : options.gpuAcceleration;
  var offsetParent = getOffsetParent(data.instance.popper);
  var offsetParentRect = getBoundingClientRect(offsetParent); // Styles

  var styles = {
    position: popper.position
  };
  var offsets = getRoundedOffsets(data, window.devicePixelRatio < 2 || !isFirefox);
  var sideA = x === 'bottom' ? 'top' : 'bottom';
  var sideB = y === 'right' ? 'left' : 'right'; // if gpuAcceleration is set to `true` and transform is supported,
  //  we use `translate3d` to apply the position to the popper we
  // automatically use the supported prefixed version if needed

  var prefixedProperty = getSupportedPropertyName('transform'); // now, let's make a step back and look at this code closely (wtf?)
  // If the content of the popper grows once it's been positioned, it
  // may happen that the popper gets misplaced because of the new content
  // overflowing its reference element
  // To avoid this problem, we provide two options (x and y), which allow
  // the consumer to define the offset origin.
  // If we position a popper on top of a reference element, we can set
  // `x` to `top` to make the popper grow towards its top instead of
  // its bottom.

  var left = void 0,
      top = void 0;

  if (sideA === 'bottom') {
    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)
    // and not the bottom of the html element
    if (offsetParent.nodeName === 'HTML') {
      top = -offsetParent.clientHeight + offsets.bottom;
    } else {
      top = -offsetParentRect.height + offsets.bottom;
    }
  } else {
    top = offsets.top;
  }

  if (sideB === 'right') {
    if (offsetParent.nodeName === 'HTML') {
      left = -offsetParent.clientWidth + offsets.right;
    } else {
      left = -offsetParentRect.width + offsets.right;
    }
  } else {
    left = offsets.left;
  }

  if (gpuAcceleration && prefixedProperty) {
    styles[prefixedProperty] = 'translate3d(' + left + 'px, ' + top + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';
  } else {
    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties
    var invertTop = sideA === 'bottom' ? -1 : 1;
    var invertLeft = sideB === 'right' ? -1 : 1;
    styles[sideA] = top * invertTop;
    styles[sideB] = left * invertLeft;
    styles.willChange = sideA + ', ' + sideB;
  } // Attributes


  var attributes = {
    'x-placement': data.placement
  }; // Update `data` attributes, styles and arrowStyles

  data.attributes = _extends({}, attributes, data.attributes);
  data.styles = _extends({}, styles, data.styles);
  data.arrowStyles = _extends({}, data.offsets.arrow, data.arrowStyles);
  return data;
}
/**
 * Helper used to know if the given modifier depends from another one.<br />
 * It checks if the needed modifier is listed and enabled.
 * @method
 * @memberof Popper.Utils
 * @param {Array} modifiers - list of modifiers
 * @param {String} requestingName - name of requesting modifier
 * @param {String} requestedName - name of requested modifier
 * @returns {Boolean}
 */


function isModifierRequired(modifiers, requestingName, requestedName) {
  var requesting = find(modifiers, function (_ref) {
    var name = _ref.name;
    return name === requestingName;
  });
  var isRequired = !!requesting && modifiers.some(function (modifier) {
    return modifier.name === requestedName && modifier.enabled && modifier.order < requesting.order;
  });

  if (!isRequired) {
    var _requesting = '`' + requestingName + '`';

    var requested = '`' + requestedName + '`';
    console.warn(requested + ' modifier is required by ' + _requesting + ' modifier in order to work, be sure to include it before ' + _requesting + '!');
  }

  return isRequired;
}
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */


function arrow(data, options) {
  var _data$offsets$arrow; // arrow depends on keepTogether in order to work


  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {
    return data;
  }

  var arrowElement = options.element; // if arrowElement is a string, suppose it's a CSS selector

  if (typeof arrowElement === 'string') {
    arrowElement = data.instance.popper.querySelector(arrowElement); // if arrowElement is not found, don't run the modifier

    if (!arrowElement) {
      return data;
    }
  } else {
    // if the arrowElement isn't a query selector we must check that the
    // provided DOM node is child of its popper node
    if (!data.instance.popper.contains(arrowElement)) {
      console.warn('WARNING: `arrow.element` must be child of its popper element!');
      return data;
    }
  }

  var placement = data.placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var isVertical = ['left', 'right'].indexOf(placement) !== -1;
  var len = isVertical ? 'height' : 'width';
  var sideCapitalized = isVertical ? 'Top' : 'Left';
  var side = sideCapitalized.toLowerCase();
  var altSide = isVertical ? 'left' : 'top';
  var opSide = isVertical ? 'bottom' : 'right';
  var arrowElementSize = getOuterSizes(arrowElement)[len]; //
  // extends keepTogether behavior making sure the popper and its
  // reference have enough pixels in conjunction
  //
  // top/left side

  if (reference[opSide] - arrowElementSize < popper[side]) {
    data.offsets.popper[side] -= popper[side] - (reference[opSide] - arrowElementSize);
  } // bottom/right side


  if (reference[side] + arrowElementSize > popper[opSide]) {
    data.offsets.popper[side] += reference[side] + arrowElementSize - popper[opSide];
  }

  data.offsets.popper = getClientRect(data.offsets.popper); // compute center of the popper

  var center = reference[side] + reference[len] / 2 - arrowElementSize / 2; // Compute the sideValue using the updated popper offsets
  // take popper margin in account because we don't have this info available

  var css = getStyleComputedProperty(data.instance.popper);
  var popperMarginSide = parseFloat(css['margin' + sideCapitalized], 10);
  var popperBorderSide = parseFloat(css['border' + sideCapitalized + 'Width'], 10);
  var sideValue = center - data.offsets.popper[side] - popperMarginSide - popperBorderSide; // prevent arrowElement from being placed not contiguously to its popper

  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);
  data.arrowElement = arrowElement;
  data.offsets.arrow = (_data$offsets$arrow = {}, defineProperty(_data$offsets$arrow, side, Math.round(sideValue)), defineProperty(_data$offsets$arrow, altSide, ''), _data$offsets$arrow);
  return data;
}
/**
 * Get the opposite placement variation of the given one
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement variation
 * @returns {String} flipped placement variation
 */


function getOppositeVariation(variation) {
  if (variation === 'end') {
    return 'start';
  } else if (variation === 'start') {
    return 'end';
  }

  return variation;
}
/**
 * List of accepted placements to use as values of the `placement` option.<br />
 * Valid placements are:
 * - `auto`
 * - `top`
 * - `right`
 * - `bottom`
 * - `left`
 *
 * Each placement can have a variation from this list:
 * - `-start`
 * - `-end`
 *
 * Variations are interpreted easily if you think of them as the left to right
 * written languages. Horizontally (`top` and `bottom`), `start` is left and `end`
 * is right.<br />
 * Vertically (`left` and `right`), `start` is top and `end` is bottom.
 *
 * Some valid examples are:
 * - `top-end` (on top of reference, right aligned)
 * - `right-start` (on right of reference, top aligned)
 * - `bottom` (on bottom, centered)
 * - `auto-end` (on the side with more space available, alignment depends by placement)
 *
 * @static
 * @type {Array}
 * @enum {String}
 * @readonly
 * @method placements
 * @memberof Popper
 */


var placements = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start']; // Get rid of `auto` `auto-start` and `auto-end`

var validPlacements = placements.slice(3);
/**
 * Given an initial placement, returns all the subsequent placements
 * clockwise (or counter-clockwise).
 *
 * @method
 * @memberof Popper.Utils
 * @argument {String} placement - A valid placement (it accepts variations)
 * @argument {Boolean} counter - Set to true to walk the placements counterclockwise
 * @returns {Array} placements including their variations
 */

function clockwise(placement) {
  var counter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var index = validPlacements.indexOf(placement);
  var arr = validPlacements.slice(index + 1).concat(validPlacements.slice(0, index));
  return counter ? arr.reverse() : arr;
}

var BEHAVIORS = {
  FLIP: 'flip',
  CLOCKWISE: 'clockwise',
  COUNTERCLOCKWISE: 'counterclockwise'
};
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */

function flip(data, options) {
  // if `inner` modifier is enabled, we can't use the `flip` modifier
  if (isModifierEnabled(data.instance.modifiers, 'inner')) {
    return data;
  }

  if (data.flipped && data.placement === data.originalPlacement) {
    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides
    return data;
  }

  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, options.boundariesElement, data.positionFixed);
  var placement = data.placement.split('-')[0];
  var placementOpposite = getOppositePlacement(placement);
  var variation = data.placement.split('-')[1] || '';
  var flipOrder = [];

  switch (options.behavior) {
    case BEHAVIORS.FLIP:
      flipOrder = [placement, placementOpposite];
      break;

    case BEHAVIORS.CLOCKWISE:
      flipOrder = clockwise(placement);
      break;

    case BEHAVIORS.COUNTERCLOCKWISE:
      flipOrder = clockwise(placement, true);
      break;

    default:
      flipOrder = options.behavior;
  }

  flipOrder.forEach(function (step, index) {
    if (placement !== step || flipOrder.length === index + 1) {
      return data;
    }

    placement = data.placement.split('-')[0];
    placementOpposite = getOppositePlacement(placement);
    var popperOffsets = data.offsets.popper;
    var refOffsets = data.offsets.reference; // using floor because the reference offsets may contain decimals we are not going to consider here

    var floor = Math.floor;
    var overlapsRef = placement === 'left' && floor(popperOffsets.right) > floor(refOffsets.left) || placement === 'right' && floor(popperOffsets.left) < floor(refOffsets.right) || placement === 'top' && floor(popperOffsets.bottom) > floor(refOffsets.top) || placement === 'bottom' && floor(popperOffsets.top) < floor(refOffsets.bottom);
    var overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);
    var overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);
    var overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);
    var overflowsBottom = floor(popperOffsets.bottom) > floor(boundaries.bottom);
    var overflowsBoundaries = placement === 'left' && overflowsLeft || placement === 'right' && overflowsRight || placement === 'top' && overflowsTop || placement === 'bottom' && overflowsBottom; // flip the variation if required

    var isVertical = ['top', 'bottom'].indexOf(placement) !== -1; // flips variation if reference element overflows boundaries

    var flippedVariationByRef = !!options.flipVariations && (isVertical && variation === 'start' && overflowsLeft || isVertical && variation === 'end' && overflowsRight || !isVertical && variation === 'start' && overflowsTop || !isVertical && variation === 'end' && overflowsBottom); // flips variation if popper content overflows boundaries

    var flippedVariationByContent = !!options.flipVariationsByContent && (isVertical && variation === 'start' && overflowsRight || isVertical && variation === 'end' && overflowsLeft || !isVertical && variation === 'start' && overflowsBottom || !isVertical && variation === 'end' && overflowsTop);
    var flippedVariation = flippedVariationByRef || flippedVariationByContent;

    if (overlapsRef || overflowsBoundaries || flippedVariation) {
      // this boolean to detect any flip loop
      data.flipped = true;

      if (overlapsRef || overflowsBoundaries) {
        placement = flipOrder[index + 1];
      }

      if (flippedVariation) {
        variation = getOppositeVariation(variation);
      }

      data.placement = placement + (variation ? '-' + variation : ''); // this object contains `position`, we want to preserve it along with
      // any additional property we may add in the future

      data.offsets.popper = _extends({}, data.offsets.popper, getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement));
      data = runModifiers(data.instance.modifiers, data, 'flip');
    }
  });
  return data;
}
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */


function keepTogether(data) {
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var placement = data.placement.split('-')[0];
  var floor = Math.floor;
  var isVertical = ['top', 'bottom'].indexOf(placement) !== -1;
  var side = isVertical ? 'right' : 'bottom';
  var opSide = isVertical ? 'left' : 'top';
  var measurement = isVertical ? 'width' : 'height';

  if (popper[side] < floor(reference[opSide])) {
    data.offsets.popper[opSide] = floor(reference[opSide]) - popper[measurement];
  }

  if (popper[opSide] > floor(reference[side])) {
    data.offsets.popper[opSide] = floor(reference[side]);
  }

  return data;
}
/**
 * Converts a string containing value + unit into a px value number
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} str - Value + unit string
 * @argument {String} measurement - `height` or `width`
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @returns {Number|String}
 * Value in pixels, or original string if no values were extracted
 */


function toValue(str, measurement, popperOffsets, referenceOffsets) {
  // separate value from unit
  var split = str.match(/((?:\-|\+)?\d*\.?\d*)(.*)/);
  var value = +split[1];
  var unit = split[2]; // If it's not a number it's an operator, I guess

  if (!value) {
    return str;
  }

  if (unit.indexOf('%') === 0) {
    var element = void 0;

    switch (unit) {
      case '%p':
        element = popperOffsets;
        break;

      case '%':
      case '%r':
      default:
        element = referenceOffsets;
    }

    var rect = getClientRect(element);
    return rect[measurement] / 100 * value;
  } else if (unit === 'vh' || unit === 'vw') {
    // if is a vh or vw, we calculate the size based on the viewport
    var size = void 0;

    if (unit === 'vh') {
      size = Math.max(document.documentElement.clientHeight, window.innerHeight || 0);
    } else {
      size = Math.max(document.documentElement.clientWidth, window.innerWidth || 0);
    }

    return size / 100 * value;
  } else {
    // if is an explicit pixel unit, we get rid of the unit and keep the value
    // if is an implicit unit, it's px, and we return just the value
    return value;
  }
}
/**
 * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.
 * @function
 * @memberof {modifiers~offset}
 * @private
 * @argument {String} offset
 * @argument {Object} popperOffsets
 * @argument {Object} referenceOffsets
 * @argument {String} basePlacement
 * @returns {Array} a two cells array with x and y offsets in numbers
 */


function parseOffset(offset, popperOffsets, referenceOffsets, basePlacement) {
  var offsets = [0, 0]; // Use height if placement is left or right and index is 0 otherwise use width
  // in this way the first offset will use an axis and the second one
  // will use the other one

  var useHeight = ['right', 'left'].indexOf(basePlacement) !== -1; // Split the offset string to obtain a list of values and operands
  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)

  var fragments = offset.split(/(\+|\-)/).map(function (frag) {
    return frag.trim();
  }); // Detect if the offset string contains a pair of values or a single one
  // they could be separated by comma or space

  var divider = fragments.indexOf(find(fragments, function (frag) {
    return frag.search(/,|\s/) !== -1;
  }));

  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {
    console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');
  } // If divider is found, we divide the list of values and operands to divide
  // them by ofset X and Y.


  var splitRegex = /\s*,\s*|\s+/;
  var ops = divider !== -1 ? [fragments.slice(0, divider).concat([fragments[divider].split(splitRegex)[0]]), [fragments[divider].split(splitRegex)[1]].concat(fragments.slice(divider + 1))] : [fragments]; // Convert the values with units to absolute pixels to allow our computations

  ops = ops.map(function (op, index) {
    // Most of the units rely on the orientation of the popper
    var measurement = (index === 1 ? !useHeight : useHeight) ? 'height' : 'width';
    var mergeWithPrevious = false;
    return op // This aggregates any `+` or `-` sign that aren't considered operators
    // e.g.: 10 + +5 => [10, +, +5]
    .reduce(function (a, b) {
      if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {
        a[a.length - 1] = b;
        mergeWithPrevious = true;
        return a;
      } else if (mergeWithPrevious) {
        a[a.length - 1] += b;
        mergeWithPrevious = false;
        return a;
      } else {
        return a.concat(b);
      }
    }, []) // Here we convert the string values into number values (in px)
    .map(function (str) {
      return toValue(str, measurement, popperOffsets, referenceOffsets);
    });
  }); // Loop trough the offsets arrays and execute the operations

  ops.forEach(function (op, index) {
    op.forEach(function (frag, index2) {
      if (isNumeric(frag)) {
        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);
      }
    });
  });
  return offsets;
}
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @argument {Number|String} options.offset=0
 * The offset value as described in the modifier description
 * @returns {Object} The data object, properly modified
 */


function offset(data, _ref) {
  var offset = _ref.offset;
  var placement = data.placement,
      _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var basePlacement = placement.split('-')[0];
  var offsets = void 0;

  if (isNumeric(+offset)) {
    offsets = [+offset, 0];
  } else {
    offsets = parseOffset(offset, popper, reference, basePlacement);
  }

  if (basePlacement === 'left') {
    popper.top += offsets[0];
    popper.left -= offsets[1];
  } else if (basePlacement === 'right') {
    popper.top += offsets[0];
    popper.left += offsets[1];
  } else if (basePlacement === 'top') {
    popper.left += offsets[0];
    popper.top -= offsets[1];
  } else if (basePlacement === 'bottom') {
    popper.left += offsets[0];
    popper.top += offsets[1];
  }

  data.popper = popper;
  return data;
}
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */


function preventOverflow(data, options) {
  var boundariesElement = options.boundariesElement || getOffsetParent(data.instance.popper); // If offsetParent is the reference element, we really want to
  // go one step up and use the next offsetParent as reference to
  // avoid to make this modifier completely useless and look like broken

  if (data.instance.reference === boundariesElement) {
    boundariesElement = getOffsetParent(boundariesElement);
  } // NOTE: DOM access here
  // resets the popper's position so that the document size can be calculated excluding
  // the size of the popper element itself


  var transformProp = getSupportedPropertyName('transform');
  var popperStyles = data.instance.popper.style; // assignment to help minification

  var top = popperStyles.top,
      left = popperStyles.left,
      transform = popperStyles[transformProp];
  popperStyles.top = '';
  popperStyles.left = '';
  popperStyles[transformProp] = '';
  var boundaries = getBoundaries(data.instance.popper, data.instance.reference, options.padding, boundariesElement, data.positionFixed); // NOTE: DOM access here
  // restores the original style properties after the offsets have been computed

  popperStyles.top = top;
  popperStyles.left = left;
  popperStyles[transformProp] = transform;
  options.boundaries = boundaries;
  var order = options.priority;
  var popper = data.offsets.popper;
  var check = {
    primary: function primary(placement) {
      var value = popper[placement];

      if (popper[placement] < boundaries[placement] && !options.escapeWithReference) {
        value = Math.max(popper[placement], boundaries[placement]);
      }

      return defineProperty({}, placement, value);
    },
    secondary: function secondary(placement) {
      var mainSide = placement === 'right' ? 'left' : 'top';
      var value = popper[mainSide];

      if (popper[placement] > boundaries[placement] && !options.escapeWithReference) {
        value = Math.min(popper[mainSide], boundaries[placement] - (placement === 'right' ? popper.width : popper.height));
      }

      return defineProperty({}, mainSide, value);
    }
  };
  order.forEach(function (placement) {
    var side = ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';
    popper = _extends({}, popper, check[side](placement));
  });
  data.offsets.popper = popper;
  return data;
}
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */


function shift(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var shiftvariation = placement.split('-')[1]; // if shift shiftvariation is specified, run the modifier

  if (shiftvariation) {
    var _data$offsets = data.offsets,
        reference = _data$offsets.reference,
        popper = _data$offsets.popper;
    var isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;
    var side = isVertical ? 'left' : 'top';
    var measurement = isVertical ? 'width' : 'height';
    var shiftOffsets = {
      start: defineProperty({}, side, reference[side]),
      end: defineProperty({}, side, reference[side] + reference[measurement] - popper[measurement])
    };
    data.offsets.popper = _extends({}, popper, shiftOffsets[shiftvariation]);
  }

  return data;
}
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by update method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */


function hide(data) {
  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {
    return data;
  }

  var refRect = data.offsets.reference;
  var bound = find(data.instance.modifiers, function (modifier) {
    return modifier.name === 'preventOverflow';
  }).boundaries;

  if (refRect.bottom < bound.top || refRect.left > bound.right || refRect.top > bound.bottom || refRect.right < bound.left) {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === true) {
      return data;
    }

    data.hide = true;
    data.attributes['x-out-of-boundaries'] = '';
  } else {
    // Avoid unnecessary DOM access if visibility hasn't changed
    if (data.hide === false) {
      return data;
    }

    data.hide = false;
    data.attributes['x-out-of-boundaries'] = false;
  }

  return data;
}
/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */


function inner(data) {
  var placement = data.placement;
  var basePlacement = placement.split('-')[0];
  var _data$offsets = data.offsets,
      popper = _data$offsets.popper,
      reference = _data$offsets.reference;
  var isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;
  var subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;
  popper[isHoriz ? 'left' : 'top'] = reference[basePlacement] - (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);
  data.placement = getOppositePlacement(placement);
  data.offsets.popper = getClientRect(popper);
  return data;
}
/**
 * Modifier function, each modifier can have a function of this type assigned
 * to its `fn` property.<br />
 * These functions will be called on each update, this means that you must
 * make sure they are performant enough to avoid performance bottlenecks.
 *
 * @function ModifierFn
 * @argument {dataObject} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {dataObject} The data object, properly modified
 */

/**
 * Modifiers are plugins used to alter the behavior of your poppers.<br />
 * Popper.js uses a set of 9 modifiers to provide all the basic functionalities
 * needed by the library.
 *
 * Usually you don't want to override the `order`, `fn` and `onLoad` props.
 * All the other properties are configurations that could be tweaked.
 * @namespace modifiers
 */


var modifiers = {
  /**
   * Modifier used to shift the popper on the start or end of its reference
   * element.<br />
   * It will read the variation of the `placement` property.<br />
   * It can be one either `-end` or `-start`.
   * @memberof modifiers
   * @inner
   */
  shift: {
    /** @prop {number} order=100 - Index used to define the order of execution */
    order: 100,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: shift
  },

  /**
   * The `offset` modifier can shift your popper on both its axis.
   *
   * It accepts the following units:
   * - `px` or unit-less, interpreted as pixels
   * - `%` or `%r`, percentage relative to the length of the reference element
   * - `%p`, percentage relative to the length of the popper element
   * - `vw`, CSS viewport width unit
   * - `vh`, CSS viewport height unit
   *
   * For length is intended the main axis relative to the placement of the popper.<br />
   * This means that if the placement is `top` or `bottom`, the length will be the
   * `width`. In case of `left` or `right`, it will be the `height`.
   *
   * You can provide a single value (as `Number` or `String`), or a pair of values
   * as `String` divided by a comma or one (or more) white spaces.<br />
   * The latter is a deprecated method because it leads to confusion and will be
   * removed in v2.<br />
   * Additionally, it accepts additions and subtractions between different units.
   * Note that multiplications and divisions aren't supported.
   *
   * Valid examples are:
   * ```
   * 10
   * '10%'
   * '10, 10'
   * '10%, 10'
   * '10 + 10%'
   * '10 - 5vh + 3%'
   * '-10px + 5vh, 5px - 6%'
   * ```
   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap
   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.
   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).
   *
   * @memberof modifiers
   * @inner
   */
  offset: {
    /** @prop {number} order=200 - Index used to define the order of execution */
    order: 200,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: offset,

    /** @prop {Number|String} offset=0
     * The offset value as described in the modifier description
     */
    offset: 0
  },

  /**
   * Modifier used to prevent the popper from being positioned outside the boundary.
   *
   * A scenario exists where the reference itself is not within the boundaries.<br />
   * We can say it has "escaped the boundaries" — or just "escaped".<br />
   * In this case we need to decide whether the popper should either:
   *
   * - detach from the reference and remain "trapped" in the boundaries, or
   * - if it should ignore the boundary and "escape with its reference"
   *
   * When `escapeWithReference` is set to`true` and reference is completely
   * outside its boundaries, the popper will overflow (or completely leave)
   * the boundaries in order to remain attached to the edge of the reference.
   *
   * @memberof modifiers
   * @inner
   */
  preventOverflow: {
    /** @prop {number} order=300 - Index used to define the order of execution */
    order: 300,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: preventOverflow,

    /**
     * @prop {Array} [priority=['left','right','top','bottom']]
     * Popper will try to prevent overflow following these priorities by default,
     * then, it could overflow on the left and on top of the `boundariesElement`
     */
    priority: ['left', 'right', 'top', 'bottom'],

    /**
     * @prop {number} padding=5
     * Amount of pixel used to define a minimum distance between the boundaries
     * and the popper. This makes sure the popper always has a little padding
     * between the edges of its container
     */
    padding: 5,

    /**
     * @prop {String|HTMLElement} boundariesElement='scrollParent'
     * Boundaries used by the modifier. Can be `scrollParent`, `window`,
     * `viewport` or any DOM element.
     */
    boundariesElement: 'scrollParent'
  },

  /**
   * Modifier used to make sure the reference and its popper stay near each other
   * without leaving any gap between the two. Especially useful when the arrow is
   * enabled and you want to ensure that it points to its reference element.
   * It cares only about the first axis. You can still have poppers with margin
   * between the popper and its reference element.
   * @memberof modifiers
   * @inner
   */
  keepTogether: {
    /** @prop {number} order=400 - Index used to define the order of execution */
    order: 400,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: keepTogether
  },

  /**
   * This modifier is used to move the `arrowElement` of the popper to make
   * sure it is positioned between the reference element and its popper element.
   * It will read the outer size of the `arrowElement` node to detect how many
   * pixels of conjunction are needed.
   *
   * It has no effect if no `arrowElement` is provided.
   * @memberof modifiers
   * @inner
   */
  arrow: {
    /** @prop {number} order=500 - Index used to define the order of execution */
    order: 500,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: arrow,

    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */
    element: '[x-arrow]'
  },

  /**
   * Modifier used to flip the popper's placement when it starts to overlap its
   * reference element.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   *
   * **NOTE:** this modifier will interrupt the current update cycle and will
   * restart it if it detects the need to flip the placement.
   * @memberof modifiers
   * @inner
   */
  flip: {
    /** @prop {number} order=600 - Index used to define the order of execution */
    order: 600,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: flip,

    /**
     * @prop {String|Array} behavior='flip'
     * The behavior used to change the popper's placement. It can be one of
     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid
     * placements (with optional variations)
     */
    behavior: 'flip',

    /**
     * @prop {number} padding=5
     * The popper will flip if it hits the edges of the `boundariesElement`
     */
    padding: 5,

    /**
     * @prop {String|HTMLElement} boundariesElement='viewport'
     * The element which will define the boundaries of the popper position.
     * The popper will never be placed outside of the defined boundaries
     * (except if `keepTogether` is enabled)
     */
    boundariesElement: 'viewport',

    /**
     * @prop {Boolean} flipVariations=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the reference element overlaps its boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariations: false,

    /**
     * @prop {Boolean} flipVariationsByContent=false
     * The popper will switch placement variation between `-start` and `-end` when
     * the popper element overlaps its reference boundaries.
     *
     * The original placement should have a set variation.
     */
    flipVariationsByContent: false
  },

  /**
   * Modifier used to make the popper flow toward the inner of the reference element.
   * By default, when this modifier is disabled, the popper will be placed outside
   * the reference element.
   * @memberof modifiers
   * @inner
   */
  inner: {
    /** @prop {number} order=700 - Index used to define the order of execution */
    order: 700,

    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */
    enabled: false,

    /** @prop {ModifierFn} */
    fn: inner
  },

  /**
   * Modifier used to hide the popper when its reference element is outside of the
   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can
   * be used to hide with a CSS selector the popper when its reference is
   * out of boundaries.
   *
   * Requires the `preventOverflow` modifier before it in order to work.
   * @memberof modifiers
   * @inner
   */
  hide: {
    /** @prop {number} order=800 - Index used to define the order of execution */
    order: 800,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: hide
  },

  /**
   * Computes the style that will be applied to the popper element to gets
   * properly positioned.
   *
   * Note that this modifier will not touch the DOM, it just prepares the styles
   * so that `applyStyle` modifier can apply it. This separation is useful
   * in case you need to replace `applyStyle` with a custom implementation.
   *
   * This modifier has `850` as `order` value to maintain backward compatibility
   * with previous versions of Popper.js. Expect the modifiers ordering method
   * to change in future major versions of the library.
   *
   * @memberof modifiers
   * @inner
   */
  computeStyle: {
    /** @prop {number} order=850 - Index used to define the order of execution */
    order: 850,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: computeStyle,

    /**
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: true,

    /**
     * @prop {string} [x='bottom']
     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.
     * Change this if your popper should grow in a direction different from `bottom`
     */
    x: 'bottom',

    /**
     * @prop {string} [x='left']
     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.
     * Change this if your popper should grow in a direction different from `right`
     */
    y: 'right'
  },

  /**
   * Applies the computed styles to the popper element.
   *
   * All the DOM manipulations are limited to this modifier. This is useful in case
   * you want to integrate Popper.js inside a framework or view library and you
   * want to delegate all the DOM manipulations to it.
   *
   * Note that if you disable this modifier, you must make sure the popper element
   * has its position set to `absolute` before Popper.js can do its work!
   *
   * Just disable this modifier and define your own to achieve the desired effect.
   *
   * @memberof modifiers
   * @inner
   */
  applyStyle: {
    /** @prop {number} order=900 - Index used to define the order of execution */
    order: 900,

    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */
    enabled: true,

    /** @prop {ModifierFn} */
    fn: applyStyle,

    /** @prop {Function} */
    onLoad: applyStyleOnLoad,

    /**
     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier
     * @prop {Boolean} gpuAcceleration=true
     * If true, it uses the CSS 3D transformation to position the popper.
     * Otherwise, it will use the `top` and `left` properties
     */
    gpuAcceleration: undefined
  }
};
/**
 * The `dataObject` is an object containing all the information used by Popper.js.
 * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.
 * @name dataObject
 * @property {Object} data.instance The Popper.js instance
 * @property {String} data.placement Placement applied to popper
 * @property {String} data.originalPlacement Placement originally defined on init
 * @property {Boolean} data.flipped True if popper has been flipped by flip modifier
 * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper
 * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier
 * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)
 * @property {Object} data.boundaries Offsets of the popper boundaries
 * @property {Object} data.offsets The measurements of popper, reference and arrow elements
 * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values
 * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0
 */

/**
 * Default options provided to Popper.js constructor.<br />
 * These can be overridden using the `options` argument of Popper.js.<br />
 * To override an option, simply pass an object with the same
 * structure of the `options` object, as the 3rd argument. For example:
 * ```
 * new Popper(ref, pop, {
 *   modifiers: {
 *     preventOverflow: { enabled: false }
 *   }
 * })
 * ```
 * @type {Object}
 * @static
 * @memberof Popper
 */

var Defaults = {
  /**
   * Popper's placement.
   * @prop {Popper.placements} placement='bottom'
   */
  placement: 'bottom',

  /**
   * Set this to true if you want popper to position it self in 'fixed' mode
   * @prop {Boolean} positionFixed=false
   */
  positionFixed: false,

  /**
   * Whether events (resize, scroll) are initially enabled.
   * @prop {Boolean} eventsEnabled=true
   */
  eventsEnabled: true,

  /**
   * Set to true if you want to automatically remove the popper when
   * you call the `destroy` method.
   * @prop {Boolean} removeOnDestroy=false
   */
  removeOnDestroy: false,

  /**
   * Callback called when the popper is created.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onCreate}
   */
  onCreate: function onCreate() {},

  /**
   * Callback called when the popper is updated. This callback is not called
   * on the initialization/creation of the popper, but only on subsequent
   * updates.<br />
   * By default, it is set to no-op.<br />
   * Access Popper.js instance with `data.instance`.
   * @prop {onUpdate}
   */
  onUpdate: function onUpdate() {},

  /**
   * List of modifiers used to modify the offsets before they are applied to the popper.
   * They provide most of the functionalities of Popper.js.
   * @prop {modifiers}
   */
  modifiers: modifiers
};
/**
 * @callback onCreate
 * @param {dataObject} data
 */

/**
 * @callback onUpdate
 * @param {dataObject} data
 */
// Utils
// Methods

var Popper = function () {
  /**
   * Creates a new Popper.js instance.
   * @class Popper
   * @param {Element|referenceObject} reference - The reference element used to position the popper
   * @param {Element} popper - The HTML / XML element used as the popper
   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)
   * @return {Object} instance - The generated Popper.js instance
   */
  function Popper(reference, popper) {
    var _this = this;

    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    classCallCheck(this, Popper);

    this.scheduleUpdate = function () {
      return requestAnimationFrame(_this.update);
    }; // make update() debounced, so that it only runs at most once-per-tick


    this.update = debounce(this.update.bind(this)); // with {} we create a new object with the options inside it

    this.options = _extends({}, Popper.Defaults, options); // init state

    this.state = {
      isDestroyed: false,
      isCreated: false,
      scrollParents: []
    }; // get reference and popper elements (allow jQuery wrappers)

    this.reference = reference && reference.jquery ? reference[0] : reference;
    this.popper = popper && popper.jquery ? popper[0] : popper; // Deep merge modifiers options

    this.options.modifiers = {};
    Object.keys(_extends({}, Popper.Defaults.modifiers, options.modifiers)).forEach(function (name) {
      _this.options.modifiers[name] = _extends({}, Popper.Defaults.modifiers[name] || {}, options.modifiers ? options.modifiers[name] : {});
    }); // Refactoring modifiers' list (Object => Array)

    this.modifiers = Object.keys(this.options.modifiers).map(function (name) {
      return _extends({
        name: name
      }, _this.options.modifiers[name]);
    }) // sort the modifiers by order
    .sort(function (a, b) {
      return a.order - b.order;
    }); // modifiers have the ability to execute arbitrary code when Popper.js get inited
    // such code is executed in the same order of its modifier
    // they could add new properties to their options configuration
    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!

    this.modifiers.forEach(function (modifierOptions) {
      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {
        modifierOptions.onLoad(_this.reference, _this.popper, _this.options, modifierOptions, _this.state);
      }
    }); // fire the first update to position the popper in the right place

    this.update();
    var eventsEnabled = this.options.eventsEnabled;

    if (eventsEnabled) {
      // setup event listeners, they will take care of update the position in specific situations
      this.enableEventListeners();
    }

    this.state.eventsEnabled = eventsEnabled;
  } // We can't use class properties because they don't get listed in the
  // class prototype and break stuff like Sinon stubs


  createClass(Popper, [{
    key: 'update',
    value: function update$$1() {
      return update.call(this);
    }
  }, {
    key: 'destroy',
    value: function destroy$$1() {
      return destroy.call(this);
    }
  }, {
    key: 'enableEventListeners',
    value: function enableEventListeners$$1() {
      return enableEventListeners.call(this);
    }
  }, {
    key: 'disableEventListeners',
    value: function disableEventListeners$$1() {
      return disableEventListeners.call(this);
    }
    /**
     * Schedules an update. It will run on the next UI update available.
     * @method scheduleUpdate
     * @memberof Popper
     */

    /**
     * Collection of utilities useful when writing custom modifiers.
     * Starting from version 1.7, this method is available only if you
     * include `popper-utils.js` before `popper.js`.
     *
     * **DEPRECATION**: This way to access PopperUtils is deprecated
     * and will be removed in v2! Use the PopperUtils module directly instead.
     * Due to the high instability of the methods contained in Utils, we can't
     * guarantee them to follow semver. Use them at your own risk!
     * @static
     * @private
     * @type {Object}
     * @deprecated since version 1.8
     * @member Utils
     * @memberof Popper
     */

  }]);
  return Popper;
}();
/**
 * The `referenceObject` is an object that provides an interface compatible with Popper.js
 * and lets you use it as replacement of a real DOM node.<br />
 * You can use this method to position a popper relatively to a set of coordinates
 * in case you don't have a DOM node to use as reference.
 *
 * ```
 * new Popper(referenceObject, popperNode);
 * ```
 *
 * NB: This feature isn't supported in Internet Explorer 10.
 * @name referenceObject
 * @property {Function} data.getBoundingClientRect
 * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.
 * @property {number} data.clientWidth
 * An ES6 getter that will return the width of the virtual reference element.
 * @property {number} data.clientHeight
 * An ES6 getter that will return the height of the virtual reference element.
 */


Popper.Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;
Popper.placements = placements;
Popper.Defaults = Defaults;
var _default = Popper;
exports.default = _default;
},{}],"../node_modules/bootstrap/dist/js/bootstrap.js":[function(require,module,exports) {
var define;
var global = arguments[3];
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function (obj) { return typeof obj; }; } else { _typeof = function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
  * Bootstrap v4.4.1 (https://getbootstrap.com/)
  * Copyright 2011-2019 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
(function (global, factory) {
  (typeof exports === "undefined" ? "undefined" : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, require('jquery'), require('popper.js')) : typeof define === 'function' && define.amd ? define(['exports', 'jquery', 'popper.js'], factory) : (global = global || self, factory(global.bootstrap = {}, global.jQuery, global.Popper));
})(this, function (exports, $, Popper) {
  'use strict';

  $ = $ && $.hasOwnProperty('default') ? $['default'] : $;
  Popper = Popper && Popper.hasOwnProperty('default') ? Popper['default'] : Popper;

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.4.1): util.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */

  /**
   * ------------------------------------------------------------------------
   * Private TransitionEnd Helpers
   * ------------------------------------------------------------------------
   */


  var TRANSITION_END = 'transitionend';
  var MAX_UID = 1000000;
  var MILLISECONDS_MULTIPLIER = 1000; // Shoutout AngusCroll (https://goo.gl/pxwQGp)

  function toType(obj) {
    return {}.toString.call(obj).match(/\s([a-z]+)/i)[1].toLowerCase();
  }

  function getSpecialTransitionEndEvent() {
    return {
      bindType: TRANSITION_END,
      delegateType: TRANSITION_END,
      handle: function handle(event) {
        if ($(event.target).is(this)) {
          return event.handleObj.handler.apply(this, arguments); // eslint-disable-line prefer-rest-params
        }

        return undefined; // eslint-disable-line no-undefined
      }
    };
  }

  function transitionEndEmulator(duration) {
    var _this = this;

    var called = false;
    $(this).one(Util.TRANSITION_END, function () {
      called = true;
    });
    setTimeout(function () {
      if (!called) {
        Util.triggerTransitionEnd(_this);
      }
    }, duration);
    return this;
  }

  function setTransitionEndSupport() {
    $.fn.emulateTransitionEnd = transitionEndEmulator;
    $.event.special[Util.TRANSITION_END] = getSpecialTransitionEndEvent();
  }
  /**
   * --------------------------------------------------------------------------
   * Public Util Api
   * --------------------------------------------------------------------------
   */


  var Util = {
    TRANSITION_END: 'bsTransitionEnd',
    getUID: function getUID(prefix) {
      do {
        // eslint-disable-next-line no-bitwise
        prefix += ~~(Math.random() * MAX_UID); // "~~" acts like a faster Math.floor() here
      } while (document.getElementById(prefix));

      return prefix;
    },
    getSelectorFromElement: function getSelectorFromElement(element) {
      var selector = element.getAttribute('data-target');

      if (!selector || selector === '#') {
        var hrefAttr = element.getAttribute('href');
        selector = hrefAttr && hrefAttr !== '#' ? hrefAttr.trim() : '';
      }

      try {
        return document.querySelector(selector) ? selector : null;
      } catch (err) {
        return null;
      }
    },
    getTransitionDurationFromElement: function getTransitionDurationFromElement(element) {
      if (!element) {
        return 0;
      } // Get transition-duration of the element


      var transitionDuration = $(element).css('transition-duration');
      var transitionDelay = $(element).css('transition-delay');
      var floatTransitionDuration = parseFloat(transitionDuration);
      var floatTransitionDelay = parseFloat(transitionDelay); // Return 0 if element or transition duration is not found

      if (!floatTransitionDuration && !floatTransitionDelay) {
        return 0;
      } // If multiple durations are defined, take the first


      transitionDuration = transitionDuration.split(',')[0];
      transitionDelay = transitionDelay.split(',')[0];
      return (parseFloat(transitionDuration) + parseFloat(transitionDelay)) * MILLISECONDS_MULTIPLIER;
    },
    reflow: function reflow(element) {
      return element.offsetHeight;
    },
    triggerTransitionEnd: function triggerTransitionEnd(element) {
      $(element).trigger(TRANSITION_END);
    },
    // TODO: Remove in v5
    supportsTransitionEnd: function supportsTransitionEnd() {
      return Boolean(TRANSITION_END);
    },
    isElement: function isElement(obj) {
      return (obj[0] || obj).nodeType;
    },
    typeCheckConfig: function typeCheckConfig(componentName, config, configTypes) {
      for (var property in configTypes) {
        if (Object.prototype.hasOwnProperty.call(configTypes, property)) {
          var expectedTypes = configTypes[property];
          var value = config[property];
          var valueType = value && Util.isElement(value) ? 'element' : toType(value);

          if (!new RegExp(expectedTypes).test(valueType)) {
            throw new Error(componentName.toUpperCase() + ": " + ("Option \"" + property + "\" provided type \"" + valueType + "\" ") + ("but expected type \"" + expectedTypes + "\"."));
          }
        }
      }
    },
    findShadowRoot: function findShadowRoot(element) {
      if (!document.documentElement.attachShadow) {
        return null;
      } // Can find the shadow root otherwise it'll return the document


      if (typeof element.getRootNode === 'function') {
        var root = element.getRootNode();
        return root instanceof ShadowRoot ? root : null;
      }

      if (element instanceof ShadowRoot) {
        return element;
      } // when we don't find a shadow root


      if (!element.parentNode) {
        return null;
      }

      return Util.findShadowRoot(element.parentNode);
    },
    jQueryDetection: function jQueryDetection() {
      if (typeof $ === 'undefined') {
        throw new TypeError('Bootstrap\'s JavaScript requires jQuery. jQuery must be included before Bootstrap\'s JavaScript.');
      }

      var version = $.fn.jquery.split(' ')[0].split('.');
      var minMajor = 1;
      var ltMajor = 2;
      var minMinor = 9;
      var minPatch = 1;
      var maxMajor = 4;

      if (version[0] < ltMajor && version[1] < minMinor || version[0] === minMajor && version[1] === minMinor && version[2] < minPatch || version[0] >= maxMajor) {
        throw new Error('Bootstrap\'s JavaScript requires at least jQuery v1.9.1 but less than v4.0.0');
      }
    }
  };
  Util.jQueryDetection();
  setTransitionEndSupport();
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */

  var NAME = 'alert';
  var VERSION = '4.4.1';
  var DATA_KEY = 'bs.alert';
  var EVENT_KEY = "." + DATA_KEY;
  var DATA_API_KEY = '.data-api';
  var JQUERY_NO_CONFLICT = $.fn[NAME];
  var Selector = {
    DISMISS: '[data-dismiss="alert"]'
  };
  var Event = {
    CLOSE: "close" + EVENT_KEY,
    CLOSED: "closed" + EVENT_KEY,
    CLICK_DATA_API: "click" + EVENT_KEY + DATA_API_KEY
  };
  var ClassName = {
    ALERT: 'alert',
    FADE: 'fade',
    SHOW: 'show'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Alert =
  /*#__PURE__*/
  function () {
    function Alert(element) {
      this._element = element;
    } // Getters


    var _proto = Alert.prototype; // Public

    _proto.close = function close(element) {
      var rootElement = this._element;

      if (element) {
        rootElement = this._getRootElement(element);
      }

      var customEvent = this._triggerCloseEvent(rootElement);

      if (customEvent.isDefaultPrevented()) {
        return;
      }

      this._removeElement(rootElement);
    };

    _proto.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY);
      this._element = null;
    } // Private
    ;

    _proto._getRootElement = function _getRootElement(element) {
      var selector = Util.getSelectorFromElement(element);
      var parent = false;

      if (selector) {
        parent = document.querySelector(selector);
      }

      if (!parent) {
        parent = $(element).closest("." + ClassName.ALERT)[0];
      }

      return parent;
    };

    _proto._triggerCloseEvent = function _triggerCloseEvent(element) {
      var closeEvent = $.Event(Event.CLOSE);
      $(element).trigger(closeEvent);
      return closeEvent;
    };

    _proto._removeElement = function _removeElement(element) {
      var _this = this;

      $(element).removeClass(ClassName.SHOW);

      if (!$(element).hasClass(ClassName.FADE)) {
        this._destroyElement(element);

        return;
      }

      var transitionDuration = Util.getTransitionDurationFromElement(element);
      $(element).one(Util.TRANSITION_END, function (event) {
        return _this._destroyElement(element, event);
      }).emulateTransitionEnd(transitionDuration);
    };

    _proto._destroyElement = function _destroyElement(element) {
      $(element).detach().trigger(Event.CLOSED).remove();
    } // Static
    ;

    Alert._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $element = $(this);
        var data = $element.data(DATA_KEY);

        if (!data) {
          data = new Alert(this);
          $element.data(DATA_KEY, data);
        }

        if (config === 'close') {
          data[config](this);
        }
      });
    };

    Alert._handleDismiss = function _handleDismiss(alertInstance) {
      return function (event) {
        if (event) {
          event.preventDefault();
        }

        alertInstance.close(this);
      };
    };

    _createClass(Alert, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION;
      }
    }]);

    return Alert;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $(document).on(Event.CLICK_DATA_API, Selector.DISMISS, Alert._handleDismiss(new Alert()));
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME] = Alert._jQueryInterface;
  $.fn[NAME].Constructor = Alert;

  $.fn[NAME].noConflict = function () {
    $.fn[NAME] = JQUERY_NO_CONFLICT;
    return Alert._jQueryInterface;
  };
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */


  var NAME$1 = 'button';
  var VERSION$1 = '4.4.1';
  var DATA_KEY$1 = 'bs.button';
  var EVENT_KEY$1 = "." + DATA_KEY$1;
  var DATA_API_KEY$1 = '.data-api';
  var JQUERY_NO_CONFLICT$1 = $.fn[NAME$1];
  var ClassName$1 = {
    ACTIVE: 'active',
    BUTTON: 'btn',
    FOCUS: 'focus'
  };
  var Selector$1 = {
    DATA_TOGGLE_CARROT: '[data-toggle^="button"]',
    DATA_TOGGLES: '[data-toggle="buttons"]',
    DATA_TOGGLE: '[data-toggle="button"]',
    DATA_TOGGLES_BUTTONS: '[data-toggle="buttons"] .btn',
    INPUT: 'input:not([type="hidden"])',
    ACTIVE: '.active',
    BUTTON: '.btn'
  };
  var Event$1 = {
    CLICK_DATA_API: "click" + EVENT_KEY$1 + DATA_API_KEY$1,
    FOCUS_BLUR_DATA_API: "focus" + EVENT_KEY$1 + DATA_API_KEY$1 + " " + ("blur" + EVENT_KEY$1 + DATA_API_KEY$1),
    LOAD_DATA_API: "load" + EVENT_KEY$1 + DATA_API_KEY$1
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Button =
  /*#__PURE__*/
  function () {
    function Button(element) {
      this._element = element;
    } // Getters


    var _proto = Button.prototype; // Public

    _proto.toggle = function toggle() {
      var triggerChangeEvent = true;
      var addAriaPressed = true;
      var rootElement = $(this._element).closest(Selector$1.DATA_TOGGLES)[0];

      if (rootElement) {
        var input = this._element.querySelector(Selector$1.INPUT);

        if (input) {
          if (input.type === 'radio') {
            if (input.checked && this._element.classList.contains(ClassName$1.ACTIVE)) {
              triggerChangeEvent = false;
            } else {
              var activeElement = rootElement.querySelector(Selector$1.ACTIVE);

              if (activeElement) {
                $(activeElement).removeClass(ClassName$1.ACTIVE);
              }
            }
          } else if (input.type === 'checkbox') {
            if (this._element.tagName === 'LABEL' && input.checked === this._element.classList.contains(ClassName$1.ACTIVE)) {
              triggerChangeEvent = false;
            }
          } else {
            // if it's not a radio button or checkbox don't add a pointless/invalid checked property to the input
            triggerChangeEvent = false;
          }

          if (triggerChangeEvent) {
            input.checked = !this._element.classList.contains(ClassName$1.ACTIVE);
            $(input).trigger('change');
          }

          input.focus();
          addAriaPressed = false;
        }
      }

      if (!(this._element.hasAttribute('disabled') || this._element.classList.contains('disabled'))) {
        if (addAriaPressed) {
          this._element.setAttribute('aria-pressed', !this._element.classList.contains(ClassName$1.ACTIVE));
        }

        if (triggerChangeEvent) {
          $(this._element).toggleClass(ClassName$1.ACTIVE);
        }
      }
    };

    _proto.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY$1);
      this._element = null;
    } // Static
    ;

    Button._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY$1);

        if (!data) {
          data = new Button(this);
          $(this).data(DATA_KEY$1, data);
        }

        if (config === 'toggle') {
          data[config]();
        }
      });
    };

    _createClass(Button, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$1;
      }
    }]);

    return Button;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $(document).on(Event$1.CLICK_DATA_API, Selector$1.DATA_TOGGLE_CARROT, function (event) {
    var button = event.target;

    if (!$(button).hasClass(ClassName$1.BUTTON)) {
      button = $(button).closest(Selector$1.BUTTON)[0];
    }

    if (!button || button.hasAttribute('disabled') || button.classList.contains('disabled')) {
      event.preventDefault(); // work around Firefox bug #1540995
    } else {
      var inputBtn = button.querySelector(Selector$1.INPUT);

      if (inputBtn && (inputBtn.hasAttribute('disabled') || inputBtn.classList.contains('disabled'))) {
        event.preventDefault(); // work around Firefox bug #1540995

        return;
      }

      Button._jQueryInterface.call($(button), 'toggle');
    }
  }).on(Event$1.FOCUS_BLUR_DATA_API, Selector$1.DATA_TOGGLE_CARROT, function (event) {
    var button = $(event.target).closest(Selector$1.BUTTON)[0];
    $(button).toggleClass(ClassName$1.FOCUS, /^focus(in)?$/.test(event.type));
  });
  $(window).on(Event$1.LOAD_DATA_API, function () {
    // ensure correct active class is set to match the controls' actual values/states
    // find all checkboxes/readio buttons inside data-toggle groups
    var buttons = [].slice.call(document.querySelectorAll(Selector$1.DATA_TOGGLES_BUTTONS));

    for (var i = 0, len = buttons.length; i < len; i++) {
      var button = buttons[i];
      var input = button.querySelector(Selector$1.INPUT);

      if (input.checked || input.hasAttribute('checked')) {
        button.classList.add(ClassName$1.ACTIVE);
      } else {
        button.classList.remove(ClassName$1.ACTIVE);
      }
    } // find all button toggles


    buttons = [].slice.call(document.querySelectorAll(Selector$1.DATA_TOGGLE));

    for (var _i = 0, _len = buttons.length; _i < _len; _i++) {
      var _button = buttons[_i];

      if (_button.getAttribute('aria-pressed') === 'true') {
        _button.classList.add(ClassName$1.ACTIVE);
      } else {
        _button.classList.remove(ClassName$1.ACTIVE);
      }
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME$1] = Button._jQueryInterface;
  $.fn[NAME$1].Constructor = Button;

  $.fn[NAME$1].noConflict = function () {
    $.fn[NAME$1] = JQUERY_NO_CONFLICT$1;
    return Button._jQueryInterface;
  };
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */


  var NAME$2 = 'carousel';
  var VERSION$2 = '4.4.1';
  var DATA_KEY$2 = 'bs.carousel';
  var EVENT_KEY$2 = "." + DATA_KEY$2;
  var DATA_API_KEY$2 = '.data-api';
  var JQUERY_NO_CONFLICT$2 = $.fn[NAME$2];
  var ARROW_LEFT_KEYCODE = 37; // KeyboardEvent.which value for left arrow key

  var ARROW_RIGHT_KEYCODE = 39; // KeyboardEvent.which value for right arrow key

  var TOUCHEVENT_COMPAT_WAIT = 500; // Time for mouse compat events to fire after touch

  var SWIPE_THRESHOLD = 40;
  var Default = {
    interval: 5000,
    keyboard: true,
    slide: false,
    pause: 'hover',
    wrap: true,
    touch: true
  };
  var DefaultType = {
    interval: '(number|boolean)',
    keyboard: 'boolean',
    slide: '(boolean|string)',
    pause: '(string|boolean)',
    wrap: 'boolean',
    touch: 'boolean'
  };
  var Direction = {
    NEXT: 'next',
    PREV: 'prev',
    LEFT: 'left',
    RIGHT: 'right'
  };
  var Event$2 = {
    SLIDE: "slide" + EVENT_KEY$2,
    SLID: "slid" + EVENT_KEY$2,
    KEYDOWN: "keydown" + EVENT_KEY$2,
    MOUSEENTER: "mouseenter" + EVENT_KEY$2,
    MOUSELEAVE: "mouseleave" + EVENT_KEY$2,
    TOUCHSTART: "touchstart" + EVENT_KEY$2,
    TOUCHMOVE: "touchmove" + EVENT_KEY$2,
    TOUCHEND: "touchend" + EVENT_KEY$2,
    POINTERDOWN: "pointerdown" + EVENT_KEY$2,
    POINTERUP: "pointerup" + EVENT_KEY$2,
    DRAG_START: "dragstart" + EVENT_KEY$2,
    LOAD_DATA_API: "load" + EVENT_KEY$2 + DATA_API_KEY$2,
    CLICK_DATA_API: "click" + EVENT_KEY$2 + DATA_API_KEY$2
  };
  var ClassName$2 = {
    CAROUSEL: 'carousel',
    ACTIVE: 'active',
    SLIDE: 'slide',
    RIGHT: 'carousel-item-right',
    LEFT: 'carousel-item-left',
    NEXT: 'carousel-item-next',
    PREV: 'carousel-item-prev',
    ITEM: 'carousel-item',
    POINTER_EVENT: 'pointer-event'
  };
  var Selector$2 = {
    ACTIVE: '.active',
    ACTIVE_ITEM: '.active.carousel-item',
    ITEM: '.carousel-item',
    ITEM_IMG: '.carousel-item img',
    NEXT_PREV: '.carousel-item-next, .carousel-item-prev',
    INDICATORS: '.carousel-indicators',
    DATA_SLIDE: '[data-slide], [data-slide-to]',
    DATA_RIDE: '[data-ride="carousel"]'
  };
  var PointerType = {
    TOUCH: 'touch',
    PEN: 'pen'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Carousel =
  /*#__PURE__*/
  function () {
    function Carousel(element, config) {
      this._items = null;
      this._interval = null;
      this._activeElement = null;
      this._isPaused = false;
      this._isSliding = false;
      this.touchTimeout = null;
      this.touchStartX = 0;
      this.touchDeltaX = 0;
      this._config = this._getConfig(config);
      this._element = element;
      this._indicatorsElement = this._element.querySelector(Selector$2.INDICATORS);
      this._touchSupported = 'ontouchstart' in document.documentElement || navigator.maxTouchPoints > 0;
      this._pointerEvent = Boolean(window.PointerEvent || window.MSPointerEvent);

      this._addEventListeners();
    } // Getters


    var _proto = Carousel.prototype; // Public

    _proto.next = function next() {
      if (!this._isSliding) {
        this._slide(Direction.NEXT);
      }
    };

    _proto.nextWhenVisible = function nextWhenVisible() {
      // Don't call next when the page isn't visible
      // or the carousel or its parent isn't visible
      if (!document.hidden && $(this._element).is(':visible') && $(this._element).css('visibility') !== 'hidden') {
        this.next();
      }
    };

    _proto.prev = function prev() {
      if (!this._isSliding) {
        this._slide(Direction.PREV);
      }
    };

    _proto.pause = function pause(event) {
      if (!event) {
        this._isPaused = true;
      }

      if (this._element.querySelector(Selector$2.NEXT_PREV)) {
        Util.triggerTransitionEnd(this._element);
        this.cycle(true);
      }

      clearInterval(this._interval);
      this._interval = null;
    };

    _proto.cycle = function cycle(event) {
      if (!event) {
        this._isPaused = false;
      }

      if (this._interval) {
        clearInterval(this._interval);
        this._interval = null;
      }

      if (this._config.interval && !this._isPaused) {
        this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval);
      }
    };

    _proto.to = function to(index) {
      var _this = this;

      this._activeElement = this._element.querySelector(Selector$2.ACTIVE_ITEM);

      var activeIndex = this._getItemIndex(this._activeElement);

      if (index > this._items.length - 1 || index < 0) {
        return;
      }

      if (this._isSliding) {
        $(this._element).one(Event$2.SLID, function () {
          return _this.to(index);
        });
        return;
      }

      if (activeIndex === index) {
        this.pause();
        this.cycle();
        return;
      }

      var direction = index > activeIndex ? Direction.NEXT : Direction.PREV;

      this._slide(direction, this._items[index]);
    };

    _proto.dispose = function dispose() {
      $(this._element).off(EVENT_KEY$2);
      $.removeData(this._element, DATA_KEY$2);
      this._items = null;
      this._config = null;
      this._element = null;
      this._interval = null;
      this._isPaused = null;
      this._isSliding = null;
      this._activeElement = null;
      this._indicatorsElement = null;
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _objectSpread2({}, Default, {}, config);
      Util.typeCheckConfig(NAME$2, config, DefaultType);
      return config;
    };

    _proto._handleSwipe = function _handleSwipe() {
      var absDeltax = Math.abs(this.touchDeltaX);

      if (absDeltax <= SWIPE_THRESHOLD) {
        return;
      }

      var direction = absDeltax / this.touchDeltaX;
      this.touchDeltaX = 0; // swipe left

      if (direction > 0) {
        this.prev();
      } // swipe right


      if (direction < 0) {
        this.next();
      }
    };

    _proto._addEventListeners = function _addEventListeners() {
      var _this2 = this;

      if (this._config.keyboard) {
        $(this._element).on(Event$2.KEYDOWN, function (event) {
          return _this2._keydown(event);
        });
      }

      if (this._config.pause === 'hover') {
        $(this._element).on(Event$2.MOUSEENTER, function (event) {
          return _this2.pause(event);
        }).on(Event$2.MOUSELEAVE, function (event) {
          return _this2.cycle(event);
        });
      }

      if (this._config.touch) {
        this._addTouchEventListeners();
      }
    };

    _proto._addTouchEventListeners = function _addTouchEventListeners() {
      var _this3 = this;

      if (!this._touchSupported) {
        return;
      }

      var start = function start(event) {
        if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
          _this3.touchStartX = event.originalEvent.clientX;
        } else if (!_this3._pointerEvent) {
          _this3.touchStartX = event.originalEvent.touches[0].clientX;
        }
      };

      var move = function move(event) {
        // ensure swiping with one touch and not pinching
        if (event.originalEvent.touches && event.originalEvent.touches.length > 1) {
          _this3.touchDeltaX = 0;
        } else {
          _this3.touchDeltaX = event.originalEvent.touches[0].clientX - _this3.touchStartX;
        }
      };

      var end = function end(event) {
        if (_this3._pointerEvent && PointerType[event.originalEvent.pointerType.toUpperCase()]) {
          _this3.touchDeltaX = event.originalEvent.clientX - _this3.touchStartX;
        }

        _this3._handleSwipe();

        if (_this3._config.pause === 'hover') {
          // If it's a touch-enabled device, mouseenter/leave are fired as
          // part of the mouse compatibility events on first tap - the carousel
          // would stop cycling until user tapped out of it;
          // here, we listen for touchend, explicitly pause the carousel
          // (as if it's the second time we tap on it, mouseenter compat event
          // is NOT fired) and after a timeout (to allow for mouse compatibility
          // events to fire) we explicitly restart cycling
          _this3.pause();

          if (_this3.touchTimeout) {
            clearTimeout(_this3.touchTimeout);
          }

          _this3.touchTimeout = setTimeout(function (event) {
            return _this3.cycle(event);
          }, TOUCHEVENT_COMPAT_WAIT + _this3._config.interval);
        }
      };

      $(this._element.querySelectorAll(Selector$2.ITEM_IMG)).on(Event$2.DRAG_START, function (e) {
        return e.preventDefault();
      });

      if (this._pointerEvent) {
        $(this._element).on(Event$2.POINTERDOWN, function (event) {
          return start(event);
        });
        $(this._element).on(Event$2.POINTERUP, function (event) {
          return end(event);
        });

        this._element.classList.add(ClassName$2.POINTER_EVENT);
      } else {
        $(this._element).on(Event$2.TOUCHSTART, function (event) {
          return start(event);
        });
        $(this._element).on(Event$2.TOUCHMOVE, function (event) {
          return move(event);
        });
        $(this._element).on(Event$2.TOUCHEND, function (event) {
          return end(event);
        });
      }
    };

    _proto._keydown = function _keydown(event) {
      if (/input|textarea/i.test(event.target.tagName)) {
        return;
      }

      switch (event.which) {
        case ARROW_LEFT_KEYCODE:
          event.preventDefault();
          this.prev();
          break;

        case ARROW_RIGHT_KEYCODE:
          event.preventDefault();
          this.next();
          break;
      }
    };

    _proto._getItemIndex = function _getItemIndex(element) {
      this._items = element && element.parentNode ? [].slice.call(element.parentNode.querySelectorAll(Selector$2.ITEM)) : [];
      return this._items.indexOf(element);
    };

    _proto._getItemByDirection = function _getItemByDirection(direction, activeElement) {
      var isNextDirection = direction === Direction.NEXT;
      var isPrevDirection = direction === Direction.PREV;

      var activeIndex = this._getItemIndex(activeElement);

      var lastItemIndex = this._items.length - 1;
      var isGoingToWrap = isPrevDirection && activeIndex === 0 || isNextDirection && activeIndex === lastItemIndex;

      if (isGoingToWrap && !this._config.wrap) {
        return activeElement;
      }

      var delta = direction === Direction.PREV ? -1 : 1;
      var itemIndex = (activeIndex + delta) % this._items.length;
      return itemIndex === -1 ? this._items[this._items.length - 1] : this._items[itemIndex];
    };

    _proto._triggerSlideEvent = function _triggerSlideEvent(relatedTarget, eventDirectionName) {
      var targetIndex = this._getItemIndex(relatedTarget);

      var fromIndex = this._getItemIndex(this._element.querySelector(Selector$2.ACTIVE_ITEM));

      var slideEvent = $.Event(Event$2.SLIDE, {
        relatedTarget: relatedTarget,
        direction: eventDirectionName,
        from: fromIndex,
        to: targetIndex
      });
      $(this._element).trigger(slideEvent);
      return slideEvent;
    };

    _proto._setActiveIndicatorElement = function _setActiveIndicatorElement(element) {
      if (this._indicatorsElement) {
        var indicators = [].slice.call(this._indicatorsElement.querySelectorAll(Selector$2.ACTIVE));
        $(indicators).removeClass(ClassName$2.ACTIVE);

        var nextIndicator = this._indicatorsElement.children[this._getItemIndex(element)];

        if (nextIndicator) {
          $(nextIndicator).addClass(ClassName$2.ACTIVE);
        }
      }
    };

    _proto._slide = function _slide(direction, element) {
      var _this4 = this;

      var activeElement = this._element.querySelector(Selector$2.ACTIVE_ITEM);

      var activeElementIndex = this._getItemIndex(activeElement);

      var nextElement = element || activeElement && this._getItemByDirection(direction, activeElement);

      var nextElementIndex = this._getItemIndex(nextElement);

      var isCycling = Boolean(this._interval);
      var directionalClassName;
      var orderClassName;
      var eventDirectionName;

      if (direction === Direction.NEXT) {
        directionalClassName = ClassName$2.LEFT;
        orderClassName = ClassName$2.NEXT;
        eventDirectionName = Direction.LEFT;
      } else {
        directionalClassName = ClassName$2.RIGHT;
        orderClassName = ClassName$2.PREV;
        eventDirectionName = Direction.RIGHT;
      }

      if (nextElement && $(nextElement).hasClass(ClassName$2.ACTIVE)) {
        this._isSliding = false;
        return;
      }

      var slideEvent = this._triggerSlideEvent(nextElement, eventDirectionName);

      if (slideEvent.isDefaultPrevented()) {
        return;
      }

      if (!activeElement || !nextElement) {
        // Some weirdness is happening, so we bail
        return;
      }

      this._isSliding = true;

      if (isCycling) {
        this.pause();
      }

      this._setActiveIndicatorElement(nextElement);

      var slidEvent = $.Event(Event$2.SLID, {
        relatedTarget: nextElement,
        direction: eventDirectionName,
        from: activeElementIndex,
        to: nextElementIndex
      });

      if ($(this._element).hasClass(ClassName$2.SLIDE)) {
        $(nextElement).addClass(orderClassName);
        Util.reflow(nextElement);
        $(activeElement).addClass(directionalClassName);
        $(nextElement).addClass(directionalClassName);
        var nextElementInterval = parseInt(nextElement.getAttribute('data-interval'), 10);

        if (nextElementInterval) {
          this._config.defaultInterval = this._config.defaultInterval || this._config.interval;
          this._config.interval = nextElementInterval;
        } else {
          this._config.interval = this._config.defaultInterval || this._config.interval;
        }

        var transitionDuration = Util.getTransitionDurationFromElement(activeElement);
        $(activeElement).one(Util.TRANSITION_END, function () {
          $(nextElement).removeClass(directionalClassName + " " + orderClassName).addClass(ClassName$2.ACTIVE);
          $(activeElement).removeClass(ClassName$2.ACTIVE + " " + orderClassName + " " + directionalClassName);
          _this4._isSliding = false;
          setTimeout(function () {
            return $(_this4._element).trigger(slidEvent);
          }, 0);
        }).emulateTransitionEnd(transitionDuration);
      } else {
        $(activeElement).removeClass(ClassName$2.ACTIVE);
        $(nextElement).addClass(ClassName$2.ACTIVE);
        this._isSliding = false;
        $(this._element).trigger(slidEvent);
      }

      if (isCycling) {
        this.cycle();
      }
    } // Static
    ;

    Carousel._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY$2);

        var _config = _objectSpread2({}, Default, {}, $(this).data());

        if (_typeof(config) === 'object') {
          _config = _objectSpread2({}, _config, {}, config);
        }

        var action = typeof config === 'string' ? config : _config.slide;

        if (!data) {
          data = new Carousel(this, _config);
          $(this).data(DATA_KEY$2, data);
        }

        if (typeof config === 'number') {
          data.to(config);
        } else if (typeof action === 'string') {
          if (typeof data[action] === 'undefined') {
            throw new TypeError("No method named \"" + action + "\"");
          }

          data[action]();
        } else if (_config.interval && _config.ride) {
          data.pause();
          data.cycle();
        }
      });
    };

    Carousel._dataApiClickHandler = function _dataApiClickHandler(event) {
      var selector = Util.getSelectorFromElement(this);

      if (!selector) {
        return;
      }

      var target = $(selector)[0];

      if (!target || !$(target).hasClass(ClassName$2.CAROUSEL)) {
        return;
      }

      var config = _objectSpread2({}, $(target).data(), {}, $(this).data());

      var slideIndex = this.getAttribute('data-slide-to');

      if (slideIndex) {
        config.interval = false;
      }

      Carousel._jQueryInterface.call($(target), config);

      if (slideIndex) {
        $(target).data(DATA_KEY$2).to(slideIndex);
      }

      event.preventDefault();
    };

    _createClass(Carousel, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$2;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default;
      }
    }]);

    return Carousel;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $(document).on(Event$2.CLICK_DATA_API, Selector$2.DATA_SLIDE, Carousel._dataApiClickHandler);
  $(window).on(Event$2.LOAD_DATA_API, function () {
    var carousels = [].slice.call(document.querySelectorAll(Selector$2.DATA_RIDE));

    for (var i = 0, len = carousels.length; i < len; i++) {
      var $carousel = $(carousels[i]);

      Carousel._jQueryInterface.call($carousel, $carousel.data());
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME$2] = Carousel._jQueryInterface;
  $.fn[NAME$2].Constructor = Carousel;

  $.fn[NAME$2].noConflict = function () {
    $.fn[NAME$2] = JQUERY_NO_CONFLICT$2;
    return Carousel._jQueryInterface;
  };
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */


  var NAME$3 = 'collapse';
  var VERSION$3 = '4.4.1';
  var DATA_KEY$3 = 'bs.collapse';
  var EVENT_KEY$3 = "." + DATA_KEY$3;
  var DATA_API_KEY$3 = '.data-api';
  var JQUERY_NO_CONFLICT$3 = $.fn[NAME$3];
  var Default$1 = {
    toggle: true,
    parent: ''
  };
  var DefaultType$1 = {
    toggle: 'boolean',
    parent: '(string|element)'
  };
  var Event$3 = {
    SHOW: "show" + EVENT_KEY$3,
    SHOWN: "shown" + EVENT_KEY$3,
    HIDE: "hide" + EVENT_KEY$3,
    HIDDEN: "hidden" + EVENT_KEY$3,
    CLICK_DATA_API: "click" + EVENT_KEY$3 + DATA_API_KEY$3
  };
  var ClassName$3 = {
    SHOW: 'show',
    COLLAPSE: 'collapse',
    COLLAPSING: 'collapsing',
    COLLAPSED: 'collapsed'
  };
  var Dimension = {
    WIDTH: 'width',
    HEIGHT: 'height'
  };
  var Selector$3 = {
    ACTIVES: '.show, .collapsing',
    DATA_TOGGLE: '[data-toggle="collapse"]'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Collapse =
  /*#__PURE__*/
  function () {
    function Collapse(element, config) {
      this._isTransitioning = false;
      this._element = element;
      this._config = this._getConfig(config);
      this._triggerArray = [].slice.call(document.querySelectorAll("[data-toggle=\"collapse\"][href=\"#" + element.id + "\"]," + ("[data-toggle=\"collapse\"][data-target=\"#" + element.id + "\"]")));
      var toggleList = [].slice.call(document.querySelectorAll(Selector$3.DATA_TOGGLE));

      for (var i = 0, len = toggleList.length; i < len; i++) {
        var elem = toggleList[i];
        var selector = Util.getSelectorFromElement(elem);
        var filterElement = [].slice.call(document.querySelectorAll(selector)).filter(function (foundElem) {
          return foundElem === element;
        });

        if (selector !== null && filterElement.length > 0) {
          this._selector = selector;

          this._triggerArray.push(elem);
        }
      }

      this._parent = this._config.parent ? this._getParent() : null;

      if (!this._config.parent) {
        this._addAriaAndCollapsedClass(this._element, this._triggerArray);
      }

      if (this._config.toggle) {
        this.toggle();
      }
    } // Getters


    var _proto = Collapse.prototype; // Public

    _proto.toggle = function toggle() {
      if ($(this._element).hasClass(ClassName$3.SHOW)) {
        this.hide();
      } else {
        this.show();
      }
    };

    _proto.show = function show() {
      var _this = this;

      if (this._isTransitioning || $(this._element).hasClass(ClassName$3.SHOW)) {
        return;
      }

      var actives;
      var activesData;

      if (this._parent) {
        actives = [].slice.call(this._parent.querySelectorAll(Selector$3.ACTIVES)).filter(function (elem) {
          if (typeof _this._config.parent === 'string') {
            return elem.getAttribute('data-parent') === _this._config.parent;
          }

          return elem.classList.contains(ClassName$3.COLLAPSE);
        });

        if (actives.length === 0) {
          actives = null;
        }
      }

      if (actives) {
        activesData = $(actives).not(this._selector).data(DATA_KEY$3);

        if (activesData && activesData._isTransitioning) {
          return;
        }
      }

      var startEvent = $.Event(Event$3.SHOW);
      $(this._element).trigger(startEvent);

      if (startEvent.isDefaultPrevented()) {
        return;
      }

      if (actives) {
        Collapse._jQueryInterface.call($(actives).not(this._selector), 'hide');

        if (!activesData) {
          $(actives).data(DATA_KEY$3, null);
        }
      }

      var dimension = this._getDimension();

      $(this._element).removeClass(ClassName$3.COLLAPSE).addClass(ClassName$3.COLLAPSING);
      this._element.style[dimension] = 0;

      if (this._triggerArray.length) {
        $(this._triggerArray).removeClass(ClassName$3.COLLAPSED).attr('aria-expanded', true);
      }

      this.setTransitioning(true);

      var complete = function complete() {
        $(_this._element).removeClass(ClassName$3.COLLAPSING).addClass(ClassName$3.COLLAPSE).addClass(ClassName$3.SHOW);
        _this._element.style[dimension] = '';

        _this.setTransitioning(false);

        $(_this._element).trigger(Event$3.SHOWN);
      };

      var capitalizedDimension = dimension[0].toUpperCase() + dimension.slice(1);
      var scrollSize = "scroll" + capitalizedDimension;
      var transitionDuration = Util.getTransitionDurationFromElement(this._element);
      $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      this._element.style[dimension] = this._element[scrollSize] + "px";
    };

    _proto.hide = function hide() {
      var _this2 = this;

      if (this._isTransitioning || !$(this._element).hasClass(ClassName$3.SHOW)) {
        return;
      }

      var startEvent = $.Event(Event$3.HIDE);
      $(this._element).trigger(startEvent);

      if (startEvent.isDefaultPrevented()) {
        return;
      }

      var dimension = this._getDimension();

      this._element.style[dimension] = this._element.getBoundingClientRect()[dimension] + "px";
      Util.reflow(this._element);
      $(this._element).addClass(ClassName$3.COLLAPSING).removeClass(ClassName$3.COLLAPSE).removeClass(ClassName$3.SHOW);
      var triggerArrayLength = this._triggerArray.length;

      if (triggerArrayLength > 0) {
        for (var i = 0; i < triggerArrayLength; i++) {
          var trigger = this._triggerArray[i];
          var selector = Util.getSelectorFromElement(trigger);

          if (selector !== null) {
            var $elem = $([].slice.call(document.querySelectorAll(selector)));

            if (!$elem.hasClass(ClassName$3.SHOW)) {
              $(trigger).addClass(ClassName$3.COLLAPSED).attr('aria-expanded', false);
            }
          }
        }
      }

      this.setTransitioning(true);

      var complete = function complete() {
        _this2.setTransitioning(false);

        $(_this2._element).removeClass(ClassName$3.COLLAPSING).addClass(ClassName$3.COLLAPSE).trigger(Event$3.HIDDEN);
      };

      this._element.style[dimension] = '';
      var transitionDuration = Util.getTransitionDurationFromElement(this._element);
      $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
    };

    _proto.setTransitioning = function setTransitioning(isTransitioning) {
      this._isTransitioning = isTransitioning;
    };

    _proto.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY$3);
      this._config = null;
      this._parent = null;
      this._element = null;
      this._triggerArray = null;
      this._isTransitioning = null;
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _objectSpread2({}, Default$1, {}, config);
      config.toggle = Boolean(config.toggle); // Coerce string values

      Util.typeCheckConfig(NAME$3, config, DefaultType$1);
      return config;
    };

    _proto._getDimension = function _getDimension() {
      var hasWidth = $(this._element).hasClass(Dimension.WIDTH);
      return hasWidth ? Dimension.WIDTH : Dimension.HEIGHT;
    };

    _proto._getParent = function _getParent() {
      var _this3 = this;

      var parent;

      if (Util.isElement(this._config.parent)) {
        parent = this._config.parent; // It's a jQuery object

        if (typeof this._config.parent.jquery !== 'undefined') {
          parent = this._config.parent[0];
        }
      } else {
        parent = document.querySelector(this._config.parent);
      }

      var selector = "[data-toggle=\"collapse\"][data-parent=\"" + this._config.parent + "\"]";
      var children = [].slice.call(parent.querySelectorAll(selector));
      $(children).each(function (i, element) {
        _this3._addAriaAndCollapsedClass(Collapse._getTargetFromElement(element), [element]);
      });
      return parent;
    };

    _proto._addAriaAndCollapsedClass = function _addAriaAndCollapsedClass(element, triggerArray) {
      var isOpen = $(element).hasClass(ClassName$3.SHOW);

      if (triggerArray.length) {
        $(triggerArray).toggleClass(ClassName$3.COLLAPSED, !isOpen).attr('aria-expanded', isOpen);
      }
    } // Static
    ;

    Collapse._getTargetFromElement = function _getTargetFromElement(element) {
      var selector = Util.getSelectorFromElement(element);
      return selector ? document.querySelector(selector) : null;
    };

    Collapse._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $this = $(this);
        var data = $this.data(DATA_KEY$3);

        var _config = _objectSpread2({}, Default$1, {}, $this.data(), {}, _typeof(config) === 'object' && config ? config : {});

        if (!data && _config.toggle && /show|hide/.test(config)) {
          _config.toggle = false;
        }

        if (!data) {
          data = new Collapse(this, _config);
          $this.data(DATA_KEY$3, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Collapse, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$3;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$1;
      }
    }]);

    return Collapse;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $(document).on(Event$3.CLICK_DATA_API, Selector$3.DATA_TOGGLE, function (event) {
    // preventDefault only for <a> elements (which change the URL) not inside the collapsible element
    if (event.currentTarget.tagName === 'A') {
      event.preventDefault();
    }

    var $trigger = $(this);
    var selector = Util.getSelectorFromElement(this);
    var selectors = [].slice.call(document.querySelectorAll(selector));
    $(selectors).each(function () {
      var $target = $(this);
      var data = $target.data(DATA_KEY$3);
      var config = data ? 'toggle' : $trigger.data();

      Collapse._jQueryInterface.call($target, config);
    });
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME$3] = Collapse._jQueryInterface;
  $.fn[NAME$3].Constructor = Collapse;

  $.fn[NAME$3].noConflict = function () {
    $.fn[NAME$3] = JQUERY_NO_CONFLICT$3;
    return Collapse._jQueryInterface;
  };
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */


  var NAME$4 = 'dropdown';
  var VERSION$4 = '4.4.1';
  var DATA_KEY$4 = 'bs.dropdown';
  var EVENT_KEY$4 = "." + DATA_KEY$4;
  var DATA_API_KEY$4 = '.data-api';
  var JQUERY_NO_CONFLICT$4 = $.fn[NAME$4];
  var ESCAPE_KEYCODE = 27; // KeyboardEvent.which value for Escape (Esc) key

  var SPACE_KEYCODE = 32; // KeyboardEvent.which value for space key

  var TAB_KEYCODE = 9; // KeyboardEvent.which value for tab key

  var ARROW_UP_KEYCODE = 38; // KeyboardEvent.which value for up arrow key

  var ARROW_DOWN_KEYCODE = 40; // KeyboardEvent.which value for down arrow key

  var RIGHT_MOUSE_BUTTON_WHICH = 3; // MouseEvent.which value for the right button (assuming a right-handed mouse)

  var REGEXP_KEYDOWN = new RegExp(ARROW_UP_KEYCODE + "|" + ARROW_DOWN_KEYCODE + "|" + ESCAPE_KEYCODE);
  var Event$4 = {
    HIDE: "hide" + EVENT_KEY$4,
    HIDDEN: "hidden" + EVENT_KEY$4,
    SHOW: "show" + EVENT_KEY$4,
    SHOWN: "shown" + EVENT_KEY$4,
    CLICK: "click" + EVENT_KEY$4,
    CLICK_DATA_API: "click" + EVENT_KEY$4 + DATA_API_KEY$4,
    KEYDOWN_DATA_API: "keydown" + EVENT_KEY$4 + DATA_API_KEY$4,
    KEYUP_DATA_API: "keyup" + EVENT_KEY$4 + DATA_API_KEY$4
  };
  var ClassName$4 = {
    DISABLED: 'disabled',
    SHOW: 'show',
    DROPUP: 'dropup',
    DROPRIGHT: 'dropright',
    DROPLEFT: 'dropleft',
    MENURIGHT: 'dropdown-menu-right',
    MENULEFT: 'dropdown-menu-left',
    POSITION_STATIC: 'position-static'
  };
  var Selector$4 = {
    DATA_TOGGLE: '[data-toggle="dropdown"]',
    FORM_CHILD: '.dropdown form',
    MENU: '.dropdown-menu',
    NAVBAR_NAV: '.navbar-nav',
    VISIBLE_ITEMS: '.dropdown-menu .dropdown-item:not(.disabled):not(:disabled)'
  };
  var AttachmentMap = {
    TOP: 'top-start',
    TOPEND: 'top-end',
    BOTTOM: 'bottom-start',
    BOTTOMEND: 'bottom-end',
    RIGHT: 'right-start',
    RIGHTEND: 'right-end',
    LEFT: 'left-start',
    LEFTEND: 'left-end'
  };
  var Default$2 = {
    offset: 0,
    flip: true,
    boundary: 'scrollParent',
    reference: 'toggle',
    display: 'dynamic',
    popperConfig: null
  };
  var DefaultType$2 = {
    offset: '(number|string|function)',
    flip: 'boolean',
    boundary: '(string|element)',
    reference: '(string|element)',
    display: 'string',
    popperConfig: '(null|object)'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Dropdown =
  /*#__PURE__*/
  function () {
    function Dropdown(element, config) {
      this._element = element;
      this._popper = null;
      this._config = this._getConfig(config);
      this._menu = this._getMenuElement();
      this._inNavbar = this._detectNavbar();

      this._addEventListeners();
    } // Getters


    var _proto = Dropdown.prototype; // Public

    _proto.toggle = function toggle() {
      if (this._element.disabled || $(this._element).hasClass(ClassName$4.DISABLED)) {
        return;
      }

      var isActive = $(this._menu).hasClass(ClassName$4.SHOW);

      Dropdown._clearMenus();

      if (isActive) {
        return;
      }

      this.show(true);
    };

    _proto.show = function show(usePopper) {
      if (usePopper === void 0) {
        usePopper = false;
      }

      if (this._element.disabled || $(this._element).hasClass(ClassName$4.DISABLED) || $(this._menu).hasClass(ClassName$4.SHOW)) {
        return;
      }

      var relatedTarget = {
        relatedTarget: this._element
      };
      var showEvent = $.Event(Event$4.SHOW, relatedTarget);

      var parent = Dropdown._getParentFromElement(this._element);

      $(parent).trigger(showEvent);

      if (showEvent.isDefaultPrevented()) {
        return;
      } // Disable totally Popper.js for Dropdown in Navbar


      if (!this._inNavbar && usePopper) {
        /**
         * Check for Popper dependency
         * Popper - https://popper.js.org
         */
        if (typeof Popper === 'undefined') {
          throw new TypeError('Bootstrap\'s dropdowns require Popper.js (https://popper.js.org/)');
        }

        var referenceElement = this._element;

        if (this._config.reference === 'parent') {
          referenceElement = parent;
        } else if (Util.isElement(this._config.reference)) {
          referenceElement = this._config.reference; // Check if it's jQuery element

          if (typeof this._config.reference.jquery !== 'undefined') {
            referenceElement = this._config.reference[0];
          }
        } // If boundary is not `scrollParent`, then set position to `static`
        // to allow the menu to "escape" the scroll parent's boundaries
        // https://github.com/twbs/bootstrap/issues/24251


        if (this._config.boundary !== 'scrollParent') {
          $(parent).addClass(ClassName$4.POSITION_STATIC);
        }

        this._popper = new Popper(referenceElement, this._menu, this._getPopperConfig());
      } // If this is a touch-enabled device we add extra
      // empty mouseover listeners to the body's immediate children;
      // only needed because of broken event delegation on iOS
      // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html


      if ('ontouchstart' in document.documentElement && $(parent).closest(Selector$4.NAVBAR_NAV).length === 0) {
        $(document.body).children().on('mouseover', null, $.noop);
      }

      this._element.focus();

      this._element.setAttribute('aria-expanded', true);

      $(this._menu).toggleClass(ClassName$4.SHOW);
      $(parent).toggleClass(ClassName$4.SHOW).trigger($.Event(Event$4.SHOWN, relatedTarget));
    };

    _proto.hide = function hide() {
      if (this._element.disabled || $(this._element).hasClass(ClassName$4.DISABLED) || !$(this._menu).hasClass(ClassName$4.SHOW)) {
        return;
      }

      var relatedTarget = {
        relatedTarget: this._element
      };
      var hideEvent = $.Event(Event$4.HIDE, relatedTarget);

      var parent = Dropdown._getParentFromElement(this._element);

      $(parent).trigger(hideEvent);

      if (hideEvent.isDefaultPrevented()) {
        return;
      }

      if (this._popper) {
        this._popper.destroy();
      }

      $(this._menu).toggleClass(ClassName$4.SHOW);
      $(parent).toggleClass(ClassName$4.SHOW).trigger($.Event(Event$4.HIDDEN, relatedTarget));
    };

    _proto.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY$4);
      $(this._element).off(EVENT_KEY$4);
      this._element = null;
      this._menu = null;

      if (this._popper !== null) {
        this._popper.destroy();

        this._popper = null;
      }
    };

    _proto.update = function update() {
      this._inNavbar = this._detectNavbar();

      if (this._popper !== null) {
        this._popper.scheduleUpdate();
      }
    } // Private
    ;

    _proto._addEventListeners = function _addEventListeners() {
      var _this = this;

      $(this._element).on(Event$4.CLICK, function (event) {
        event.preventDefault();
        event.stopPropagation();

        _this.toggle();
      });
    };

    _proto._getConfig = function _getConfig(config) {
      config = _objectSpread2({}, this.constructor.Default, {}, $(this._element).data(), {}, config);
      Util.typeCheckConfig(NAME$4, config, this.constructor.DefaultType);
      return config;
    };

    _proto._getMenuElement = function _getMenuElement() {
      if (!this._menu) {
        var parent = Dropdown._getParentFromElement(this._element);

        if (parent) {
          this._menu = parent.querySelector(Selector$4.MENU);
        }
      }

      return this._menu;
    };

    _proto._getPlacement = function _getPlacement() {
      var $parentDropdown = $(this._element.parentNode);
      var placement = AttachmentMap.BOTTOM; // Handle dropup

      if ($parentDropdown.hasClass(ClassName$4.DROPUP)) {
        placement = AttachmentMap.TOP;

        if ($(this._menu).hasClass(ClassName$4.MENURIGHT)) {
          placement = AttachmentMap.TOPEND;
        }
      } else if ($parentDropdown.hasClass(ClassName$4.DROPRIGHT)) {
        placement = AttachmentMap.RIGHT;
      } else if ($parentDropdown.hasClass(ClassName$4.DROPLEFT)) {
        placement = AttachmentMap.LEFT;
      } else if ($(this._menu).hasClass(ClassName$4.MENURIGHT)) {
        placement = AttachmentMap.BOTTOMEND;
      }

      return placement;
    };

    _proto._detectNavbar = function _detectNavbar() {
      return $(this._element).closest('.navbar').length > 0;
    };

    _proto._getOffset = function _getOffset() {
      var _this2 = this;

      var offset = {};

      if (typeof this._config.offset === 'function') {
        offset.fn = function (data) {
          data.offsets = _objectSpread2({}, data.offsets, {}, _this2._config.offset(data.offsets, _this2._element) || {});
          return data;
        };
      } else {
        offset.offset = this._config.offset;
      }

      return offset;
    };

    _proto._getPopperConfig = function _getPopperConfig() {
      var popperConfig = {
        placement: this._getPlacement(),
        modifiers: {
          offset: this._getOffset(),
          flip: {
            enabled: this._config.flip
          },
          preventOverflow: {
            boundariesElement: this._config.boundary
          }
        }
      }; // Disable Popper.js if we have a static display

      if (this._config.display === 'static') {
        popperConfig.modifiers.applyStyle = {
          enabled: false
        };
      }

      return _objectSpread2({}, popperConfig, {}, this._config.popperConfig);
    } // Static
    ;

    Dropdown._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY$4);

        var _config = _typeof(config) === 'object' ? config : null;

        if (!data) {
          data = new Dropdown(this, _config);
          $(this).data(DATA_KEY$4, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    Dropdown._clearMenus = function _clearMenus(event) {
      if (event && (event.which === RIGHT_MOUSE_BUTTON_WHICH || event.type === 'keyup' && event.which !== TAB_KEYCODE)) {
        return;
      }

      var toggles = [].slice.call(document.querySelectorAll(Selector$4.DATA_TOGGLE));

      for (var i = 0, len = toggles.length; i < len; i++) {
        var parent = Dropdown._getParentFromElement(toggles[i]);

        var context = $(toggles[i]).data(DATA_KEY$4);
        var relatedTarget = {
          relatedTarget: toggles[i]
        };

        if (event && event.type === 'click') {
          relatedTarget.clickEvent = event;
        }

        if (!context) {
          continue;
        }

        var dropdownMenu = context._menu;

        if (!$(parent).hasClass(ClassName$4.SHOW)) {
          continue;
        }

        if (event && (event.type === 'click' && /input|textarea/i.test(event.target.tagName) || event.type === 'keyup' && event.which === TAB_KEYCODE) && $.contains(parent, event.target)) {
          continue;
        }

        var hideEvent = $.Event(Event$4.HIDE, relatedTarget);
        $(parent).trigger(hideEvent);

        if (hideEvent.isDefaultPrevented()) {
          continue;
        } // If this is a touch-enabled device we remove the extra
        // empty mouseover listeners we added for iOS support


        if ('ontouchstart' in document.documentElement) {
          $(document.body).children().off('mouseover', null, $.noop);
        }

        toggles[i].setAttribute('aria-expanded', 'false');

        if (context._popper) {
          context._popper.destroy();
        }

        $(dropdownMenu).removeClass(ClassName$4.SHOW);
        $(parent).removeClass(ClassName$4.SHOW).trigger($.Event(Event$4.HIDDEN, relatedTarget));
      }
    };

    Dropdown._getParentFromElement = function _getParentFromElement(element) {
      var parent;
      var selector = Util.getSelectorFromElement(element);

      if (selector) {
        parent = document.querySelector(selector);
      }

      return parent || element.parentNode;
    } // eslint-disable-next-line complexity
    ;

    Dropdown._dataApiKeydownHandler = function _dataApiKeydownHandler(event) {
      // If not input/textarea:
      //  - And not a key in REGEXP_KEYDOWN => not a dropdown command
      // If input/textarea:
      //  - If space key => not a dropdown command
      //  - If key is other than escape
      //    - If key is not up or down => not a dropdown command
      //    - If trigger inside the menu => not a dropdown command
      if (/input|textarea/i.test(event.target.tagName) ? event.which === SPACE_KEYCODE || event.which !== ESCAPE_KEYCODE && (event.which !== ARROW_DOWN_KEYCODE && event.which !== ARROW_UP_KEYCODE || $(event.target).closest(Selector$4.MENU).length) : !REGEXP_KEYDOWN.test(event.which)) {
        return;
      }

      event.preventDefault();
      event.stopPropagation();

      if (this.disabled || $(this).hasClass(ClassName$4.DISABLED)) {
        return;
      }

      var parent = Dropdown._getParentFromElement(this);

      var isActive = $(parent).hasClass(ClassName$4.SHOW);

      if (!isActive && event.which === ESCAPE_KEYCODE) {
        return;
      }

      if (!isActive || isActive && (event.which === ESCAPE_KEYCODE || event.which === SPACE_KEYCODE)) {
        if (event.which === ESCAPE_KEYCODE) {
          var toggle = parent.querySelector(Selector$4.DATA_TOGGLE);
          $(toggle).trigger('focus');
        }

        $(this).trigger('click');
        return;
      }

      var items = [].slice.call(parent.querySelectorAll(Selector$4.VISIBLE_ITEMS)).filter(function (item) {
        return $(item).is(':visible');
      });

      if (items.length === 0) {
        return;
      }

      var index = items.indexOf(event.target);

      if (event.which === ARROW_UP_KEYCODE && index > 0) {
        // Up
        index--;
      }

      if (event.which === ARROW_DOWN_KEYCODE && index < items.length - 1) {
        // Down
        index++;
      }

      if (index < 0) {
        index = 0;
      }

      items[index].focus();
    };

    _createClass(Dropdown, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$4;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$2;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$2;
      }
    }]);

    return Dropdown;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $(document).on(Event$4.KEYDOWN_DATA_API, Selector$4.DATA_TOGGLE, Dropdown._dataApiKeydownHandler).on(Event$4.KEYDOWN_DATA_API, Selector$4.MENU, Dropdown._dataApiKeydownHandler).on(Event$4.CLICK_DATA_API + " " + Event$4.KEYUP_DATA_API, Dropdown._clearMenus).on(Event$4.CLICK_DATA_API, Selector$4.DATA_TOGGLE, function (event) {
    event.preventDefault();
    event.stopPropagation();

    Dropdown._jQueryInterface.call($(this), 'toggle');
  }).on(Event$4.CLICK_DATA_API, Selector$4.FORM_CHILD, function (e) {
    e.stopPropagation();
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME$4] = Dropdown._jQueryInterface;
  $.fn[NAME$4].Constructor = Dropdown;

  $.fn[NAME$4].noConflict = function () {
    $.fn[NAME$4] = JQUERY_NO_CONFLICT$4;
    return Dropdown._jQueryInterface;
  };
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */


  var NAME$5 = 'modal';
  var VERSION$5 = '4.4.1';
  var DATA_KEY$5 = 'bs.modal';
  var EVENT_KEY$5 = "." + DATA_KEY$5;
  var DATA_API_KEY$5 = '.data-api';
  var JQUERY_NO_CONFLICT$5 = $.fn[NAME$5];
  var ESCAPE_KEYCODE$1 = 27; // KeyboardEvent.which value for Escape (Esc) key

  var Default$3 = {
    backdrop: true,
    keyboard: true,
    focus: true,
    show: true
  };
  var DefaultType$3 = {
    backdrop: '(boolean|string)',
    keyboard: 'boolean',
    focus: 'boolean',
    show: 'boolean'
  };
  var Event$5 = {
    HIDE: "hide" + EVENT_KEY$5,
    HIDE_PREVENTED: "hidePrevented" + EVENT_KEY$5,
    HIDDEN: "hidden" + EVENT_KEY$5,
    SHOW: "show" + EVENT_KEY$5,
    SHOWN: "shown" + EVENT_KEY$5,
    FOCUSIN: "focusin" + EVENT_KEY$5,
    RESIZE: "resize" + EVENT_KEY$5,
    CLICK_DISMISS: "click.dismiss" + EVENT_KEY$5,
    KEYDOWN_DISMISS: "keydown.dismiss" + EVENT_KEY$5,
    MOUSEUP_DISMISS: "mouseup.dismiss" + EVENT_KEY$5,
    MOUSEDOWN_DISMISS: "mousedown.dismiss" + EVENT_KEY$5,
    CLICK_DATA_API: "click" + EVENT_KEY$5 + DATA_API_KEY$5
  };
  var ClassName$5 = {
    SCROLLABLE: 'modal-dialog-scrollable',
    SCROLLBAR_MEASURER: 'modal-scrollbar-measure',
    BACKDROP: 'modal-backdrop',
    OPEN: 'modal-open',
    FADE: 'fade',
    SHOW: 'show',
    STATIC: 'modal-static'
  };
  var Selector$5 = {
    DIALOG: '.modal-dialog',
    MODAL_BODY: '.modal-body',
    DATA_TOGGLE: '[data-toggle="modal"]',
    DATA_DISMISS: '[data-dismiss="modal"]',
    FIXED_CONTENT: '.fixed-top, .fixed-bottom, .is-fixed, .sticky-top',
    STICKY_CONTENT: '.sticky-top'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Modal =
  /*#__PURE__*/
  function () {
    function Modal(element, config) {
      this._config = this._getConfig(config);
      this._element = element;
      this._dialog = element.querySelector(Selector$5.DIALOG);
      this._backdrop = null;
      this._isShown = false;
      this._isBodyOverflowing = false;
      this._ignoreBackdropClick = false;
      this._isTransitioning = false;
      this._scrollbarWidth = 0;
    } // Getters


    var _proto = Modal.prototype; // Public

    _proto.toggle = function toggle(relatedTarget) {
      return this._isShown ? this.hide() : this.show(relatedTarget);
    };

    _proto.show = function show(relatedTarget) {
      var _this = this;

      if (this._isShown || this._isTransitioning) {
        return;
      }

      if ($(this._element).hasClass(ClassName$5.FADE)) {
        this._isTransitioning = true;
      }

      var showEvent = $.Event(Event$5.SHOW, {
        relatedTarget: relatedTarget
      });
      $(this._element).trigger(showEvent);

      if (this._isShown || showEvent.isDefaultPrevented()) {
        return;
      }

      this._isShown = true;

      this._checkScrollbar();

      this._setScrollbar();

      this._adjustDialog();

      this._setEscapeEvent();

      this._setResizeEvent();

      $(this._element).on(Event$5.CLICK_DISMISS, Selector$5.DATA_DISMISS, function (event) {
        return _this.hide(event);
      });
      $(this._dialog).on(Event$5.MOUSEDOWN_DISMISS, function () {
        $(_this._element).one(Event$5.MOUSEUP_DISMISS, function (event) {
          if ($(event.target).is(_this._element)) {
            _this._ignoreBackdropClick = true;
          }
        });
      });

      this._showBackdrop(function () {
        return _this._showElement(relatedTarget);
      });
    };

    _proto.hide = function hide(event) {
      var _this2 = this;

      if (event) {
        event.preventDefault();
      }

      if (!this._isShown || this._isTransitioning) {
        return;
      }

      var hideEvent = $.Event(Event$5.HIDE);
      $(this._element).trigger(hideEvent);

      if (!this._isShown || hideEvent.isDefaultPrevented()) {
        return;
      }

      this._isShown = false;
      var transition = $(this._element).hasClass(ClassName$5.FADE);

      if (transition) {
        this._isTransitioning = true;
      }

      this._setEscapeEvent();

      this._setResizeEvent();

      $(document).off(Event$5.FOCUSIN);
      $(this._element).removeClass(ClassName$5.SHOW);
      $(this._element).off(Event$5.CLICK_DISMISS);
      $(this._dialog).off(Event$5.MOUSEDOWN_DISMISS);

      if (transition) {
        var transitionDuration = Util.getTransitionDurationFromElement(this._element);
        $(this._element).one(Util.TRANSITION_END, function (event) {
          return _this2._hideModal(event);
        }).emulateTransitionEnd(transitionDuration);
      } else {
        this._hideModal();
      }
    };

    _proto.dispose = function dispose() {
      [window, this._element, this._dialog].forEach(function (htmlElement) {
        return $(htmlElement).off(EVENT_KEY$5);
      });
      /**
       * `document` has 2 events `Event.FOCUSIN` and `Event.CLICK_DATA_API`
       * Do not move `document` in `htmlElements` array
       * It will remove `Event.CLICK_DATA_API` event that should remain
       */

      $(document).off(Event$5.FOCUSIN);
      $.removeData(this._element, DATA_KEY$5);
      this._config = null;
      this._element = null;
      this._dialog = null;
      this._backdrop = null;
      this._isShown = null;
      this._isBodyOverflowing = null;
      this._ignoreBackdropClick = null;
      this._isTransitioning = null;
      this._scrollbarWidth = null;
    };

    _proto.handleUpdate = function handleUpdate() {
      this._adjustDialog();
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _objectSpread2({}, Default$3, {}, config);
      Util.typeCheckConfig(NAME$5, config, DefaultType$3);
      return config;
    };

    _proto._triggerBackdropTransition = function _triggerBackdropTransition() {
      var _this3 = this;

      if (this._config.backdrop === 'static') {
        var hideEventPrevented = $.Event(Event$5.HIDE_PREVENTED);
        $(this._element).trigger(hideEventPrevented);

        if (hideEventPrevented.defaultPrevented) {
          return;
        }

        this._element.classList.add(ClassName$5.STATIC);

        var modalTransitionDuration = Util.getTransitionDurationFromElement(this._element);
        $(this._element).one(Util.TRANSITION_END, function () {
          _this3._element.classList.remove(ClassName$5.STATIC);
        }).emulateTransitionEnd(modalTransitionDuration);

        this._element.focus();
      } else {
        this.hide();
      }
    };

    _proto._showElement = function _showElement(relatedTarget) {
      var _this4 = this;

      var transition = $(this._element).hasClass(ClassName$5.FADE);
      var modalBody = this._dialog ? this._dialog.querySelector(Selector$5.MODAL_BODY) : null;

      if (!this._element.parentNode || this._element.parentNode.nodeType !== Node.ELEMENT_NODE) {
        // Don't move modal's DOM position
        document.body.appendChild(this._element);
      }

      this._element.style.display = 'block';

      this._element.removeAttribute('aria-hidden');

      this._element.setAttribute('aria-modal', true);

      if ($(this._dialog).hasClass(ClassName$5.SCROLLABLE) && modalBody) {
        modalBody.scrollTop = 0;
      } else {
        this._element.scrollTop = 0;
      }

      if (transition) {
        Util.reflow(this._element);
      }

      $(this._element).addClass(ClassName$5.SHOW);

      if (this._config.focus) {
        this._enforceFocus();
      }

      var shownEvent = $.Event(Event$5.SHOWN, {
        relatedTarget: relatedTarget
      });

      var transitionComplete = function transitionComplete() {
        if (_this4._config.focus) {
          _this4._element.focus();
        }

        _this4._isTransitioning = false;
        $(_this4._element).trigger(shownEvent);
      };

      if (transition) {
        var transitionDuration = Util.getTransitionDurationFromElement(this._dialog);
        $(this._dialog).one(Util.TRANSITION_END, transitionComplete).emulateTransitionEnd(transitionDuration);
      } else {
        transitionComplete();
      }
    };

    _proto._enforceFocus = function _enforceFocus() {
      var _this5 = this;

      $(document).off(Event$5.FOCUSIN) // Guard against infinite focus loop
      .on(Event$5.FOCUSIN, function (event) {
        if (document !== event.target && _this5._element !== event.target && $(_this5._element).has(event.target).length === 0) {
          _this5._element.focus();
        }
      });
    };

    _proto._setEscapeEvent = function _setEscapeEvent() {
      var _this6 = this;

      if (this._isShown && this._config.keyboard) {
        $(this._element).on(Event$5.KEYDOWN_DISMISS, function (event) {
          if (event.which === ESCAPE_KEYCODE$1) {
            _this6._triggerBackdropTransition();
          }
        });
      } else if (!this._isShown) {
        $(this._element).off(Event$5.KEYDOWN_DISMISS);
      }
    };

    _proto._setResizeEvent = function _setResizeEvent() {
      var _this7 = this;

      if (this._isShown) {
        $(window).on(Event$5.RESIZE, function (event) {
          return _this7.handleUpdate(event);
        });
      } else {
        $(window).off(Event$5.RESIZE);
      }
    };

    _proto._hideModal = function _hideModal() {
      var _this8 = this;

      this._element.style.display = 'none';

      this._element.setAttribute('aria-hidden', true);

      this._element.removeAttribute('aria-modal');

      this._isTransitioning = false;

      this._showBackdrop(function () {
        $(document.body).removeClass(ClassName$5.OPEN);

        _this8._resetAdjustments();

        _this8._resetScrollbar();

        $(_this8._element).trigger(Event$5.HIDDEN);
      });
    };

    _proto._removeBackdrop = function _removeBackdrop() {
      if (this._backdrop) {
        $(this._backdrop).remove();
        this._backdrop = null;
      }
    };

    _proto._showBackdrop = function _showBackdrop(callback) {
      var _this9 = this;

      var animate = $(this._element).hasClass(ClassName$5.FADE) ? ClassName$5.FADE : '';

      if (this._isShown && this._config.backdrop) {
        this._backdrop = document.createElement('div');
        this._backdrop.className = ClassName$5.BACKDROP;

        if (animate) {
          this._backdrop.classList.add(animate);
        }

        $(this._backdrop).appendTo(document.body);
        $(this._element).on(Event$5.CLICK_DISMISS, function (event) {
          if (_this9._ignoreBackdropClick) {
            _this9._ignoreBackdropClick = false;
            return;
          }

          if (event.target !== event.currentTarget) {
            return;
          }

          _this9._triggerBackdropTransition();
        });

        if (animate) {
          Util.reflow(this._backdrop);
        }

        $(this._backdrop).addClass(ClassName$5.SHOW);

        if (!callback) {
          return;
        }

        if (!animate) {
          callback();
          return;
        }

        var backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);
        $(this._backdrop).one(Util.TRANSITION_END, callback).emulateTransitionEnd(backdropTransitionDuration);
      } else if (!this._isShown && this._backdrop) {
        $(this._backdrop).removeClass(ClassName$5.SHOW);

        var callbackRemove = function callbackRemove() {
          _this9._removeBackdrop();

          if (callback) {
            callback();
          }
        };

        if ($(this._element).hasClass(ClassName$5.FADE)) {
          var _backdropTransitionDuration = Util.getTransitionDurationFromElement(this._backdrop);

          $(this._backdrop).one(Util.TRANSITION_END, callbackRemove).emulateTransitionEnd(_backdropTransitionDuration);
        } else {
          callbackRemove();
        }
      } else if (callback) {
        callback();
      }
    } // ----------------------------------------------------------------------
    // the following methods are used to handle overflowing modals
    // todo (fat): these should probably be refactored out of modal.js
    // ----------------------------------------------------------------------
    ;

    _proto._adjustDialog = function _adjustDialog() {
      var isModalOverflowing = this._element.scrollHeight > document.documentElement.clientHeight;

      if (!this._isBodyOverflowing && isModalOverflowing) {
        this._element.style.paddingLeft = this._scrollbarWidth + "px";
      }

      if (this._isBodyOverflowing && !isModalOverflowing) {
        this._element.style.paddingRight = this._scrollbarWidth + "px";
      }
    };

    _proto._resetAdjustments = function _resetAdjustments() {
      this._element.style.paddingLeft = '';
      this._element.style.paddingRight = '';
    };

    _proto._checkScrollbar = function _checkScrollbar() {
      var rect = document.body.getBoundingClientRect();
      this._isBodyOverflowing = rect.left + rect.right < window.innerWidth;
      this._scrollbarWidth = this._getScrollbarWidth();
    };

    _proto._setScrollbar = function _setScrollbar() {
      var _this10 = this;

      if (this._isBodyOverflowing) {
        // Note: DOMNode.style.paddingRight returns the actual value or '' if not set
        //   while $(DOMNode).css('padding-right') returns the calculated value or 0 if not set
        var fixedContent = [].slice.call(document.querySelectorAll(Selector$5.FIXED_CONTENT));
        var stickyContent = [].slice.call(document.querySelectorAll(Selector$5.STICKY_CONTENT)); // Adjust fixed content padding

        $(fixedContent).each(function (index, element) {
          var actualPadding = element.style.paddingRight;
          var calculatedPadding = $(element).css('padding-right');
          $(element).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + _this10._scrollbarWidth + "px");
        }); // Adjust sticky content margin

        $(stickyContent).each(function (index, element) {
          var actualMargin = element.style.marginRight;
          var calculatedMargin = $(element).css('margin-right');
          $(element).data('margin-right', actualMargin).css('margin-right', parseFloat(calculatedMargin) - _this10._scrollbarWidth + "px");
        }); // Adjust body padding

        var actualPadding = document.body.style.paddingRight;
        var calculatedPadding = $(document.body).css('padding-right');
        $(document.body).data('padding-right', actualPadding).css('padding-right', parseFloat(calculatedPadding) + this._scrollbarWidth + "px");
      }

      $(document.body).addClass(ClassName$5.OPEN);
    };

    _proto._resetScrollbar = function _resetScrollbar() {
      // Restore fixed content padding
      var fixedContent = [].slice.call(document.querySelectorAll(Selector$5.FIXED_CONTENT));
      $(fixedContent).each(function (index, element) {
        var padding = $(element).data('padding-right');
        $(element).removeData('padding-right');
        element.style.paddingRight = padding ? padding : '';
      }); // Restore sticky content

      var elements = [].slice.call(document.querySelectorAll("" + Selector$5.STICKY_CONTENT));
      $(elements).each(function (index, element) {
        var margin = $(element).data('margin-right');

        if (typeof margin !== 'undefined') {
          $(element).css('margin-right', margin).removeData('margin-right');
        }
      }); // Restore body padding

      var padding = $(document.body).data('padding-right');
      $(document.body).removeData('padding-right');
      document.body.style.paddingRight = padding ? padding : '';
    };

    _proto._getScrollbarWidth = function _getScrollbarWidth() {
      // thx d.walsh
      var scrollDiv = document.createElement('div');
      scrollDiv.className = ClassName$5.SCROLLBAR_MEASURER;
      document.body.appendChild(scrollDiv);
      var scrollbarWidth = scrollDiv.getBoundingClientRect().width - scrollDiv.clientWidth;
      document.body.removeChild(scrollDiv);
      return scrollbarWidth;
    } // Static
    ;

    Modal._jQueryInterface = function _jQueryInterface(config, relatedTarget) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY$5);

        var _config = _objectSpread2({}, Default$3, {}, $(this).data(), {}, _typeof(config) === 'object' && config ? config : {});

        if (!data) {
          data = new Modal(this, _config);
          $(this).data(DATA_KEY$5, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config](relatedTarget);
        } else if (_config.show) {
          data.show(relatedTarget);
        }
      });
    };

    _createClass(Modal, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$5;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$3;
      }
    }]);

    return Modal;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $(document).on(Event$5.CLICK_DATA_API, Selector$5.DATA_TOGGLE, function (event) {
    var _this11 = this;

    var target;
    var selector = Util.getSelectorFromElement(this);

    if (selector) {
      target = document.querySelector(selector);
    }

    var config = $(target).data(DATA_KEY$5) ? 'toggle' : _objectSpread2({}, $(target).data(), {}, $(this).data());

    if (this.tagName === 'A' || this.tagName === 'AREA') {
      event.preventDefault();
    }

    var $target = $(target).one(Event$5.SHOW, function (showEvent) {
      if (showEvent.isDefaultPrevented()) {
        // Only register focus restorer if modal will actually get shown
        return;
      }

      $target.one(Event$5.HIDDEN, function () {
        if ($(_this11).is(':visible')) {
          _this11.focus();
        }
      });
    });

    Modal._jQueryInterface.call($(target), config, this);
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME$5] = Modal._jQueryInterface;
  $.fn[NAME$5].Constructor = Modal;

  $.fn[NAME$5].noConflict = function () {
    $.fn[NAME$5] = JQUERY_NO_CONFLICT$5;
    return Modal._jQueryInterface;
  };
  /**
   * --------------------------------------------------------------------------
   * Bootstrap (v4.4.1): tools/sanitizer.js
   * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
   * --------------------------------------------------------------------------
   */


  var uriAttrs = ['background', 'cite', 'href', 'itemtype', 'longdesc', 'poster', 'src', 'xlink:href'];
  var ARIA_ATTRIBUTE_PATTERN = /^aria-[\w-]*$/i;
  var DefaultWhitelist = {
    // Global attributes allowed on any supplied element below.
    '*': ['class', 'dir', 'id', 'lang', 'role', ARIA_ATTRIBUTE_PATTERN],
    a: ['target', 'href', 'title', 'rel'],
    area: [],
    b: [],
    br: [],
    col: [],
    code: [],
    div: [],
    em: [],
    hr: [],
    h1: [],
    h2: [],
    h3: [],
    h4: [],
    h5: [],
    h6: [],
    i: [],
    img: ['src', 'alt', 'title', 'width', 'height'],
    li: [],
    ol: [],
    p: [],
    pre: [],
    s: [],
    small: [],
    span: [],
    sub: [],
    sup: [],
    strong: [],
    u: [],
    ul: []
  };
  /**
   * A pattern that recognizes a commonly useful subset of URLs that are safe.
   *
   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
   */

  var SAFE_URL_PATTERN = /^(?:(?:https?|mailto|ftp|tel|file):|[^&:/?#]*(?:[/?#]|$))/gi;
  /**
   * A pattern that matches safe data URLs. Only matches image, video and audio types.
   *
   * Shoutout to Angular 7 https://github.com/angular/angular/blob/7.2.4/packages/core/src/sanitization/url_sanitizer.ts
   */

  var DATA_URL_PATTERN = /^data:(?:image\/(?:bmp|gif|jpeg|jpg|png|tiff|webp)|video\/(?:mpeg|mp4|ogg|webm)|audio\/(?:mp3|oga|ogg|opus));base64,[a-z0-9+/]+=*$/i;

  function allowedAttribute(attr, allowedAttributeList) {
    var attrName = attr.nodeName.toLowerCase();

    if (allowedAttributeList.indexOf(attrName) !== -1) {
      if (uriAttrs.indexOf(attrName) !== -1) {
        return Boolean(attr.nodeValue.match(SAFE_URL_PATTERN) || attr.nodeValue.match(DATA_URL_PATTERN));
      }

      return true;
    }

    var regExp = allowedAttributeList.filter(function (attrRegex) {
      return attrRegex instanceof RegExp;
    }); // Check if a regular expression validates the attribute.

    for (var i = 0, l = regExp.length; i < l; i++) {
      if (attrName.match(regExp[i])) {
        return true;
      }
    }

    return false;
  }

  function sanitizeHtml(unsafeHtml, whiteList, sanitizeFn) {
    if (unsafeHtml.length === 0) {
      return unsafeHtml;
    }

    if (sanitizeFn && typeof sanitizeFn === 'function') {
      return sanitizeFn(unsafeHtml);
    }

    var domParser = new window.DOMParser();
    var createdDocument = domParser.parseFromString(unsafeHtml, 'text/html');
    var whitelistKeys = Object.keys(whiteList);
    var elements = [].slice.call(createdDocument.body.querySelectorAll('*'));

    var _loop = function _loop(i, len) {
      var el = elements[i];
      var elName = el.nodeName.toLowerCase();

      if (whitelistKeys.indexOf(el.nodeName.toLowerCase()) === -1) {
        el.parentNode.removeChild(el);
        return "continue";
      }

      var attributeList = [].slice.call(el.attributes);
      var whitelistedAttributes = [].concat(whiteList['*'] || [], whiteList[elName] || []);
      attributeList.forEach(function (attr) {
        if (!allowedAttribute(attr, whitelistedAttributes)) {
          el.removeAttribute(attr.nodeName);
        }
      });
    };

    for (var i = 0, len = elements.length; i < len; i++) {
      var _ret = _loop(i);

      if (_ret === "continue") continue;
    }

    return createdDocument.body.innerHTML;
  }
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */


  var NAME$6 = 'tooltip';
  var VERSION$6 = '4.4.1';
  var DATA_KEY$6 = 'bs.tooltip';
  var EVENT_KEY$6 = "." + DATA_KEY$6;
  var JQUERY_NO_CONFLICT$6 = $.fn[NAME$6];
  var CLASS_PREFIX = 'bs-tooltip';
  var BSCLS_PREFIX_REGEX = new RegExp("(^|\\s)" + CLASS_PREFIX + "\\S+", 'g');
  var DISALLOWED_ATTRIBUTES = ['sanitize', 'whiteList', 'sanitizeFn'];
  var DefaultType$4 = {
    animation: 'boolean',
    template: 'string',
    title: '(string|element|function)',
    trigger: 'string',
    delay: '(number|object)',
    html: 'boolean',
    selector: '(string|boolean)',
    placement: '(string|function)',
    offset: '(number|string|function)',
    container: '(string|element|boolean)',
    fallbackPlacement: '(string|array)',
    boundary: '(string|element)',
    sanitize: 'boolean',
    sanitizeFn: '(null|function)',
    whiteList: 'object',
    popperConfig: '(null|object)'
  };
  var AttachmentMap$1 = {
    AUTO: 'auto',
    TOP: 'top',
    RIGHT: 'right',
    BOTTOM: 'bottom',
    LEFT: 'left'
  };
  var Default$4 = {
    animation: true,
    template: '<div class="tooltip" role="tooltip">' + '<div class="arrow"></div>' + '<div class="tooltip-inner"></div></div>',
    trigger: 'hover focus',
    title: '',
    delay: 0,
    html: false,
    selector: false,
    placement: 'top',
    offset: 0,
    container: false,
    fallbackPlacement: 'flip',
    boundary: 'scrollParent',
    sanitize: true,
    sanitizeFn: null,
    whiteList: DefaultWhitelist,
    popperConfig: null
  };
  var HoverState = {
    SHOW: 'show',
    OUT: 'out'
  };
  var Event$6 = {
    HIDE: "hide" + EVENT_KEY$6,
    HIDDEN: "hidden" + EVENT_KEY$6,
    SHOW: "show" + EVENT_KEY$6,
    SHOWN: "shown" + EVENT_KEY$6,
    INSERTED: "inserted" + EVENT_KEY$6,
    CLICK: "click" + EVENT_KEY$6,
    FOCUSIN: "focusin" + EVENT_KEY$6,
    FOCUSOUT: "focusout" + EVENT_KEY$6,
    MOUSEENTER: "mouseenter" + EVENT_KEY$6,
    MOUSELEAVE: "mouseleave" + EVENT_KEY$6
  };
  var ClassName$6 = {
    FADE: 'fade',
    SHOW: 'show'
  };
  var Selector$6 = {
    TOOLTIP: '.tooltip',
    TOOLTIP_INNER: '.tooltip-inner',
    ARROW: '.arrow'
  };
  var Trigger = {
    HOVER: 'hover',
    FOCUS: 'focus',
    CLICK: 'click',
    MANUAL: 'manual'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Tooltip =
  /*#__PURE__*/
  function () {
    function Tooltip(element, config) {
      if (typeof Popper === 'undefined') {
        throw new TypeError('Bootstrap\'s tooltips require Popper.js (https://popper.js.org/)');
      } // private


      this._isEnabled = true;
      this._timeout = 0;
      this._hoverState = '';
      this._activeTrigger = {};
      this._popper = null; // Protected

      this.element = element;
      this.config = this._getConfig(config);
      this.tip = null;

      this._setListeners();
    } // Getters


    var _proto = Tooltip.prototype; // Public

    _proto.enable = function enable() {
      this._isEnabled = true;
    };

    _proto.disable = function disable() {
      this._isEnabled = false;
    };

    _proto.toggleEnabled = function toggleEnabled() {
      this._isEnabled = !this._isEnabled;
    };

    _proto.toggle = function toggle(event) {
      if (!this._isEnabled) {
        return;
      }

      if (event) {
        var dataKey = this.constructor.DATA_KEY;
        var context = $(event.currentTarget).data(dataKey);

        if (!context) {
          context = new this.constructor(event.currentTarget, this._getDelegateConfig());
          $(event.currentTarget).data(dataKey, context);
        }

        context._activeTrigger.click = !context._activeTrigger.click;

        if (context._isWithActiveTrigger()) {
          context._enter(null, context);
        } else {
          context._leave(null, context);
        }
      } else {
        if ($(this.getTipElement()).hasClass(ClassName$6.SHOW)) {
          this._leave(null, this);

          return;
        }

        this._enter(null, this);
      }
    };

    _proto.dispose = function dispose() {
      clearTimeout(this._timeout);
      $.removeData(this.element, this.constructor.DATA_KEY);
      $(this.element).off(this.constructor.EVENT_KEY);
      $(this.element).closest('.modal').off('hide.bs.modal', this._hideModalHandler);

      if (this.tip) {
        $(this.tip).remove();
      }

      this._isEnabled = null;
      this._timeout = null;
      this._hoverState = null;
      this._activeTrigger = null;

      if (this._popper) {
        this._popper.destroy();
      }

      this._popper = null;
      this.element = null;
      this.config = null;
      this.tip = null;
    };

    _proto.show = function show() {
      var _this = this;

      if ($(this.element).css('display') === 'none') {
        throw new Error('Please use show on visible elements');
      }

      var showEvent = $.Event(this.constructor.Event.SHOW);

      if (this.isWithContent() && this._isEnabled) {
        $(this.element).trigger(showEvent);
        var shadowRoot = Util.findShadowRoot(this.element);
        var isInTheDom = $.contains(shadowRoot !== null ? shadowRoot : this.element.ownerDocument.documentElement, this.element);

        if (showEvent.isDefaultPrevented() || !isInTheDom) {
          return;
        }

        var tip = this.getTipElement();
        var tipId = Util.getUID(this.constructor.NAME);
        tip.setAttribute('id', tipId);
        this.element.setAttribute('aria-describedby', tipId);
        this.setContent();

        if (this.config.animation) {
          $(tip).addClass(ClassName$6.FADE);
        }

        var placement = typeof this.config.placement === 'function' ? this.config.placement.call(this, tip, this.element) : this.config.placement;

        var attachment = this._getAttachment(placement);

        this.addAttachmentClass(attachment);

        var container = this._getContainer();

        $(tip).data(this.constructor.DATA_KEY, this);

        if (!$.contains(this.element.ownerDocument.documentElement, this.tip)) {
          $(tip).appendTo(container);
        }

        $(this.element).trigger(this.constructor.Event.INSERTED);
        this._popper = new Popper(this.element, tip, this._getPopperConfig(attachment));
        $(tip).addClass(ClassName$6.SHOW); // If this is a touch-enabled device we add extra
        // empty mouseover listeners to the body's immediate children;
        // only needed because of broken event delegation on iOS
        // https://www.quirksmode.org/blog/archives/2014/02/mouse_event_bub.html

        if ('ontouchstart' in document.documentElement) {
          $(document.body).children().on('mouseover', null, $.noop);
        }

        var complete = function complete() {
          if (_this.config.animation) {
            _this._fixTransition();
          }

          var prevHoverState = _this._hoverState;
          _this._hoverState = null;
          $(_this.element).trigger(_this.constructor.Event.SHOWN);

          if (prevHoverState === HoverState.OUT) {
            _this._leave(null, _this);
          }
        };

        if ($(this.tip).hasClass(ClassName$6.FADE)) {
          var transitionDuration = Util.getTransitionDurationFromElement(this.tip);
          $(this.tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
        } else {
          complete();
        }
      }
    };

    _proto.hide = function hide(callback) {
      var _this2 = this;

      var tip = this.getTipElement();
      var hideEvent = $.Event(this.constructor.Event.HIDE);

      var complete = function complete() {
        if (_this2._hoverState !== HoverState.SHOW && tip.parentNode) {
          tip.parentNode.removeChild(tip);
        }

        _this2._cleanTipClass();

        _this2.element.removeAttribute('aria-describedby');

        $(_this2.element).trigger(_this2.constructor.Event.HIDDEN);

        if (_this2._popper !== null) {
          _this2._popper.destroy();
        }

        if (callback) {
          callback();
        }
      };

      $(this.element).trigger(hideEvent);

      if (hideEvent.isDefaultPrevented()) {
        return;
      }

      $(tip).removeClass(ClassName$6.SHOW); // If this is a touch-enabled device we remove the extra
      // empty mouseover listeners we added for iOS support

      if ('ontouchstart' in document.documentElement) {
        $(document.body).children().off('mouseover', null, $.noop);
      }

      this._activeTrigger[Trigger.CLICK] = false;
      this._activeTrigger[Trigger.FOCUS] = false;
      this._activeTrigger[Trigger.HOVER] = false;

      if ($(this.tip).hasClass(ClassName$6.FADE)) {
        var transitionDuration = Util.getTransitionDurationFromElement(tip);
        $(tip).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      } else {
        complete();
      }

      this._hoverState = '';
    };

    _proto.update = function update() {
      if (this._popper !== null) {
        this._popper.scheduleUpdate();
      }
    } // Protected
    ;

    _proto.isWithContent = function isWithContent() {
      return Boolean(this.getTitle());
    };

    _proto.addAttachmentClass = function addAttachmentClass(attachment) {
      $(this.getTipElement()).addClass(CLASS_PREFIX + "-" + attachment);
    };

    _proto.getTipElement = function getTipElement() {
      this.tip = this.tip || $(this.config.template)[0];
      return this.tip;
    };

    _proto.setContent = function setContent() {
      var tip = this.getTipElement();
      this.setElementContent($(tip.querySelectorAll(Selector$6.TOOLTIP_INNER)), this.getTitle());
      $(tip).removeClass(ClassName$6.FADE + " " + ClassName$6.SHOW);
    };

    _proto.setElementContent = function setElementContent($element, content) {
      if (_typeof(content) === 'object' && (content.nodeType || content.jquery)) {
        // Content is a DOM node or a jQuery
        if (this.config.html) {
          if (!$(content).parent().is($element)) {
            $element.empty().append(content);
          }
        } else {
          $element.text($(content).text());
        }

        return;
      }

      if (this.config.html) {
        if (this.config.sanitize) {
          content = sanitizeHtml(content, this.config.whiteList, this.config.sanitizeFn);
        }

        $element.html(content);
      } else {
        $element.text(content);
      }
    };

    _proto.getTitle = function getTitle() {
      var title = this.element.getAttribute('data-original-title');

      if (!title) {
        title = typeof this.config.title === 'function' ? this.config.title.call(this.element) : this.config.title;
      }

      return title;
    } // Private
    ;

    _proto._getPopperConfig = function _getPopperConfig(attachment) {
      var _this3 = this;

      var defaultBsConfig = {
        placement: attachment,
        modifiers: {
          offset: this._getOffset(),
          flip: {
            behavior: this.config.fallbackPlacement
          },
          arrow: {
            element: Selector$6.ARROW
          },
          preventOverflow: {
            boundariesElement: this.config.boundary
          }
        },
        onCreate: function onCreate(data) {
          if (data.originalPlacement !== data.placement) {
            _this3._handlePopperPlacementChange(data);
          }
        },
        onUpdate: function onUpdate(data) {
          return _this3._handlePopperPlacementChange(data);
        }
      };
      return _objectSpread2({}, defaultBsConfig, {}, this.config.popperConfig);
    };

    _proto._getOffset = function _getOffset() {
      var _this4 = this;

      var offset = {};

      if (typeof this.config.offset === 'function') {
        offset.fn = function (data) {
          data.offsets = _objectSpread2({}, data.offsets, {}, _this4.config.offset(data.offsets, _this4.element) || {});
          return data;
        };
      } else {
        offset.offset = this.config.offset;
      }

      return offset;
    };

    _proto._getContainer = function _getContainer() {
      if (this.config.container === false) {
        return document.body;
      }

      if (Util.isElement(this.config.container)) {
        return $(this.config.container);
      }

      return $(document).find(this.config.container);
    };

    _proto._getAttachment = function _getAttachment(placement) {
      return AttachmentMap$1[placement.toUpperCase()];
    };

    _proto._setListeners = function _setListeners() {
      var _this5 = this;

      var triggers = this.config.trigger.split(' ');
      triggers.forEach(function (trigger) {
        if (trigger === 'click') {
          $(_this5.element).on(_this5.constructor.Event.CLICK, _this5.config.selector, function (event) {
            return _this5.toggle(event);
          });
        } else if (trigger !== Trigger.MANUAL) {
          var eventIn = trigger === Trigger.HOVER ? _this5.constructor.Event.MOUSEENTER : _this5.constructor.Event.FOCUSIN;
          var eventOut = trigger === Trigger.HOVER ? _this5.constructor.Event.MOUSELEAVE : _this5.constructor.Event.FOCUSOUT;
          $(_this5.element).on(eventIn, _this5.config.selector, function (event) {
            return _this5._enter(event);
          }).on(eventOut, _this5.config.selector, function (event) {
            return _this5._leave(event);
          });
        }
      });

      this._hideModalHandler = function () {
        if (_this5.element) {
          _this5.hide();
        }
      };

      $(this.element).closest('.modal').on('hide.bs.modal', this._hideModalHandler);

      if (this.config.selector) {
        this.config = _objectSpread2({}, this.config, {
          trigger: 'manual',
          selector: ''
        });
      } else {
        this._fixTitle();
      }
    };

    _proto._fixTitle = function _fixTitle() {
      var titleType = _typeof(this.element.getAttribute('data-original-title'));

      if (this.element.getAttribute('title') || titleType !== 'string') {
        this.element.setAttribute('data-original-title', this.element.getAttribute('title') || '');
        this.element.setAttribute('title', '');
      }
    };

    _proto._enter = function _enter(event, context) {
      var dataKey = this.constructor.DATA_KEY;
      context = context || $(event.currentTarget).data(dataKey);

      if (!context) {
        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
        $(event.currentTarget).data(dataKey, context);
      }

      if (event) {
        context._activeTrigger[event.type === 'focusin' ? Trigger.FOCUS : Trigger.HOVER] = true;
      }

      if ($(context.getTipElement()).hasClass(ClassName$6.SHOW) || context._hoverState === HoverState.SHOW) {
        context._hoverState = HoverState.SHOW;
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HoverState.SHOW;

      if (!context.config.delay || !context.config.delay.show) {
        context.show();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HoverState.SHOW) {
          context.show();
        }
      }, context.config.delay.show);
    };

    _proto._leave = function _leave(event, context) {
      var dataKey = this.constructor.DATA_KEY;
      context = context || $(event.currentTarget).data(dataKey);

      if (!context) {
        context = new this.constructor(event.currentTarget, this._getDelegateConfig());
        $(event.currentTarget).data(dataKey, context);
      }

      if (event) {
        context._activeTrigger[event.type === 'focusout' ? Trigger.FOCUS : Trigger.HOVER] = false;
      }

      if (context._isWithActiveTrigger()) {
        return;
      }

      clearTimeout(context._timeout);
      context._hoverState = HoverState.OUT;

      if (!context.config.delay || !context.config.delay.hide) {
        context.hide();
        return;
      }

      context._timeout = setTimeout(function () {
        if (context._hoverState === HoverState.OUT) {
          context.hide();
        }
      }, context.config.delay.hide);
    };

    _proto._isWithActiveTrigger = function _isWithActiveTrigger() {
      for (var trigger in this._activeTrigger) {
        if (this._activeTrigger[trigger]) {
          return true;
        }
      }

      return false;
    };

    _proto._getConfig = function _getConfig(config) {
      var dataAttributes = $(this.element).data();
      Object.keys(dataAttributes).forEach(function (dataAttr) {
        if (DISALLOWED_ATTRIBUTES.indexOf(dataAttr) !== -1) {
          delete dataAttributes[dataAttr];
        }
      });
      config = _objectSpread2({}, this.constructor.Default, {}, dataAttributes, {}, _typeof(config) === 'object' && config ? config : {});

      if (typeof config.delay === 'number') {
        config.delay = {
          show: config.delay,
          hide: config.delay
        };
      }

      if (typeof config.title === 'number') {
        config.title = config.title.toString();
      }

      if (typeof config.content === 'number') {
        config.content = config.content.toString();
      }

      Util.typeCheckConfig(NAME$6, config, this.constructor.DefaultType);

      if (config.sanitize) {
        config.template = sanitizeHtml(config.template, config.whiteList, config.sanitizeFn);
      }

      return config;
    };

    _proto._getDelegateConfig = function _getDelegateConfig() {
      var config = {};

      if (this.config) {
        for (var key in this.config) {
          if (this.constructor.Default[key] !== this.config[key]) {
            config[key] = this.config[key];
          }
        }
      }

      return config;
    };

    _proto._cleanTipClass = function _cleanTipClass() {
      var $tip = $(this.getTipElement());
      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX);

      if (tabClass !== null && tabClass.length) {
        $tip.removeClass(tabClass.join(''));
      }
    };

    _proto._handlePopperPlacementChange = function _handlePopperPlacementChange(popperData) {
      var popperInstance = popperData.instance;
      this.tip = popperInstance.popper;

      this._cleanTipClass();

      this.addAttachmentClass(this._getAttachment(popperData.placement));
    };

    _proto._fixTransition = function _fixTransition() {
      var tip = this.getTipElement();
      var initConfigAnimation = this.config.animation;

      if (tip.getAttribute('x-placement') !== null) {
        return;
      }

      $(tip).removeClass(ClassName$6.FADE);
      this.config.animation = false;
      this.hide();
      this.show();
      this.config.animation = initConfigAnimation;
    } // Static
    ;

    Tooltip._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY$6);

        var _config = _typeof(config) === 'object' && config;

        if (!data && /dispose|hide/.test(config)) {
          return;
        }

        if (!data) {
          data = new Tooltip(this, _config);
          $(this).data(DATA_KEY$6, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Tooltip, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$6;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$4;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$6;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return DATA_KEY$6;
      }
    }, {
      key: "Event",
      get: function get() {
        return Event$6;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return EVENT_KEY$6;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$4;
      }
    }]);

    return Tooltip;
  }();
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  $.fn[NAME$6] = Tooltip._jQueryInterface;
  $.fn[NAME$6].Constructor = Tooltip;

  $.fn[NAME$6].noConflict = function () {
    $.fn[NAME$6] = JQUERY_NO_CONFLICT$6;
    return Tooltip._jQueryInterface;
  };
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */


  var NAME$7 = 'popover';
  var VERSION$7 = '4.4.1';
  var DATA_KEY$7 = 'bs.popover';
  var EVENT_KEY$7 = "." + DATA_KEY$7;
  var JQUERY_NO_CONFLICT$7 = $.fn[NAME$7];
  var CLASS_PREFIX$1 = 'bs-popover';
  var BSCLS_PREFIX_REGEX$1 = new RegExp("(^|\\s)" + CLASS_PREFIX$1 + "\\S+", 'g');

  var Default$5 = _objectSpread2({}, Tooltip.Default, {
    placement: 'right',
    trigger: 'click',
    content: '',
    template: '<div class="popover" role="tooltip">' + '<div class="arrow"></div>' + '<h3 class="popover-header"></h3>' + '<div class="popover-body"></div></div>'
  });

  var DefaultType$5 = _objectSpread2({}, Tooltip.DefaultType, {
    content: '(string|element|function)'
  });

  var ClassName$7 = {
    FADE: 'fade',
    SHOW: 'show'
  };
  var Selector$7 = {
    TITLE: '.popover-header',
    CONTENT: '.popover-body'
  };
  var Event$7 = {
    HIDE: "hide" + EVENT_KEY$7,
    HIDDEN: "hidden" + EVENT_KEY$7,
    SHOW: "show" + EVENT_KEY$7,
    SHOWN: "shown" + EVENT_KEY$7,
    INSERTED: "inserted" + EVENT_KEY$7,
    CLICK: "click" + EVENT_KEY$7,
    FOCUSIN: "focusin" + EVENT_KEY$7,
    FOCUSOUT: "focusout" + EVENT_KEY$7,
    MOUSEENTER: "mouseenter" + EVENT_KEY$7,
    MOUSELEAVE: "mouseleave" + EVENT_KEY$7
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Popover =
  /*#__PURE__*/
  function (_Tooltip) {
    _inheritsLoose(Popover, _Tooltip);

    function Popover() {
      return _Tooltip.apply(this, arguments) || this;
    }

    var _proto = Popover.prototype; // Overrides

    _proto.isWithContent = function isWithContent() {
      return this.getTitle() || this._getContent();
    };

    _proto.addAttachmentClass = function addAttachmentClass(attachment) {
      $(this.getTipElement()).addClass(CLASS_PREFIX$1 + "-" + attachment);
    };

    _proto.getTipElement = function getTipElement() {
      this.tip = this.tip || $(this.config.template)[0];
      return this.tip;
    };

    _proto.setContent = function setContent() {
      var $tip = $(this.getTipElement()); // We use append for html objects to maintain js events

      this.setElementContent($tip.find(Selector$7.TITLE), this.getTitle());

      var content = this._getContent();

      if (typeof content === 'function') {
        content = content.call(this.element);
      }

      this.setElementContent($tip.find(Selector$7.CONTENT), content);
      $tip.removeClass(ClassName$7.FADE + " " + ClassName$7.SHOW);
    } // Private
    ;

    _proto._getContent = function _getContent() {
      return this.element.getAttribute('data-content') || this.config.content;
    };

    _proto._cleanTipClass = function _cleanTipClass() {
      var $tip = $(this.getTipElement());
      var tabClass = $tip.attr('class').match(BSCLS_PREFIX_REGEX$1);

      if (tabClass !== null && tabClass.length > 0) {
        $tip.removeClass(tabClass.join(''));
      }
    } // Static
    ;

    Popover._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY$7);

        var _config = _typeof(config) === 'object' ? config : null;

        if (!data && /dispose|hide/.test(config)) {
          return;
        }

        if (!data) {
          data = new Popover(this, _config);
          $(this).data(DATA_KEY$7, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Popover, null, [{
      key: "VERSION",
      // Getters
      get: function get() {
        return VERSION$7;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$5;
      }
    }, {
      key: "NAME",
      get: function get() {
        return NAME$7;
      }
    }, {
      key: "DATA_KEY",
      get: function get() {
        return DATA_KEY$7;
      }
    }, {
      key: "Event",
      get: function get() {
        return Event$7;
      }
    }, {
      key: "EVENT_KEY",
      get: function get() {
        return EVENT_KEY$7;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$5;
      }
    }]);

    return Popover;
  }(Tooltip);
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  $.fn[NAME$7] = Popover._jQueryInterface;
  $.fn[NAME$7].Constructor = Popover;

  $.fn[NAME$7].noConflict = function () {
    $.fn[NAME$7] = JQUERY_NO_CONFLICT$7;
    return Popover._jQueryInterface;
  };
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */


  var NAME$8 = 'scrollspy';
  var VERSION$8 = '4.4.1';
  var DATA_KEY$8 = 'bs.scrollspy';
  var EVENT_KEY$8 = "." + DATA_KEY$8;
  var DATA_API_KEY$6 = '.data-api';
  var JQUERY_NO_CONFLICT$8 = $.fn[NAME$8];
  var Default$6 = {
    offset: 10,
    method: 'auto',
    target: ''
  };
  var DefaultType$6 = {
    offset: 'number',
    method: 'string',
    target: '(string|element)'
  };
  var Event$8 = {
    ACTIVATE: "activate" + EVENT_KEY$8,
    SCROLL: "scroll" + EVENT_KEY$8,
    LOAD_DATA_API: "load" + EVENT_KEY$8 + DATA_API_KEY$6
  };
  var ClassName$8 = {
    DROPDOWN_ITEM: 'dropdown-item',
    DROPDOWN_MENU: 'dropdown-menu',
    ACTIVE: 'active'
  };
  var Selector$8 = {
    DATA_SPY: '[data-spy="scroll"]',
    ACTIVE: '.active',
    NAV_LIST_GROUP: '.nav, .list-group',
    NAV_LINKS: '.nav-link',
    NAV_ITEMS: '.nav-item',
    LIST_ITEMS: '.list-group-item',
    DROPDOWN: '.dropdown',
    DROPDOWN_ITEMS: '.dropdown-item',
    DROPDOWN_TOGGLE: '.dropdown-toggle'
  };
  var OffsetMethod = {
    OFFSET: 'offset',
    POSITION: 'position'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var ScrollSpy =
  /*#__PURE__*/
  function () {
    function ScrollSpy(element, config) {
      var _this = this;

      this._element = element;
      this._scrollElement = element.tagName === 'BODY' ? window : element;
      this._config = this._getConfig(config);
      this._selector = this._config.target + " " + Selector$8.NAV_LINKS + "," + (this._config.target + " " + Selector$8.LIST_ITEMS + ",") + (this._config.target + " " + Selector$8.DROPDOWN_ITEMS);
      this._offsets = [];
      this._targets = [];
      this._activeTarget = null;
      this._scrollHeight = 0;
      $(this._scrollElement).on(Event$8.SCROLL, function (event) {
        return _this._process(event);
      });
      this.refresh();

      this._process();
    } // Getters


    var _proto = ScrollSpy.prototype; // Public

    _proto.refresh = function refresh() {
      var _this2 = this;

      var autoMethod = this._scrollElement === this._scrollElement.window ? OffsetMethod.OFFSET : OffsetMethod.POSITION;
      var offsetMethod = this._config.method === 'auto' ? autoMethod : this._config.method;
      var offsetBase = offsetMethod === OffsetMethod.POSITION ? this._getScrollTop() : 0;
      this._offsets = [];
      this._targets = [];
      this._scrollHeight = this._getScrollHeight();
      var targets = [].slice.call(document.querySelectorAll(this._selector));
      targets.map(function (element) {
        var target;
        var targetSelector = Util.getSelectorFromElement(element);

        if (targetSelector) {
          target = document.querySelector(targetSelector);
        }

        if (target) {
          var targetBCR = target.getBoundingClientRect();

          if (targetBCR.width || targetBCR.height) {
            // TODO (fat): remove sketch reliance on jQuery position/offset
            return [$(target)[offsetMethod]().top + offsetBase, targetSelector];
          }
        }

        return null;
      }).filter(function (item) {
        return item;
      }).sort(function (a, b) {
        return a[0] - b[0];
      }).forEach(function (item) {
        _this2._offsets.push(item[0]);

        _this2._targets.push(item[1]);
      });
    };

    _proto.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY$8);
      $(this._scrollElement).off(EVENT_KEY$8);
      this._element = null;
      this._scrollElement = null;
      this._config = null;
      this._selector = null;
      this._offsets = null;
      this._targets = null;
      this._activeTarget = null;
      this._scrollHeight = null;
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _objectSpread2({}, Default$6, {}, _typeof(config) === 'object' && config ? config : {});

      if (typeof config.target !== 'string') {
        var id = $(config.target).attr('id');

        if (!id) {
          id = Util.getUID(NAME$8);
          $(config.target).attr('id', id);
        }

        config.target = "#" + id;
      }

      Util.typeCheckConfig(NAME$8, config, DefaultType$6);
      return config;
    };

    _proto._getScrollTop = function _getScrollTop() {
      return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
    };

    _proto._getScrollHeight = function _getScrollHeight() {
      return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
    };

    _proto._getOffsetHeight = function _getOffsetHeight() {
      return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
    };

    _proto._process = function _process() {
      var scrollTop = this._getScrollTop() + this._config.offset;

      var scrollHeight = this._getScrollHeight();

      var maxScroll = this._config.offset + scrollHeight - this._getOffsetHeight();

      if (this._scrollHeight !== scrollHeight) {
        this.refresh();
      }

      if (scrollTop >= maxScroll) {
        var target = this._targets[this._targets.length - 1];

        if (this._activeTarget !== target) {
          this._activate(target);
        }

        return;
      }

      if (this._activeTarget && scrollTop < this._offsets[0] && this._offsets[0] > 0) {
        this._activeTarget = null;

        this._clear();

        return;
      }

      var offsetLength = this._offsets.length;

      for (var i = offsetLength; i--;) {
        var isActiveTarget = this._activeTarget !== this._targets[i] && scrollTop >= this._offsets[i] && (typeof this._offsets[i + 1] === 'undefined' || scrollTop < this._offsets[i + 1]);

        if (isActiveTarget) {
          this._activate(this._targets[i]);
        }
      }
    };

    _proto._activate = function _activate(target) {
      this._activeTarget = target;

      this._clear();

      var queries = this._selector.split(',').map(function (selector) {
        return selector + "[data-target=\"" + target + "\"]," + selector + "[href=\"" + target + "\"]";
      });

      var $link = $([].slice.call(document.querySelectorAll(queries.join(','))));

      if ($link.hasClass(ClassName$8.DROPDOWN_ITEM)) {
        $link.closest(Selector$8.DROPDOWN).find(Selector$8.DROPDOWN_TOGGLE).addClass(ClassName$8.ACTIVE);
        $link.addClass(ClassName$8.ACTIVE);
      } else {
        // Set triggered link as active
        $link.addClass(ClassName$8.ACTIVE); // Set triggered links parents as active
        // With both <ul> and <nav> markup a parent is the previous sibling of any nav ancestor

        $link.parents(Selector$8.NAV_LIST_GROUP).prev(Selector$8.NAV_LINKS + ", " + Selector$8.LIST_ITEMS).addClass(ClassName$8.ACTIVE); // Handle special case when .nav-link is inside .nav-item

        $link.parents(Selector$8.NAV_LIST_GROUP).prev(Selector$8.NAV_ITEMS).children(Selector$8.NAV_LINKS).addClass(ClassName$8.ACTIVE);
      }

      $(this._scrollElement).trigger(Event$8.ACTIVATE, {
        relatedTarget: target
      });
    };

    _proto._clear = function _clear() {
      [].slice.call(document.querySelectorAll(this._selector)).filter(function (node) {
        return node.classList.contains(ClassName$8.ACTIVE);
      }).forEach(function (node) {
        return node.classList.remove(ClassName$8.ACTIVE);
      });
    } // Static
    ;

    ScrollSpy._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var data = $(this).data(DATA_KEY$8);

        var _config = _typeof(config) === 'object' && config;

        if (!data) {
          data = new ScrollSpy(this, _config);
          $(this).data(DATA_KEY$8, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(ScrollSpy, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$8;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$6;
      }
    }]);

    return ScrollSpy;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $(window).on(Event$8.LOAD_DATA_API, function () {
    var scrollSpys = [].slice.call(document.querySelectorAll(Selector$8.DATA_SPY));
    var scrollSpysLength = scrollSpys.length;

    for (var i = scrollSpysLength; i--;) {
      var $spy = $(scrollSpys[i]);

      ScrollSpy._jQueryInterface.call($spy, $spy.data());
    }
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME$8] = ScrollSpy._jQueryInterface;
  $.fn[NAME$8].Constructor = ScrollSpy;

  $.fn[NAME$8].noConflict = function () {
    $.fn[NAME$8] = JQUERY_NO_CONFLICT$8;
    return ScrollSpy._jQueryInterface;
  };
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */


  var NAME$9 = 'tab';
  var VERSION$9 = '4.4.1';
  var DATA_KEY$9 = 'bs.tab';
  var EVENT_KEY$9 = "." + DATA_KEY$9;
  var DATA_API_KEY$7 = '.data-api';
  var JQUERY_NO_CONFLICT$9 = $.fn[NAME$9];
  var Event$9 = {
    HIDE: "hide" + EVENT_KEY$9,
    HIDDEN: "hidden" + EVENT_KEY$9,
    SHOW: "show" + EVENT_KEY$9,
    SHOWN: "shown" + EVENT_KEY$9,
    CLICK_DATA_API: "click" + EVENT_KEY$9 + DATA_API_KEY$7
  };
  var ClassName$9 = {
    DROPDOWN_MENU: 'dropdown-menu',
    ACTIVE: 'active',
    DISABLED: 'disabled',
    FADE: 'fade',
    SHOW: 'show'
  };
  var Selector$9 = {
    DROPDOWN: '.dropdown',
    NAV_LIST_GROUP: '.nav, .list-group',
    ACTIVE: '.active',
    ACTIVE_UL: '> li > .active',
    DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]',
    DROPDOWN_TOGGLE: '.dropdown-toggle',
    DROPDOWN_ACTIVE_CHILD: '> .dropdown-menu .active'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Tab =
  /*#__PURE__*/
  function () {
    function Tab(element) {
      this._element = element;
    } // Getters


    var _proto = Tab.prototype; // Public

    _proto.show = function show() {
      var _this = this;

      if (this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && $(this._element).hasClass(ClassName$9.ACTIVE) || $(this._element).hasClass(ClassName$9.DISABLED)) {
        return;
      }

      var target;
      var previous;
      var listElement = $(this._element).closest(Selector$9.NAV_LIST_GROUP)[0];
      var selector = Util.getSelectorFromElement(this._element);

      if (listElement) {
        var itemSelector = listElement.nodeName === 'UL' || listElement.nodeName === 'OL' ? Selector$9.ACTIVE_UL : Selector$9.ACTIVE;
        previous = $.makeArray($(listElement).find(itemSelector));
        previous = previous[previous.length - 1];
      }

      var hideEvent = $.Event(Event$9.HIDE, {
        relatedTarget: this._element
      });
      var showEvent = $.Event(Event$9.SHOW, {
        relatedTarget: previous
      });

      if (previous) {
        $(previous).trigger(hideEvent);
      }

      $(this._element).trigger(showEvent);

      if (showEvent.isDefaultPrevented() || hideEvent.isDefaultPrevented()) {
        return;
      }

      if (selector) {
        target = document.querySelector(selector);
      }

      this._activate(this._element, listElement);

      var complete = function complete() {
        var hiddenEvent = $.Event(Event$9.HIDDEN, {
          relatedTarget: _this._element
        });
        var shownEvent = $.Event(Event$9.SHOWN, {
          relatedTarget: previous
        });
        $(previous).trigger(hiddenEvent);
        $(_this._element).trigger(shownEvent);
      };

      if (target) {
        this._activate(target, target.parentNode, complete);
      } else {
        complete();
      }
    };

    _proto.dispose = function dispose() {
      $.removeData(this._element, DATA_KEY$9);
      this._element = null;
    } // Private
    ;

    _proto._activate = function _activate(element, container, callback) {
      var _this2 = this;

      var activeElements = container && (container.nodeName === 'UL' || container.nodeName === 'OL') ? $(container).find(Selector$9.ACTIVE_UL) : $(container).children(Selector$9.ACTIVE);
      var active = activeElements[0];
      var isTransitioning = callback && active && $(active).hasClass(ClassName$9.FADE);

      var complete = function complete() {
        return _this2._transitionComplete(element, active, callback);
      };

      if (active && isTransitioning) {
        var transitionDuration = Util.getTransitionDurationFromElement(active);
        $(active).removeClass(ClassName$9.SHOW).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      } else {
        complete();
      }
    };

    _proto._transitionComplete = function _transitionComplete(element, active, callback) {
      if (active) {
        $(active).removeClass(ClassName$9.ACTIVE);
        var dropdownChild = $(active.parentNode).find(Selector$9.DROPDOWN_ACTIVE_CHILD)[0];

        if (dropdownChild) {
          $(dropdownChild).removeClass(ClassName$9.ACTIVE);
        }

        if (active.getAttribute('role') === 'tab') {
          active.setAttribute('aria-selected', false);
        }
      }

      $(element).addClass(ClassName$9.ACTIVE);

      if (element.getAttribute('role') === 'tab') {
        element.setAttribute('aria-selected', true);
      }

      Util.reflow(element);

      if (element.classList.contains(ClassName$9.FADE)) {
        element.classList.add(ClassName$9.SHOW);
      }

      if (element.parentNode && $(element.parentNode).hasClass(ClassName$9.DROPDOWN_MENU)) {
        var dropdownElement = $(element).closest(Selector$9.DROPDOWN)[0];

        if (dropdownElement) {
          var dropdownToggleList = [].slice.call(dropdownElement.querySelectorAll(Selector$9.DROPDOWN_TOGGLE));
          $(dropdownToggleList).addClass(ClassName$9.ACTIVE);
        }

        element.setAttribute('aria-expanded', true);
      }

      if (callback) {
        callback();
      }
    } // Static
    ;

    Tab._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $this = $(this);
        var data = $this.data(DATA_KEY$9);

        if (!data) {
          data = new Tab(this);
          $this.data(DATA_KEY$9, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config]();
        }
      });
    };

    _createClass(Tab, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$9;
      }
    }]);

    return Tab;
  }();
  /**
   * ------------------------------------------------------------------------
   * Data Api implementation
   * ------------------------------------------------------------------------
   */


  $(document).on(Event$9.CLICK_DATA_API, Selector$9.DATA_TOGGLE, function (event) {
    event.preventDefault();

    Tab._jQueryInterface.call($(this), 'show');
  });
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */

  $.fn[NAME$9] = Tab._jQueryInterface;
  $.fn[NAME$9].Constructor = Tab;

  $.fn[NAME$9].noConflict = function () {
    $.fn[NAME$9] = JQUERY_NO_CONFLICT$9;
    return Tab._jQueryInterface;
  };
  /**
   * ------------------------------------------------------------------------
   * Constants
   * ------------------------------------------------------------------------
   */


  var NAME$a = 'toast';
  var VERSION$a = '4.4.1';
  var DATA_KEY$a = 'bs.toast';
  var EVENT_KEY$a = "." + DATA_KEY$a;
  var JQUERY_NO_CONFLICT$a = $.fn[NAME$a];
  var Event$a = {
    CLICK_DISMISS: "click.dismiss" + EVENT_KEY$a,
    HIDE: "hide" + EVENT_KEY$a,
    HIDDEN: "hidden" + EVENT_KEY$a,
    SHOW: "show" + EVENT_KEY$a,
    SHOWN: "shown" + EVENT_KEY$a
  };
  var ClassName$a = {
    FADE: 'fade',
    HIDE: 'hide',
    SHOW: 'show',
    SHOWING: 'showing'
  };
  var DefaultType$7 = {
    animation: 'boolean',
    autohide: 'boolean',
    delay: 'number'
  };
  var Default$7 = {
    animation: true,
    autohide: true,
    delay: 500
  };
  var Selector$a = {
    DATA_DISMISS: '[data-dismiss="toast"]'
  };
  /**
   * ------------------------------------------------------------------------
   * Class Definition
   * ------------------------------------------------------------------------
   */

  var Toast =
  /*#__PURE__*/
  function () {
    function Toast(element, config) {
      this._element = element;
      this._config = this._getConfig(config);
      this._timeout = null;

      this._setListeners();
    } // Getters


    var _proto = Toast.prototype; // Public

    _proto.show = function show() {
      var _this = this;

      var showEvent = $.Event(Event$a.SHOW);
      $(this._element).trigger(showEvent);

      if (showEvent.isDefaultPrevented()) {
        return;
      }

      if (this._config.animation) {
        this._element.classList.add(ClassName$a.FADE);
      }

      var complete = function complete() {
        _this._element.classList.remove(ClassName$a.SHOWING);

        _this._element.classList.add(ClassName$a.SHOW);

        $(_this._element).trigger(Event$a.SHOWN);

        if (_this._config.autohide) {
          _this._timeout = setTimeout(function () {
            _this.hide();
          }, _this._config.delay);
        }
      };

      this._element.classList.remove(ClassName$a.HIDE);

      Util.reflow(this._element);

      this._element.classList.add(ClassName$a.SHOWING);

      if (this._config.animation) {
        var transitionDuration = Util.getTransitionDurationFromElement(this._element);
        $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      } else {
        complete();
      }
    };

    _proto.hide = function hide() {
      if (!this._element.classList.contains(ClassName$a.SHOW)) {
        return;
      }

      var hideEvent = $.Event(Event$a.HIDE);
      $(this._element).trigger(hideEvent);

      if (hideEvent.isDefaultPrevented()) {
        return;
      }

      this._close();
    };

    _proto.dispose = function dispose() {
      clearTimeout(this._timeout);
      this._timeout = null;

      if (this._element.classList.contains(ClassName$a.SHOW)) {
        this._element.classList.remove(ClassName$a.SHOW);
      }

      $(this._element).off(Event$a.CLICK_DISMISS);
      $.removeData(this._element, DATA_KEY$a);
      this._element = null;
      this._config = null;
    } // Private
    ;

    _proto._getConfig = function _getConfig(config) {
      config = _objectSpread2({}, Default$7, {}, $(this._element).data(), {}, _typeof(config) === 'object' && config ? config : {});
      Util.typeCheckConfig(NAME$a, config, this.constructor.DefaultType);
      return config;
    };

    _proto._setListeners = function _setListeners() {
      var _this2 = this;

      $(this._element).on(Event$a.CLICK_DISMISS, Selector$a.DATA_DISMISS, function () {
        return _this2.hide();
      });
    };

    _proto._close = function _close() {
      var _this3 = this;

      var complete = function complete() {
        _this3._element.classList.add(ClassName$a.HIDE);

        $(_this3._element).trigger(Event$a.HIDDEN);
      };

      this._element.classList.remove(ClassName$a.SHOW);

      if (this._config.animation) {
        var transitionDuration = Util.getTransitionDurationFromElement(this._element);
        $(this._element).one(Util.TRANSITION_END, complete).emulateTransitionEnd(transitionDuration);
      } else {
        complete();
      }
    } // Static
    ;

    Toast._jQueryInterface = function _jQueryInterface(config) {
      return this.each(function () {
        var $element = $(this);
        var data = $element.data(DATA_KEY$a);

        var _config = _typeof(config) === 'object' && config;

        if (!data) {
          data = new Toast(this, _config);
          $element.data(DATA_KEY$a, data);
        }

        if (typeof config === 'string') {
          if (typeof data[config] === 'undefined') {
            throw new TypeError("No method named \"" + config + "\"");
          }

          data[config](this);
        }
      });
    };

    _createClass(Toast, null, [{
      key: "VERSION",
      get: function get() {
        return VERSION$a;
      }
    }, {
      key: "DefaultType",
      get: function get() {
        return DefaultType$7;
      }
    }, {
      key: "Default",
      get: function get() {
        return Default$7;
      }
    }]);

    return Toast;
  }();
  /**
   * ------------------------------------------------------------------------
   * jQuery
   * ------------------------------------------------------------------------
   */


  $.fn[NAME$a] = Toast._jQueryInterface;
  $.fn[NAME$a].Constructor = Toast;

  $.fn[NAME$a].noConflict = function () {
    $.fn[NAME$a] = JQUERY_NO_CONFLICT$a;
    return Toast._jQueryInterface;
  };

  exports.Alert = Alert;
  exports.Button = Button;
  exports.Carousel = Carousel;
  exports.Collapse = Collapse;
  exports.Dropdown = Dropdown;
  exports.Modal = Modal;
  exports.Popover = Popover;
  exports.Scrollspy = ScrollSpy;
  exports.Tab = Tab;
  exports.Toast = Toast;
  exports.Tooltip = Tooltip;
  exports.Util = Util;
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
});
},{"jquery":"../node_modules/jquery/dist/jquery.js","popper.js":"../node_modules/popper.js/dist/esm/popper.js"}],"../node_modules/parcel-bundler/src/builtins/bundle-url.js":[function(require,module,exports) {
var bundleURL = null;

function getBundleURLCached() {
  if (!bundleURL) {
    bundleURL = getBundleURL();
  }

  return bundleURL;
}

function getBundleURL() {
  // Attempt to find the URL of the current script and use that as the base URL
  try {
    throw new Error();
  } catch (err) {
    var matches = ('' + err.stack).match(/(https?|file|ftp|chrome-extension|moz-extension):\/\/[^)\n]+/g);

    if (matches) {
      return getBaseURL(matches[0]);
    }
  }

  return '/';
}

function getBaseURL(url) {
  return ('' + url).replace(/^((?:https?|file|ftp|chrome-extension|moz-extension):\/\/.+)\/[^/]+$/, '$1') + '/';
}

exports.getBundleURL = getBundleURLCached;
exports.getBaseURL = getBaseURL;
},{}],"../node_modules/parcel-bundler/src/builtins/css-loader.js":[function(require,module,exports) {
var bundle = require('./bundle-url');

function updateLink(link) {
  var newLink = link.cloneNode();

  newLink.onload = function () {
    link.remove();
  };

  newLink.href = link.href.split('?')[0] + '?' + Date.now();
  link.parentNode.insertBefore(newLink, link.nextSibling);
}

var cssTimeout = null;

function reloadCSS() {
  if (cssTimeout) {
    return;
  }

  cssTimeout = setTimeout(function () {
    var links = document.querySelectorAll('link[rel="stylesheet"]');

    for (var i = 0; i < links.length; i++) {
      if (bundle.getBaseURL(links[i].href) === bundle.getBundleURL()) {
        updateLink(links[i]);
      }
    }

    cssTimeout = null;
  }, 50);
}

module.exports = reloadCSS;
},{"./bundle-url":"../node_modules/parcel-bundler/src/builtins/bundle-url.js"}],"../node_modules/bootstrap/dist/css/bootstrap.css":[function(require,module,exports) {
var reloadCSS = require('_css_loader');

module.hot.dispose(reloadCSS);
module.hot.accept(reloadCSS);
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/@fortawesome/fontawesome-free/css/all.css":[function(require,module,exports) {
var reloadCSS = require('_css_loader');

module.hot.dispose(reloadCSS);
module.hot.accept(reloadCSS);
},{"./..\\webfonts\\fa-brands-400.eot":[["fa-brands-400.7b5acd02.eot","../node_modules/@fortawesome/fontawesome-free/webfonts/fa-brands-400.eot"],"../node_modules/@fortawesome/fontawesome-free/webfonts/fa-brands-400.eot"],"./..\\webfonts\\fa-brands-400.woff2":[["fa-brands-400.34cc846b.woff2","../node_modules/@fortawesome/fontawesome-free/webfonts/fa-brands-400.woff2"],"../node_modules/@fortawesome/fontawesome-free/webfonts/fa-brands-400.woff2"],"./..\\webfonts\\fa-brands-400.woff":[["fa-brands-400.75159956.woff","../node_modules/@fortawesome/fontawesome-free/webfonts/fa-brands-400.woff"],"../node_modules/@fortawesome/fontawesome-free/webfonts/fa-brands-400.woff"],"./..\\webfonts\\fa-brands-400.ttf":[["fa-brands-400.f885063e.ttf","../node_modules/@fortawesome/fontawesome-free/webfonts/fa-brands-400.ttf"],"../node_modules/@fortawesome/fontawesome-free/webfonts/fa-brands-400.ttf"],"./..\\webfonts\\fa-brands-400.svg":[["fa-brands-400.1f0eb095.svg","../node_modules/@fortawesome/fontawesome-free/webfonts/fa-brands-400.svg"],"../node_modules/@fortawesome/fontawesome-free/webfonts/fa-brands-400.svg"],"./..\\webfonts\\fa-regular-400.eot":[["fa-regular-400.d4b9b17f.eot","../node_modules/@fortawesome/fontawesome-free/webfonts/fa-regular-400.eot"],"../node_modules/@fortawesome/fontawesome-free/webfonts/fa-regular-400.eot"],"./..\\webfonts\\fa-regular-400.woff2":[["fa-regular-400.82c42f2f.woff2","../node_modules/@fortawesome/fontawesome-free/webfonts/fa-regular-400.woff2"],"../node_modules/@fortawesome/fontawesome-free/webfonts/fa-regular-400.woff2"],"./..\\webfonts\\fa-regular-400.woff":[["fa-regular-400.adc5c7aa.woff","../node_modules/@fortawesome/fontawesome-free/webfonts/fa-regular-400.woff"],"../node_modules/@fortawesome/fontawesome-free/webfonts/fa-regular-400.woff"],"./..\\webfonts\\fa-regular-400.ttf":[["fa-regular-400.b073eab5.ttf","../node_modules/@fortawesome/fontawesome-free/webfonts/fa-regular-400.ttf"],"../node_modules/@fortawesome/fontawesome-free/webfonts/fa-regular-400.ttf"],"./..\\webfonts\\fa-regular-400.svg":[["fa-regular-400.16d6ac71.svg","../node_modules/@fortawesome/fontawesome-free/webfonts/fa-regular-400.svg"],"../node_modules/@fortawesome/fontawesome-free/webfonts/fa-regular-400.svg"],"./..\\webfonts\\fa-solid-900.eot":[["fa-solid-900.0b60ff24.eot","../node_modules/@fortawesome/fontawesome-free/webfonts/fa-solid-900.eot"],"../node_modules/@fortawesome/fontawesome-free/webfonts/fa-solid-900.eot"],"./..\\webfonts\\fa-solid-900.woff2":[["fa-solid-900.55d5ef42.woff2","../node_modules/@fortawesome/fontawesome-free/webfonts/fa-solid-900.woff2"],"../node_modules/@fortawesome/fontawesome-free/webfonts/fa-solid-900.woff2"],"./..\\webfonts\\fa-solid-900.woff":[["fa-solid-900.f824330b.woff","../node_modules/@fortawesome/fontawesome-free/webfonts/fa-solid-900.woff"],"../node_modules/@fortawesome/fontawesome-free/webfonts/fa-solid-900.woff"],"./..\\webfonts\\fa-solid-900.ttf":[["fa-solid-900.47a039f3.ttf","../node_modules/@fortawesome/fontawesome-free/webfonts/fa-solid-900.ttf"],"../node_modules/@fortawesome/fontawesome-free/webfonts/fa-solid-900.ttf"],"./..\\webfonts\\fa-solid-900.svg":[["fa-solid-900.d08d5f59.svg","../node_modules/@fortawesome/fontawesome-free/webfonts/fa-solid-900.svg"],"../node_modules/@fortawesome/fontawesome-free/webfonts/fa-solid-900.svg"],"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/material-design-icons/index.js":[function(require,module,exports) {
var __dirname = "C:\\Users\\randy\\chord-master\\node_modules\\material-design-icons";
module.exports = {
  STATIC_PATH: __dirname,
};

},{}],"../node_modules/bootstrap-submenu/dist/css/bootstrap-submenu.css":[function(require,module,exports) {

        var reloadCSS = require('_css_loader');
        module.hot.dispose(reloadCSS);
        module.hot.accept(reloadCSS);
      
},{"_css_loader":"../node_modules/parcel-bundler/src/builtins/css-loader.js"}],"../node_modules/bootstrap-submenu/dist/js/bootstrap-submenu.js":[function(require,module,exports) {
var define;
(function (factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module
    define(['jquery'], factory);
  } else if (typeof exports === 'object') {
    // Node/CommonJS
    module.exports = factory(require('jquery'));
  } else {
    // Browser globals
    factory(jQuery);
  }
})(function ($) {
  var DropdownSubmenu =
  /*#__PURE__*/
  function () {
    function DropdownSubmenu(element) {
      this.element = element.parentElement;
      this.menuElement = this.element.querySelector('.dropdown-menu');
      this.init();
    }

    var _proto = DropdownSubmenu.prototype;

    _proto.init = function init() {
      var _this = this;

      $(this.element).off('keydown.bs.dropdown.data-api');
      this.menuElement.addEventListener('keydown', this.itemKeydown.bind(this));
      var dropdownItemNodeList = this.menuElement.querySelectorAll('.dropdown-item');
      Array.from(dropdownItemNodeList).forEach(function (element) {
        element.addEventListener('keydown', _this.handleKeydownDropdownItem.bind(_this));
      });
      $(this.menuElement).on('keydown', '.dropdown-submenu > .dropdown-item', this.handleKeydownSubmenuDropdownItem.bind(this));
      $(this.menuElement).on('click', '.dropdown-submenu > .dropdown-item', this.handleClickSubmenuDropdownItem.bind(this));
      $(this.element).on('hidden.bs.dropdown', function () {
        _this.close(_this.menuElement);
      });
    };

    _proto.handleKeydownDropdownItem = function handleKeydownDropdownItem(event) {
      // 27: Esc
      if (event.keyCode !== 27) {
        return;
      }

      event.target.closest('.dropdown-menu').previousElementSibling.focus();
      event.target.closest('.dropdown-menu').classList.remove('show');
    };

    _proto.handleKeydownSubmenuDropdownItem = function handleKeydownSubmenuDropdownItem(event) {
      // 32: Spacebar
      if (event.keyCode !== 32) {
        return;
      } // NOTE: Off vertical scrolling


      event.preventDefault();
      this.toggle(event.target);
    };

    _proto.handleClickSubmenuDropdownItem = function handleClickSubmenuDropdownItem(event) {
      event.stopPropagation();
      this.toggle(event.target);
    };

    _proto.itemKeydown = function itemKeydown(event) {
      // 38: Arrow up, 40: Arrow down
      if (![38, 40].includes(event.keyCode)) {
        return;
      } // NOTE: Off vertical scrolling


      event.preventDefault();
      event.stopPropagation();
      var itemNodeList = this.element.querySelectorAll('.show > .dropdown-item:not(:disabled):not(.disabled), .show > .dropdown > .dropdown-item');
      var index = Array.from(itemNodeList).indexOf(event.target);

      if (event.keyCode === 38 && index !== 0) {
        index--;
      } else if (event.keyCode === 40 && index !== itemNodeList.length - 1) {
        index++;
      } else {
        return;
      }

      itemNodeList[index].focus();
    };

    _proto.toggle = function toggle(element) {
      var dropdownElement = element.closest('.dropdown');
      var parentMenuElement = dropdownElement.closest('.dropdown-menu');
      var menuElement = dropdownElement.querySelector('.dropdown-menu');
      var isOpen = menuElement.classList.contains('show');
      this.close(parentMenuElement);
      menuElement.classList.toggle('show', !isOpen);
    };

    _proto.close = function close(menuElement) {
      var menuNodeList = menuElement.querySelectorAll('.dropdown-menu.show');
      Array.from(menuNodeList).forEach(function (element) {
        element.classList.remove('show');
      });
    };

    return DropdownSubmenu;
  }(); // For AMD/Node/CommonJS used elements (optional)
  // http://learn.jquery.com/jquery-ui/environments/amd/


  $.fn.submenupicker = function (elements) {
    var $elements = this instanceof $ ? this : $(elements);
    return $elements.each(function () {
      var data = $.data(this, 'bs.submenu');

      if (!data) {
        data = new DropdownSubmenu(this);
        $.data(this, 'bs.submenu', data);
      }
    });
  };

  return DropdownSubmenu;
});
},{"jquery":"../node_modules/jquery/dist/jquery.js"}],"../node_modules/@tonaljs/tonal/dist/index.esnext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.coordToInterval = coordToInterval;
exports.coordToNote = coordToNote;
exports.decode = decode;
exports.distance = distance;
exports.encode = encode;
exports.interval = interval;
exports.isNamed = isNamed;
exports.isPitch = isPitch;
exports.note = note;
exports.tokenizeInterval = tokenize$1;
exports.tokenizeNote = tokenize;
exports.transpose = transpose;
exports.altToAcc = exports.accToAlt = void 0;

function isNamed(src) {
  return typeof src === "object" && typeof src.name === "string";
}

function isPitch(pitch) {
  return typeof pitch === "object" && typeof pitch.step === "number" && typeof pitch.alt === "number";
} // The nuuber of fifths of [C, D, E, F, G, A, B]


const FIFTHS = [0, 2, 4, -1, 1, 3, 5]; // The number of octaves it span each step

const STEPS_TO_OCTS = FIFTHS.map(fifths => Math.floor(fifths * 7 / 12));

function encode(pitch) {
  const {
    step,
    alt,
    oct,
    dir = 1
  } = pitch;
  const f = FIFTHS[step] + 7 * alt;

  if (oct === undefined) {
    return [dir * f];
  }

  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;
  return [dir * f, dir * o];
} // We need to get the steps from fifths
// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]
// We add 1 to fifths to avoid negative numbers, so:
// for ["F", "C", "G", "D", "A", "E", "B"] we have:


const FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];

function decode(coord) {
  const [f, o, dir] = coord;
  const step = FIFTHS_TO_STEPS[unaltered(f)];
  const alt = Math.floor((f + 1) / 7);

  if (o === undefined) {
    return {
      step,
      alt,
      dir
    };
  }

  const oct = o + 4 * alt + STEPS_TO_OCTS[step];
  return {
    step,
    alt,
    oct,
    dir
  };
} // Return the number of fifths as if it were unaltered


function unaltered(f) {
  const i = (f + 1) % 7;
  return i < 0 ? 7 + i : i;
}

const NoNote = {
  empty: true,
  name: "",
  pc: "",
  acc: ""
};
const cache = {};

const fillStr = (s, n) => Array(n + 1).join(s);

const stepToLetter = step => "CDEFGAB".charAt(step);

const altToAcc = alt => alt < 0 ? fillStr("b", -alt) : fillStr("#", alt);

exports.altToAcc = altToAcc;

const accToAlt = acc => acc[0] === "b" ? -acc.length : acc.length;
/**
 * Given a note literal (a note name or a note object), returns the Note object
 * @example
 * note('Bb4') // => { name: "Bb4", midi: 70, chroma: 10, ... }
 */


exports.accToAlt = accToAlt;

function note(src) {
  return typeof src === "string" ? cache[src] || (cache[src] = parse(src)) : isPitch(src) ? note(pitchName(src)) : isNamed(src) ? note(src.name) : NoNote;
}

const REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\d*)\s*(.*)$/;
/**
 * @private
 */

function tokenize(str) {
  const m = REGEX.exec(str);
  return [m[1].toUpperCase(), m[2].replace(/x/g, "##"), m[3], m[4]];
}
/**
 * @private
 */


function coordToNote(noteCoord) {
  return note(decode(noteCoord));
}

const SEMI = [0, 2, 4, 5, 7, 9, 11];

function parse(noteName) {
  const tokens = tokenize(noteName);

  if (tokens[0] === "" || tokens[3] !== "") {
    return NoNote;
  }

  const letter = tokens[0];
  const acc = tokens[1];
  const octStr = tokens[2];
  const step = (letter.charCodeAt(0) + 3) % 7;
  const alt = accToAlt(acc);
  const oct = octStr.length ? +octStr : undefined;
  const coord = encode({
    step,
    alt,
    oct
  });
  const name = letter + acc + octStr;
  const pc = letter + acc;
  const chroma = (SEMI[step] + alt + 120) % 12;
  const o = oct === undefined ? -100 : oct;
  const height = SEMI[step] + alt + 12 * (o + 1);
  const midi = height >= 0 && height <= 127 ? height : null;
  const freq = oct === undefined ? null : Math.pow(2, (height - 69) / 12) * 440;
  return {
    empty: false,
    acc,
    alt,
    chroma,
    coord,
    freq,
    height,
    letter,
    midi,
    name,
    oct,
    pc,
    step
  };
}

function pitchName(props) {
  const {
    step,
    alt,
    oct
  } = props;
  const letter = stepToLetter(step);

  if (!letter) {
    return "";
  }

  const pc = letter + altToAcc(alt);
  return oct || oct === 0 ? pc + oct : pc;
}

const NoInterval = {
  empty: true,
  name: "",
  acc: ""
}; // shorthand tonal notation (with quality after number)

const INTERVAL_TONAL_REGEX = "([-+]?\\d+)(d{1,4}|m|M|P|A{1,4})"; // standard shorthand notation (with quality before number)

const INTERVAL_SHORTHAND_REGEX = "(AA|A|P|M|m|d|dd)([-+]?\\d+)";
const REGEX$1 = new RegExp("^" + INTERVAL_TONAL_REGEX + "|" + INTERVAL_SHORTHAND_REGEX + "$");
/**
 * @private
 */

function tokenize$1(str) {
  const m = REGEX$1.exec(`${str}`);

  if (m === null) {
    return ["", ""];
  }

  return m[1] ? [m[1], m[2]] : [m[4], m[3]];
}

const cache$1 = {};
/**
 * Get interval properties. It returns an object with:
 *
 * - name: the interval name
 * - num: the interval number
 * - type: 'perfectable' or 'majorable'
 * - q: the interval quality (d, m, M, A)
 * - dir: interval direction (1 ascending, -1 descending)
 * - simple: the simplified number
 * - semitones: the size in semitones
 * - chroma: the interval chroma
 *
 * @param {string} interval - the interval name
 * @return {Object} the interval properties
 *
 * @example
 * import { interval } from '@tonaljs/tonal'
 * interval('P5').semitones // => 7
 * interval('m3').type // => 'majorable'
 */

function interval(src) {
  return typeof src === "string" ? cache$1[src] || (cache$1[src] = parse$1(src)) : isPitch(src) ? interval(pitchName$1(src)) : isNamed(src) ? interval(src.name) : NoInterval;
}

const SIZES = [0, 2, 4, 5, 7, 9, 11];
const TYPES = "PMMPPMM";

function parse$1(str) {
  const tokens = tokenize$1(str);

  if (tokens[0] === "") {
    return NoInterval;
  }

  const num = +tokens[0];
  const q = tokens[1];
  const step = (Math.abs(num) - 1) % 7;
  const t = TYPES[step];

  if (t === "M" && q === "P") {
    return NoInterval;
  }

  const type = t === "M" ? "majorable" : "perfectable";
  const name = "" + num + q;
  const dir = num < 0 ? -1 : 1;
  const simple = num === 8 || num === -8 ? num : dir * (step + 1);
  const alt = qToAlt(type, q);
  const oct = Math.floor((Math.abs(num) - 1) / 7);
  const semitones = dir * (SIZES[step] + alt + 12 * oct);
  const chroma = (dir * (SIZES[step] + alt) % 12 + 12) % 12;
  const coord = encode({
    step,
    alt,
    oct,
    dir
  });
  return {
    empty: false,
    name,
    num,
    q,
    step,
    alt,
    dir,
    type,
    simple,
    semitones,
    chroma,
    coord,
    oct
  };
}
/**
 * @private
 */


function coordToInterval(coord) {
  const [f, o = 0] = coord;
  const isDescending = f * 7 + o * 12 < 0;
  const ivl = isDescending ? [-f, -o, -1] : [f, o, 1];
  return interval(decode(ivl));
}

function qToAlt(type, q) {
  return q === "M" && type === "majorable" || q === "P" && type === "perfectable" ? 0 : q === "m" && type === "majorable" ? -1 : /^A+$/.test(q) ? q.length : /^d+$/.test(q) ? -1 * (type === "perfectable" ? q.length : q.length + 1) : 0;
} // return the interval name of a pitch


function pitchName$1(props) {
  const {
    step,
    alt,
    oct = 0,
    dir
  } = props;

  if (!dir) {
    return "";
  }

  const num = step + 1 + 7 * oct;
  const d = dir < 0 ? "-" : "";
  const type = TYPES[step] === "M" ? "majorable" : "perfectable";
  const name = d + num + altToQ(type, alt);
  return name;
}

const fillStr$1 = (s, n) => Array(Math.abs(n) + 1).join(s);

function altToQ(type, alt) {
  if (alt === 0) {
    return type === "majorable" ? "M" : "P";
  } else if (alt === -1 && type === "majorable") {
    return "m";
  } else if (alt > 0) {
    return fillStr$1("A", alt);
  } else {
    return fillStr$1("d", type === "perfectable" ? alt : alt + 1);
  }
}
/**
 * Transpose a note by an interval.
 *
 * @param {string} note - the note or note name
 * @param {string} interval - the interval or interval name
 * @return {string} the transposed note name or empty string if not valid notes
 * @example
 * import { tranpose } from "@tonaljs/tonal"
 * transpose("d3", "3M") // => "F#3"
 * transpose("D", "3M") // => "F#"
 * ["C", "D", "E", "F", "G"].map(pc => transpose(pc, "M3)) // => ["E", "F#", "G#", "A", "B"]
 */


function transpose(noteName, intervalName) {
  const note$1 = note(noteName);
  const interval$1 = interval(intervalName);

  if (note$1.empty || interval$1.empty) {
    return "";
  }

  const noteCoord = note$1.coord;
  const intervalCoord = interval$1.coord;
  const tr = noteCoord.length === 1 ? [noteCoord[0] + intervalCoord[0]] : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];
  return coordToNote(tr).name;
}
/**
 * Find the interval distance between two notes or coord classes.
 *
 * To find distance between coord classes, both notes must be coord classes and
 * the interval is always ascending
 *
 * @param {Note|string} from - the note or note name to calculate distance from
 * @param {Note|string} to - the note or note name to calculate distance to
 * @return {string} the interval name or empty string if not valid notes
 *
 */


function distance(fromNote, toNote) {
  const from = note(fromNote);
  const to = note(toNote);

  if (from.empty || to.empty) {
    return "";
  }

  const fcoord = from.coord;
  const tcoord = to.coord;
  const fifths = tcoord[0] - fcoord[0];
  const octs = fcoord.length === 2 && tcoord.length === 2 ? tcoord[1] - fcoord[1] : -Math.floor(fifths * 7 / 12);
  return coordToInterval([fifths, octs]).name;
}
},{}],"ts/music-theory/Note.ts":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tonal_1 = require("@tonaljs/tonal");

var Note =
/** @class */
function () {
  function Note() {}

  Note.toKeyNum = function (noteName) {
    var octave = tonal_1.note(noteName).oct;
    var chroma = tonal_1.note(noteName).chroma;
    return octave * 12 + chroma;
  };

  Note.toNoteName = function (keyNum) {
    if (keyNum < 0) {
      throw new Error("The key number is less than 0");
    }

    var octave = Math.floor(keyNum / 12);
    var chroma = Note.chromas[keyNum % 12];
    return "" + chroma + octave;
  };
  /**
   * Get the pitch of the key number
   * @param keyNum
   */


  Note.toChroma = function (keyNum) {
    if (keyNum < 0) {
      throw new Error("The key number is less than 0");
    }

    return Note.chromas[keyNum % 12];
  };

  Note.chromas = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];
  return Note;
}();

exports.Note = Note;
},{"@tonaljs/tonal":"../node_modules/@tonaljs/tonal/dist/index.esnext.js"}],"ts/keyboard/Keyboard.ts":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Note_1 = require("../music-theory/Note");

var offsets = [0, 0.5, 1, 1.5, 2, 3, 3.5, 4, 4.5, 5, 5.5, 6];

var Keyboard =
/** @class */
function () {
  function Keyboard(container) {
    this._container = document.createElement('div');
    this._container.id = 'keyboard';
    container.setAttribute('touch-action', 'none');
    container.appendChild(this._container);
    this._keys = [];
    this._prevKeys = [];
    this._chords = []; // Callback events

    this.onKeyDown = function () {};

    this.onKeyUp = function () {};
  }
  /**
   * Resize the keyboard according to the window's width
   * @param lowestKeyNum
   * @param octaves
   */


  Keyboard.prototype.resize = function (lowestKeyNum, octaves) {
    if (lowestKeyNum === void 0) {
      lowestKeyNum = 0;
    }

    this._container.innerHTML = ''; // Clear the previous ones

    var keyWidth = 1 / 7 / octaves;

    for (var keyNum = lowestKeyNum; keyNum < lowestKeyNum + octaves * 12; keyNum++) {
      var key = document.createElement('div'); // Add a div for a key

      key.classList.add('key');
      var isSharp = [1, 3, 6, 8, 10].indexOf(keyNum % 12) !== -1; // A key is sharp if the note it represents is a sharp note

      if (isSharp) {
        key.classList.add('black');
      } else {
        key.classList.add('white');
      } // Add the note on the key if it is C


      var noteName = Note_1.Note.toNoteName(keyNum);
      var isC = keyNum % 12 === 0;

      if (isC) {
        // Starts with C, not C#
        var noteP = document.createElement("p");
        noteP.classList.add('note-name');
        noteP.dataset.noteName = noteName;
        noteP.dataset.keyNum = keyNum.toString();
        noteP.innerText = noteName;
        key.appendChild(noteP);
      } // Calculate the position of the div


      var lowestOctave = Math.floor(lowestKeyNum / 12);
      var lowestOffset = offsets[lowestKeyNum % 12] + lowestOctave * 7;
      var noteOctave = Math.floor(keyNum / 12);
      var offset = offsets[keyNum % 12] + noteOctave * 7 - lowestOffset;

      if (Number.isInteger(offset) === true) {
        // Is white key
        key.style.width = keyWidth * 100 + "%";
        key.style.left = offset * keyWidth * 100 + "%";
      } else {
        // is black key
        key.style.width = keyWidth * 100 / 2 + "%"; // half width

        key.style.left = offset * keyWidth * 100 + keyWidth * 100 / 4 + "%"; // + 1/4 width
      } // Assign the html property to the div


      key.dataset.keyNum = keyNum.toString();
      key.dataset.noteName = noteName;
      key.setAttribute('touch-action', 'none');

      this._container.appendChild(key); // Add each key as the child of 'keyboard' class


      this._bindKeyEvents(key); // Bind event listeners


      this._keys[keyNum] = key; // Add key to the keys list
    }
  };
  /**
   * Bind the key events to the key
   * @param key
   * @private
   */


  Keyboard.prototype._bindKeyEvents = function (key) {
    var _this = this;

    key.addEventListener('pointerdown', function (e) {
      var target = e.target;
      var keyNum = parseInt(target.getAttribute("data-key-num"));

      _this.onKeyDown(keyNum);
    });
    key.addEventListener("pointerout", function (e) {
      var target = e.target;
      var keyNum = parseInt(target.getAttribute("data-key-num"));

      _this.onKeyUp(keyNum);
    });
    key.addEventListener("pointerup", function (e) {
      var target = e.target;
      var keyNum = parseInt(target.getAttribute("data-key-num"));

      _this.onKeyUp(keyNum);
    });
  };
  /**
   * Unhighlight keys
   * @param keys an array of key element
   */


  Keyboard.prototype._unhighlight = function (keys) {
    keys.forEach(function (key) {
      key.classList.remove("highlight");
    });
  };
  /**
   * Show the chord by displaying the chord string and highlight the keys in the chord
   * @public
   * @param chord
   */


  Keyboard.prototype.highlight = function (chord) {
    // Change the previous keys' color back to the original color
    this._unhighlight(this._prevKeys); // Unhilight previous keys


    this._prevKeys = []; // Reset the prev keys

    if (!chord) {
      // Chord does not exist
      console.warn("Notes not specified. Cannot play the chord");
      return false;
    }

    for (var _i = 0, _a = chord; _i < _a.length; _i++) {
      // Loop through the notes in the chord
      var note = _a[_i];
      var selectorNote = note.replace("#", "\\#"); // # is encoded as \\#

      var key = document.querySelector(".key[data-note-name=" + selectorNote + "]"); // Get the key of the note. Return null if there are no matches

      if (key !== null) {
        // Only highlight the key if it is in the boundary
        key.classList.add("highlight"); // Highlight the key

        this._prevKeys.push(key); // Save the keys as prevKeys

      }
    }

    this._chords.push(chord);

    return true;
  };

  Keyboard.prototype.keyUp = function () {
    return;
  };

  return Keyboard;
}();

exports.Keyboard = Keyboard;
},{"../music-theory/Note":"ts/music-theory/Note.ts"}],"ts/music-theory/Chord.ts":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Note_1 = require("./Note");

var Chord =
/** @class */
function () {
  function Chord(rootKeyNum, type, family, inversionNum) {
    if (rootKeyNum === void 0) {
      rootKeyNum = 48;
    }

    if (type === void 0) {
      type = "Major Triad";
    }

    if (family === void 0) {
      family = "Triads";
    }

    if (inversionNum === void 0) {
      inversionNum = 0;
    }

    this.type = type;
    this.rootKeyNum = rootKeyNum; // Root is C4 initially

    this.family = family;
    this.inversionNum = inversionNum;
  }
  /**
   * Get an array of string of the note in the chord
   */


  Chord.prototype.getNotes = function () {
    var halfSteps = Chord.chordFamilies[this.family][this.type].slice(0);

    if (halfSteps == null) {
      throw new Error("Cannot get the half steps");
    }

    for (var i = 0; i < this.inversionNum; i++) {
      // Inverse half steps
      halfSteps[i] += 12;
    }

    var notes = [];

    for (var _i = 0, halfSteps_1 = halfSteps; _i < halfSteps_1.length; _i++) {
      var halfStep = halfSteps_1[_i];
      var curKeyNum = this.rootKeyNum + halfStep;
      var curNote = Note_1.Note.toNoteName(curKeyNum);
      notes.push(curNote);
    }

    return notes;
  };
  /**
   * Get the half steps of the chord type
   * @param family
   * @param type
   */


  Chord.getLen = function (family, type) {
    var halfSteps = Chord.chordFamilies[family][type].slice(0);

    if (halfSteps == []) {
      throw new Error("Cannot get the half steps");
    } else {
      return halfSteps.length;
    }
  };
  /**
   * Overwrite toString method
   */


  Chord.prototype.toString = function () {
    var notes = this.getNotes();
    return notes.toString();
  };
  /**
   * Get the chord name
   */


  Chord.prototype.getChordName = function () {
    var typeSymbol = Chord.chordTypeSymbols[this.type];
    var chroma = Note_1.Note.toChroma(this.rootKeyNum);

    var inversionSymbol = this._getInversionSymbol();

    return "" + chroma + typeSymbol + inversionSymbol;
  };

  Chord.prototype._getHalfSteps = function () {
    var halfSteps = Chord.chordFamilies[this.family][this.type].slice(0);

    if (halfSteps == null) {
      throw new Error("Cannot get the half steps");
    }

    return halfSteps;
  };

  Chord.prototype._getInversionSymbol = function () {
    if (this.inversionNum == 0) {
      return "";
    }

    var halfSteps = this._getHalfSteps();

    var rootKeyNum = this.rootKeyNum;
    var inversedKeyNum = rootKeyNum + halfSteps[this.inversionNum];
    var inversedNote = Note_1.Note.toChroma(inversedKeyNum);

    if (inversedNote.indexOf("#") > -1) {
      inversedNote = inversedNote.replace("#", "♯");
    }

    if (inversedNote == undefined) {
      console.warn("Inversion note is undefined");
      return "";
    }

    return "/" + inversedNote;
  }; //TODO: the symbol dictionary is not complete


  Chord.chordTypeSymbols = {
    //Triads
    "Single Note": "",
    "Major Triad": "",
    "Minor Triad": "m",
    "Augmented Triad": "<sup>+",
    "Diminished Triad": "<sup>o",
    //Sevenths
    "Dominant Seventh": "<sup>7</sup>",
    "Major Seventh": "maj<sup>7</sup>",
    "Minor Seventh": "min<sup>7</sup>",
    "Diminished Seventh": "<sup>o7</sup>",
    "Half Diminished Seventh": "min<sup>7♭5</sup>",
    "Augmented Seventh": "<sup>+7</sup>",
    "Augmented Major Seventh": "<sup>+M7</sup>",
    //Extended
    "Dominant Ninth": "<sup>9</sup>",
    "Dominant Thirteenth": "<sup>13</sup>",
    //Altered
    "Seventh Augmented Fifth": "<sup>7♯5</sup>",
    "Seventh Minor Ninth": "m<sup>9</sup>",
    "Seventh Sharp Ninth": "<sup>7♯9</sup>"
  };
  Chord.chordFamilies = {
    "Triads": {
      "Major Triad": [0, 4, 7],
      "Minor Triad": [0, 3, 7],
      "Augmented Triad": [0, 4, 8],
      "Diminished Triad": [0, 3, 6]
    },
    "Sevenths": {
      "Dominant Seventh": [0, 4, 7, 10],
      "Major Seventh": [0, 4, 7, 11],
      "Minor Seventh": [0, 3, 7, 10],
      "Diminished Seventh": [0, 3, 6, 9],
      "Half Diminished Seventh": [0, 3, 6, 10],
      "Augmented Seventh": [0, 4, 8, 10],
      "Augmented Major Seventh": [0, 4, 8, 11] // C E G♯ B

    },
    "Extended": {
      "Dominant Ninth": [0, 4, 7, 10, 14],
      "Dominant Seventh": [0, 4, 7, 10, 14, 16],
      "Dominant Thirteenth": [0, 4, 7, 10, 14, 16, 20] // C E G B♭ D F A

    },
    "Altered": {
      "Seventh Augmented Fifth": [0, 4, 8, 10],
      "Seventh Minor Ninth": [0, 4, 7, 10, 13],
      "Seventh Sharp Ninth": [0, 4, 7, 10, 15] // C E G B♭ D♯

    }
  };
  return Chord;
}();

exports.Chord = Chord;
},{"./Note":"ts/music-theory/Note.ts"}],"ts/keyboard/Piano.ts":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Keyboard_1 = require("./Keyboard");

var Chord_1 = require("../music-theory/Chord");

var Piano =
/** @class */
function () {
  function Piano(container) {
    this.currChord = new Chord_1.Chord(); // The piano keyboard interface

    this._keyboardInterface = new Keyboard_1.Keyboard(container);
    this._keyboardInterface.onKeyDown = this.keyDown.bind(this); // Trigger the callback event after clicking a key

    this._keyboardInterface.onKeyUp = this.keyUp.bind(this);
    window.addEventListener('resize', this._resize.bind(this)); // Resize the keyboard according to the width of the window

    this._resize(); // Callback events


    this.onKeyDown = function () {};

    this.onKeyUp = function () {};

    this.onSetChord = function () {};

    this.setChord(new Chord_1.Chord());
  }

  ;
  /**
   * Resize the keyboard according to the window's width
   * @private
   */

  Piano.prototype._resize = function () {
    var keyWidth = 27;
    var octaves = Math.round(window.innerWidth / keyWidth / 12);
    octaves = Math.max(octaves, 1); // Octave not less than 2

    octaves = Math.min(octaves, 4); // Octave not greater than 7

    this._keyboardInterface.resize(36, octaves); // Populate keys from G2

  };
  /**
   * Set the chord after a key is down
   * @param keyNum
   */


  Piano.prototype.keyDown = function (keyNum) {
    this.setRootKeyNum(keyNum);
    this.onKeyDown(this.currChord);
  };
  /**
   * Key the root note, set the inversion to 0, and setChord the chord type and family
   * @param type
   * @param family
   */


  Piano.prototype.setChordType = function (family, type) {
    this.currChord.type = type;
    this.currChord.family = family;
    this.currChord.inversionNum = 0; // Reset inversion number to 0

    this.setChord(this.currChord);
  };
  /**
   * Set the inversion of the chord, setChord the highlight and play the sound
   * @param inversionNum
   */


  Piano.prototype.setInversion = function (inversionNum) {
    this.currChord.inversionNum = inversionNum; // Update inversion number

    this.setChord(this.currChord);
  };
  /**
   * Get the chord based on the root note, highlight the keys on the keyboard. and play the sound
   * @public
   * @param chord
   */


  Piano.prototype.setChord = function (chord) {
    this.currChord = chord; // Update current chord

    var notes = this.currChord.getNotes();
    console.log("Set the chord to " + notes);

    this._keyboardInterface.highlight(notes);

    this.onSetChord(chord);
  };

  Piano.prototype.setRootKeyNum = function (keyNum) {
    this.currChord.rootKeyNum = keyNum;
    var notes = this.currChord.getNotes();

    this._keyboardInterface.highlight(notes);

    console.log("Set the root key num to " + this.currChord.rootKeyNum);
  };
  /**
   * Release the sound
   */


  Piano.prototype.keyUp = function () {
    var chord = this.currChord.getNotes();
    this.onKeyUp(chord);
  };

  return Piano;
}();

exports.Piano = Piano;
},{"./Keyboard":"ts/keyboard/Keyboard.ts","../music-theory/Chord":"ts/music-theory/Chord.ts"}],"../node_modules/tone/tone/version.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _default = "13.8.25";
exports.default = _default;
},{}],"../node_modules/tone/tone/core/Tone.js":[function(require,module,exports) {
var global = arguments[3];
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _version = _interopRequireDefault(require("../version"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  Tone.js
 *  @author Yotam Mann
 *  @license http://opensource.org/licenses/MIT MIT License
 *  @copyright 2014-2019 Yotam Mann
 */
///////////////////////////////////////////////////////////////////////////
//	TONE
///////////////////////////////////////////////////////////////////////////

/**
 *  @class  Tone is the base class of all other classes.
 *  @constructor
 */
var Tone = function () {
  if (!(this instanceof Tone)) {
    throw new Error("constructor needs to be called with the 'new' keyword");
  }
};
/**
 *  @memberOf Tone#
 *  @returns {String} returns the name of the class as a string
 */


Tone.prototype.toString = function () {
  for (var className in Tone) {
    var isLetter = className[0].match(/^[A-Z]$/);
    var sameConstructor = Tone[className] === this.constructor;

    if (Tone.isFunction(Tone[className]) && isLetter && sameConstructor) {
      return className;
    }
  }

  return "Tone";
};
/**
 *  @memberOf Tone#
 *  disconnect and dispose
 *  @returns {Tone} this
 */


Tone.prototype.dispose = function () {
  return this;
}; ///////////////////////////////////////////////////////////////////////////
//	GET/SET
///////////////////////////////////////////////////////////////////////////

/**
 *  Set the parameters at once. Either pass in an
 *  object mapping parameters to values, or to set a
 *  single parameter, by passing in a string and value.
 *  The last argument is an optional ramp time which
 *  will ramp any signal values to their destination value
 *  over the duration of the rampTime.
 *  @param {Object|String} params
 *  @param {Number=} value
 *  @returns {Tone} this
 *  @memberOf Tone#
 *  @example
 * //set values using an object
 * filter.set({
 * 	"frequency" : 300,
 * 	"type" : highpass
 * });
 *  @example
 * filter.set("type", "highpass");
 *  @example
 * //ramp to the value 220 over 3 seconds.
 * oscillator.set({
 * 	"frequency" : 220
 * }, 3);
 */


Tone.prototype.set = function (params, value) {
  if (Tone.isString(params)) {
    var tmpObj = {};
    tmpObj[params] = value;
    params = tmpObj;
  }

  paramLoop: for (var attr in params) {
    value = params[attr];
    var parent = this;

    if (attr.indexOf(".") !== -1) {
      var attrSplit = attr.split(".");

      for (var i = 0; i < attrSplit.length - 1; i++) {
        parent = parent[attrSplit[i]];

        if (parent instanceof Tone) {
          attrSplit.splice(0, i + 1);
          var innerParam = attrSplit.join(".");
          parent.set(innerParam, value);
          continue paramLoop;
        }
      }

      attr = attrSplit[attrSplit.length - 1];
    }

    var param = parent[attr];

    if (Tone.isUndef(param)) {
      continue;
    }

    if (Tone.Signal && param instanceof Tone.Signal || Tone.Param && param instanceof Tone.Param) {
      if (param.value !== value) {
        param.value = value;
      }
    } else if (param instanceof AudioParam) {
      if (param.value !== value) {
        param.value = value;
      }
    } else if (Tone.TimeBase && param instanceof Tone.TimeBase) {
      parent[attr] = value;
    } else if (param instanceof Tone) {
      param.set(value);
    } else if (param !== value) {
      parent[attr] = value;
    }
  }

  return this;
};
/**
 *  Get the object's attributes. Given no arguments get
 *  will return all available object properties and their corresponding
 *  values. Pass in a single attribute to retrieve or an array
 *  of attributes. The attribute strings can also include a "."
 *  to access deeper properties.
 *  @memberOf Tone#
 *  @example
 * osc.get();
 * //returns {"type" : "sine", "frequency" : 440, ...etc}
 *  @example
 * osc.get("type");
 * //returns { "type" : "sine"}
 * @example
 * //use dot notation to access deep properties
 * synth.get(["envelope.attack", "envelope.release"]);
 * //returns {"envelope" : {"attack" : 0.2, "release" : 0.4}}
 *  @param {Array=|string|undefined} params the parameters to get, otherwise will return
 *  					                  all available.
 *  @returns {Object}
 */


Tone.prototype.get = function (params) {
  if (Tone.isUndef(params)) {
    params = this._collectDefaults(this.constructor);
  } else if (Tone.isString(params)) {
    params = [params];
  }

  var ret = {};

  for (var i = 0; i < params.length; i++) {
    var attr = params[i];
    var parent = this;
    var subRet = ret;

    if (attr.indexOf(".") !== -1) {
      var attrSplit = attr.split(".");

      for (var j = 0; j < attrSplit.length - 1; j++) {
        var subAttr = attrSplit[j];
        subRet[subAttr] = subRet[subAttr] || {};
        subRet = subRet[subAttr];
        parent = parent[subAttr];
      }

      attr = attrSplit[attrSplit.length - 1];
    }

    var param = parent[attr];

    if (Tone.isObject(params[attr])) {
      subRet[attr] = param.get();
    } else if (Tone.Signal && param instanceof Tone.Signal) {
      subRet[attr] = param.value;
    } else if (Tone.Param && param instanceof Tone.Param) {
      subRet[attr] = param.value;
    } else if (param instanceof AudioParam) {
      subRet[attr] = param.value;
    } else if (param instanceof Tone) {
      subRet[attr] = param.get();
    } else if (!Tone.isFunction(param) && Tone.isDefined(param)) {
      subRet[attr] = param;
    }
  }

  return ret;
};
/**
 *  collect all of the default attributes in one
 *  @private
 *  @param {Function} constr the constructor to find the defaults from
 *  @return {Array} all of the attributes which belong to the class
 */


Tone.prototype._collectDefaults = function (constr) {
  var ret = [];

  if (Tone.isDefined(constr.defaults)) {
    ret = Object.keys(constr.defaults);
  }

  if (Tone.isDefined(constr._super)) {
    var superDefs = this._collectDefaults(constr._super); //filter out repeats


    for (var i = 0; i < superDefs.length; i++) {
      if (ret.indexOf(superDefs[i]) === -1) {
        ret.push(superDefs[i]);
      }
    }
  }

  return ret;
}; ///////////////////////////////////////////////////////////////////////////
//	DEFAULTS
///////////////////////////////////////////////////////////////////////////

/**
 *  @memberOf Tone
 *  @param  {Array}  values  The arguments array
 *  @param  {Array}  keys    The names of the arguments
 *  @param {Function|Object} constr The class constructor
 *  @return  {Object}  An object composed of the  defaults between the class' defaults
 *                        and the passed in arguments.
 */


Tone.defaults = function (values, keys, constr) {
  var options = {};

  if (values.length === 1 && Tone.isObject(values[0])) {
    options = values[0];
  } else {
    for (var i = 0; i < keys.length; i++) {
      options[keys[i]] = values[i];
    }
  }

  if (Tone.isDefined(constr.defaults)) {
    return Tone.defaultArg(options, constr.defaults);
  } else if (Tone.isObject(constr)) {
    return Tone.defaultArg(options, constr);
  } else {
    return options;
  }
};
/**
 *  If the `given` parameter is undefined, use the `fallback`.
 *  If both `given` and `fallback` are object literals, it will
 *  return a deep copy which includes all of the parameters from both
 *  objects. If a parameter is undefined in given, it will return
 *  the fallback property.
 *  <br><br>
 *  WARNING: if object is self referential, it will go into an an
 *  infinite recursive loop.
 *  @memberOf Tone
 *  @param  {*} given
 *  @param  {*} fallback
 *  @return {*}
 */


Tone.defaultArg = function (given, fallback) {
  if (Tone.isObject(given) && Tone.isObject(fallback)) {
    var ret = {}; //make a deep copy of the given object

    for (var givenProp in given) {
      ret[givenProp] = Tone.defaultArg(fallback[givenProp], given[givenProp]);
    }

    for (var fallbackProp in fallback) {
      ret[fallbackProp] = Tone.defaultArg(given[fallbackProp], fallback[fallbackProp]);
    }

    return ret;
  } else {
    return Tone.isUndef(given) ? fallback : given;
  }
}; ///////////////////////////////////////////////////////////////////////////
//	DEBUGGING
///////////////////////////////////////////////////////////////////////////

/**
 *  Print the outputs to the console log for debugging purposes. 
 *  Prints the contents only if either the object has a property
 *  called `debug` set to true, or a variable called TONE_DEBUG_CLASS
 *  is set to the name of the class. 
 *  @example
 * //prints all logs originating from Tone.OscillatorNode
 * Tone.global.TONE_DEBUG_CLASS = "OscillatorNode"
 *  @param {*} args Any arguments to print to the console.
 *  @private
 */


Tone.prototype.log = function () {
  //if the object is either set to debug = true
  //or if there is a string on the Tone.global.with the class name
  if (this.debug || this.toString() === Tone.global.TONE_DEBUG_CLASS) {
    var args = Array.from(arguments);
    args.unshift(this.toString() + ":"); // eslint-disable-next-line no-console

    console.log.apply(undefined, args);
  }
};
/**
 *  Assert that the statement is true, otherwise invoke the error. 
 *  @param {Boolean} statement
 *  @param {String} error The message which is passed into an Error
 *  @private
 */


Tone.prototype.assert = function (statement, error) {
  if (!statement) {
    throw new Error(error);
  }
}; ///////////////////////////////////////////////////////////////////////////
//	CONNECTIONS
///////////////////////////////////////////////////////////////////////////

/**
 *  connect together all of the arguments in series
 *  @param {...(AudioParam|Tone|AudioNode)} nodes
 *  @returns {Tone}
 *  @memberOf Tone
 *  @static
 */


Tone.connectSeries = function () {
  var currentUnit = arguments[0];

  for (var i = 1; i < arguments.length; i++) {
    var toUnit = arguments[i];
    Tone.connect(currentUnit, toUnit);
    currentUnit = toUnit;
  }

  return Tone;
};
/**
 * Connect two nodes together so that signal flows from the 
 * first node to the second. The second node can be an AudioParam. 
 * Optionally specific the input and output channels. 
 * @param {(AudioNode|Tone.AudioNode)} srcNode The source node
 * @param {(AudioNode|Tone.AudioNode|AudioParam|Tone.AudioParam)} dstNode The destination node
 * @param {number} [outputNumber=0] The output channel of the srcNode
 * @param {number} [inputNumber=0] The input channel of the dstNode
 */


Tone.connect = function (srcNode, dstNode, outputNumber, inputNumber) {
  //resolve the input of the dstNode
  while (Tone.isDefined(dstNode.input)) {
    if (Tone.isArray(dstNode.input)) {
      inputNumber = Tone.defaultArg(inputNumber, 0);
      dstNode = dstNode.input[inputNumber];
      inputNumber = 0;
    } else if (dstNode.input) {
      dstNode = dstNode.input;
    }
  } //make the connection


  if (dstNode instanceof AudioParam) {
    srcNode.connect(dstNode, outputNumber);
  } else if (dstNode instanceof AudioNode) {
    srcNode.connect(dstNode, outputNumber, inputNumber);
  }

  return Tone;
};
/**
 * Disconnect a node from all nodes or optionally include a destination node and input/output channels.
 * @param {(AudioNode|Tone.AudioNode)} srcNode The source node
 * @param {?(AudioNode|Tone.AudioNode|AudioParam|Tone.AudioParam)} dstNode The destination node
 * @param {?number} [outputNumber=0] The output channel of the srcNode
 * @param {?number} [inputNumber=0] The input channel of the dstNode
 */


Tone.disconnect = function (srcNode, dstNode, outputNumber, inputNumber) {
  if (dstNode) {
    //resolve the input of the dstNode
    var bDone = false;

    while (!bDone) {
      if (Tone.isArray(dstNode.input)) {
        if (Tone.isDefined(inputNumber)) {
          Tone.disconnect(srcNode, dstNode.input[inputNumber], outputNumber);
        } else {
          dstNode.input.forEach(function (dstNode) {
            //ignore errors from connections that aren't there
            try {
              Tone.disconnect(srcNode, dstNode, outputNumber); // eslint-disable-next-line
            } catch (e) {}
          });
        }

        bDone = true;
      } else if (dstNode.input) {
        dstNode = dstNode.input;
      } else {
        bDone = true;
      }
    } //make the connection


    if (dstNode instanceof AudioParam) {
      srcNode.disconnect(dstNode, outputNumber);
    } else if (dstNode instanceof AudioNode) {
      srcNode.disconnect(dstNode, outputNumber, inputNumber);
    }
  } else {
    srcNode.disconnect();
  }

  return Tone;
}; ///////////////////////////////////////////////////////////////////////////
// TYPE CHECKING
///////////////////////////////////////////////////////////////////////////

/**
 *  Test if the arg is undefined
 *  @param {*} arg the argument to test
 *  @returns {Boolean} true if the arg is undefined
 *  @static
 *  @memberOf Tone
 */


Tone.isUndef = function (val) {
  return typeof val === "undefined";
};
/**
 *  Test if the arg is not undefined
 *  @param {*} arg the argument to test
 *  @returns {Boolean} true if the arg is undefined
 *  @static
 *  @memberOf Tone
 */


Tone.isDefined = function (val) {
  return !Tone.isUndef(val);
};
/**
 *  Test if the arg is a function
 *  @param {*} arg the argument to test
 *  @returns {Boolean} true if the arg is a function
 *  @static
 *  @memberOf Tone
 */


Tone.isFunction = function (val) {
  return typeof val === "function";
};
/**
 *  Test if the argument is a number.
 *  @param {*} arg the argument to test
 *  @returns {Boolean} true if the arg is a number
 *  @static
 *  @memberOf Tone
 */


Tone.isNumber = function (arg) {
  return typeof arg === "number";
};
/**
 *  Test if the given argument is an object literal (i.e. `{}`);
 *  @param {*} arg the argument to test
 *  @returns {Boolean} true if the arg is an object literal.
 *  @static
 *  @memberOf Tone
 */


Tone.isObject = function (arg) {
  return Object.prototype.toString.call(arg) === "[object Object]" && arg.constructor === Object;
};
/**
 *  Test if the argument is a boolean.
 *  @param {*} arg the argument to test
 *  @returns {Boolean} true if the arg is a boolean
 *  @static
 *  @memberOf Tone
 */


Tone.isBoolean = function (arg) {
  return typeof arg === "boolean";
};
/**
 *  Test if the argument is an Array
 *  @param {*} arg the argument to test
 *  @returns {Boolean} true if the arg is an array
 *  @static
 *  @memberOf Tone
 */


Tone.isArray = function (arg) {
  return Array.isArray(arg);
};
/**
 *  Test if the argument is a string.
 *  @param {*} arg the argument to test
 *  @returns {Boolean} true if the arg is a string
 *  @static
 *  @memberOf Tone
 */


Tone.isString = function (arg) {
  return typeof arg === "string";
};
/**
 *  Test if the argument is in the form of a note in scientific pitch notation.
 *  e.g. "C4"
 *  @param {*} arg the argument to test
 *  @returns {Boolean} true if the arg is a string
 *  @static
 *  @memberOf Tone
 */


Tone.isNote = function (arg) {
  return Tone.isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);
};
/**
 *  An empty function.
 *  @static
 */


Tone.noOp = function () {};
/**
 *  Make the property not writable. Internal use only.
 *  @private
 *  @param  {String}  property  the property to make not writable
 */


Tone.prototype._readOnly = function (property) {
  if (Array.isArray(property)) {
    for (var i = 0; i < property.length; i++) {
      this._readOnly(property[i]);
    }
  } else {
    Object.defineProperty(this, property, {
      "writable": false,
      "enumerable": true
    });
  }
};
/**
 *  Make an attribute writeable. Interal use only.
 *  @private
 *  @param  {String}  property  the property to make writable
 */


Tone.prototype._writable = function (property) {
  if (Array.isArray(property)) {
    for (var i = 0; i < property.length; i++) {
      this._writable(property[i]);
    }
  } else {
    Object.defineProperty(this, property, {
      "writable": true
    });
  }
};
/**
 * Possible play states.
 * @enum {String}
 */


Tone.State = {
  "Started": "started",
  "Stopped": "stopped",
  "Paused": "paused"
};
/**
 * A reference to the global context, `global` or `Tone.global.
 */

Tone.global = Tone.isUndef(global) ? window : global; ///////////////////////////////////////////////////////////////////////////
// CONVERSIONS
///////////////////////////////////////////////////////////////////////////

/**
 *  Equal power gain scale. Good for cross-fading.
 *  @param  {NormalRange} percent (0-1)
 *  @return {Number}         output gain (0-1)
 *  @static
 *  @memberOf Tone
 */

Tone.equalPowerScale = function (percent) {
  var piFactor = 0.5 * Math.PI;
  return Math.sin(percent * piFactor);
};
/**
 *  Convert decibels into gain.
 *  @param  {Decibels} db
 *  @return {Number}
 *  @static
 *  @memberOf Tone
 */


Tone.dbToGain = function (db) {
  return Math.pow(10, db / 20);
};
/**
 *  Convert gain to decibels.
 *  @param  {Number} gain (0-1)
 *  @return {Decibels}
 *  @static
 *  @memberOf Tone
 */


Tone.gainToDb = function (gain) {
  return 20 * (Math.log(gain) / Math.LN10);
};
/**
 *  Convert an interval (in semitones) to a frequency ratio.
 *  @param  {Interval} interval the number of semitones above the base note
 *  @return {Number}          the frequency ratio
 *  @static
 *  @memberOf Tone
 *  @example
 * tone.intervalToFrequencyRatio(0); // 1
 * tone.intervalToFrequencyRatio(12); // 2
 * tone.intervalToFrequencyRatio(-12); // 0.5
 */


Tone.intervalToFrequencyRatio = function (interval) {
  return Math.pow(2, interval / 12);
}; ///////////////////////////////////////////////////////////////////////////
//	TIMING
///////////////////////////////////////////////////////////////////////////

/**
 *  Return the current time of the AudioContext clock plus
 *  the lookAhead.
 *  @return {Number} the currentTime from the AudioContext
 *  @memberOf Tone#
 */


Tone.prototype.now = function () {
  return Tone.context.now();
};
/**
 *  Return the current time of the AudioContext clock plus
 *  the lookAhead.
 *  @return {Number} the currentTime from the AudioContext
 *  @static
 *  @memberOf Tone
 */


Tone.now = function () {
  return Tone.context.now();
};
/**
 *  Return the current time of the AudioContext clock without
 *  any lookAhead.
 *  @return {Number} the currentTime from the AudioContext
 *  @memberOf Tone#
 */


Tone.prototype.immediate = function () {
  return Tone.context.currentTime;
};
/**
 *  Return the current time of the AudioContext clock without
 *  any lookAhead.
 *  @return {Number} the currentTime from the AudioContext
 *  @memberOf Tone
 */


Tone.immediate = function () {
  return Tone.context.currentTime;
}; ///////////////////////////////////////////////////////////////////////////
//	INHERITANCE
///////////////////////////////////////////////////////////////////////////

/**
 *  have a child inherit all of Tone's (or a parent's) prototype
 *  to inherit the parent's properties, make sure to call
 *  Parent.call(this) in the child's constructor
 *
 *  based on closure library's inherit function
 *
 *  @memberOf Tone
 *  @static
 *  @param  {Function} 	child
 *  @param  {Function=} parent (optional) parent to inherit from
 *                             if no parent is supplied, the child
 *                             will inherit from Tone
 */


Tone.extend = function (child, parent) {
  if (Tone.isUndef(parent)) {
    parent = Tone;
  }

  function TempConstructor() {}

  TempConstructor.prototype = parent.prototype;
  child.prototype = new TempConstructor();
  /** @override */

  child.prototype.constructor = child;
  child._super = parent;
}; ///////////////////////////////////////////////////////////////////////////
//	CONTEXT
///////////////////////////////////////////////////////////////////////////

/**
 * The shared AudioContext
 * @type {Tone.Context}
 * @private
 */


Tone._audioContext = null;
/**
 * 	Most browsers will not play _any_ audio until a user 
 * 	clicks something (like a play button). Invoke this method
 * 	on a click or keypress event handler to start the audio context. 
 * 	More about the Autoplay policy [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)
 *  @memberOf Tone
 *  @static
 *  @return {Promise} This promise is resolved when the audio context is started. 
 *  @example
 * document.querySelector('#playbutton').addEventListener('click', () => Tone.start())
 */

Tone.start = function () {
  return Tone.context.resume();
};
/**
 *  A static pointer to the audio context accessible as Tone.context.
 *  @type {Tone.Context}
 *  @name context
 *  @memberOf Tone
 */


Object.defineProperty(Tone, "context", {
  "get": function () {
    return Tone._audioContext;
  },
  "set": function (context) {
    if (context.isContext) {
      Tone._audioContext = context;
    } else {
      Tone._audioContext = new Tone.Context(context);
    } //initialize the new audio context


    Tone.Context.emit("init", Tone._audioContext);
  }
});
/**
 *  The AudioContext
 *  @type {Tone.Context}
 *  @name context
 *  @memberOf Tone#
 *  @readOnly
 */

Object.defineProperty(Tone.prototype, "context", {
  "get": function () {
    return Tone.context;
  }
});
/**
 *  Tone automatically creates a context on init, but if you are working
 *  with other libraries which also create an AudioContext, it can be
 *  useful to set your own. If you are going to set your own context,
 *  be sure to do it at the start of your code, before creating any objects.
 *  @static
 *  @param {AudioContext} ctx The new audio context to set
 */

Tone.setContext = function (ctx) {
  Tone.context = ctx;
}; ///////////////////////////////////////////////////////////////////////////
//	ATTRIBUTES
///////////////////////////////////////////////////////////////////////////

/**
 *  The number of seconds of 1 processing block (128 samples)
 *  @type {Number}
 *  @name blockTime
 *  @memberOf Tone
 *  @static
 *  @readOnly
 */


Object.defineProperty(Tone.prototype, "blockTime", {
  "get": function () {
    return 128 / this.context.sampleRate;
  }
});
/**
 *  The duration in seconds of one sample.
 *  @type {Number}
 *  @name sampleTime
 *  @memberOf Tone
 *  @static
 *  @readOnly
 */

Object.defineProperty(Tone.prototype, "sampleTime", {
  "get": function () {
    return 1 / this.context.sampleRate;
  }
});
/**
 *  Whether or not all the technologies that Tone.js relies on are supported by the current browser.
 *  @type {Boolean}
 *  @name supported
 *  @memberOf Tone
 *  @readOnly
 *  @static
 */

Object.defineProperty(Tone, "supported", {
  "get": function () {
    var hasAudioContext = Tone.global.hasOwnProperty("AudioContext") || Tone.global.hasOwnProperty("webkitAudioContext");
    var hasPromises = Tone.global.hasOwnProperty("Promise");
    return hasAudioContext && hasPromises;
  }
});
/**
 *  Boolean value if the audio context has been initialized.
 *  @type {Boolean}
 *  @memberOf Tone
 *  @static
 *  @name initialized
 *  @readOnly
 */

Object.defineProperty(Tone, "initialized", {
  "get": function () {
    return Boolean(Tone.context);
  }
});
/**
 *  Get the context when it becomes available
 *  @param  {Function}  resolve  Callback when the context is initialized
 *  @return  {Tone}
 */

Tone.getContext = function (resolve) {
  if (Tone.initialized) {
    resolve(Tone.context);
  } else {
    var resCallback = function () {
      resolve(Tone.context);
      Tone.Context.off("init", resCallback);
    };

    Tone.Context.on("init", resCallback);
  }

  return Tone;
};
/**
 * The version number
 * @type {String}
 * @static
 */


Tone.version = _version.default;
var _default = Tone;
exports.default = _default;
},{"../version":"../node_modules/tone/tone/version.js"}],"../node_modules/tone/tone/type/TimeBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.TimeBase is a flexible encoding of time
 *         which can be evaluated to and from a string.
 *  @extends {Tone}
 *  @param  {Time}  val    The time value as a number, string or object
 *  @param  {String=}  units  Unit values
 *  @example
 * Tone.TimeBase(4, "n")
 * Tone.TimeBase(2, "t")
 * Tone.TimeBase("2t")
 * Tone.TimeBase({"2t" : 2})
 * Tone.TimeBase("2t") + Tone.TimeBase("4n");
 */
_Tone.default.TimeBase = function (val, units) {
  //allows it to be constructed with or without 'new'
  if (this instanceof _Tone.default.TimeBase) {
    /**
     *  The value
     *  @type  {Number|String|Tone.TimeBase}
     *  @private
     */
    this._val = val;
    /**
     * The units
     * @type {String?}
     * @private
     */

    this._units = units; //test if the value is a string representation of a number

    if (_Tone.default.isUndef(this._units) && _Tone.default.isString(this._val) && // eslint-disable-next-line eqeqeq
    parseFloat(this._val) == this._val && this._val.charAt(0) !== "+") {
      this._val = parseFloat(this._val);
      this._units = this._defaultUnits;
    } else if (val && val.constructor === this.constructor) {
      //if they're the same type, just copy values over
      this._val = val._val;
      this._units = val._units;
    } else if (val instanceof _Tone.default.TimeBase) {
      switch (this._defaultUnits) {
        case "s":
          this._val = val.toSeconds();
          break;

        case "i":
          this._val = val.toTicks();
          break;

        case "hz":
          this._val = val.toFrequency();
          break;

        case "midi":
          this._val = val.toMidi();
          break;

        default:
          throw new Error("Unrecognized default units " + this._defaultUnits);
      }
    }
  } else {
    return new _Tone.default.TimeBase(val, units);
  }
};

_Tone.default.extend(_Tone.default.TimeBase); ///////////////////////////////////////////////////////////////////////////
//	ABSTRACT SYNTAX TREE PARSER
///////////////////////////////////////////////////////////////////////////

/**
 *  All the primary expressions.
 *  @private
 *  @type  {Object}
 */


_Tone.default.TimeBase.prototype._expressions = {
  "n": {
    regexp: /^(\d+)n(\.?)$/i,
    method: function (value, dot) {
      value = parseInt(value);
      var scalar = dot === "." ? 1.5 : 1;

      if (value === 1) {
        return this._beatsToUnits(this._getTimeSignature()) * scalar;
      } else {
        return this._beatsToUnits(4 / value) * scalar;
      }
    }
  },
  "t": {
    regexp: /^(\d+)t$/i,
    method: function (value) {
      value = parseInt(value);
      return this._beatsToUnits(8 / (parseInt(value) * 3));
    }
  },
  "m": {
    regexp: /^(\d+)m$/i,
    method: function (value) {
      return this._beatsToUnits(parseInt(value) * this._getTimeSignature());
    }
  },
  "i": {
    regexp: /^(\d+)i$/i,
    method: function (value) {
      return this._ticksToUnits(parseInt(value));
    }
  },
  "hz": {
    regexp: /^(\d+(?:\.\d+)?)hz$/i,
    method: function (value) {
      return this._frequencyToUnits(parseFloat(value));
    }
  },
  "tr": {
    regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/,
    method: function (m, q, s) {
      var total = 0;

      if (m && m !== "0") {
        total += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));
      }

      if (q && q !== "0") {
        total += this._beatsToUnits(parseFloat(q));
      }

      if (s && s !== "0") {
        total += this._beatsToUnits(parseFloat(s) / 4);
      }

      return total;
    }
  },
  "s": {
    regexp: /^(\d+(?:\.\d+)?)s$/,
    method: function (value) {
      return this._secondsToUnits(parseFloat(value));
    }
  },
  "samples": {
    regexp: /^(\d+)samples$/,
    method: function (value) {
      return parseInt(value) / this.context.sampleRate;
    }
  },
  "default": {
    regexp: /^(\d+(?:\.\d+)?)$/,
    method: function (value) {
      return this._expressions[this._defaultUnits].method.call(this, value);
    }
  }
};
/**
 *  The default units if none are given.
 *  @type {String}
 *  @private
 */

_Tone.default.TimeBase.prototype._defaultUnits = "s"; ///////////////////////////////////////////////////////////////////////////
//	TRANSPORT FALLBACKS
///////////////////////////////////////////////////////////////////////////

/**
 * Return the bpm, or 120 if Transport is not available
 * @type {Number}
 * @private
 */

_Tone.default.TimeBase.prototype._getBpm = function () {
  if (_Tone.default.Transport) {
    return _Tone.default.Transport.bpm.value;
  } else {
    return 120;
  }
};
/**
 * Return the timeSignature or 4 if Transport is not available
 * @type {Number}
 * @private
 */


_Tone.default.TimeBase.prototype._getTimeSignature = function () {
  if (_Tone.default.Transport) {
    return _Tone.default.Transport.timeSignature;
  } else {
    return 4;
  }
};
/**
 * Return the PPQ or 192 if Transport is not available
 * @type {Number}
 * @private
 */


_Tone.default.TimeBase.prototype._getPPQ = function () {
  if (_Tone.default.Transport) {
    return _Tone.default.Transport.PPQ;
  } else {
    return 192;
  }
};
/**
 * Return the current time in whichever context is relevant
 * @type {Number}
 * @private
 */


_Tone.default.TimeBase.prototype._now = function () {
  return this.now();
}; ///////////////////////////////////////////////////////////////////////////
//	UNIT CONVERSIONS
///////////////////////////////////////////////////////////////////////////

/**
 *  Returns the value of a frequency in the current units
 *  @param {Frequency} freq
 *  @return  {Number}
 *  @private
 */


_Tone.default.TimeBase.prototype._frequencyToUnits = function (freq) {
  return 1 / freq;
};
/**
 *  Return the value of the beats in the current units
 *  @param {Number} beats
 *  @return  {Number}
 *  @private
 */


_Tone.default.TimeBase.prototype._beatsToUnits = function (beats) {
  return 60 / this._getBpm() * beats;
};
/**
 *  Returns the value of a second in the current units
 *  @param {Seconds} seconds
 *  @return  {Number}
 *  @private
 */


_Tone.default.TimeBase.prototype._secondsToUnits = function (seconds) {
  return seconds;
};
/**
 *  Returns the value of a tick in the current time units
 *  @param {Ticks} ticks
 *  @return  {Number}
 *  @private
 */


_Tone.default.TimeBase.prototype._ticksToUnits = function (ticks) {
  return ticks * (this._beatsToUnits(1) / this._getPPQ());
};
/**
 * With no arguments, return 'now'
 *  @return  {Number}
 *  @private
 */


_Tone.default.TimeBase.prototype._noArg = function () {
  return this._now();
}; ///////////////////////////////////////////////////////////////////////////
//	EXPRESSIONS
///////////////////////////////////////////////////////////////////////////

/**
 *  Evaluate the time value. Returns the time
 *  in seconds.
 *  @return  {Seconds}
 */


_Tone.default.TimeBase.prototype.valueOf = function () {
  if (_Tone.default.isUndef(this._val)) {
    return this._noArg();
  } else if (_Tone.default.isString(this._val) && _Tone.default.isUndef(this._units)) {
    for (var units in this._expressions) {
      if (this._expressions[units].regexp.test(this._val.trim())) {
        this._units = units;
        break;
      }
    }
  } else if (_Tone.default.isObject(this._val)) {
    var total = 0;

    for (var typeName in this._val) {
      var quantity = this._val[typeName];
      var time = new this.constructor(typeName).valueOf() * quantity;
      total += time;
    }

    return total;
  }

  if (_Tone.default.isDefined(this._units)) {
    var expr = this._expressions[this._units];

    var matching = this._val.toString().trim().match(expr.regexp);

    if (matching) {
      return expr.method.apply(this, matching.slice(1));
    } else {
      return expr.method.call(this, parseFloat(this._val));
    }
  } else {
    return this._val;
  }
};
/**
 *  Return the value in seconds
 *  @return {Seconds}
 */


_Tone.default.TimeBase.prototype.toSeconds = function () {
  return this.valueOf();
};
/**
 *  Return the value in hertz
 *  @return {Frequency}
 */


_Tone.default.TimeBase.prototype.toFrequency = function () {
  return 1 / this.toSeconds();
};
/**
 *  Return the time in samples
 *  @return  {Samples}
 */


_Tone.default.TimeBase.prototype.toSamples = function () {
  return this.toSeconds() * this.context.sampleRate;
};
/**
 *  Return the time in milliseconds.
 *  @return  {Milliseconds}
 */


_Tone.default.TimeBase.prototype.toMilliseconds = function () {
  return this.toSeconds() * 1000;
};
/**
 *  Clean up
 *  @return {Tone.TimeBase} this
 */


_Tone.default.TimeBase.prototype.dispose = function () {
  this._val = null;
  this._units = null;
};

var _default = _Tone.default.TimeBase;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js"}],"../node_modules/tone/tone/type/Frequency.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../type/TimeBase");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Frequency is a primitive type for encoding Frequency values.
 *         Eventually all time values are evaluated to hertz
 *         using the `eval` method.
 *  @constructor
 *  @extends {Tone.TimeBase}
 *  @param  {String|Number}  val    The time value.
 *  @param  {String=}  units  The units of the value.
 *  @example
 * Tone.Frequency("C3") // 261
 * Tone.Frequency(38, "midi") //
 * Tone.Frequency("C3").transpose(4);
 */
_Tone.default.Frequency = function (val, units) {
  if (this instanceof _Tone.default.Frequency) {
    _Tone.default.TimeBase.call(this, val, units);
  } else {
    return new _Tone.default.Frequency(val, units);
  }
};

_Tone.default.extend(_Tone.default.Frequency, _Tone.default.TimeBase); ///////////////////////////////////////////////////////////////////////////
//	AUGMENT BASE EXPRESSIONS
///////////////////////////////////////////////////////////////////////////


_Tone.default.Frequency.prototype._expressions = Object.assign({}, _Tone.default.TimeBase.prototype._expressions, {
  "midi": {
    regexp: /^(\d+(?:\.\d+)?midi)/,
    method: function (value) {
      if (this._defaultUnits === "midi") {
        return value;
      } else {
        return _Tone.default.Frequency.mtof(value);
      }
    }
  },
  "note": {
    regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,
    method: function (pitch, octave) {
      var index = noteToScaleIndex[pitch.toLowerCase()];
      var noteNumber = index + (parseInt(octave) + 1) * 12;

      if (this._defaultUnits === "midi") {
        return noteNumber;
      } else {
        return _Tone.default.Frequency.mtof(noteNumber);
      }
    }
  },
  "tr": {
    regexp: /^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,
    method: function (m, q, s) {
      var total = 1;

      if (m && m !== "0") {
        total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));
      }

      if (q && q !== "0") {
        total *= this._beatsToUnits(parseFloat(q));
      }

      if (s && s !== "0") {
        total *= this._beatsToUnits(parseFloat(s) / 4);
      }

      return total;
    }
  }
}); ///////////////////////////////////////////////////////////////////////////
//	EXPRESSIONS
///////////////////////////////////////////////////////////////////////////

/**
 *  Transposes the frequency by the given number of semitones.
 *  @param  {Interval}  interval
 *  @return  {Tone.Frequency} A new transposed frequency
 *  @example
 * Tone.Frequency("A4").transpose(3); //"C5"
 */

_Tone.default.Frequency.prototype.transpose = function (interval) {
  return new this.constructor(this.valueOf() * _Tone.default.intervalToFrequencyRatio(interval));
};
/**
 *  Takes an array of semitone intervals and returns
 *  an array of frequencies transposed by those intervals.
 *  @param  {Array}  intervals
 *  @return  {Array<Tone.Frequency>} Returns an array of Frequencies
 *  @example
 * Tone.Frequency("A4").harmonize([0, 3, 7]); //["A4", "C5", "E5"]
 */


_Tone.default.Frequency.prototype.harmonize = function (intervals) {
  return intervals.map(function (interval) {
    return this.transpose(interval);
  }.bind(this));
}; ///////////////////////////////////////////////////////////////////////////
//	UNIT CONVERSIONS
///////////////////////////////////////////////////////////////////////////

/**
 *  Return the value of the frequency as a MIDI note
 *  @return  {MIDI}
 *  @example
 * Tone.Frequency("C4").toMidi(); //60
 */


_Tone.default.Frequency.prototype.toMidi = function () {
  return _Tone.default.Frequency.ftom(this.valueOf());
};
/**
 *  Return the value of the frequency in Scientific Pitch Notation
 *  @return  {Note}
 *  @example
 * Tone.Frequency(69, "midi").toNote(); //"A4"
 */


_Tone.default.Frequency.prototype.toNote = function () {
  var freq = this.toFrequency();
  var log = Math.log2(freq / _Tone.default.Frequency.A4);
  var noteNumber = Math.round(12 * log) + 57;
  var octave = Math.floor(noteNumber / 12);

  if (octave < 0) {
    noteNumber += -12 * octave;
  }

  var noteName = scaleIndexToNote[noteNumber % 12];
  return noteName + octave.toString();
};
/**
 *  Return the duration of one cycle in seconds.
 *  @return  {Seconds}
 */


_Tone.default.Frequency.prototype.toSeconds = function () {
  return 1 / _Tone.default.TimeBase.prototype.toSeconds.call(this);
};
/**
 *  Return the value in Hertz
 *  @return  {Frequency}
 */


_Tone.default.Frequency.prototype.toFrequency = function () {
  return _Tone.default.TimeBase.prototype.toFrequency.call(this);
};
/**
 *  Return the duration of one cycle in ticks
 *  @return  {Ticks}
 */


_Tone.default.Frequency.prototype.toTicks = function () {
  var quarterTime = this._beatsToUnits(1);

  var quarters = this.valueOf() / quarterTime;
  return Math.floor(quarters * _Tone.default.Transport.PPQ);
}; ///////////////////////////////////////////////////////////////////////////
//	UNIT CONVERSIONS HELPERS
///////////////////////////////////////////////////////////////////////////

/**
 *  With no arguments, return 0
 *  @return  {Number}
 *  @private
 */


_Tone.default.Frequency.prototype._noArg = function () {
  return 0;
};
/**
 *  Returns the value of a frequency in the current units
 *  @param {Frequency} freq
 *  @return  {Number}
 *  @private
 */


_Tone.default.Frequency.prototype._frequencyToUnits = function (freq) {
  return freq;
};
/**
 *  Returns the value of a tick in the current time units
 *  @param {Ticks} ticks
 *  @return  {Number}
 *  @private
 */


_Tone.default.Frequency.prototype._ticksToUnits = function (ticks) {
  return 1 / (ticks * 60 / (_Tone.default.Transport.bpm.value * _Tone.default.Transport.PPQ));
};
/**
 *  Return the value of the beats in the current units
 *  @param {Number} beats
 *  @return  {Number}
 *  @private
 */


_Tone.default.Frequency.prototype._beatsToUnits = function (beats) {
  return 1 / _Tone.default.TimeBase.prototype._beatsToUnits.call(this, beats);
};
/**
 *  Returns the value of a second in the current units
 *  @param {Seconds} seconds
 *  @return  {Number}
 *  @private
 */


_Tone.default.Frequency.prototype._secondsToUnits = function (seconds) {
  return 1 / seconds;
};
/**
 *  The default units if none are given.
 *  @private
 */


_Tone.default.Frequency.prototype._defaultUnits = "hz"; ///////////////////////////////////////////////////////////////////////////
//	FREQUENCY CONVERSIONS
///////////////////////////////////////////////////////////////////////////

/**
 *  Note to scale index
 *  @type  {Object}
 *  @private
 */

var noteToScaleIndex = {
  "cbb": -2,
  "cb": -1,
  "c": 0,
  "c#": 1,
  "cx": 2,
  "dbb": 0,
  "db": 1,
  "d": 2,
  "d#": 3,
  "dx": 4,
  "ebb": 2,
  "eb": 3,
  "e": 4,
  "e#": 5,
  "ex": 6,
  "fbb": 3,
  "fb": 4,
  "f": 5,
  "f#": 6,
  "fx": 7,
  "gbb": 5,
  "gb": 6,
  "g": 7,
  "g#": 8,
  "gx": 9,
  "abb": 7,
  "ab": 8,
  "a": 9,
  "a#": 10,
  "ax": 11,
  "bbb": 9,
  "bb": 10,
  "b": 11,
  "b#": 12,
  "bx": 13
};
/**
 *  scale index to note (sharps)
 *  @type  {Array}
 *  @private
 */

var scaleIndexToNote = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];
/**
 *  The [concert pitch](https://en.wikipedia.org/wiki/Concert_pitch)
 *  A4's values in Hertz.
 *  @type {Frequency}
 *  @static
 */

_Tone.default.Frequency.A4 = 440;
/**
 *  Convert a MIDI note to frequency value.
 *  @param  {MIDI} midi The midi number to convert.
 *  @return {Frequency} the corresponding frequency value
 *  @static
 *  @example
 * Tone.Frequency.mtof(69); // returns 440
 */

_Tone.default.Frequency.mtof = function (midi) {
  return _Tone.default.Frequency.A4 * Math.pow(2, (midi - 69) / 12);
};
/**
 *  Convert a frequency value to a MIDI note.
 *  @param {Frequency} frequency The value to frequency value to convert.
 *  @returns  {MIDI}
 *  @static
 *  @example
 * Tone.Frequency.ftom(440); // returns 69
 */


_Tone.default.Frequency.ftom = function (frequency) {
  return 69 + Math.round(12 * Math.log2(frequency / _Tone.default.Frequency.A4));
};

var _default = _Tone.default.Frequency;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../type/TimeBase":"../node_modules/tone/tone/type/TimeBase.js"}],"../node_modules/tone/tone/type/Time.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../type/TimeBase");

require("../type/Frequency");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Time is a primitive type for encoding Time values.
 *         Tone.Time can be constructed with or without the `new` keyword. Tone.Time can be passed
 *         into the parameter of any method which takes time as an argument.
 *  @constructor
 *  @extends {Tone.TimeBase}
 *  @param  {String|Number|Object}  val    The time value.
 *  @param  {String=}  units  The units of the value.
 *  @example
 * var t = Tone.Time("4n");//a quarter note
 */
_Tone.default.Time = function (val, units) {
  if (this instanceof _Tone.default.Time) {
    _Tone.default.TimeBase.call(this, val, units);
  } else {
    return new _Tone.default.Time(val, units);
  }
};

_Tone.default.extend(_Tone.default.Time, _Tone.default.TimeBase);
/**
 * Extend the base expressions
 */


_Tone.default.Time.prototype._expressions = Object.assign({}, _Tone.default.TimeBase.prototype._expressions, {
  "quantize": {
    regexp: /^@(.+)/,
    method: function (capture) {
      if (_Tone.default.Transport) {
        var quantTo = new this.constructor(capture);
        return this._secondsToUnits(_Tone.default.Transport.nextSubdivision(quantTo));
      } else {
        return 0;
      }
    }
  },
  "now": {
    regexp: /^\+(.+)/,
    method: function (capture) {
      return this._now() + new this.constructor(capture);
    }
  }
});
/**
 *  Quantize the time by the given subdivision. Optionally add a
 *  percentage which will move the time value towards the ideal
 *  quantized value by that percentage.
 *  @param  {Number|Time}  val    The subdivision to quantize to
 *  @param  {NormalRange}  [percent=1]  Move the time value
 *                                   towards the quantized value by
 *                                   a percentage.
 *  @return  {Number}  this
 *  @example
 * Tone.Time(21).quantize(2) //returns 22
 * Tone.Time(0.6).quantize("4n", 0.5) //returns 0.55
 */

_Tone.default.Time.prototype.quantize = function (subdiv, percent) {
  percent = _Tone.default.defaultArg(percent, 1);
  var subdivision = new this.constructor(subdiv);
  var value = this.valueOf();
  var multiple = Math.round(value / subdivision);
  var ideal = multiple * subdivision;
  var diff = ideal - value;
  return value + diff * percent;
}; ///////////////////////////////////////////////////////////////////////////
// CONVERSIONS
///////////////////////////////////////////////////////////////////////////

/**
 *  Convert a Time to Notation. The notation values are will be the
 *  closest representation between 1m to 128th note.
 *  @return {Notation}
 *  @example
 * //if the Transport is at 120bpm:
 * Tone.Time(2).toNotation();//returns "1m"
 */


_Tone.default.Time.prototype.toNotation = function () {
  var time = this.toSeconds();
  var testNotations = ["1m"];

  for (var power = 1; power < 8; power++) {
    var subdiv = Math.pow(2, power);
    testNotations.push(subdiv + "n.");
    testNotations.push(subdiv + "n");
    testNotations.push(subdiv + "t");
  }

  testNotations.push("0"); //find the closets notation representation

  var closest = testNotations[0];

  var closestSeconds = _Tone.default.Time(testNotations[0]).toSeconds();

  testNotations.forEach(function (notation) {
    var notationSeconds = _Tone.default.Time(notation).toSeconds();

    if (Math.abs(notationSeconds - time) < Math.abs(closestSeconds - time)) {
      closest = notation;
      closestSeconds = notationSeconds;
    }
  });
  return closest;
};
/**
 *  Return the time encoded as Bars:Beats:Sixteenths.
 *  @return  {BarsBeatsSixteenths}
 */


_Tone.default.Time.prototype.toBarsBeatsSixteenths = function () {
  var quarterTime = this._beatsToUnits(1);

  var quarters = this.valueOf() / quarterTime;
  quarters = parseFloat(quarters.toFixed(4));
  var measures = Math.floor(quarters / this._getTimeSignature());
  var sixteenths = quarters % 1 * 4;
  quarters = Math.floor(quarters) % this._getTimeSignature();
  sixteenths = sixteenths.toString();

  if (sixteenths.length > 3) {
    // the additional parseFloat removes insignificant trailing zeroes
    sixteenths = parseFloat(parseFloat(sixteenths).toFixed(3));
  }

  var progress = [measures, quarters, sixteenths];
  return progress.join(":");
};
/**
 *  Return the time in ticks.
 *  @return  {Ticks}
 */


_Tone.default.Time.prototype.toTicks = function () {
  var quarterTime = this._beatsToUnits(1);

  var quarters = this.valueOf() / quarterTime;
  return Math.round(quarters * this._getPPQ());
};
/**
 *  Return the time in seconds.
 *  @return  {Seconds}
 */


_Tone.default.Time.prototype.toSeconds = function () {
  return this.valueOf();
};
/**
 *  Return the value as a midi note.
 *  @return  {Midi}
 */


_Tone.default.Time.prototype.toMidi = function () {
  return _Tone.default.Frequency.ftom(this.toFrequency());
};

var _default = _Tone.default.Time;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../type/TimeBase":"../node_modules/tone/tone/type/TimeBase.js","../type/Frequency":"../node_modules/tone/tone/type/Frequency.js"}],"../node_modules/tone/tone/type/TransportTime.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../type/Time");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.TransportTime is a the time along the Transport's
 *         timeline. It is similar to Tone.Time, but instead of evaluating
 *         against the AudioContext's clock, it is evaluated against
 *         the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).
 *  @constructor
 *  @param  {Time}  val    The time value as a number or string
 *  @param  {String=}  units  Unit values
 *  @extends {Tone.Time}
 */
_Tone.default.TransportTime = function (val, units) {
  if (this instanceof _Tone.default.TransportTime) {
    _Tone.default.Time.call(this, val, units);
  } else {
    return new _Tone.default.TransportTime(val, units);
  }
};

_Tone.default.extend(_Tone.default.TransportTime, _Tone.default.Time);
/**
 * Return the current time in whichever context is relevant
 * @type {Number}
 * @private
 */


_Tone.default.TransportTime.prototype._now = function () {
  return _Tone.default.Transport.seconds;
};

var _default = _Tone.default.TransportTime;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../type/Time":"../node_modules/tone/tone/type/Time.js"}],"../node_modules/tone/tone/core/Emitter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Emitter gives classes which extend it
 *         the ability to listen for and emit events.
 *         Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).
 *         MIT (c) 2011 Jerome Etienne.
 *
 *  @extends {Tone}
 */
_Tone.default.Emitter = function () {
  _Tone.default.call(this);
  /**
   *  Contains all of the events.
   *  @private
   *  @type  {Object}
   */


  this._events = {};
};

_Tone.default.extend(_Tone.default.Emitter);
/**
 *  Bind a callback to a specific event.
 *  @param  {String}    event     The name of the event to listen for.
 *  @param  {Function}  callback  The callback to invoke when the
 *                                event is emitted
 *  @return  {Tone.Emitter}    this
 */


_Tone.default.Emitter.prototype.on = function (event, callback) {
  //split the event
  var events = event.split(/\W+/);

  for (var i = 0; i < events.length; i++) {
    var eventName = events[i];

    if (!this._events.hasOwnProperty(eventName)) {
      this._events[eventName] = [];
    }

    this._events[eventName].push(callback);
  }

  return this;
};
/**
 *  Bind a callback which is only invoked once
 *  @param  {String}    event     The name of the event to listen for.
 *  @param  {Function}  callback  The callback to invoke when the
 *                                event is emitted
 *  @return  {Tone.Emitter}    this
 */


_Tone.default.Emitter.prototype.once = function (event, callback) {
  var boundCallback = function () {
    //invoke the callback
    callback.apply(this, arguments);
    this.off(event, boundCallback);
  }.bind(this);

  this.on(event, boundCallback);
  return this;
};
/**
 *  Remove the event listener.
 *  @param  {String}    event     The event to stop listening to.
 *  @param  {Function=}  callback  The callback which was bound to
 *                                the event with Tone.Emitter.on.
 *                                If no callback is given, all callbacks
 *                                events are removed.
 *  @return  {Tone.Emitter}    this
 */


_Tone.default.Emitter.prototype.off = function (event, callback) {
  var events = event.split(/\W+/);

  for (var ev = 0; ev < events.length; ev++) {
    event = events[ev];

    if (this._events.hasOwnProperty(event)) {
      if (_Tone.default.isUndef(callback)) {
        this._events[event] = [];
      } else {
        var eventList = this._events[event];

        for (var i = 0; i < eventList.length; i++) {
          if (eventList[i] === callback) {
            eventList.splice(i, 1);
          }
        }
      }
    }
  }

  return this;
};
/**
 *  Invoke all of the callbacks bound to the event
 *  with any arguments passed in.
 *  @param  {String}  event  The name of the event.
 *  @param {...*} args The arguments to pass to the functions listening.
 *  @return  {Tone.Emitter}  this
 */


_Tone.default.Emitter.prototype.emit = function (event) {
  if (this._events) {
    var args = Array.apply(null, arguments).slice(1);

    if (this._events.hasOwnProperty(event)) {
      var eventList = this._events[event].slice(0);

      for (var i = 0, len = eventList.length; i < len; i++) {
        eventList[i].apply(this, args);
      }
    }
  }

  return this;
};
/**
 *  Add Emitter functions (on/off/emit) to the object
 *  @param  {Object|Function}  object  The object or class to extend.
 *  @returns {Tone.Emitter}
 */


_Tone.default.Emitter.mixin = function (object) {
  var functions = ["on", "once", "off", "emit"];
  object._events = {};

  for (var i = 0; i < functions.length; i++) {
    var func = functions[i];
    var emitterFunc = _Tone.default.Emitter.prototype[func];
    object[func] = emitterFunc;
  }

  return _Tone.default.Emitter;
};
/**
 *  Clean up
 *  @return  {Tone.Emitter}  this
 */


_Tone.default.Emitter.prototype.dispose = function () {
  _Tone.default.prototype.dispose.call(this);

  this._events = null;
  return this;
};

var _default = _Tone.default.Emitter;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js"}],"../node_modules/tone/tone/core/Timeline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class A Timeline class for scheduling and maintaining state
 *         along a timeline. All events must have a "time" property.
 *         Internally, events are stored in time order for fast
 *         retrieval.
 *  @extends {Tone}
 *  @param {Positive} [memory=Infinity] The number of previous events that are retained.
 */
_Tone.default.Timeline = function () {
  var options = _Tone.default.defaults(arguments, ["memory"], _Tone.default.Timeline);

  _Tone.default.call(this);
  /**
   *  The array of scheduled timeline events
   *  @type  {Array}
   *  @private
   */


  this._timeline = [];
  /**
   *  The memory of the timeline, i.e.
   *  how many events in the past it will retain
   *  @type {Positive}
   */

  this.memory = options.memory;
};

_Tone.default.extend(_Tone.default.Timeline);
/**
 *  the default parameters
 *  @static
 *  @const
 */


_Tone.default.Timeline.defaults = {
  "memory": Infinity
};
/**
 *  The number of items in the timeline.
 *  @type {Number}
 *  @memberOf Tone.Timeline#
 *  @name length
 *  @readOnly
 */

Object.defineProperty(_Tone.default.Timeline.prototype, "length", {
  get: function () {
    return this._timeline.length;
  }
});
/**
 *  Insert an event object onto the timeline. Events must have a "time" attribute.
 *  @param  {Object}  event  The event object to insert into the
 *                           timeline.
 *  @returns {Tone.Timeline} this
 */

_Tone.default.Timeline.prototype.add = function (event) {
  //the event needs to have a time attribute
  if (_Tone.default.isUndef(event.time)) {
    throw new Error("Tone.Timeline: events must have a time attribute");
  }

  event.time = event.time.valueOf();

  var index = this._search(event.time);

  this._timeline.splice(index + 1, 0, event); //if the length is more than the memory, remove the previous ones


  if (this.length > this.memory) {
    var diff = this.length - this.memory;

    this._timeline.splice(0, diff);
  }

  return this;
};
/**
 *  Remove an event from the timeline.
 *  @param  {Object}  event  The event object to remove from the list.
 *  @returns {Tone.Timeline} this
 */


_Tone.default.Timeline.prototype.remove = function (event) {
  var index = this._timeline.indexOf(event);

  if (index !== -1) {
    this._timeline.splice(index, 1);
  }

  return this;
};
/**
 *  Get the nearest event whose time is less than or equal to the given time.
 *  @param  {Number}  time  The time to query.
 *  @param  {String}  comparator Which value in the object to compare
 *  @returns {Object} The event object set after that time.
 */


_Tone.default.Timeline.prototype.get = function (time, comparator) {
  comparator = _Tone.default.defaultArg(comparator, "time");

  var index = this._search(time, comparator);

  if (index !== -1) {
    return this._timeline[index];
  } else {
    return null;
  }
};
/**
 *  Return the first event in the timeline without removing it
 *  @returns {Object} The first event object
 */


_Tone.default.Timeline.prototype.peek = function () {
  return this._timeline[0];
};
/**
 *  Return the first event in the timeline and remove it
 *  @returns {Object} The first event object
 */


_Tone.default.Timeline.prototype.shift = function () {
  return this._timeline.shift();
};
/**
 *  Get the event which is scheduled after the given time.
 *  @param  {Number}  time  The time to query.
 *  @param  {String}  comparator Which value in the object to compare
 *  @returns {Object} The event object after the given time
 */


_Tone.default.Timeline.prototype.getAfter = function (time, comparator) {
  comparator = _Tone.default.defaultArg(comparator, "time");

  var index = this._search(time, comparator);

  if (index + 1 < this._timeline.length) {
    return this._timeline[index + 1];
  } else {
    return null;
  }
};
/**
 *  Get the event before the event at the given time.
 *  @param  {Number}  time  The time to query.
 *  @param  {String}  comparator Which value in the object to compare
 *  @returns {Object} The event object before the given time
 */


_Tone.default.Timeline.prototype.getBefore = function (time, comparator) {
  comparator = _Tone.default.defaultArg(comparator, "time");
  var len = this._timeline.length; //if it's after the last item, return the last item

  if (len > 0 && this._timeline[len - 1][comparator] < time) {
    return this._timeline[len - 1];
  }

  var index = this._search(time, comparator);

  if (index - 1 >= 0) {
    return this._timeline[index - 1];
  } else {
    return null;
  }
};
/**
 *  Cancel events after the given time
 *  @param  {Number}  time  The time to query.
 *  @returns {Tone.Timeline} this
 */


_Tone.default.Timeline.prototype.cancel = function (after) {
  if (this._timeline.length > 1) {
    var index = this._search(after);

    if (index >= 0) {
      if (this._timeline[index].time === after) {
        //get the first item with that time
        for (var i = index; i >= 0; i--) {
          if (this._timeline[i].time === after) {
            index = i;
          } else {
            break;
          }
        }

        this._timeline = this._timeline.slice(0, index);
      } else {
        this._timeline = this._timeline.slice(0, index + 1);
      }
    } else {
      this._timeline = [];
    }
  } else if (this._timeline.length === 1) {
    //the first item's time
    if (this._timeline[0].time >= after) {
      this._timeline = [];
    }
  }

  return this;
};
/**
 *  Cancel events before or equal to the given time.
 *  @param  {Number}  time  The time to cancel before.
 *  @returns {Tone.Timeline} this
 */


_Tone.default.Timeline.prototype.cancelBefore = function (time) {
  var index = this._search(time);

  if (index >= 0) {
    this._timeline = this._timeline.slice(index + 1);
  }

  return this;
};
/**
 * Returns the previous event if there is one. null otherwise
 * @param  {Object} event The event to find the previous one of
 * @return {Object}       The event right before the given event
 */


_Tone.default.Timeline.prototype.previousEvent = function (event) {
  var index = this._timeline.indexOf(event);

  if (index > 0) {
    return this._timeline[index - 1];
  } else {
    return null;
  }
};
/**
 *  Does a binary search on the timeline array and returns the
 *  nearest event index whose time is after or equal to the given time.
 *  If a time is searched before the first index in the timeline, -1 is returned.
 *  If the time is after the end, the index of the last item is returned.
 *  @param  {Number}  time
 *  @param  {String}  comparator Which value in the object to compare
 *  @return  {Number} the index in the timeline array
 *  @private
 */


_Tone.default.Timeline.prototype._search = function (time, comparator) {
  if (this._timeline.length === 0) {
    return -1;
  }

  comparator = _Tone.default.defaultArg(comparator, "time");
  var beginning = 0;
  var len = this._timeline.length;
  var end = len;

  if (len > 0 && this._timeline[len - 1][comparator] <= time) {
    return len - 1;
  }

  while (beginning < end) {
    // calculate the midpoint for roughly equal partition
    var midPoint = Math.floor(beginning + (end - beginning) / 2);
    var event = this._timeline[midPoint];
    var nextEvent = this._timeline[midPoint + 1];

    if (event[comparator] === time) {
      //choose the last one that has the same time
      for (var i = midPoint; i < this._timeline.length; i++) {
        var testEvent = this._timeline[i];

        if (testEvent[comparator] === time) {
          midPoint = i;
        }
      }

      return midPoint;
    } else if (event[comparator] < time && nextEvent[comparator] > time) {
      return midPoint;
    } else if (event[comparator] > time) {
      //search lower
      end = midPoint;
    } else {
      //search upper
      beginning = midPoint + 1;
    }
  }

  return -1;
};
/**
 *  Internal iterator. Applies extra safety checks for
 *  removing items from the array.
 *  @param  {Function}  callback
 *  @param  {Number=}    lowerBound
 *  @param  {Number=}    upperBound
 *  @private
 */


_Tone.default.Timeline.prototype._iterate = function (callback, lowerBound, upperBound) {
  lowerBound = _Tone.default.defaultArg(lowerBound, 0);
  upperBound = _Tone.default.defaultArg(upperBound, this._timeline.length - 1);

  this._timeline.slice(lowerBound, upperBound + 1).forEach(function (event) {
    callback.call(this, event);
  }.bind(this));
};
/**
 *  Iterate over everything in the array
 *  @param  {Function}  callback The callback to invoke with every item
 *  @returns {Tone.Timeline} this
 */


_Tone.default.Timeline.prototype.forEach = function (callback) {
  this._iterate(callback);

  return this;
};
/**
 *  Iterate over everything in the array at or before the given time.
 *  @param  {Number}  time The time to check if items are before
 *  @param  {Function}  callback The callback to invoke with every item
 *  @returns {Tone.Timeline} this
 */


_Tone.default.Timeline.prototype.forEachBefore = function (time, callback) {
  //iterate over the items in reverse so that removing an item doesn't break things
  var upperBound = this._search(time);

  if (upperBound !== -1) {
    this._iterate(callback, 0, upperBound);
  }

  return this;
};
/**
 *  Iterate over everything in the array after the given time.
 *  @param  {Number}  time The time to check if items are before
 *  @param  {Function}  callback The callback to invoke with every item
 *  @returns {Tone.Timeline} this
 */


_Tone.default.Timeline.prototype.forEachAfter = function (time, callback) {
  //iterate over the items in reverse so that removing an item doesn't break things
  var lowerBound = this._search(time);

  this._iterate(callback, lowerBound + 1);

  return this;
};
/**
 *  Iterate over everything in the array between the startTime and endTime. 
 *  The timerange is inclusive of the startTime, but exclusive of the endTime. 
 *  range = [startTime, endTime). 
 *  @param  {Number}  startTime The time to check if items are before
 *  @param  {Number}  endTime The end of the test interval. 
 *  @param  {Function}  callback The callback to invoke with every item
 *  @returns {Tone.Timeline} this
 */


_Tone.default.Timeline.prototype.forEachBetween = function (startTime, endTime, callback) {
  var lowerBound = this._search(startTime);

  var upperBound = this._search(endTime);

  if (lowerBound !== -1 && upperBound !== -1) {
    if (this._timeline[lowerBound].time !== startTime) {
      lowerBound += 1;
    } //exclusive of the end time


    if (this._timeline[upperBound].time === endTime) {
      upperBound -= 1;
    }

    this._iterate(callback, lowerBound, upperBound);
  } else if (lowerBound === -1) {
    this._iterate(callback, 0, upperBound);
  }

  return this;
};
/**
 *  Iterate over everything in the array at or after the given time. Similar to
 *  forEachAfter, but includes the item(s) at the given time.
 *  @param  {Number}  time The time to check if items are before
 *  @param  {Function}  callback The callback to invoke with every item
 *  @returns {Tone.Timeline} this
 */


_Tone.default.Timeline.prototype.forEachFrom = function (time, callback) {
  //iterate over the items in reverse so that removing an item doesn't break things
  var lowerBound = this._search(time); //work backwards until the event time is less than time


  while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {
    lowerBound--;
  }

  this._iterate(callback, lowerBound + 1);

  return this;
};
/**
 *  Iterate over everything in the array at the given time
 *  @param  {Number}  time The time to check if items are before
 *  @param  {Function}  callback The callback to invoke with every item
 *  @returns {Tone.Timeline} this
 */


_Tone.default.Timeline.prototype.forEachAtTime = function (time, callback) {
  //iterate over the items in reverse so that removing an item doesn't break things
  var upperBound = this._search(time);

  if (upperBound !== -1) {
    this._iterate(function (event) {
      if (event.time === time) {
        callback.call(this, event);
      }
    }, 0, upperBound);
  }

  return this;
};
/**
 *  Clean up.
 *  @return  {Tone.Timeline}  this
 */


_Tone.default.Timeline.prototype.dispose = function () {
  _Tone.default.prototype.dispose.call(this);

  this._timeline = null;
  return this;
};

var _default = _Tone.default.Timeline;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js"}],"../node_modules/tone/tone/shim/OfflineAudioContext.js":[function(require,module,exports) {
"use strict";

var _Tone = _interopRequireDefault(require("../core/Tone"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (_Tone.default.supported) {
  if (!_Tone.default.global.hasOwnProperty("OfflineAudioContext") && _Tone.default.global.hasOwnProperty("webkitOfflineAudioContext")) {
    _Tone.default.global.OfflineAudioContext = _Tone.default.global.webkitOfflineAudioContext;
  } //returns promise?


  var context = new OfflineAudioContext(1, 1, 44100);
  var ret = context.startRendering();

  if (!(ret && _Tone.default.isFunction(ret.then))) {
    OfflineAudioContext.prototype._native_startRendering = OfflineAudioContext.prototype.startRendering;

    OfflineAudioContext.prototype.startRendering = function () {
      return new Promise(function (done) {
        this.oncomplete = function (e) {
          done(e.renderedBuffer);
        };

        this._native_startRendering();
      }.bind(this));
    };
  }
}
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js"}],"../node_modules/tone/tone/shim/AudioContext.js":[function(require,module,exports) {
"use strict";

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../shim/OfflineAudioContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (_Tone.default.supported) {
  if (!_Tone.default.global.hasOwnProperty("AudioContext") && _Tone.default.global.hasOwnProperty("webkitAudioContext")) {
    _Tone.default.global.AudioContext = _Tone.default.global.webkitAudioContext;
  } //not functionally equivalent, but only an API placeholder


  if (!AudioContext.prototype.close) {
    AudioContext.prototype.close = function () {
      if (_Tone.default.isFunction(this.suspend)) {
        this.suspend();
      }

      return Promise.resolve();
    };
  } //not functionally equivalent


  if (!AudioContext.prototype.resume) {
    AudioContext.prototype.resume = function () {
      //play some silent audio to jumpstart the context
      var buffer = this.createBuffer(1, 1, this.sampleRate);
      var source = this.createBufferSource();
      source.buffer = buffer;
      source.connect(this.destination);
      source.start(0);
      return Promise.resolve();
    };
  } //createGain


  if (!AudioContext.prototype.createGain && AudioContext.prototype.createGainNode) {
    AudioContext.prototype.createGain = AudioContext.prototype.createGainNode;
  } //createDelay


  if (!AudioContext.prototype.createDelay && AudioContext.prototype.createDelayNode) {
    AudioContext.prototype.createDelay = AudioContext.prototype.createDelayNode;
  } //test decodeAudioData returns a promise
  // https://github.com/mohayonao/web-audio-api-shim/blob/master/src/AudioContext.js
  // MIT License (c) 2015 @mohayonao


  var decodeAudioDataPromise = false;
  var offlineContext = new OfflineAudioContext(1, 1, 44100);
  var audioData = new Uint32Array([1179011410, 48, 1163280727, 544501094, 16, 131073, 44100, 176400, 1048580, 1635017060, 8, 0, 0, 0, 0]).buffer;

  try {
    var ret = offlineContext.decodeAudioData(audioData);

    if (ret && _Tone.default.isFunction(ret.then)) {
      decodeAudioDataPromise = true;
    }
  } catch (e) {
    decodeAudioDataPromise = false;
  }

  if (!decodeAudioDataPromise) {
    AudioContext.prototype._native_decodeAudioData = AudioContext.prototype.decodeAudioData;

    AudioContext.prototype.decodeAudioData = function (audioData) {
      return new Promise(function (success, error) {
        this._native_decodeAudioData(audioData, success, error);
      }.bind(this));
    };
  }
}
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../shim/OfflineAudioContext":"../node_modules/tone/tone/shim/OfflineAudioContext.js"}],"../node_modules/tone/tone/core/Context.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Emitter");

require("../core/Timeline");

require("../shim/AudioContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var AudioContextProperties = ["baseLatency", "destination", "currentTime", "sampleRate", "listener", "state"];
var AudioContextMethods = ["suspend", "close", "resume", "getOutputTimestamp", "createMediaElementSource", "createMediaStreamSource", "createMediaStreamDestination", "createBuffer", "decodeAudioData", "createBufferSource", "createConstantSource", "createGain", "createDelay", "createBiquadFilter", "createIIRFilter", "createWaveShaper", "createPanner", "createConvolver", "createDynamicsCompressor", "createAnalyser", "createScriptProcessor", "createStereoPanner", "createOscillator", "createPeriodicWave", "createChannelSplitter", "createChannelMerger", "audioWorklet"];
/**
 *  @class Wrapper around the native AudioContext.
 *  @extends {Tone.Emitter}
 *  @param {AudioContext=} context optionally pass in a context
 */

_Tone.default.Context = function () {
  _Tone.default.Emitter.call(this);

  var options = _Tone.default.defaults(arguments, ["context"], _Tone.default.Context);

  if (!options.context) {
    options.context = new _Tone.default.global.AudioContext();

    if (!options.context) {
      throw new Error("could not create AudioContext. Possibly too many AudioContexts running already.");
    }
  }

  this._context = options.context; //make sure it's not an AudioContext wrapper

  while (this._context.rawContext) {
    this._context = this._context.rawContext;
  } // extend all of the properties


  AudioContextProperties.forEach(function (prop) {
    this._defineProperty(this._context, prop);
  }.bind(this)); // extend all of the methods

  AudioContextMethods.forEach(function (method) {
    this._defineMethod(this._context, method);
  }.bind(this));
  /**
   *  The default latency hint
   *  @type  {String}
   *  @private
   */

  this._latencyHint = options.latencyHint;
  /**
   *  An object containing all of the constants AudioBufferSourceNodes
   *  @type  {Object}
   *  @private
   */

  this._constants = {}; ///////////////////////////////////////////////////////////////////////
  // WORKER
  ///////////////////////////////////////////////////////////////////////

  /**
   *  The amount of time events are scheduled
   *  into the future
   *  @type  {Number}
   */

  this.lookAhead = options.lookAhead;
  /**
   *  A reference to the actual computed update interval
   *  @type  {Number}
   *  @private
   */

  this._computedUpdateInterval = 0;
  /**
   *  A reliable callback method
   *  @private
   *  @type  {Ticker}
   */

  this._ticker = new Ticker(this.emit.bind(this, "tick"), options.clockSource, options.updateInterval); ///////////////////////////////////////////////////////////////////////
  // TIMEOUTS
  ///////////////////////////////////////////////////////////////////////

  /**
   *  All of the setTimeout events.
   *  @type  {Tone.Timeline}
   *  @private
   */

  this._timeouts = new _Tone.default.Timeline();
  /**
   *  The timeout id counter
   *  @private
   *  @type {Number}
   */

  this._timeoutIds = 0;
  this.on("tick", this._timeoutLoop.bind(this)); //forward state change events

  this._context.onstatechange = function (e) {
    this.emit("statechange", e);
  }.bind(this);
};

_Tone.default.extend(_Tone.default.Context, _Tone.default.Emitter);

_Tone.default.Emitter.mixin(_Tone.default.Context);
/**
 * defaults
 * @static
 * @type {Object}
 */


_Tone.default.Context.defaults = {
  "clockSource": "worker",
  "latencyHint": "interactive",
  "lookAhead": 0.1,
  "updateInterval": 0.03
};
/**
 * Is an instanceof Tone.Context
 * @type {Boolean}
 */

_Tone.default.Context.prototype.isContext = true;
/**
 *  Define a property on this Tone.Context.
 *  This is used to extend the native AudioContext
 *  @param  {AudioContext}  context
 *  @param  {String}  prop
 *  @private
 */

_Tone.default.Context.prototype._defineProperty = function (context, prop) {
  if (_Tone.default.isUndef(this[prop])) {
    Object.defineProperty(this, prop, {
      "get": function () {
        return context[prop];
      },
      "set": function (val) {
        context[prop] = val;
      }
    });
  }
};
/**
 *  Define a method on this Tone.Context.
 *  This is used to extend the native AudioContext
 *  @param  {AudioContext}  context
 *  @param  {String}  prop
 *  @private
 */


_Tone.default.Context.prototype._defineMethod = function (context, prop) {
  if (_Tone.default.isUndef(this[prop])) {
    Object.defineProperty(this, prop, {
      "get": function () {
        return context[prop].bind(context);
      }
    });
  }
};
/**
 *  The current audio context time
 *  @return  {Number}
 */


_Tone.default.Context.prototype.now = function () {
  return this._context.currentTime + this.lookAhead;
};
/**
 *  The audio output destination. Alias for Tone.Master
 *  @readyOnly
 *  @type  {Tone.Master}
 */


Object.defineProperty(_Tone.default.Context.prototype, "destination", {
  "get": function () {
    if (!this.master) {
      return this._context.destination;
    } else {
      return this.master;
    }
  }
});
/**
 *  Starts the audio context from a suspended state. This is required
 *  to initially start the AudioContext.
 *  @return  {Promise}
 */

_Tone.default.Context.prototype.resume = function () {
  if (this._context.state === "suspended" && this._context instanceof AudioContext) {
    return this._context.resume();
  } else {
    return Promise.resolve();
  }
};
/**
 *  Promise which is invoked when the context is running.
 *  Tries to resume the context if it's not started.
 *  @return  {Promise}
 */


_Tone.default.Context.prototype.close = function () {
  var closePromise = Promise.resolve(); //never close the global Tone.Context

  if (this !== _Tone.default.global.TONE_AUDIO_CONTEXT) {
    closePromise = this.rawContext.close();
  }

  return closePromise.then(function () {
    _Tone.default.Context.emit("close", this);
  }.bind(this));
};
/**
 *  Generate a looped buffer at some constant value.
 *  @param  {Number}  val
 *  @return  {BufferSourceNode}
 */


_Tone.default.Context.prototype.getConstant = function (val) {
  if (this._constants[val]) {
    return this._constants[val];
  } else {
    var buffer = this._context.createBuffer(1, 128, this._context.sampleRate);

    var arr = buffer.getChannelData(0);

    for (var i = 0; i < arr.length; i++) {
      arr[i] = val;
    }

    var constant = this._context.createBufferSource();

    constant.channelCount = 1;
    constant.channelCountMode = "explicit";
    constant.buffer = buffer;
    constant.loop = true;
    constant.start(0);
    this._constants[val] = constant;
    return constant;
  }
};
/**
 *  The private loop which keeps track of the context scheduled timeouts
 *  Is invoked from the clock source
 *  @private
 */


_Tone.default.Context.prototype._timeoutLoop = function () {
  var now = this.now();

  while (this._timeouts && this._timeouts.length && this._timeouts.peek().time <= now) {
    this._timeouts.shift().callback();
  }
};
/**
 *  A setTimeout which is gaurenteed by the clock source.
 *  Also runs in the offline context.
 *  @param  {Function}  fn       The callback to invoke
 *  @param  {Seconds}    timeout  The timeout in seconds
 *  @returns {Number} ID to use when invoking Tone.Context.clearTimeout
 */


_Tone.default.Context.prototype.setTimeout = function (fn, timeout) {
  this._timeoutIds++;
  var now = this.now();

  this._timeouts.add({
    "callback": fn,
    "time": now + timeout,
    "id": this._timeoutIds
  });

  return this._timeoutIds;
};
/**
 *  Clears a previously scheduled timeout with Tone.context.setTimeout
 *  @param  {Number}  id  The ID returned from setTimeout
 *  @return  {Tone.Context}  this
 */


_Tone.default.Context.prototype.clearTimeout = function (id) {
  this._timeouts.forEach(function (event) {
    if (event.id === id) {
      this.remove(event);
    }
  });

  return this;
};
/**
 *  How often the Web Worker callback is invoked.
 *  This number corresponds to how responsive the scheduling
 *  can be. Context.updateInterval + Context.lookAhead gives you the
 *  total latency between scheduling an event and hearing it.
 *  @type {Number}
 *  @memberOf Tone.Context#
 *  @name updateInterval
 */


Object.defineProperty(_Tone.default.Context.prototype, "updateInterval", {
  "get": function () {
    return this._ticker.updateInterval;
  },
  "set": function (interval) {
    this._ticker.updateInterval = interval;
  }
});
/**
 *  The unwrapped AudioContext.
 *  @type {AudioContext}
 *  @memberOf Tone.Context#
 *  @name rawContext
 *  @readOnly
 */

Object.defineProperty(_Tone.default.Context.prototype, "rawContext", {
  "get": function () {
    return this._context;
  }
});
/**
 *  What the source of the clock is, either "worker" (Web Worker [default]),
 *  "timeout" (setTimeout), or "offline" (none).
 *  @type {String}
 *  @memberOf Tone.Context#
 *  @name clockSource
 */

Object.defineProperty(_Tone.default.Context.prototype, "clockSource", {
  "get": function () {
    return this._ticker.type;
  },
  "set": function (type) {
    this._ticker.type = type;
  }
});
/**
 *  The type of playback, which affects tradeoffs between audio
 *  output latency and responsiveness.
 *
 *  In addition to setting the value in seconds, the latencyHint also
 *  accepts the strings "interactive" (prioritizes low latency),
 *  "playback" (prioritizes sustained playback), "balanced" (balances
 *  latency and performance), and "fastest" (lowest latency, might glitch more often).
 *  @type {String|Seconds}
 *  @memberOf Tone.Context#
 *  @name latencyHint
 *  @example
 * //set the lookAhead to 0.3 seconds
 * Tone.context.latencyHint = 0.3;
 */

Object.defineProperty(_Tone.default.Context.prototype, "latencyHint", {
  "get": function () {
    return this._latencyHint;
  },
  "set": function (hint) {
    var lookAhead = hint;
    this._latencyHint = hint;

    if (_Tone.default.isString(hint)) {
      switch (hint) {
        case "interactive":
          lookAhead = 0.1;
          this._context.latencyHint = hint;
          break;

        case "playback":
          lookAhead = 0.8;
          this._context.latencyHint = hint;
          break;

        case "balanced":
          lookAhead = 0.25;
          this._context.latencyHint = hint;
          break;

        case "fastest":
          this._context.latencyHint = "interactive";
          lookAhead = 0.01;
          break;
      }
    }

    this.lookAhead = lookAhead;
    this.updateInterval = lookAhead / 3;
  }
});
/**
 *  Unlike other dispose methods, this returns a Promise
 *  which executes when the context is closed and disposed
 *  @returns {Promise} this
 */

_Tone.default.Context.prototype.dispose = function () {
  return this.close().then(function () {
    _Tone.default.Emitter.prototype.dispose.call(this);

    this._ticker.dispose();

    this._ticker = null;

    this._timeouts.dispose();

    this._timeouts = null;

    for (var con in this._constants) {
      this._constants[con].disconnect();
    }

    this._constants = null;
  }.bind(this));
};
/**
 * @class A class which provides a reliable callback using either
 *        a Web Worker, or if that isn't supported, falls back to setTimeout.
 * @private
 */


var Ticker = function (callback, type, updateInterval) {
  /**
   * Either "worker" or "timeout"
   * @type {String}
   * @private
   */
  this._type = type;
  /**
   * The update interval of the worker
   * @private
   * @type {Number}
   */

  this._updateInterval = updateInterval;
  /**
   * The callback to invoke at regular intervals
   * @type {Function}
   * @private
   */

  this._callback = _Tone.default.defaultArg(callback, _Tone.default.noOp); //create the clock source for the first time

  this._createClock();
};
/**
 * The possible ticker types
 * @private
 * @type {Object}
 */


Ticker.Type = {
  "Worker": "worker",
  "Timeout": "timeout",
  "Offline": "offline"
};
/**
 *  Generate a web worker
 *  @return  {WebWorker}
 *  @private
 */

Ticker.prototype._createWorker = function () {
  //URL Shim
  _Tone.default.global.URL = _Tone.default.global.URL || _Tone.default.global.webkitURL;
  var blob = new Blob([//the initial timeout time
  "var timeoutTime = " + (this._updateInterval * 1000).toFixed(1) + ";" + //onmessage callback
  "self.onmessage = function(msg){" + "	timeoutTime = parseInt(msg.data);" + "};" + //the tick function which posts a message
  //and schedules a new tick
  "function tick(){" + "	setTimeout(tick, timeoutTime);" + "	self.postMessage('tick');" + "}" + //call tick initially
  "tick();"]);
  var blobUrl = URL.createObjectURL(blob);
  var worker = new Worker(blobUrl);
  worker.onmessage = this._callback.bind(this);
  this._worker = worker;
};
/**
 * Create a timeout loop
 * @private
 */


Ticker.prototype._createTimeout = function () {
  this._timeout = setTimeout(function () {
    this._createTimeout();

    this._callback();
  }.bind(this), this._updateInterval * 1000);
};
/**
 * Create the clock source.
 * @private
 */


Ticker.prototype._createClock = function () {
  if (this._type === Ticker.Type.Worker) {
    try {
      this._createWorker();
    } catch (e) {
      // workers not supported, fallback to timeout
      this._type = Ticker.Type.Timeout;

      this._createClock();
    }
  } else if (this._type === Ticker.Type.Timeout) {
    this._createTimeout();
  }
};
/**
 * @memberOf Ticker#
 * @type {Number}
 * @name updateInterval
 * @private
 */


Object.defineProperty(Ticker.prototype, "updateInterval", {
  "get": function () {
    return this._updateInterval;
  },
  "set": function (interval) {
    this._updateInterval = Math.max(interval, 128 / 44100);

    if (this._type === Ticker.Type.Worker) {
      this._worker.postMessage(Math.max(interval * 1000, 1));
    }
  }
});
/**
 * The type of the ticker, either a worker or a timeout
 * @memberOf Ticker#
 * @type {Number}
 * @name type
 * @private
 */

Object.defineProperty(Ticker.prototype, "type", {
  "get": function () {
    return this._type;
  },
  "set": function (type) {
    this._disposeClock();

    this._type = type;

    this._createClock();
  }
});
/**
 * Clean up the current clock source
 * @private
 */

Ticker.prototype._disposeClock = function () {
  if (this._timeout) {
    clearTimeout(this._timeout);
    this._timeout = null;
  }

  if (this._worker) {
    this._worker.terminate();

    this._worker.onmessage = null;
    this._worker = null;
  }
};
/**
 * Clean up
 * @private
 */


Ticker.prototype.dispose = function () {
  this._disposeClock();

  this._callback = null;
}; // set the audio context initially, and if one is not already created


if (_Tone.default.supported && !_Tone.default.initialized) {
  if (!_Tone.default.global.TONE_AUDIO_CONTEXT) {
    _Tone.default.global.TONE_AUDIO_CONTEXT = new _Tone.default.Context();
  }

  _Tone.default.context = _Tone.default.global.TONE_AUDIO_CONTEXT; // log on first initialization
  // allow optional silencing of this log

  if (!_Tone.default.global.TONE_SILENCE_LOGGING) {
    var prefix = "v";

    if (_Tone.default.version === "dev") {
      prefix = "";
    }

    var printString = " * Tone.js " + prefix + _Tone.default.version + " * "; // eslint-disable-next-line no-console

    console.log("%c" + printString, "background: #000; color: #fff");
  }
} else if (!_Tone.default.supported && !_Tone.default.global.TONE_SILENCE_LOGGING) {
  // eslint-disable-next-line no-console
  console.warn("This browser does not support Tone.js");
}

var _default = _Tone.default.Context;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Emitter":"../node_modules/tone/tone/core/Emitter.js","../core/Timeline":"../node_modules/tone/tone/core/Timeline.js","../shim/AudioContext":"../node_modules/tone/tone/shim/AudioContext.js"}],"../node_modules/tone/tone/type/Type.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../type/Time");

require("../type/Frequency");

require("../type/TransportTime");

require("../core/Context");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

///////////////////////////////////////////////////////////////////////////
//	TYPES
///////////////////////////////////////////////////////////////////////////

/**
 * Units which a value can take on.
 * @enum {String}
 */
_Tone.default.Type = {
  /**
   *  Default units
   *  @typedef {Default}
   */
  Default: "number",

  /**
   *  Time can be described in a number of ways. Read more [Time](https://github.com/Tonejs/Tone.js/wiki/Time).
   *
   *  * Numbers, which will be taken literally as the time (in seconds).
   *  * Notation, ("4n", "8t") describes time in BPM and time signature relative values.
   *  * TransportTime, ("4:3:2") will also provide tempo and time signature relative times
   *  in the form BARS:QUARTERS:SIXTEENTHS.
   *  * Frequency, ("8hz") is converted to the length of the cycle in seconds.
   *  * Now-Relative, ("+1") prefix any of the above with "+" and it will be interpreted as
   *  "the current time plus whatever expression follows".
   *  * Object, ({"4n" : 3, "8t" : -1}). The resulting time is equal to the sum of all of the keys multiplied by the values in the object. 
   *  * No Argument, for methods which accept time, no argument will be interpreted as
   *  "now" (i.e. the currentTime).
   *
   *  @typedef {Time}
   */
  Time: "time",

  /**
   *  Frequency can be described similar to time, except ultimately the
   *  values are converted to frequency instead of seconds. A number
   *  is taken literally as the value in hertz. Additionally any of the
   *  Time encodings can be used. Note names in the form
   *  of NOTE OCTAVE (i.e. C4) are also accepted and converted to their
   *  frequency value.
   *  @typedef {Frequency}
   */
  Frequency: "frequency",

  /**
   *  TransportTime describes a position along the Transport's timeline. It is
   *  similar to Time in that it uses all the same encodings, but TransportTime specifically
   *  pertains to the Transport's timeline, which is startable, stoppable, loopable, and seekable.
   *  [Read more](https://github.com/Tonejs/Tone.js/wiki/TransportTime)
   *  @typedef {TransportTime}
   */
  TransportTime: "transportTime",

  /**
   *  Ticks are the basic subunit of the Transport. They are
   *  the smallest unit of time that the Transport supports.
   *  @typedef {Ticks}
   */
  Ticks: "ticks",

  /**
   *  Normal values are within the range [0, 1].
   *  @typedef {NormalRange}
   */
  NormalRange: "normalRange",

  /**
   *  AudioRange values are between [-1, 1].
   *  @typedef {AudioRange}
   */
  AudioRange: "audioRange",

  /**
   *  Decibels are a logarithmic unit of measurement which is useful for volume
   *  because of the logarithmic way that we perceive loudness. 0 decibels
   *  means no change in volume. -10db is approximately half as loud and 10db
   *  is twice is loud.
   *  @typedef {Decibels}
   */
  Decibels: "db",

  /**
   *  Half-step note increments, i.e. 12 is an octave above the root. and 1 is a half-step up.
   *  @typedef {Interval}
   */
  Interval: "interval",

  /**
   *  Beats per minute.
   *  @typedef {BPM}
   */
  BPM: "bpm",

  /**
   *  The value must be greater than or equal to 0.
   *  @typedef {Positive}
   */
  Positive: "positive",

  /**
   *  Gain is the ratio between input and output of a signal.
   *  A gain of 0 is the same as silencing the signal. A gain of
   *  1, causes no change to the incoming signal.
   *  @typedef {Gain}
   */
  Gain: "gain",

  /**
   *  A cent is a hundredth of a semitone.
   *  @typedef {Cents}
   */
  Cents: "cents",

  /**
   *  Angle between 0 and 360.
   *  @typedef {Degrees}
   */
  Degrees: "degrees",

  /**
   *  A number representing a midi note.
   *  @typedef {MIDI}
   */
  MIDI: "midi",

  /**
   *  A colon-separated representation of time in the form of
   *  Bars:Beats:Sixteenths.
   *  @typedef {BarsBeatsSixteenths}
   */
  BarsBeatsSixteenths: "barsBeatsSixteenths",

  /**
   *  Sampling is the reduction of a continuous signal to a discrete signal.
   *  Audio is typically sampled 44100 times per second.
   *  @typedef {Samples}
   */
  Samples: "samples",

  /**
   *  Hertz are a frequency representation defined as one cycle per second.
   *  @typedef {Hertz}
   */
  Hertz: "hertz",

  /**
   *  A frequency represented by a letter name,
   *  accidental and octave. This system is known as
   *  [Scientific Pitch Notation](https://en.wikipedia.org/wiki/Scientific_pitch_notation).
   *  @typedef {Note}
   */
  Note: "note",

  /**
   *  One millisecond is a thousandth of a second.
   *  @typedef {Milliseconds}
   */
  Milliseconds: "milliseconds",

  /**
   *  Seconds are the time unit of the AudioContext. In the end,
   *  all values need to be evaluated to seconds.
   *  @typedef {Seconds}
   */
  Seconds: "seconds",

  /**
   *  A string representing a duration relative to a measure.
   *  * "4n" = quarter note
   *  * "2m" = two measures
   *  * "8t" = eighth-note triplet
   *  @typedef {Notation}
   */
  Notation: "notation"
}; ///////////////////////////////////////////////////////////////////////////
// AUGMENT TONE's PROTOTYPE
///////////////////////////////////////////////////////////////////////////

/**
 *  Convert Time into seconds.
 *
 *  Unlike the method which it overrides, this takes into account
 *  transporttime and musical notation.
 *
 *  Time : 1.40
 *  Notation: 4n or 1m or 2t
 *  Now Relative: +3n
 *
 *  @param  {Time} time
 *  @return {Seconds}
 */

_Tone.default.prototype.toSeconds = function (time) {
  if (_Tone.default.isNumber(time)) {
    return time;
  } else if (_Tone.default.isUndef(time)) {
    return this.now();
  } else if (_Tone.default.isString(time) || _Tone.default.isObject(time)) {
    return new _Tone.default.Time(time).toSeconds();
  } else if (time instanceof _Tone.default.TimeBase) {
    return time.toSeconds();
  }
};
/**
 *  Convert a frequency representation into a number.
 *  @param  {Frequency} freq
 *  @return {Hertz}      the frequency in hertz
 */


_Tone.default.prototype.toFrequency = function (freq) {
  if (_Tone.default.isNumber(freq)) {
    return freq;
  } else if (_Tone.default.isString(freq) || _Tone.default.isUndef(freq) || _Tone.default.isObject(freq)) {
    return new _Tone.default.Frequency(freq).valueOf();
  } else if (freq instanceof _Tone.default.TimeBase) {
    return freq.toFrequency();
  }
};
/**
 *  Convert a time representation into ticks.
 *  @param  {Time} time
 *  @return {Ticks}  the time in ticks
 */


_Tone.default.prototype.toTicks = function (time) {
  if (_Tone.default.isNumber(time) || _Tone.default.isString(time) || _Tone.default.isObject(time)) {
    return new _Tone.default.TransportTime(time).toTicks();
  } else if (_Tone.default.isUndef(time)) {
    return _Tone.default.Transport.ticks;
  } else if (time instanceof _Tone.default.TimeBase) {
    return time.toTicks();
  }
};

var _default = _Tone.default;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../type/Time":"../node_modules/tone/tone/type/Time.js","../type/Frequency":"../node_modules/tone/tone/type/Frequency.js","../type/TransportTime":"../node_modules/tone/tone/type/TransportTime.js","../core/Context":"../node_modules/tone/tone/core/Context.js"}],"../node_modules/tone/tone/shim/AudioNode.js":[function(require,module,exports) {
"use strict";

var _Tone = _interopRequireDefault(require("../core/Tone"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  Makes sure that connect returns the dst node
 *  @private
 */
if (_Tone.default.supported) {
  var testContext = new OfflineAudioContext(2, 1, 44100);
  var testSrcNode = testContext.createGain();
  var testDstNode = testContext.createGain();

  if (testSrcNode.connect(testDstNode) !== testDstNode) {
    var nativeConnect = AudioNode.prototype.connect;

    AudioNode.prototype.connect = function () {
      nativeConnect.apply(this, arguments);
      return arguments[0];
    };
  }
}
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js"}],"../node_modules/tone/tone/core/AudioNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Context");

require("../shim/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.AudioNode is the base class for classes which process audio.
 *         AudioNodes have inputs and outputs.
 *  @param	{AudioContext=} context	The audio context to use with the class
 *  @extends {Tone}
 */
_Tone.default.AudioNode = function () {
  _Tone.default.call(this); //use the default context if one is not passed in


  var options = _Tone.default.defaults(arguments, ["context"], {
    "context": _Tone.default.context
  });
  /**
   * The AudioContext of this instance
   * @private
   * @type {AudioContext}
   */


  this._context = options.context;
};

_Tone.default.extend(_Tone.default.AudioNode);
/**
 * Get the audio context belonging to this instance.
 * @type {Tone.Context}
 * @memberOf Tone.AudioNode#
 * @name context
 * @readOnly
 */


Object.defineProperty(_Tone.default.AudioNode.prototype, "context", {
  get: function () {
    return this._context;
  }
});
/**
 *  Create input and outputs for this object.
 *  @param  {Number}  [input=0]   The number of inputs
 *  @param  {Number}  [outputs=0]  The number of outputs
 *  @return  {Tone.AudioNode}  this
 *  @private
 */

_Tone.default.AudioNode.prototype.createInsOuts = function (inputs, outputs) {
  if (inputs === 1) {
    this.input = this.context.createGain();
  } else if (inputs > 1) {
    this.input = new Array(inputs);
  }

  if (outputs === 1) {
    this.output = this.context.createGain();
  } else if (outputs > 1) {
    this.output = new Array(outputs);
  }
};
/**
 *  channelCount is the number of channels used when up-mixing and down-mixing
 *  connections to any inputs to the node. The default value is 2 except for
 *  specific nodes where its value is specially determined.
 *
 *  @memberof Tone.AudioNode#
 *  @type {Number}
 *  @name channelCount
 *  @readOnly
 */


Object.defineProperty(_Tone.default.AudioNode.prototype, "channelCount", {
  get: function () {
    return this.output.channelCount;
  },
  set: function (c) {
    return this.output.channelCount = c;
  }
});
/**
 *  channelCountMode determines how channels will be counted when up-mixing and
 *  down-mixing connections to any inputs to the node.
 *  The default value is "max". This attribute has no effect for nodes with no inputs.
 *  @memberof Tone.AudioNode#
 *  @type {String}
 *  @name channelCountMode
 *  @readOnly
 */

Object.defineProperty(_Tone.default.AudioNode.prototype, "channelCountMode", {
  get: function () {
    return this.output.channelCountMode;
  },
  set: function (m) {
    return this.output.channelCountMode = m;
  }
});
/**
 *  channelInterpretation determines how individual channels will be treated
 *  when up-mixing and down-mixing connections to any inputs to the node.
 *  The default value is "speakers".
 *  @memberof Tone.AudioNode#
 *  @type {String}
 *  @name channelInterpretation
 *  @readOnly
 */

Object.defineProperty(_Tone.default.AudioNode.prototype, "channelInterpretation", {
  get: function () {
    return this.output.channelInterpretation;
  },
  set: function (i) {
    return this.output.channelInterpretation = i;
  }
});
/**
 *  The number of inputs feeding into the AudioNode.
 *  For source nodes, this will be 0.
 *  @type {Number}
 *  @name numberOfInputs
 *  @memberof Tone.AudioNode#
 *  @readOnly
 */

Object.defineProperty(_Tone.default.AudioNode.prototype, "numberOfInputs", {
  get: function () {
    if (this.input) {
      if (_Tone.default.isArray(this.input)) {
        return this.input.length;
      } else {
        return 1;
      }
    } else {
      return 0;
    }
  }
});
/**
 *  The number of outputs coming out of the AudioNode.
 *  @type {Number}
 *  @name numberOfOutputs
 *  @memberof Tone.AudioNode#
 *  @readOnly
 */

Object.defineProperty(_Tone.default.AudioNode.prototype, "numberOfOutputs", {
  get: function () {
    if (this.output) {
      if (_Tone.default.isArray(this.output)) {
        return this.output.length;
      } else {
        return 1;
      }
    } else {
      return 0;
    }
  }
});
/**
 *  connect the output of a ToneNode to an AudioParam, AudioNode, or ToneNode
 *  @param  {Tone | AudioParam | AudioNode} unit
 *  @param {number} [outputNum=0] optionally which output to connect from
 *  @param {number} [inputNum=0] optionally which input to connect to
 *  @returns {Tone.AudioNode} this
 */

_Tone.default.AudioNode.prototype.connect = function (unit, outputNum, inputNum) {
  if (_Tone.default.isArray(this.output)) {
    outputNum = _Tone.default.defaultArg(outputNum, 0);
    this.output[outputNum].connect(unit, 0, inputNum);
  } else {
    _Tone.default.connect(this.output, unit, outputNum, inputNum);
  }

  return this;
};
/**
 *  disconnect the output
 *  @param {Number|AudioNode} output Either the output index to disconnect
 *                                   if the output is an array, or the
 *                                   node to disconnect from.
 *  @returns {Tone.AudioNode} this
 */


_Tone.default.AudioNode.prototype.disconnect = function (destination, outputNum, inputNum) {
  if (_Tone.default.isArray(this.output)) {
    outputNum = _Tone.default.defaultArg(outputNum, 0);
    this.output[outputNum].disconnect(destination, 0, inputNum);
  } else {
    _Tone.default.disconnect(this.output, destination, outputNum, inputNum);
  }

  return this;
};
/**
 *  Connect the output of this node to the rest of the nodes in series.
 *  @example
 *  //connect a node to an effect, panVol and then to the master output
 *  node.chain(effect, panVol, Tone.Master);
 *  @param {...(AudioParam|Tone|AudioNode)} nodes
 *  @returns {Tone.AudioNode} this
 */


_Tone.default.AudioNode.prototype.chain = function () {
  var args = Array.from(arguments);
  args.unshift(this);

  _Tone.default.connectSeries.apply(undefined, args);

  return this;
};
/**
 *  connect the output of this node to the rest of the nodes in parallel.
 *  @param {...(AudioParam|Tone|AudioNode)} nodes
 *  @returns {Tone.AudioNode} this
 */


_Tone.default.AudioNode.prototype.fan = function () {
  for (var i = 0; i < arguments.length; i++) {
    this.connect(arguments[i]);
  }

  return this;
};
/**
 * Dispose and disconnect
 * @return {Tone.AudioNode} this
 */


_Tone.default.AudioNode.prototype.dispose = function () {
  if (_Tone.default.isDefined(this.input)) {
    if (this.input instanceof AudioNode) {
      this.input.disconnect();
    }

    this.input = null;
  }

  if (_Tone.default.isDefined(this.output)) {
    if (this.output instanceof AudioNode) {
      this.output.disconnect();
    }

    this.output = null;
  }

  this._context = null;
  return this;
};

var _default = _Tone.default.AudioNode;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Context":"../node_modules/tone/tone/core/Context.js","../shim/AudioNode":"../node_modules/tone/tone/shim/AudioNode.js"}],"../node_modules/tone/tone/core/Param.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../type/Type");

require("../core/AudioNode");

require("../core/Timeline");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Param wraps the native Web Audio's AudioParam to provide
 *         additional unit conversion functionality. It also
 *         serves as a base-class for classes which have a single,
 *         automatable parameter.
 *  @extends {Tone.AudioNode}
 *  @param  {AudioParam}  param  The parameter to wrap.
 *  @param  {Tone.Type} units The units of the audio param.
 *  @param  {Boolean} convert If the param should be converted.
 */
_Tone.default.Param = function () {
  var options = _Tone.default.defaults(arguments, ["param", "units", "convert"], _Tone.default.Param);

  _Tone.default.AudioNode.call(this, options);
  /**
   *  The native parameter to control
   *  @type  {AudioParam}
   *  @private
   */


  this._param = this.input = options.param;
  /**
   *  The units of the parameter
   *  @type {Tone.Type}
   */

  this.units = options.units;
  /**
   *  If the value should be converted or not
   *  @type {Boolean}
   */

  this.convert = options.convert;
  /**
   *  True if the signal value is being overridden by
   *  a connected signal.
   *  @readOnly
   *  @type  {boolean}
   *  @private
   */

  this.overridden = false;
  /**
   * The timeline which tracks all of the automations.
   * @type {Tone.Timeline}
   * @private
   */

  this._events = new _Tone.default.Timeline(1000);

  if (_Tone.default.isDefined(options.value) && this._param) {
    this.setValueAtTime(options.value, 0);
  }
};

_Tone.default.extend(_Tone.default.Param, _Tone.default.AudioNode);
/**
 *  Defaults
 *  @type  {Object}
 *  @const
 */


_Tone.default.Param.defaults = {
  "units": _Tone.default.Type.Default,
  "convert": true,
  "param": undefined
};
/**
 * The current value of the parameter.
 * @memberOf Tone.Param#
 * @type {Number}
 * @name value
 */

Object.defineProperty(_Tone.default.Param.prototype, "value", {
  get: function () {
    var now = this.now();
    return this._toUnits(this.getValueAtTime(now));
  },
  set: function (value) {
    this._initialValue = this._fromUnits(value);
    this.cancelScheduledValues(this.now());
    this.setValueAtTime(value, this.now());
  }
});
/**
 * The minimum output value of the parameter
 * @memberOf Tone.Param#
 * @type {Number}
 * @name value
 */

Object.defineProperty(_Tone.default.Param.prototype, "minValue", {
  get: function () {
    if (this.units === _Tone.default.Type.Time || this.units === _Tone.default.Type.Frequency || this.units === _Tone.default.Type.NormalRange || this.units === _Tone.default.Type.Positive || this.units === _Tone.default.Type.BPM) {
      return 0;
    } else if (this.units === _Tone.default.Type.AudioRange) {
      return -1;
    } else if (this.units === _Tone.default.Type.Decibels) {
      return -Infinity;
    } else {
      return this._param.minValue;
    }
  }
});
/**
 * The maximum output value of the parameter
 * @memberOf Tone.Param#
 * @type {Number}
 * @name value
 */

Object.defineProperty(_Tone.default.Param.prototype, "maxValue", {
  get: function () {
    if (this.units === _Tone.default.Type.NormalRange || this.units === _Tone.default.Type.AudioRange) {
      return 1;
    } else {
      return this._param.maxValue;
    }
  }
});
/**
 *  Convert the given value from the type specified by Tone.Param.units
 *  into the destination value (such as Gain or Frequency).
 *  @private
 *  @param  {*} val the value to convert
 *  @return {number}     the number which the value should be set to
 */

_Tone.default.Param.prototype._fromUnits = function (val) {
  if ((this.convert || _Tone.default.isUndef(this.convert)) && !this.overridden) {
    switch (this.units) {
      case _Tone.default.Type.Time:
        return this.toSeconds(val);

      case _Tone.default.Type.Frequency:
        return this.toFrequency(val);

      case _Tone.default.Type.Decibels:
        return _Tone.default.dbToGain(val);

      case _Tone.default.Type.NormalRange:
        return Math.min(Math.max(val, 0), 1);

      case _Tone.default.Type.AudioRange:
        return Math.min(Math.max(val, -1), 1);

      case _Tone.default.Type.Positive:
        return Math.max(val, 0);

      default:
        return val;
    }
  } else {
    return val;
  }
};
/**
 * Convert the parameters value into the units specified by Tone.Param.units.
 * @private
 * @param  {number} val the value to convert
 * @return {number}
 */


_Tone.default.Param.prototype._toUnits = function (val) {
  if (this.convert || _Tone.default.isUndef(this.convert)) {
    switch (this.units) {
      case _Tone.default.Type.Decibels:
        return _Tone.default.gainToDb(val);

      default:
        return val;
    }
  } else {
    return val;
  }
};
/**
 *  the minimum output value
 *  @type {Number}
 *  @private
 */


_Tone.default.Param.prototype._minOutput = 1e-5;
/**
 *  The event types
 *  @enum {String}
 *  @private
 */

_Tone.default.Param.AutomationType = {
  Linear: "linearRampToValueAtTime",
  Exponential: "exponentialRampToValueAtTime",
  Target: "setTargetAtTime",
  SetValue: "setValueAtTime",
  Cancel: "cancelScheduledValues"
};
/**
 *  Schedules a parameter value change at the given time.
 *  @param {*}	value The value to set the signal.
 *  @param {Time}  time The time when the change should occur.
 *  @returns {Tone.Param} this
 *  @example
 * //set the frequency to "G4" in exactly 1 second from now.
 * freq.setValueAtTime("G4", "+1");
 */

_Tone.default.Param.prototype.setValueAtTime = function (value, time) {
  time = this.toSeconds(time);
  value = this._fromUnits(value);

  this._events.add({
    "type": _Tone.default.Param.AutomationType.SetValue,
    "value": value,
    "time": time
  });

  this.log(_Tone.default.Param.AutomationType.SetValue, value, time);

  this._param.setValueAtTime(value, time);

  return this;
};
/**
 *  Get the signals value at the given time. Subsequent scheduling
 *  may invalidate the returned value.
 *  @param {Time} time When to get the value
 *  @returns {Number} The value at the given time
 */


_Tone.default.Param.prototype.getValueAtTime = function (time) {
  time = this.toSeconds(time);

  var after = this._events.getAfter(time);

  var before = this._events.get(time);

  var initialValue = _Tone.default.defaultArg(this._initialValue, this._param.defaultValue);

  var value = initialValue; //if it was set by

  if (before === null) {
    value = initialValue;
  } else if (before.type === _Tone.default.Param.AutomationType.Target) {
    var previous = this._events.getBefore(before.time);

    var previousVal;

    if (previous === null) {
      previousVal = initialValue;
    } else {
      previousVal = previous.value;
    }

    value = this._exponentialApproach(before.time, previousVal, before.value, before.constant, time);
  } else if (after === null) {
    value = before.value;
  } else if (after.type === _Tone.default.Param.AutomationType.Linear) {
    value = this._linearInterpolate(before.time, before.value, after.time, after.value, time);
  } else if (after.type === _Tone.default.Param.AutomationType.Exponential) {
    value = this._exponentialInterpolate(before.time, before.value, after.time, after.value, time);
  } else {
    value = before.value;
  }

  return value;
};
/**
 *  Creates a schedule point with the current value at the current time.
 *  This is useful for creating an automation anchor point in order to
 *  schedule changes from the current value.
 *
 *  @param {number=} now (Optionally) pass the now value in.
 *  @returns {Tone.Param} this
 */


_Tone.default.Param.prototype.setRampPoint = function (time) {
  time = this.toSeconds(time);
  var currentVal = this.getValueAtTime(time);
  this.cancelAndHoldAtTime(time);

  if (currentVal === 0) {
    currentVal = this._minOutput;
  }

  this.setValueAtTime(this._toUnits(currentVal), time);
  return this;
};
/**
 *  Schedules a linear continuous change in parameter value from the
 *  previous scheduled parameter value to the given value.
 *
 *  @param  {number} value
 *  @param  {Time} endTime
 *  @returns {Tone.Param} this
 */


_Tone.default.Param.prototype.linearRampToValueAtTime = function (value, endTime) {
  value = this._fromUnits(value);
  endTime = this.toSeconds(endTime);

  this._events.add({
    "type": _Tone.default.Param.AutomationType.Linear,
    "value": value,
    "time": endTime
  });

  this.log(_Tone.default.Param.AutomationType.Linear, value, endTime);

  this._param.linearRampToValueAtTime(value, endTime);

  return this;
};
/**
 *  Schedules an exponential continuous change in parameter value from
 *  the previous scheduled parameter value to the given value.
 *
 *  @param  {number} value
 *  @param  {Time} endTime
 *  @returns {Tone.Param} this
 */


_Tone.default.Param.prototype.exponentialRampToValueAtTime = function (value, endTime) {
  value = this._fromUnits(value);
  value = Math.max(this._minOutput, value);
  endTime = this.toSeconds(endTime); //store the event

  this._events.add({
    "type": _Tone.default.Param.AutomationType.Exponential,
    "time": endTime,
    "value": value
  });

  this.log(_Tone.default.Param.AutomationType.Exponential, value, endTime);

  this._param.exponentialRampToValueAtTime(value, endTime);

  return this;
};
/**
 *  Schedules an exponential continuous change in parameter value from
 *  the current time and current value to the given value over the
 *  duration of the rampTime.
 *
 *  @param  {number} value   The value to ramp to.
 *  @param  {Time} rampTime the time that it takes the
 *                               value to ramp from it's current value
 *  @param {Time}	[startTime=now] 	When the ramp should start.
 *  @returns {Tone.Param} this
 *  @example
 * //exponentially ramp to the value 2 over 4 seconds.
 * signal.exponentialRampTo(2, 4);
 */


_Tone.default.Param.prototype.exponentialRampTo = function (value, rampTime, startTime) {
  startTime = this.toSeconds(startTime);
  this.setRampPoint(startTime);
  this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));
  return this;
};
/**
 *  Schedules an linear continuous change in parameter value from
 *  the current time and current value to the given value over the
 *  duration of the rampTime.
 *
 *  @param  {number} value   The value to ramp to.
 *  @param  {Time} rampTime the time that it takes the
 *                               value to ramp from it's current value
 *  @param {Time}	[startTime=now] 	When the ramp should start.
 *  @returns {Tone.Param} this
 *  @example
 * //linearly ramp to the value 4 over 3 seconds.
 * signal.linearRampTo(4, 3);
 */


_Tone.default.Param.prototype.linearRampTo = function (value, rampTime, startTime) {
  startTime = this.toSeconds(startTime);
  this.setRampPoint(startTime);
  this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));
  return this;
};
/**
 *  Start exponentially approaching the target value at the given time. Since it
 *  is an exponential approach it will continue approaching after the ramp duration. The
 *  rampTime is the time that it takes to reach over 99% of the way towards the value.
 *  @param  {number} value   The value to ramp to.
 *  @param  {Time} rampTime the time that it takes the
 *                               value to ramp from it's current value
 *  @param {Time}	[startTime=now] 	When the ramp should start.
 *  @returns {Tone.Param} this
 *  @example
 * //exponentially ramp to the value 2 over 4 seconds.
 * signal.exponentialRampTo(2, 4);
 */


_Tone.default.Param.prototype.targetRampTo = function (value, rampTime, startTime) {
  startTime = this.toSeconds(startTime);
  this.setRampPoint(startTime);
  this.exponentialApproachValueAtTime(value, startTime, rampTime);
  return this;
};
/**
 *  Start exponentially approaching the target value at the given time. Since it
 *  is an exponential approach it will continue approaching after the ramp duration. The
 *  rampTime is the time that it takes to reach over 99% of the way towards the value. This methods
 *  is similar to setTargetAtTime except the third argument is a time instead of a 'timeConstant'
 *  @param  {number} value   The value to ramp to.
 *  @param {Time}	time 	When the ramp should start.
 *  @param  {Time} rampTime the time that it takes the
 *                               value to ramp from it's current value
 *  @returns {Tone.Param} this
 *  @example
 * //exponentially ramp to the value 2 over 4 seconds.
 * signal.exponentialRampTo(2, 4);
 */


_Tone.default.Param.prototype.exponentialApproachValueAtTime = function (value, time, rampTime) {
  var timeConstant = Math.log(this.toSeconds(rampTime) + 1) / Math.log(200);
  time = this.toSeconds(time);
  this.setTargetAtTime(value, time, timeConstant); //at 90% start a linear ramp to the final value

  this.cancelAndHoldAtTime(time + rampTime * 0.9);
  this.linearRampToValueAtTime(value, time + rampTime);
  return this;
};
/**
 *  Start exponentially approaching the target value at the given time with
 *  a rate having the given time constant.
 *  @param {number} value
 *  @param {Time} startTime
 *  @param {number} timeConstant
 *  @returns {Tone.Param} this
 */


_Tone.default.Param.prototype.setTargetAtTime = function (value, startTime, timeConstant) {
  value = this._fromUnits(value); // The value will never be able to approach without timeConstant > 0.

  if (timeConstant <= 0) {
    throw new Error("timeConstant must be greater than 0");
  }

  startTime = this.toSeconds(startTime);

  this._events.add({
    "type": _Tone.default.Param.AutomationType.Target,
    "value": value,
    "time": startTime,
    "constant": timeConstant
  });

  this.log(_Tone.default.Param.AutomationType.Target, value, startTime, timeConstant);

  this._param.setTargetAtTime(value, startTime, timeConstant);

  return this;
};
/**
 *  Sets an array of arbitrary parameter values starting at the given time
 *  for the given duration.
 *
 *  @param {Array} values
 *  @param {Time} startTime
 *  @param {Time} duration
 *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value
 *  @returns {Tone.Param} this
 */


_Tone.default.Param.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {
  scaling = _Tone.default.defaultArg(scaling, 1);
  duration = this.toSeconds(duration);
  startTime = this.toSeconds(startTime);
  this.setValueAtTime(values[0] * scaling, startTime);
  var segTime = duration / (values.length - 1);

  for (var i = 1; i < values.length; i++) {
    this.linearRampToValueAtTime(values[i] * scaling, startTime + i * segTime);
  }

  return this;
};
/**
 *  Cancels all scheduled parameter changes with times greater than or
 *  equal to startTime.
 *
 *  @param  {Time} time
 *  @returns {Tone.Param} this
 */


_Tone.default.Param.prototype.cancelScheduledValues = function (time) {
  time = this.toSeconds(time);

  this._events.cancel(time);

  this._param.cancelScheduledValues(time);

  this.log(_Tone.default.Param.AutomationType.Cancel, time);
  return this;
};
/**
 *  This is similar to [cancelScheduledValues](#cancelScheduledValues) except
 *  it holds the automated value at time until the next automated event.
 *  @param  {Time} time
 *  @returns {Tone.Param} this
 */


_Tone.default.Param.prototype.cancelAndHoldAtTime = function (time) {
  time = this.toSeconds(time);
  var valueAtTime = this.getValueAtTime(time);
  this.log("cancelAndHoldAtTime", time, "value=" + valueAtTime); //remove the schedule events

  this._param.cancelScheduledValues(time); //if there is an event at the given time
  //and that even is not a "set"


  var before = this._events.get(time);

  var after = this._events.getAfter(time);

  if (before && before.time === time) {
    //remove everything after
    if (after) {
      this._events.cancel(after.time);
    } else {
      this._events.cancel(time + this.sampleTime);
    }
  } else if (after) {
    //cancel the next event(s)
    this._events.cancel(after.time);

    if (after.type === _Tone.default.Param.AutomationType.Linear) {
      this.linearRampToValueAtTime(valueAtTime, time);
    } else if (after.type === _Tone.default.Param.AutomationType.Exponential) {
      this.exponentialRampToValueAtTime(valueAtTime, time);
    }
  } //set the value at the given time


  this._events.add({
    "type": _Tone.default.Param.AutomationType.SetValue,
    "value": valueAtTime,
    "time": time
  });

  this._param.setValueAtTime(valueAtTime, time);

  return this;
};
/**
 *  Ramps to the given value over the duration of the rampTime.
 *  Automatically selects the best ramp type (exponential or linear)
 *  depending on the `units` of the signal
 *
 *  @param  {number} value
 *  @param  {Time} rampTime 	The time that it takes the
 *                              value to ramp from it's current value
 *  @param {Time}	[startTime=now] 	When the ramp should start.
 *  @returns {Tone.Param} this
 *  @example
 * //ramp to the value either linearly or exponentially
 * //depending on the "units" value of the signal
 * signal.rampTo(0, 10);
 *  @example
 * //schedule it to ramp starting at a specific time
 * signal.rampTo(0, 10, 5)
 */


_Tone.default.Param.prototype.rampTo = function (value, rampTime, startTime) {
  rampTime = _Tone.default.defaultArg(rampTime, 0.1);

  if (this.units === _Tone.default.Type.Frequency || this.units === _Tone.default.Type.BPM || this.units === _Tone.default.Type.Decibels) {
    this.exponentialRampTo(value, rampTime, startTime);
  } else {
    this.linearRampTo(value, rampTime, startTime);
  }

  return this;
}; ///////////////////////////////////////////////////////////////////////////
//	AUTOMATION CURVE CALCULATIONS
//	MIT License, copyright (c) 2014 Jordan Santell
///////////////////////////////////////////////////////////////////////////
// Calculates the the value along the curve produced by setTargetAtTime


_Tone.default.Param.prototype._exponentialApproach = function (t0, v0, v1, timeConstant, t) {
  return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);
}; // Calculates the the value along the curve produced by linearRampToValueAtTime


_Tone.default.Param.prototype._linearInterpolate = function (t0, v0, t1, v1, t) {
  return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));
}; // Calculates the the value along the curve produced by exponentialRampToValueAtTime


_Tone.default.Param.prototype._exponentialInterpolate = function (t0, v0, t1, v1, t) {
  return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));
};
/**
 *  Clean up
 *  @returns {Tone.Param} this
 */


_Tone.default.Param.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._param = null;
  this._events = null;
  return this;
};

var _default = _Tone.default.Param;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../type/Type":"../node_modules/tone/tone/type/Type.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js","../core/Timeline":"../node_modules/tone/tone/core/Timeline.js"}],"../node_modules/tone/tone/signal/SignalBase.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Base class for all Signals. Used Internally.
 *
 *  @constructor
 *  @extends {Tone}
 */
_Tone.default.SignalBase = function () {
  _Tone.default.AudioNode.call(this);
};

_Tone.default.extend(_Tone.default.SignalBase, _Tone.default.AudioNode);
/**
 *  When signals connect to other signals or AudioParams,
 *  they take over the output value of that signal or AudioParam.
 *  For all other nodes, the behavior is the same as a default <code>connect</code>.
 *
 *  @override
 *  @param {AudioParam|AudioNode|Tone.Signal|Tone} node
 *  @param {number} [outputNumber=0] The output number to connect from.
 *  @param {number} [inputNumber=0] The input number to connect to.
 *  @returns {Tone.SignalBase} this
 */


_Tone.default.SignalBase.prototype.connect = function (node, outputNumber, inputNumber) {
  //zero it out so that the signal can have full control
  if (_Tone.default.Signal && _Tone.default.Signal === node.constructor || _Tone.default.Param && _Tone.default.Param === node.constructor) {
    //cancel changes
    node._param.cancelScheduledValues(0); //reset the value


    node._param.setValueAtTime(0, 0); //mark the value as overridden


    node.overridden = true;
  } else if (node instanceof AudioParam) {
    node.cancelScheduledValues(0);
    node.setValueAtTime(0, 0);
  }

  _Tone.default.AudioNode.prototype.connect.call(this, node, outputNumber, inputNumber);

  return this;
};

var _default = _Tone.default.SignalBase;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/core/Gain.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Param");

require("../type/Type");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class A thin wrapper around the Native Web Audio GainNode.
 *         The GainNode is a basic building block of the Web Audio
 *         API and is useful for routing audio and adjusting gains.
 *  @extends {Tone.AudioNode}
 *  @param  {Number=}  gain  The initial gain of the GainNode
 *  @param {Tone.Type=} units The units of the gain parameter.
 */
_Tone.default.Gain = function () {
  var options = _Tone.default.defaults(arguments, ["gain", "units"], _Tone.default.Gain);

  _Tone.default.AudioNode.call(this, options);
  /**
   *  The GainNode
   *  @type  {GainNode}
   *  @private
   */


  this.input = this.output = this._gainNode = this.context.createGain();
  /**
   *  The gain parameter of the gain node.
   *  @type {Gain}
   *  @signal
   */

  this.gain = new _Tone.default.Param({
    "param": this._gainNode.gain,
    "units": options.units,
    "value": options.gain,
    "convert": options.convert
  });

  this._readOnly("gain");
};

_Tone.default.extend(_Tone.default.Gain, _Tone.default.AudioNode);
/**
 *  The defaults
 *  @const
 *  @type  {Object}
 */


_Tone.default.Gain.defaults = {
  "gain": 1,
  "convert": true
};
/**
 *  Clean up.
 *  @return  {Tone.Gain}  this
 */

_Tone.default.Gain.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._gainNode.disconnect();

  this._gainNode = null;

  this._writable("gain");

  this.gain.dispose();
  this.gain = null;
};

var _default = _Tone.default.Gain;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Param":"../node_modules/tone/tone/core/Param.js","../type/Type":"../node_modules/tone/tone/type/Type.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/shim/ConstantSourceNode.js":[function(require,module,exports) {
"use strict";

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../shim/AudioContext");

require("../core/Context");

require("../core/Gain");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (_Tone.default.supported && !_Tone.default.global.AudioContext.prototype.createConstantSource) {
  var ConstantSourceNode = function (context) {
    this.context = context;
    var buffer = context.createBuffer(1, 128, context.sampleRate);
    var arr = buffer.getChannelData(0);

    for (var i = 0; i < arr.length; i++) {
      arr[i] = 1;
    }

    this._bufferSource = context.createBufferSource();
    this._bufferSource.channelCount = 1;
    this._bufferSource.channelCountMode = "explicit";
    this._bufferSource.buffer = buffer;
    this._bufferSource.loop = true;
    var gainNode = this._output = context.createGain();
    this.offset = gainNode.gain;

    this._bufferSource.connect(gainNode);
  };

  ConstantSourceNode.prototype.start = function (time) {
    this._bufferSource.start(time);

    return this;
  };

  ConstantSourceNode.prototype.stop = function (time) {
    this._bufferSource.stop(time);

    return this;
  };

  ConstantSourceNode.prototype.connect = function () {
    this._output.connect.apply(this._output, arguments);

    return this;
  };

  ConstantSourceNode.prototype.disconnect = function () {
    this._output.disconnect.apply(this._output, arguments);

    return this;
  };

  AudioContext.prototype.createConstantSource = function () {
    return new ConstantSourceNode(this);
  };

  _Tone.default.Context.prototype.createConstantSource = function () {
    return new ConstantSourceNode(this);
  };
}
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../shim/AudioContext":"../node_modules/tone/tone/shim/AudioContext.js","../core/Context":"../node_modules/tone/tone/core/Context.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js"}],"../node_modules/tone/tone/signal/Signal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../type/Type");

require("../core/Param");

require("../signal/SignalBase");

require("../shim/ConstantSourceNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  A signal is an audio-rate value. Tone.Signal is a core component of the library.
 *          Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal
 *          has all of the methods available to native Web Audio
 *          [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)
 *          as well as additional conveniences. Read more about working with signals
 *          [here](https://github.com/Tonejs/Tone.js/wiki/Signals).
 *
 *  @constructor
 *  @extends {Tone.Param}
 *  @param {Number|AudioParam} [value] Initial value of the signal. If an AudioParam
 *                                     is passed in, that parameter will be wrapped
 *                                     and controlled by the Signal.
 *  @param {string} [units=Number] unit The units the signal is in.
 *  @example
 * var signal = new Tone.Signal(10);
 */
_Tone.default.Signal = function () {
  var options = _Tone.default.defaults(arguments, ["value", "units"], _Tone.default.Signal);

  _Tone.default.Param.call(this, options);
  /**
   * The constant source node which generates the signal
   * @type {ConstantSourceNode}
   * @private
   */


  this._constantSource = this.context.createConstantSource();

  this._constantSource.start(0);

  this._param = this._constantSource.offset;
  this.value = options.value;
  /**
   * The node where the constant signal value is scaled.
   * @type {ConstantSourceNode}
   * @private
   */

  this.output = this._constantSource;
  /**
   * The node where the value is set.
   * @type {Tone.Param}
   * @private
   */

  this.input = this._param = this.output.offset;
};

_Tone.default.extend(_Tone.default.Signal, _Tone.default.Param);
/**
 *  The default values
 *  @type  {Object}
 *  @static
 *  @const
 */


_Tone.default.Signal.defaults = {
  "value": 0,
  "units": _Tone.default.Type.Default,
  "convert": true
}; //use SignalBase's connect/disconnect methods

_Tone.default.Signal.prototype.connect = _Tone.default.SignalBase.prototype.connect;
_Tone.default.Signal.prototype.disconnect = _Tone.default.SignalBase.prototype.disconnect;
/**
 * Return the current signal value at the given time.
 * @param  {Time} time When to get the signal value
 * @return {Number}
 */

_Tone.default.Signal.prototype.getValueAtTime = function (time) {
  if (this._param.getValueAtTime) {
    return this._param.getValueAtTime(time);
  } else {
    return _Tone.default.Param.prototype.getValueAtTime.call(this, time);
  }
};
/**
 *  dispose and disconnect
 *  @returns {Tone.Signal} this
 */


_Tone.default.Signal.prototype.dispose = function () {
  _Tone.default.Param.prototype.dispose.call(this);

  this._constantSource.stop();

  this._constantSource.disconnect();

  this._constantSource = null;
  return this;
};

var _default = _Tone.default.Signal;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../type/Type":"../node_modules/tone/tone/type/Type.js","../core/Param":"../node_modules/tone/tone/core/Param.js","../signal/SignalBase":"../node_modules/tone/tone/signal/SignalBase.js","../shim/ConstantSourceNode":"../node_modules/tone/tone/shim/ConstantSourceNode.js"}],"../node_modules/tone/tone/shim/WaveShaperNode.js":[function(require,module,exports) {
"use strict";

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../shim/AudioContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (_Tone.default.supported && !_Tone.default.global.AudioContext.prototype._native_createWaveShaper) {
  //fixes safari only bug which is still present in 11
  var ua = navigator.userAgent.toLowerCase();
  var isSafari = ua.includes("safari") && !ua.includes("chrome");

  if (isSafari) {
    var WaveShaperNode = function (context) {
      this._internalNode = this.input = this.output = context._native_createWaveShaper();
      this._curve = null;

      for (var prop in this._internalNode) {
        this._defineProperty(this._internalNode, prop);
      }
    };

    Object.defineProperty(WaveShaperNode.prototype, "curve", {
      "get": function () {
        return this._curve;
      },
      "set": function (curve) {
        this._curve = curve;
        var array = new Float32Array(curve.length + 1);
        array.set(curve, 1);
        array[0] = curve[0];
        this._internalNode.curve = array;
      }
    });

    WaveShaperNode.prototype._defineProperty = function (context, prop) {
      if (_Tone.default.isUndef(this[prop])) {
        Object.defineProperty(this, prop, {
          "get": function () {
            if (typeof context[prop] === "function") {
              return context[prop].bind(context);
            } else {
              return context[prop];
            }
          },
          "set": function (val) {
            context[prop] = val;
          }
        });
      }
    };

    _Tone.default.global.AudioContext.prototype._native_createWaveShaper = _Tone.default.global.AudioContext.prototype.createWaveShaper;

    _Tone.default.global.AudioContext.prototype.createWaveShaper = function () {
      return new WaveShaperNode(this);
    };
  }
}
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../shim/AudioContext":"../node_modules/tone/tone/shim/AudioContext.js"}],"../node_modules/tone/tone/signal/WaveShaper.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/SignalBase");

require("../shim/WaveShaperNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Wraps the native Web Audio API
 *         [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).
 *
 *  @extends {Tone.SignalBase}
 *  @constructor
 *  @param {function|Array|Number} mapping The function used to define the values.
 *                                    The mapping function should take two arguments:
 *                                    the first is the value at the current position
 *                                    and the second is the array position.
 *                                    If the argument is an array, that array will be
 *                                    set as the wave shaping function. The input
 *                                    signal is an AudioRange [-1, 1] value and the output
 *                                    signal can take on any numerical values.
 *
 *  @param {Number} [bufferLen=1024] The length of the WaveShaperNode buffer.
 *  @example
 * var timesTwo = new Tone.WaveShaper(function(val){
 * 	return val * 2;
 * }, 2048);
 *  @example
 * //a waveshaper can also be constructed with an array of values
 * var invert = new Tone.WaveShaper([1, -1]);
 */
_Tone.default.WaveShaper = function (mapping, bufferLen) {
  _Tone.default.SignalBase.call(this);
  /**
   *  the waveshaper
   *  @type {WaveShaperNode}
   *  @private
   */


  this._shaper = this.input = this.output = this.context.createWaveShaper();
  /**
   *  the waveshapers curve
   *  @type {Float32Array}
   *  @private
   */

  this._curve = null;

  if (Array.isArray(mapping)) {
    this.curve = mapping;
  } else if (isFinite(mapping) || _Tone.default.isUndef(mapping)) {
    this._curve = new Float32Array(_Tone.default.defaultArg(mapping, 1024));
  } else if (_Tone.default.isFunction(mapping)) {
    this._curve = new Float32Array(_Tone.default.defaultArg(bufferLen, 1024));
    this.setMap(mapping);
  }
};

_Tone.default.extend(_Tone.default.WaveShaper, _Tone.default.SignalBase);
/**
 *  Uses a mapping function to set the value of the curve.
 *  @param {function} mapping The function used to define the values.
 *                            The mapping function take two arguments:
 *                            the first is the value at the current position
 *                            which goes from -1 to 1 over the number of elements
 *                            in the curve array. The second argument is the array position.
 *  @returns {Tone.WaveShaper} this
 *  @example
 * //map the input signal from [-1, 1] to [0, 10]
 * shaper.setMap(function(val, index){
 * 	return (val + 1) * 5;
 * })
 */


_Tone.default.WaveShaper.prototype.setMap = function (mapping) {
  var array = new Array(this._curve.length);

  for (var i = 0, len = this._curve.length; i < len; i++) {
    var normalized = i / (len - 1) * 2 - 1;
    array[i] = mapping(normalized, i);
  }

  this.curve = array;
  return this;
};
/**
 * The array to set as the waveshaper curve. For linear curves
 * array length does not make much difference, but for complex curves
 * longer arrays will provide smoother interpolation.
 * @memberOf Tone.WaveShaper#
 * @type {Array}
 * @name curve
 */


Object.defineProperty(_Tone.default.WaveShaper.prototype, "curve", {
  get: function () {
    return this._shaper.curve;
  },
  set: function (mapping) {
    this._curve = new Float32Array(mapping);
    this._shaper.curve = this._curve;
  }
});
/**
 * Specifies what type of oversampling (if any) should be used when
 * applying the shaping curve. Can either be "none", "2x" or "4x".
 * @memberOf Tone.WaveShaper#
 * @type {string}
 * @name oversample
 */

Object.defineProperty(_Tone.default.WaveShaper.prototype, "oversample", {
  get: function () {
    return this._shaper.oversample;
  },
  set: function (oversampling) {
    if (["none", "2x", "4x"].includes(oversampling)) {
      this._shaper.oversample = oversampling;
    } else {
      throw new RangeError("Tone.WaveShaper: oversampling must be either 'none', '2x', or '4x'");
    }
  }
});
/**
 *  Clean up.
 *  @returns {Tone.WaveShaper} this
 */

_Tone.default.WaveShaper.prototype.dispose = function () {
  _Tone.default.SignalBase.prototype.dispose.call(this);

  this._shaper.disconnect();

  this._shaper = null;
  this._curve = null;
  return this;
};

var _default = _Tone.default.WaveShaper;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/SignalBase":"../node_modules/tone/tone/signal/SignalBase.js","../shim/WaveShaperNode":"../node_modules/tone/tone/shim/WaveShaperNode.js"}],"../node_modules/tone/tone/signal/Pow.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/WaveShaper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Pow applies an exponent to the incoming signal. The incoming signal
 *         must be AudioRange.
 *
 *  @extends {Tone.SignalBase}
 *  @constructor
 *  @param {Positive} exp The exponent to apply to the incoming signal, must be at least 2. 
 *  @example
 * var pow = new Tone.Pow(2);
 * var sig = new Tone.Signal(0.5).connect(pow);
 * //output of pow is 0.25. 
 */
_Tone.default.Pow = function (exp) {
  _Tone.default.SignalBase.call(this);
  /**
   * the exponent
   * @private
   * @type {number}
   */


  this._exp = _Tone.default.defaultArg(exp, 1);
  /**
   *  @type {WaveShaperNode}
   *  @private
   */

  this._expScaler = this.input = this.output = new _Tone.default.WaveShaper(this._expFunc(this._exp), 8192);
};

_Tone.default.extend(_Tone.default.Pow, _Tone.default.SignalBase);
/**
 * The value of the exponent.
 * @memberOf Tone.Pow#
 * @type {number}
 * @name value
 */


Object.defineProperty(_Tone.default.Pow.prototype, "value", {
  get: function () {
    return this._exp;
  },
  set: function (exp) {
    this._exp = exp;

    this._expScaler.setMap(this._expFunc(this._exp));
  }
});
/**
 *  the function which maps the waveshaper
 *  @param   {number} exp
 *  @return {function}
 *  @private
 */

_Tone.default.Pow.prototype._expFunc = function (exp) {
  return function (val) {
    return Math.pow(Math.abs(val), exp);
  };
};
/**
 *  Clean up.
 *  @returns {Tone.Pow} this
 */


_Tone.default.Pow.prototype.dispose = function () {
  _Tone.default.SignalBase.prototype.dispose.call(this);

  this._expScaler.dispose();

  this._expScaler = null;
  return this;
};

var _default = _Tone.default.Pow;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/WaveShaper":"../node_modules/tone/tone/signal/WaveShaper.js"}],"../node_modules/tone/tone/component/Envelope.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/Signal");

require("../signal/Pow");

require("../type/Type");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)
 *          envelope generator. Tone.Envelope outputs a signal which
 *          can be connected to an AudioParam or Tone.Signal.
 *          <img src="https://upload.wikimedia.org/wikipedia/commons/e/ea/ADSR_parameter.svg">
 *
 *  @constructor
 *  @extends {Tone.AudioNode}
 *  @param {Time} [attack] The amount of time it takes for the envelope to go from
 *                         0 to it's maximum value.
 *  @param {Time} [decay]	The period of time after the attack that it takes for the envelope
 *                       	to fall to the sustain value. Value must be greater than 0.
 *  @param {NormalRange} [sustain]	The percent of the maximum value that the envelope rests at until
 *                                	the release is triggered.
 *  @param {Time} [release]	The amount of time after the release is triggered it takes to reach 0.
 *                         	Value must be greater than 0.
 *  @example
 * //an amplitude envelope
 * var gainNode = Tone.context.createGain();
 * var env = new Tone.Envelope({
 * 	"attack" : 0.1,
 * 	"decay" : 0.2,
 * 	"sustain" : 1,
 * 	"release" : 0.8,
 * });
 * env.connect(gainNode.gain);
 */
_Tone.default.Envelope = function () {
  //get all of the defaults
  var options = _Tone.default.defaults(arguments, ["attack", "decay", "sustain", "release"], _Tone.default.Envelope);

  _Tone.default.AudioNode.call(this);
  /**
   *  When triggerAttack is called, the attack time is the amount of
   *  time it takes for the envelope to reach it's maximum value.
   *  @type {Time}
   */


  this.attack = options.attack;
  /**
   *  After the attack portion of the envelope, the value will fall
   *  over the duration of the decay time to it's sustain value.
   *  @type {Time}
   */

  this.decay = options.decay;
  /**
   * 	The sustain value is the value
   * 	which the envelope rests at after triggerAttack is
   * 	called, but before triggerRelease is invoked.
   *  @type {NormalRange}
   */

  this.sustain = options.sustain;
  /**
   *  After triggerRelease is called, the envelope's
   *  value will fall to it's miminum value over the
   *  duration of the release time.
   *  @type {Time}
   */

  this.release = options.release;
  /**
   *  the next time the envelope is at standby
   *  @type {number}
   *  @private
   */

  this._attackCurve = "linear";
  /**
   *  the next time the envelope is at standby
   *  @type {number}
   *  @private
   */

  this._releaseCurve = "exponential";
  /**
   *  the signal
   *  @type {Tone.Signal}
   *  @private
   */

  this._sig = this.output = new _Tone.default.Signal(0); //set the attackCurve initially

  this.attackCurve = options.attackCurve;
  this.releaseCurve = options.releaseCurve;
  this.decayCurve = options.decayCurve;
};

_Tone.default.extend(_Tone.default.Envelope, _Tone.default.AudioNode);
/**
 *  the default parameters
 *  @static
 *  @const
 */


_Tone.default.Envelope.defaults = {
  "attack": 0.01,
  "decay": 0.1,
  "sustain": 0.5,
  "release": 1,
  "attackCurve": "linear",
  "decayCurve": "exponential",
  "releaseCurve": "exponential"
};
/**
 * Read the current value of the envelope. Useful for
 * syncronizing visual output to the envelope.
 * @memberOf Tone.Envelope#
 * @type {Number}
 * @name value
 * @readOnly
 */

Object.defineProperty(_Tone.default.Envelope.prototype, "value", {
  get: function () {
    return this.getValueAtTime(this.now());
  }
});
/**
 *  Get the curve
 *  @param  {Array|String}  curve
 *  @param  {String}  direction  In/Out
 *  @return  {String}  The curve name
 *  @private
 */

_Tone.default.Envelope.prototype._getCurve = function (curve, direction) {
  if (_Tone.default.isString(curve)) {
    return curve;
  } else if (_Tone.default.isArray(curve)) {
    //look up the name in the curves array
    for (var t in _Tone.default.Envelope.Type) {
      if (_Tone.default.Envelope.Type[t][direction] === curve) {
        return t;
      }
    }
  }
};
/**
 *  Assign a the curve to the given name using the direction
 *  @param  {String}  name
 *  @param  {String}  direction In/Out
 *  @param  {Array}  curve
 *  @private
 */


_Tone.default.Envelope.prototype._setCurve = function (name, direction, curve) {
  //check if it's a valid type
  if (_Tone.default.Envelope.Type.hasOwnProperty(curve)) {
    var curveDef = _Tone.default.Envelope.Type[curve];

    if (_Tone.default.isObject(curveDef)) {
      this[name] = curveDef[direction];
    } else {
      this[name] = curveDef;
    }
  } else if (_Tone.default.isArray(curve)) {
    this[name] = curve;
  } else {
    throw new Error("Tone.Envelope: invalid curve: " + curve);
  }
};
/**
 * The shape of the attack.
 * Can be any of these strings:
 * <ul>
 *   <li>linear</li>
 *   <li>exponential</li>
 *   <li>sine</li>
 *   <li>cosine</li>
 *   <li>bounce</li>
 *   <li>ripple</li>
 *   <li>step</li>
 * </ul>
 * Can also be an array which describes the curve. Values
 * in the array are evenly subdivided and linearly
 * interpolated over the duration of the attack.
 * @memberOf Tone.Envelope#
 * @type {String|Array}
 * @name attackCurve
 * @example
 * env.attackCurve = "linear";
 * @example
 * //can also be an array
 * env.attackCurve = [0, 0.2, 0.3, 0.4, 1]
 */


Object.defineProperty(_Tone.default.Envelope.prototype, "attackCurve", {
  get: function () {
    return this._getCurve(this._attackCurve, "In");
  },
  set: function (curve) {
    this._setCurve("_attackCurve", "In", curve);
  }
});
/**
 * The shape of the release. See the attack curve types.
 * @memberOf Tone.Envelope#
 * @type {String|Array}
 * @name releaseCurve
 * @example
 * env.releaseCurve = "linear";
 */

Object.defineProperty(_Tone.default.Envelope.prototype, "releaseCurve", {
  get: function () {
    return this._getCurve(this._releaseCurve, "Out");
  },
  set: function (curve) {
    this._setCurve("_releaseCurve", "Out", curve);
  }
});
/**
 * The shape of the decay either "linear" or "exponential"
 * @memberOf Tone.Envelope#
 * @type {String}
 * @name decayCurve
 * @example
 * env.decayCurve = "linear";
 */

Object.defineProperty(_Tone.default.Envelope.prototype, "decayCurve", {
  get: function () {
    return this._decayCurve;
  },
  set: function (curve) {
    var curves = ["linear", "exponential"];

    if (!curves.includes(curve)) {
      throw new Error("Tone.Envelope: invalid curve: " + curve);
    } else {
      this._decayCurve = curve;
    }
  }
});
/**
 *  Trigger the attack/decay portion of the ADSR envelope.
 *  @param  {Time} [time=now] When the attack should start.
 *  @param {NormalRange} [velocity=1] The velocity of the envelope scales the vales.
 *                               number between 0-1
 *  @returns {Tone.Envelope} this
 *  @example
 *  //trigger the attack 0.5 seconds from now with a velocity of 0.2
 *  env.triggerAttack("+0.5", 0.2);
 */

_Tone.default.Envelope.prototype.triggerAttack = function (time, velocity) {
  this.log("triggerAttack", time, velocity);
  time = this.toSeconds(time);
  var originalAttack = this.toSeconds(this.attack);
  var attack = originalAttack;
  var decay = this.toSeconds(this.decay);
  velocity = _Tone.default.defaultArg(velocity, 1); //check if it's not a complete attack

  var currentValue = this.getValueAtTime(time);

  if (currentValue > 0) {
    //subtract the current value from the attack time
    var attackRate = 1 / attack;
    var remainingDistance = 1 - currentValue; //the attack is now the remaining time

    attack = remainingDistance / attackRate;
  } //attack


  if (attack === 0) {
    //case where the attack time is 0 should set instantly
    this._sig.setValueAtTime(velocity, time);
  } else if (this._attackCurve === "linear") {
    this._sig.linearRampTo(velocity, attack, time);
  } else if (this._attackCurve === "exponential") {
    this._sig.targetRampTo(velocity, attack, time);
  } else if (attack > 0) {
    this._sig.cancelAndHoldAtTime(time);

    var curve = this._attackCurve; //find the starting position in the curve

    for (var i = 1; i < curve.length; i++) {
      //the starting index is between the two values
      if (curve[i - 1] <= currentValue && currentValue <= curve[i]) {
        curve = this._attackCurve.slice(i); //the first index is the current value

        curve[0] = currentValue;
        break;
      }
    }

    this._sig.setValueCurveAtTime(curve, time, attack, velocity);
  } //decay


  if (decay) {
    var decayValue = velocity * this.sustain;
    var decayStart = time + attack;
    this.log("decay", decayStart);

    if (this._decayCurve === "linear") {
      this._sig.linearRampTo(decayValue, decay, decayStart + this.sampleTime);
    } else if (this._decayCurve === "exponential") {
      this._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);
    }
  }

  return this;
};
/**
 *  Triggers the release of the envelope.
 *  @param  {Time} [time=now] When the release portion of the envelope should start.
 *  @returns {Tone.Envelope} this
 *  @example
 *  //trigger release immediately
 *  env.triggerRelease();
 */


_Tone.default.Envelope.prototype.triggerRelease = function (time) {
  this.log("triggerRelease", time);
  time = this.toSeconds(time);
  var currentValue = this.getValueAtTime(time);

  if (currentValue > 0) {
    var release = this.toSeconds(this.release);

    if (this._releaseCurve === "linear") {
      this._sig.linearRampTo(0, release, time);
    } else if (this._releaseCurve === "exponential") {
      this._sig.targetRampTo(0, release, time);
    } else {
      var curve = this._releaseCurve;

      if (_Tone.default.isArray(curve)) {
        this._sig.cancelAndHoldAtTime(time);

        this._sig.setValueCurveAtTime(curve, time, release, currentValue);
      }
    }
  }

  return this;
};
/**
 *  Get the scheduled value at the given time. This will
 *  return the unconverted (raw) value.
 *  @param  {Number}  time  The time in seconds.
 *  @return  {Number}  The scheduled value at the given time.
 */


_Tone.default.Envelope.prototype.getValueAtTime = function (time) {
  return this._sig.getValueAtTime(time);
};
/**
 *  triggerAttackRelease is shorthand for triggerAttack, then waiting
 *  some duration, then triggerRelease.
 *  @param {Time} duration The duration of the sustain.
 *  @param {Time} [time=now] When the attack should be triggered.
 *  @param {number} [velocity=1] The velocity of the envelope.
 *  @returns {Tone.Envelope} this
 *  @example
 * //trigger the attack and then the release after 0.6 seconds.
 * env.triggerAttackRelease(0.6);
 */


_Tone.default.Envelope.prototype.triggerAttackRelease = function (duration, time, velocity) {
  time = this.toSeconds(time);
  this.triggerAttack(time, velocity);
  this.triggerRelease(time + this.toSeconds(duration));
  return this;
};
/**
 *  Cancels all scheduled envelope changes after the given time.
 *  @param  {Time} after
 *  @returns {Tone.Envelope} this
 */


_Tone.default.Envelope.prototype.cancel = function (after) {
  this._sig.cancelScheduledValues(after);

  return this;
};
/**
 *  Borrows the connect method from Tone.Signal.
 *  @function
 *  @private
 */


_Tone.default.Envelope.prototype.connect = _Tone.default.SignalBase.prototype.connect;
/**
 	 *  Generate some complex envelope curves.
 	 */

(function _createCurves() {
  var curveLen = 128;
  var i, k; //cosine curve

  var cosineCurve = [];

  for (i = 0; i < curveLen; i++) {
    cosineCurve[i] = Math.sin(i / (curveLen - 1) * (Math.PI / 2));
  } //ripple curve


  var rippleCurve = [];
  var rippleCurveFreq = 6.4;

  for (i = 0; i < curveLen - 1; i++) {
    k = i / (curveLen - 1);
    var sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;
    rippleCurve[i] = sineWave / 10 + k * 0.83;
  }

  rippleCurve[curveLen - 1] = 1; //stairs curve

  var stairsCurve = [];
  var steps = 5;

  for (i = 0; i < curveLen; i++) {
    stairsCurve[i] = Math.ceil(i / (curveLen - 1) * steps) / steps;
  } //in-out easing curve


  var sineCurve = [];

  for (i = 0; i < curveLen; i++) {
    k = i / (curveLen - 1);
    sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));
  } //a bounce curve


  var bounceCurve = [];

  for (i = 0; i < curveLen; i++) {
    k = i / (curveLen - 1);
    var freq = Math.pow(k, 3) * 4 + 0.2;
    var val = Math.cos(freq * Math.PI * 2 * k);
    bounceCurve[i] = Math.abs(val * (1 - k));
  }
  /**
   *  Invert a value curve to make it work for the release
   *  @private
   */


  function invertCurve(curve) {
    var out = new Array(curve.length);

    for (var j = 0; j < curve.length; j++) {
      out[j] = 1 - curve[j];
    }

    return out;
  }
  /**
   *  reverse the curve
   *  @private
   */


  function reverseCurve(curve) {
    return curve.slice(0).reverse();
  }
  /**
   *  attack and release curve arrays
   *  @type  {Object}
   *  @private
   */


  _Tone.default.Envelope.Type = {
    "linear": "linear",
    "exponential": "exponential",
    "bounce": {
      In: invertCurve(bounceCurve),
      Out: bounceCurve
    },
    "cosine": {
      In: cosineCurve,
      Out: reverseCurve(cosineCurve)
    },
    "step": {
      In: stairsCurve,
      Out: invertCurve(stairsCurve)
    },
    "ripple": {
      In: rippleCurve,
      Out: invertCurve(rippleCurve)
    },
    "sine": {
      In: sineCurve,
      Out: invertCurve(sineCurve)
    }
  };
})();
/**
 *  Disconnect and dispose.
 *  @returns {Tone.Envelope} this
 */


_Tone.default.Envelope.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._sig.dispose();

  this._sig = null;
  this._attackCurve = null;
  this._releaseCurve = null;
  return this;
};

var _default = _Tone.default.Envelope;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../signal/Pow":"../node_modules/tone/tone/signal/Pow.js","../type/Type":"../node_modules/tone/tone/type/Type.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/AmplitudeEnvelope.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/Envelope");

require("../core/Gain");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.AmplitudeEnvelope is a Tone.Envelope connected to a gain node.
 *          Unlike Tone.Envelope, which outputs the envelope's value, Tone.AmplitudeEnvelope accepts
 *          an audio signal as the input and will apply the envelope to the amplitude
 *          of the signal. Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).
 *
 *  @constructor
 *  @extends {Tone.Envelope}
 *  @param {Time|Object} [attack] The amount of time it takes for the envelope to go from
 *                               0 to it's maximum value.
 *  @param {Time} [decay]	The period of time after the attack that it takes for the envelope
 *                       	to fall to the sustain value.
 *  @param {NormalRange} [sustain]	The percent of the maximum value that the envelope rests at until
 *                                	the release is triggered.
 *  @param {Time} [release]	The amount of time after the release is triggered it takes to reach 0.
 *  @example
 * var ampEnv = new Tone.AmplitudeEnvelope({
 * 	"attack": 0.1,
 * 	"decay": 0.2,
 * 	"sustain": 1.0,
 * 	"release": 0.8
 * }).toMaster();
 * //create an oscillator and connect it
 * var osc = new Tone.Oscillator().connect(ampEnv).start();
 * //trigger the envelopes attack and release "8t" apart
 * ampEnv.triggerAttackRelease("8t");
 */
_Tone.default.AmplitudeEnvelope = function () {
  _Tone.default.Envelope.apply(this, arguments);
  /**
   *  the input node
   *  @type {GainNode}
   *  @private
   */


  this.input = this.output = new _Tone.default.Gain();

  this._sig.connect(this.output.gain);
};

_Tone.default.extend(_Tone.default.AmplitudeEnvelope, _Tone.default.Envelope);
/**
 *  Clean up
 *  @return  {Tone.AmplitudeEnvelope}  this
 */


_Tone.default.AmplitudeEnvelope.prototype.dispose = function () {
  _Tone.default.Envelope.prototype.dispose.call(this);

  return this;
};

var _default = _Tone.default.AmplitudeEnvelope;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/Envelope":"../node_modules/tone/tone/component/Envelope.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js"}],"../node_modules/tone/tone/shim/AnalyserNode.js":[function(require,module,exports) {
"use strict";

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../shim/AudioContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  AnalyserNode.getFloatTimeDomainData polyfill
 *  @private
 */
if (_Tone.default.supported) {
  if (!AnalyserNode.prototype.getFloatTimeDomainData) {
    //referenced https://github.com/mohayonao/get-float-time-domain-data
    AnalyserNode.prototype.getFloatTimeDomainData = function (array) {
      var uint8 = new Uint8Array(array.length);
      this.getByteTimeDomainData(uint8);

      for (var i = 0; i < uint8.length; i++) {
        array[i] = (uint8[i] - 128) / 128;
      }
    };
  }
}
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../shim/AudioContext":"../node_modules/tone/tone/shim/AudioContext.js"}],"../node_modules/tone/tone/component/Analyser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/AudioNode");

require("../shim/AnalyserNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Wrapper around the native Web Audio's
 *          [AnalyserNode](http://webaudio.github.io/web-audio-api/#idl-def-AnalyserNode).
 *          Extracts FFT or Waveform data from the incoming signal.
 *  @extends {Tone.AudioNode}
 *  @param {String=} type The return type of the analysis, either "fft", or "waveform".
 *  @param {Number=} size The size of the FFT. Value must be a power of
 *                       two in the range 16 to 16384.
 */
_Tone.default.Analyser = function () {
  var options = _Tone.default.defaults(arguments, ["type", "size"], _Tone.default.Analyser);

  _Tone.default.AudioNode.call(this);
  /**
   *  The analyser node.
   *  @private
   *  @type {AnalyserNode}
   */


  this._analyser = this.input = this.output = this.context.createAnalyser();
  /**
   *  The analysis type
   *  @type {String}
   *  @private
   */

  this._type = options.type;
  /**
   *  The buffer that the FFT data is written to
   *  @type {TypedArray}
   *  @private
   */

  this._buffer = null; //set the values initially

  this.size = options.size;
  this.type = options.type;
};

_Tone.default.extend(_Tone.default.Analyser, _Tone.default.AudioNode);
/**
 *  The default values.
 *  @type {Object}
 *  @const
 */


_Tone.default.Analyser.defaults = {
  "size": 1024,
  "type": "fft",
  "smoothing": 0.8
};
/**
 *  Possible return types of analyser.getValue()
 *  @enum {String}
 */

_Tone.default.Analyser.Type = {
  Waveform: "waveform",
  FFT: "fft"
};
/**
 *  Run the analysis given the current settings and return the
 *  result as a TypedArray of length [size](#size).
 *  @returns {TypedArray}
 */

_Tone.default.Analyser.prototype.getValue = function () {
  if (this._type === _Tone.default.Analyser.Type.FFT) {
    this._analyser.getFloatFrequencyData(this._buffer);
  } else if (this._type === _Tone.default.Analyser.Type.Waveform) {
    this._analyser.getFloatTimeDomainData(this._buffer);
  }

  return this._buffer;
};
/**
 *  The size of analysis. This must be a power of two in the range 16 to 16384.
 *  @memberOf Tone.Analyser#
 *  @type {Number}
 *  @name size
 */


Object.defineProperty(_Tone.default.Analyser.prototype, "size", {
  get: function () {
    return this._analyser.frequencyBinCount;
  },
  set: function (size) {
    // fftSize is double frequencyBinCount
    this._analyser.fftSize = size * 2;
    this._buffer = new Float32Array(size);
  }
});
/**
 *  The analysis function returned by analyser.getValue(), either "fft" or "waveform".
 *  @memberOf Tone.Analyser#
 *  @type {String}
 *  @name type
 */

Object.defineProperty(_Tone.default.Analyser.prototype, "type", {
  get: function () {
    return this._type;
  },
  set: function (type) {
    if (type !== _Tone.default.Analyser.Type.Waveform && type !== _Tone.default.Analyser.Type.FFT) {
      throw new TypeError("Tone.Analyser: invalid type: " + type);
    }

    this._type = type;
  }
});
/**
 *  0 represents no time averaging with the last analysis frame.
 *  @memberOf Tone.Analyser#
 *  @type {NormalRange}
 *  @name smoothing
 */

Object.defineProperty(_Tone.default.Analyser.prototype, "smoothing", {
  get: function () {
    return this._analyser.smoothingTimeConstant;
  },
  set: function (val) {
    this._analyser.smoothingTimeConstant = val;
  }
});
/**
 *  Clean up.
 *  @return  {Tone.Analyser}  this
 */

_Tone.default.Analyser.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._analyser.disconnect();

  this._analyser = null;
  this._buffer = null;
};

var _default = _Tone.default.Analyser;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js","../shim/AnalyserNode":"../node_modules/tone/tone/shim/AnalyserNode.js"}],"../node_modules/tone/tone/signal/Add.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/Signal");

require("../core/Gain");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Add a signal and a number or two signals. When no value is
 *         passed into the constructor, Tone.Add will sum <code>input[0]</code>
 *         and <code>input[1]</code>. If a value is passed into the constructor, 
 *         the it will be added to the input.
 *  
 *  @constructor
 *  @extends {Tone.Signal}
 *  @param {number=} value If no value is provided, Tone.Add will sum the first
 *                         and second inputs. 
 *  @example
 * var signal = new Tone.Signal(2);
 * var add = new Tone.Add(2);
 * signal.connect(add);
 * //the output of add equals 4
 *  @example
 * //if constructed with no arguments
 * //it will add the first and second inputs
 * var add = new Tone.Add();
 * var sig0 = new Tone.Signal(3).connect(add, 0, 0);
 * var sig1 = new Tone.Signal(4).connect(add, 0, 1);
 * //the output of add equals 7. 
 */
_Tone.default.Add = function (value) {
  _Tone.default.Signal.call(this);

  this.createInsOuts(2, 0);
  /**
   *  the summing node
   *  @type {GainNode}
   *  @private
   */

  this._sum = this.input[0] = this.input[1] = this.output = new _Tone.default.Gain();
  /**
   *  @private
   *  @type {Tone.Signal}
   */

  this._param = this.input[1] = new _Tone.default.Signal(value);

  this._param.connect(this._sum);
};

_Tone.default.extend(_Tone.default.Add, _Tone.default.Signal);
/**
 *  Clean up.
 *  @returns {Tone.Add} this
 */


_Tone.default.Add.prototype.dispose = function () {
  _Tone.default.Signal.prototype.dispose.call(this);

  this._sum.dispose();

  this._sum = null;
  return this;
};

var _default = _Tone.default.Add;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js"}],"../node_modules/tone/tone/signal/Multiply.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Param");

require("../core/Gain");

require("../signal/SignalBase");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Multiply two incoming signals. Or, if a number is given in the constructor,
 *          multiplies the incoming signal by that value.
 *
 *  @constructor
 *  @extends {Tone.Signal}
 *  @param {number=} value Constant value to multiple. If no value is provided,
 *                         it will return the product of the first and second inputs
 *  @example
 * var mult = new Tone.Multiply();
 * var sigA = new Tone.Signal(3);
 * var sigB = new Tone.Signal(4);
 * sigA.connect(mult, 0, 0);
 * sigB.connect(mult, 0, 1);
 * //output of mult is 12.
 *  @example
 * var mult = new Tone.Multiply(10);
 * var sig = new Tone.Signal(2).connect(mult);
 * //the output of mult is 20.
 */
_Tone.default.Multiply = function (value) {
  _Tone.default.Signal.call(this);

  this.createInsOuts(2, 0);
  /**
   *  the input node is the same as the output node
   *  it is also the GainNode which handles the scaling of incoming signal
   *
   *  @type {GainNode}
   *  @private
   */

  this._mult = this.input[0] = this.output = new _Tone.default.Gain();
  /**
   *  the scaling parameter
   *  @type {AudioParam}
   *  @private
   */

  this._param = this.input[1] = this.output.gain;
  this.value = _Tone.default.defaultArg(value, 0);
};

_Tone.default.extend(_Tone.default.Multiply, _Tone.default.Signal);
/**
 *  clean up
 *  @returns {Tone.Multiply} this
 */


_Tone.default.Multiply.prototype.dispose = function () {
  _Tone.default.Signal.prototype.dispose.call(this);

  this._mult.dispose();

  this._mult = null;
  this._param = null;
  return this;
};

var _default = _Tone.default.Multiply;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Param":"../node_modules/tone/tone/core/Param.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js","../signal/SignalBase":"../node_modules/tone/tone/signal/SignalBase.js"}],"../node_modules/tone/tone/signal/Negate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/Multiply");

require("../signal/Signal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Negate the incoming signal. i.e. an input signal of 10 will output -10
 *
 *  @constructor
 *  @extends {Tone.SignalBase}
 *  @example
 * var neg = new Tone.Negate();
 * var sig = new Tone.Signal(-2).connect(neg);
 * //output of neg is positive 2. 
 */
_Tone.default.Negate = function () {
  _Tone.default.SignalBase.call(this);
  /**
   *  negation is done by multiplying by -1
   *  @type {Tone.Multiply}
   *  @private
   */


  this._multiply = this.input = this.output = new _Tone.default.Multiply(-1);
};

_Tone.default.extend(_Tone.default.Negate, _Tone.default.SignalBase);
/**
 *  clean up
 *  @returns {Tone.Negate} this
 */


_Tone.default.Negate.prototype.dispose = function () {
  _Tone.default.SignalBase.prototype.dispose.call(this);

  this._multiply.dispose();

  this._multiply = null;
  return this;
};

var _default = _Tone.default.Negate;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/Multiply":"../node_modules/tone/tone/signal/Multiply.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js"}],"../node_modules/tone/tone/signal/Subtract.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/Add");

require("../signal/Negate");

require("../signal/Signal");

require("../core/Gain");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Subtract the signal connected to <code>input[1]</code> from the signal connected 
 *         to <code>input[0]</code>. If an argument is provided in the constructor, the 
 *         signals <code>.value</code> will be subtracted from the incoming signal.
 *
 *  @extends {Tone.Signal}
 *  @constructor
 *  @param {number=} value The value to subtract from the incoming signal. If the value
 *                         is omitted, it will subtract the second signal from the first.
 *  @example
 * var sub = new Tone.Subtract(1);
 * var sig = new Tone.Signal(4).connect(sub);
 * //the output of sub is 3. 
 *  @example
 * var sub = new Tone.Subtract();
 * var sigA = new Tone.Signal(10);
 * var sigB = new Tone.Signal(2.5);
 * sigA.connect(sub, 0, 0);
 * sigB.connect(sub, 0, 1);
 * //output of sub is 7.5
 */
_Tone.default.Subtract = function (value) {
  _Tone.default.Signal.call(this);

  this.createInsOuts(2, 0);
  /**
   *  the summing node
   *  @type {GainNode}
   *  @private
   */

  this._sum = this.input[0] = this.output = new _Tone.default.Gain();
  /**
   *  negate the input of the second input before connecting it
   *  to the summing node.
   *  @type {Tone.Negate}
   *  @private
   */

  this._neg = new _Tone.default.Negate();
  /**
   *  the node where the value is set
   *  @private
   *  @type {Tone.Signal}
   */

  this._param = this.input[1] = new _Tone.default.Signal(value);

  this._param.chain(this._neg, this._sum);
};

_Tone.default.extend(_Tone.default.Subtract, _Tone.default.Signal);
/**
 *  Clean up.
 *  @returns {Tone.SignalBase} this
 */


_Tone.default.Subtract.prototype.dispose = function () {
  _Tone.default.Signal.prototype.dispose.call(this);

  this._neg.dispose();

  this._neg = null;

  this._sum.disconnect();

  this._sum = null;
  return this;
};

var _default = _Tone.default.Subtract;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/Add":"../node_modules/tone/tone/signal/Add.js","../signal/Negate":"../node_modules/tone/tone/signal/Negate.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js"}],"../node_modules/tone/tone/signal/EqualPowerGain.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/WaveShaper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Convert an incoming signal between 0, 1 to an equal power gain scale.
 *
 *  @extends {Tone.SignalBase}
 *  @constructor
 *  @example
 * var eqPowGain = new Tone.EqualPowerGain();
 */
_Tone.default.EqualPowerGain = function () {
  _Tone.default.SignalBase.call(this);
  /**
   *  @type {Tone.WaveShaper}
   *  @private
   */


  this._eqPower = this.input = this.output = new _Tone.default.WaveShaper(function (val) {
    if (Math.abs(val) < 0.001) {
      //should output 0 when input is 0
      return 0;
    } else {
      return _Tone.default.equalPowerScale(val);
    }
  }.bind(this), 4096);
};

_Tone.default.extend(_Tone.default.EqualPowerGain, _Tone.default.SignalBase);
/**
 *  clean up
 *  @returns {Tone.EqualPowerGain} this
 */


_Tone.default.EqualPowerGain.prototype.dispose = function () {
  _Tone.default.SignalBase.prototype.dispose.call(this);

  this._eqPower.dispose();

  this._eqPower = null;
  return this;
};

var _default = _Tone.default.EqualPowerGain;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/WaveShaper":"../node_modules/tone/tone/signal/WaveShaper.js"}],"../node_modules/tone/tone/component/CrossFade.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/Signal");

require("../signal/Subtract");

require("../signal/EqualPowerGain");

require("../core/Gain");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class  Tone.Crossfade provides equal power fading between two inputs.
 *         More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).
 *
 * @constructor
 * @extends {Tone.AudioNode}
 * @param {NormalRange} [initialFade=0.5]
 * @example
 * var crossFade = new Tone.CrossFade(0.5);
 * //connect effect A to crossfade from
 * //effect output 0 to crossfade input 0
 * effectA.connect(crossFade, 0, 0);
 * //connect effect B to crossfade from
 * //effect output 0 to crossfade input 1
 * effectB.connect(crossFade, 0, 1);
 * crossFade.fade.value = 0;
 * // ^ only effectA is output
 * crossFade.fade.value = 1;
 * // ^ only effectB is output
 * crossFade.fade.value = 0.5;
 * // ^ the two signals are mixed equally.
 */
_Tone.default.CrossFade = function (initialFade) {
  _Tone.default.AudioNode.call(this);

  this.createInsOuts(2, 1);
  /**
   *  Alias for <code>input[0]</code>.
   *  @type {Tone.Gain}
   */

  this.a = this.input[0] = new _Tone.default.Gain();
  /**
   *  Alias for <code>input[1]</code>.
   *  @type {Tone.Gain}
   */

  this.b = this.input[1] = new _Tone.default.Gain();
  /**
   * 	The mix between the two inputs. A fade value of 0
   * 	will output 100% <code>input[0]</code> and
   * 	a value of 1 will output 100% <code>input[1]</code>.
   *  @type {NormalRange}
   *  @signal
   */

  this.fade = new _Tone.default.Signal(_Tone.default.defaultArg(initialFade, 0.5), _Tone.default.Type.NormalRange);
  /**
   *  equal power gain cross fade
   *  @private
   *  @type {Tone.EqualPowerGain}
   */

  this._equalPowerA = new _Tone.default.EqualPowerGain();
  /**
   *  equal power gain cross fade
   *  @private
   *  @type {Tone.EqualPowerGain}
   */

  this._equalPowerB = new _Tone.default.EqualPowerGain();
  /**
   *  invert the incoming signal
   *  @private
   *  @type {Tone}
   */

  this._one = this.context.getConstant(1);
  /**
   *  invert the incoming signal
   *  @private
   *  @type {Tone.Subtract}
   */

  this._invert = new _Tone.default.Subtract(); //connections

  this.a.connect(this.output);
  this.b.connect(this.output);
  this.fade.chain(this._equalPowerB, this.b.gain);

  _Tone.default.connect(this._one, this._invert, 0, 0);

  this.fade.connect(this._invert, 0, 1);

  this._invert.chain(this._equalPowerA, this.a.gain);

  this._readOnly("fade");
};

_Tone.default.extend(_Tone.default.CrossFade, _Tone.default.AudioNode);
/**
 *  clean up
 *  @returns {Tone.CrossFade} this
 */


_Tone.default.CrossFade.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._writable("fade");

  this._equalPowerA.dispose();

  this._equalPowerA = null;

  this._equalPowerB.dispose();

  this._equalPowerB = null;
  this.fade.dispose();
  this.fade = null;

  this._invert.dispose();

  this._invert = null;
  this._one = null;
  this.a.dispose();
  this.a = null;
  this.b.dispose();
  this.b = null;
  return this;
};

var _default = _Tone.default.CrossFade;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../signal/Subtract":"../node_modules/tone/tone/signal/Subtract.js","../signal/EqualPowerGain":"../node_modules/tone/tone/signal/EqualPowerGain.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/Merge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.Merge brings two signals into the left and right
 *          channels of a single stereo channel.
 *
 *  @constructor
 *  @extends {Tone.AudioNode}
 *  @param {number} [channels=2] The number of channels to merge. 
 *  @example
 * var merge = new Tone.Merge().toMaster();
 * //routing a sine tone in the left channel
 * //and noise in the right channel
 * var osc = new Tone.Oscillator().connect(merge.left);
 * var noise = new Tone.Noise().connect(merge.right);
 * //starting our oscillators
 * noise.start();
 * osc.start();
 */
_Tone.default.Merge = function (channels) {
  //defaults to 2 channels
  channels = _Tone.default.defaultArg(channels, 2);

  _Tone.default.AudioNode.call(this);

  this.createInsOuts(channels, 0);
  /**
   *  the merger node for the two channels
   *  @type {ChannelMergerNode}
   *  @private
   */

  this._merger = this.output = this.context.createChannelMerger(channels); //connections

  for (var i = 0; i < channels; i++) {
    this.input[i] = new _Tone.default.Gain();
    this.input[i].connect(this._merger, 0, i);
    this.input[i].channelCount = 1;
    this.input[i].channelCountMode = "explicit";
  }
  /**
   *  The left input channel.
   *  Alias for <code>input[0]</code>
   *  @type {GainNode}
   */


  this.left = this.input[0];
  /**
   *  The right input channel.
   *  Alias for <code>input[1]</code>.
   *  @type {GainNode}
   */

  this.right = this.input[1];
};

_Tone.default.extend(_Tone.default.Merge, _Tone.default.AudioNode);
/**
 *  Clean up.
 *  @returns {Tone.Merge} this
 */


_Tone.default.Merge.prototype.dispose = function () {
  this.input.forEach(function (input) {
    input.dispose();
  });

  _Tone.default.AudioNode.prototype.dispose.call(this);

  this.left = null;
  this.right = null;

  this._merger.disconnect();

  this._merger = null;
  return this;
};

var _default = _Tone.default.Merge;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/Split.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Gain");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *	@class  Tone.Split splits an incoming signal into left and right channels.
 *
 *  @constructor
 *  @extends {Tone.AudioNode}
 *  @param {number} [channels=2] The number of channels to merge.
 *  @example
 * var split = new Tone.Split();
 * stereoSignal.connect(split);
 */
_Tone.default.Split = function (channels) {
  //defaults to 2 channels
  channels = _Tone.default.defaultArg(channels, 2);

  _Tone.default.AudioNode.call(this);

  this.createInsOuts(0, channels);
  /**
   *  @type {ChannelSplitterNode}
   *  @private
   */

  this._splitter = this.input = this.context.createChannelSplitter(channels); //connections

  for (var i = 0; i < channels; i++) {
    this.output[i] = new _Tone.default.Gain();

    _Tone.default.connect(this._splitter, this.output[i], i, 0);

    this.output[i].channelCount = 1;
    this.output[i].channelCountMode = "explicit";
  }
  /**
   *  Left channel output.
   *  Alias for <code>output[0]</code>
   *  @type {Tone.Gain}
   */


  this.left = this.output[0];
  /**
   *  Right channel output.
   *  Alias for <code>output[1]</code>
   *  @type {Tone.Gain}
   */

  this.right = this.output[1];
};

_Tone.default.extend(_Tone.default.Split, _Tone.default.AudioNode);
/**
 *  Clean up.
 *  @returns {Tone.Split} this
 */


_Tone.default.Split.prototype.dispose = function () {
  this.output.forEach(function (output) {
    output.dispose();
  });

  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._splitter.disconnect();

  this.left = null;
  this.right = null;
  this._splitter = null;
  return this;
};

var _default = _Tone.default.Split;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/signal/Zero.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Gain");

require("../signal/SignalBase");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Zero outputs 0's at audio-rate. The reason this has to be
 *         it's own class is that many browsers optimize out Tone.Signal
 *         with a value of 0 and will not process nodes further down the graph.
 *  @extends {Tone.SignalBase}
 */
_Tone.default.Zero = function () {
  _Tone.default.SignalBase.call(this);
  /**
   *  The gain node
   *  @type  {Tone.Gain}
   *  @private
   */


  this._gain = this.input = this.output = new _Tone.default.Gain();

  _Tone.default.connect(this.context.getConstant(0), this._gain);
};

_Tone.default.extend(_Tone.default.Zero, _Tone.default.SignalBase);
/**
 *  clean up
 *  @return  {Tone.Zero}  this
 */


_Tone.default.Zero.prototype.dispose = function () {
  _Tone.default.SignalBase.prototype.dispose.call(this);

  this._gain.dispose();

  this._gain = null;
  return this;
};

var _default = _Tone.default.Zero;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js","../signal/SignalBase":"../node_modules/tone/tone/signal/SignalBase.js"}],"../node_modules/tone/tone/shim/StereoPannerNode.js":[function(require,module,exports) {
"use strict";

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/WaveShaper");

require("../component/Merge");

require("../signal/Zero");

require("../component/Split");

require("../core/Gain");

require("../signal/Signal");

require("../core/Context");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (_Tone.default.supported && !_Tone.default.global.AudioContext.prototype.createStereoPanner) {
  /**
   * @class Shimmed StereoPannerNode
   * @param  {AudioContext} context
   * @private
   */
  var StereoPannerNode = function (context) {
    /**
     * The audio context
     * @type {AudioContext}
     */
    this.context = context;
    /**
     * The left/right panning. [-1, 1]
     * @type {AudioRange}
     * @signal
     */

    this.pan = new _Tone.default.Signal(0, _Tone.default.Type.AudioRange);
    /**
     * Equal power scaling of the right gain
     * @type {Tone.WaveShaper}
     */

    var rightWaveShaper = new _Tone.default.WaveShaper(function (val) {
      return _Tone.default.equalPowerScale((val + 1) / 2);
    }, 4096);
    /**
     * Equal power scaling of the left gain
     * @type {Tone.WaveShaper}
     * @private
     */

    var leftWaveShaper = new _Tone.default.WaveShaper(function (val) {
      return _Tone.default.equalPowerScale(1 - (val + 1) / 2);
    }, 4096);
    /**
     * The left gain value
     * @type {Tone.Gain}
     * @private
     */

    var leftGain = new _Tone.default.Gain();
    /**
     * The right gain value
     * @type {Tone.Gain}
     * @private
     */

    var rightGain = new _Tone.default.Gain();
    /**
     * Split the incoming signal
     * @type {Tone.Split}
     * @private
     */

    var split = this.input = new _Tone.default.Split(); //fixes safari issue with splitting audio

    split._splitter.channelCountMode = "explicit";
    /**
     * Keeps the waveshapers from optimizing 0s
     * @type {Tone.Zero}
     * @private
     */

    var zero = new _Tone.default.Zero();
    zero.fan(rightWaveShaper, leftWaveShaper);
    /**
     * Merge the outgoing signal
     * @type {Tone.Merge}
     * @private
     */

    var merge = this.output = new _Tone.default.Merge(); //connections

    split.left.chain(leftGain, merge.left);
    split.right.chain(rightGain, merge.right);
    this.pan.chain(leftWaveShaper, leftGain.gain);
    this.pan.chain(rightWaveShaper, rightGain.gain);
  };

  StereoPannerNode.prototype.disconnect = function () {
    this.output.disconnect.apply(this.output, arguments);
  };

  StereoPannerNode.prototype.connect = function () {
    this.output.connect.apply(this.output, arguments);
  }; //add it to the AudioContext


  AudioContext.prototype.createStereoPanner = function () {
    return new StereoPannerNode(this);
  };

  _Tone.default.Context.prototype.createStereoPanner = function () {
    return new StereoPannerNode(this);
  };
}
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/WaveShaper":"../node_modules/tone/tone/signal/WaveShaper.js","../component/Merge":"../node_modules/tone/tone/component/Merge.js","../signal/Zero":"../node_modules/tone/tone/signal/Zero.js","../component/Split":"../node_modules/tone/tone/component/Split.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../core/Context":"../node_modules/tone/tone/core/Context.js"}],"../node_modules/tone/tone/signal/AudioToGain.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/WaveShaper");

require("../signal/Signal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1]. 
 *         See Tone.GainToAudio.
 *
 *  @extends {Tone.SignalBase}
 *  @constructor
 *  @example
 *  var a2g = new Tone.AudioToGain();
 */
_Tone.default.AudioToGain = function () {
  _Tone.default.SignalBase.call(this);
  /**
   *  @type {WaveShaperNode}
   *  @private
   */


  this._norm = this.input = this.output = new _Tone.default.WaveShaper(function (x) {
    return (x + 1) / 2;
  });
};

_Tone.default.extend(_Tone.default.AudioToGain, _Tone.default.SignalBase);
/**
 *  clean up
 *  @returns {Tone.AudioToGain} this
 */


_Tone.default.AudioToGain.prototype.dispose = function () {
  _Tone.default.SignalBase.prototype.dispose.call(this);

  this._norm.dispose();

  this._norm = null;
  return this;
};

var _default = _Tone.default.AudioToGain;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/WaveShaper":"../node_modules/tone/tone/signal/WaveShaper.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js"}],"../node_modules/tone/tone/component/Panner.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/CrossFade");

require("../component/Merge");

require("../component/Split");

require("../shim/StereoPannerNode");

require("../signal/Signal");

require("../signal/AudioToGain");

require("../signal/Zero");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.Panner is an equal power Left/Right Panner and does not
 *          support 3D. Panner uses the StereoPannerNode when available.
 *
 *  @constructor
 *  @extends {Tone.AudioNode}
 *  @param {NormalRange} [initialPan=0] The initail panner value (center).
 *  @example
 *  //pan the input signal hard right.
 *  var panner = new Tone.Panner(1);
 */
_Tone.default.Panner = function () {
  var options = _Tone.default.defaults(arguments, ["pan"], _Tone.default.Panner);

  _Tone.default.AudioNode.call(this);
  /**
  *  the panner node
  *  @type {StereoPannerNode}
  *  @private
  */


  this._panner = this.input = this.output = this.context.createStereoPanner();
  /**
  *  The pan control. -1 = hard left, 1 = hard right.
  *  @type {AudioRange}
  *  @signal
  */

  this.pan = this._panner.pan; //initial value

  this.pan.value = options.pan;

  this._readOnly("pan");
};

_Tone.default.extend(_Tone.default.Panner, _Tone.default.AudioNode);
/**
 *  Defaults
 *  @type  {Object}
 *  @const
 *  @static
 */


_Tone.default.Panner.defaults = {
  "pan": 0
};
/**
 *  Clean up.
 *  @returns {Tone.Panner} this
 */

_Tone.default.Panner.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._writable("pan");

  this._panner.disconnect();

  this._panner = null;
  this.pan = null;
  return this;
};

var _default = _Tone.default.Panner;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/CrossFade":"../node_modules/tone/tone/component/CrossFade.js","../component/Merge":"../node_modules/tone/tone/component/Merge.js","../component/Split":"../node_modules/tone/tone/component/Split.js","../shim/StereoPannerNode":"../node_modules/tone/tone/shim/StereoPannerNode.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../signal/AudioToGain":"../node_modules/tone/tone/signal/AudioToGain.js","../signal/Zero":"../node_modules/tone/tone/signal/Zero.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/Volume.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/Signal");

require("../core/Gain");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Volume is a simple volume node, useful for creating a volume fader.
 *
 *  @extends {Tone.AudioNode}
 *  @constructor
 *  @param {Decibels} [volume=0] the initial volume
 *  @example
 * var vol = new Tone.Volume(-12);
 * instrument.chain(vol, Tone.Master);
 */
_Tone.default.Volume = function () {
  var options = _Tone.default.defaults(arguments, ["volume"], _Tone.default.Volume);

  _Tone.default.AudioNode.call(this, options);
  /**
   * the output node
   * @type {GainNode}
   * @private
   */


  this.output = this.input = new _Tone.default.Gain(options.volume, _Tone.default.Type.Decibels);
  /**
   * The unmuted volume
   * @type {Decibels}
   * @private
   */

  this._unmutedVolume = options.volume;
  /**
   *  The volume control in decibels.
   *  @type {Decibels}
   *  @signal
   */

  this.volume = this.output.gain;

  this._readOnly("volume"); //set the mute initially


  this.mute = options.mute;
};

_Tone.default.extend(_Tone.default.Volume, _Tone.default.AudioNode);
/**
 *  Defaults
 *  @type  {Object}
 *  @const
 *  @static
 */


_Tone.default.Volume.defaults = {
  "volume": 0,
  "mute": false
};
/**
 * Mute the output.
 * @memberOf Tone.Volume#
 * @type {boolean}
 * @name mute
 * @example
 * //mute the output
 * volume.mute = true;
 */

Object.defineProperty(_Tone.default.Volume.prototype, "mute", {
  get: function () {
    return this.volume.value === -Infinity;
  },
  set: function (mute) {
    if (!this.mute && mute) {
      this._unmutedVolume = this.volume.value; //maybe it should ramp here?

      this.volume.value = -Infinity;
    } else if (this.mute && !mute) {
      this.volume.value = this._unmutedVolume;
    }
  }
});
/**
 *  clean up
 *  @returns {Tone.Volume} this
 */

_Tone.default.Volume.prototype.dispose = function () {
  this.input.dispose();

  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._writable("volume");

  this.volume.dispose();
  this.volume = null;
  return this;
};

var _default = _Tone.default.Volume;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/PanVol.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/Panner");

require("../component/Volume");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.PanVol is a Tone.Panner and Tone.Volume in one.
 *
 *  @extends {Tone.AudioNode}
 *  @constructor
 *  @param {AudioRange} pan the initial pan
 *  @param {number} volume The output volume.
 *  @example
 * //pan the incoming signal left and drop the volume
 * var panVol = new Tone.PanVol(-0.25, -12);
 */
_Tone.default.PanVol = function () {
  var options = _Tone.default.defaults(arguments, ["pan", "volume"], _Tone.default.PanVol);

  _Tone.default.AudioNode.call(this);
  /**
   *  The panning node
   *  @type {Tone.Panner}
   *  @private
   */


  this._panner = this.input = new _Tone.default.Panner(options.pan);
  /**
   *  The L/R panning control.
   *  @type {AudioRange}
   *  @signal
   */

  this.pan = this._panner.pan;
  /**
   *  The volume node
   *  @type {Tone.Volume}
   *  @private
   */

  this._volume = this.output = new _Tone.default.Volume(options.volume);
  /**
   *  The volume control in decibels.
   *  @type {Decibels}
   *  @signal
   */

  this.volume = this._volume.volume; //connections

  this._panner.connect(this._volume);

  this.mute = options.mute;

  this._readOnly(["pan", "volume"]);
};

_Tone.default.extend(_Tone.default.PanVol, _Tone.default.AudioNode);
/**
 *  The defaults
 *  @type  {Object}
 *  @const
 *  @static
 */


_Tone.default.PanVol.defaults = {
  "pan": 0,
  "volume": 0,
  "mute": false
};
/**
 * Mute/unmute the volume
 * @memberOf Tone.PanVol#
 * @name mute
 * @type {Boolean}
 */

Object.defineProperty(_Tone.default.PanVol.prototype, "mute", {
  get: function () {
    return this._volume.mute;
  },
  set: function (mute) {
    this._volume.mute = mute;
  }
});
/**
 *  clean up
 *  @returns {Tone.PanVol} this
 */

_Tone.default.PanVol.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._writable(["pan", "volume"]);

  this._panner.dispose();

  this._panner = null;
  this.pan = null;

  this._volume.dispose();

  this._volume = null;
  this.volume = null;
  return this;
};

var _default = _Tone.default.PanVol;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/Panner":"../node_modules/tone/tone/component/Panner.js","../component/Volume":"../node_modules/tone/tone/component/Volume.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/Solo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Gain");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Solo lets you isolate a specific audio stream. When
 *         an instance is set to `solo=true`, it will mute all other instances.
 *  @extends {Tone.AudioNode}
 *  @example
 * var soloA = new Tone.Solo()
 * var soloB = new Tone.Solo()
 * soloA.solo = true
 * //no audio will pass through soloB
 */
_Tone.default.Solo = function () {
  var options = _Tone.default.defaults(arguments, ["solo"], _Tone.default.Solo);

  _Tone.default.AudioNode.call(this);
  /**
   *  The input and output node
   *  @type  {Tone.Gain}
   */


  this.input = this.output = new _Tone.default.Gain();
  /**
   *  A bound _soloed method
   *  @type  {Function}
   *  @private
   */

  this._soloBind = this._soloed.bind(this); //listen for solo events class-wide.

  this.context.on("solo", this._soloBind); //set initially

  this.solo = options.solo;
};

_Tone.default.extend(_Tone.default.Solo, _Tone.default.AudioNode);
/**
 *  The defaults
 *  @type  {Object}
 *  @static
 */


_Tone.default.Solo.defaults = {
  solo: false
};
/**
 *  Isolates this instance and mutes all other instances of Tone.Solo.
 *  Only one instance can be soloed at a time. A soloed
 *  instance will report `solo=false` when another instance is soloed.
 *  @memberOf Tone.Solo#
 *  @type {Boolean}
 *  @name solo
 */

Object.defineProperty(_Tone.default.Solo.prototype, "solo", {
  get: function () {
    return this._isSoloed();
  },
  set: function (solo) {
    if (solo) {
      this._addSolo();
    } else {
      this._removeSolo();
    }

    this.context.emit("solo", this);
  }
});
/**
 *  If the current instance is muted, i.e. another instance is soloed
 *  @memberOf Tone.Solo#
 *  @type {Boolean}
 *  @name muted
 *  @readOnly
 */

Object.defineProperty(_Tone.default.Solo.prototype, "muted", {
  get: function () {
    return this.input.gain.value === 0;
  }
});
/**
 * Add this to the soloed array
 * @private
 */

_Tone.default.Solo.prototype._addSolo = function () {
  if (!_Tone.default.isArray(this.context._currentSolo)) {
    this.context._currentSolo = [];
  }

  if (!this._isSoloed()) {
    this.context._currentSolo.push(this);
  }
};
/**
 * Remove this from the soloed array
 * @private
 */


_Tone.default.Solo.prototype._removeSolo = function () {
  if (this._isSoloed()) {
    var index = this.context._currentSolo.indexOf(this);

    this.context._currentSolo.splice(index, 1);
  }
};
/**
 * @return {Boolean} Is this on the soloed array
 * @private
 */


_Tone.default.Solo.prototype._isSoloed = function () {
  if (_Tone.default.isArray(this.context._currentSolo)) {
    return this.context._currentSolo.length !== 0 && this.context._currentSolo.indexOf(this) !== -1;
  } else {
    return false;
  }
};
/**
 * @return {Boolean} Returns true if no one is soloed
 * @private
 */


_Tone.default.Solo.prototype._noSolos = function () {
  return !_Tone.default.isArray(this.context._currentSolo) || this.context._currentSolo.length === 0;
};
/**
 *  Solo the current instance and unsolo all other instances.
 *  @param  {Tone.Solo}  instance  The instance which is being soloed/unsoloed.
 *  @private
 */


_Tone.default.Solo.prototype._soloed = function () {
  if (this._isSoloed()) {
    this.input.gain.value = 1;
  } else if (this._noSolos()) {
    //no one is soloed
    this.input.gain.value = 1;
  } else {
    this.input.gain.value = 0;
  }
};
/**
 *  Clean up
 *  @return  {Tone.Solo}  this
 */


_Tone.default.Solo.prototype.dispose = function () {
  this.context.off("solo", this._soloBind);

  this._removeSolo();

  this._soloBind = null;

  _Tone.default.AudioNode.prototype.dispose.call(this);

  return this;
};

var _default = _Tone.default.Solo;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/Channel.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/PanVol");

require("../component/Solo");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Channel provides a channel strip interface with 
 *  volume, pan, solo and mute controls. 
 *
 *  @extends {Tone.AudioNode}
 *  @constructor
 *  @param {Decibels} volume The output volume.
 *  @param {AudioRange} pan the initial pan
 *  @example
 * //pan the incoming signal left and drop the volume
 * var channel = new Tone.Channel(-0.25, -12);
 */
_Tone.default.Channel = function () {
  var options = _Tone.default.defaults(arguments, ["volume", "pan"], _Tone.default.PanVol);

  _Tone.default.AudioNode.call(this, options);
  /**
   *  The soloing interface
   *  @type {Tone.Solo}
   *  @private
   */


  this._solo = this.input = new _Tone.default.Solo(options.solo);
  /**
   *  The panning and volume node
   *  @type {Tone.PanVol}
   *  @private
   */

  this._panVol = this.output = new _Tone.default.PanVol({
    "pan": options.pan,
    "volume": options.volume,
    "mute": options.mute
  });
  /**
   *  The L/R panning control.
   *  @type {AudioRange}
   *  @signal
   */

  this.pan = this._panVol.pan;
  /**
   *  The volume control in decibels.
   *  @type {Decibels}
   *  @signal
   */

  this.volume = this._panVol.volume;

  this._solo.connect(this._panVol);

  this._readOnly(["pan", "volume"]);
};

_Tone.default.extend(_Tone.default.Channel, _Tone.default.AudioNode);
/**
 *  The defaults
 *  @type  {Object}
 *  @const
 *  @static
 */


_Tone.default.Channel.defaults = {
  "pan": 0,
  "volume": 0,
  "mute": false,
  "solo": false
};
/**
 * Solo/unsolo the channel. Soloing is only relative to other
 * Tone.Channels and Tone.Solos. 
 * @memberOf Tone.Channel#
 * @name solo
 * @type {Boolean}
 */

Object.defineProperty(_Tone.default.Channel.prototype, "solo", {
  get: function () {
    return this._solo.solo;
  },
  set: function (solo) {
    this._solo.solo = solo;
  }
});
/**
 *  If the current instance is muted, i.e. another instance is soloed,
 *  or the channel is muted
 *  @memberOf Tone.Channel#
 *  @type {Boolean}
 *  @name muted
 *  @readOnly
 */

Object.defineProperty(_Tone.default.Channel.prototype, "muted", {
  get: function () {
    return this._solo.muted || this.mute;
  }
});
/**
 * Mute/unmute the volume
 * @memberOf Tone.Channel#
 * @name mute
 * @type {Boolean}
 */

Object.defineProperty(_Tone.default.Channel.prototype, "mute", {
  get: function () {
    return this._panVol.mute;
  },
  set: function (mute) {
    this._panVol.mute = mute;
  }
});
/**
 *  clean up
 *  @returns {Tone.Channel} this
 */

_Tone.default.Channel.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._writable(["pan", "volume"]);

  this._panVol.dispose();

  this._panVol = null;
  this.pan = null;
  this.volume = null;

  this._solo.dispose();

  this._solo = null;
  return this;
};

var _default = _Tone.default.Channel;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/PanVol":"../node_modules/tone/tone/component/PanVol.js","../component/Solo":"../node_modules/tone/tone/component/Solo.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/Compressor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Param");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Compressor is a thin wrapper around the Web Audio
 *         [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).
 *         Compression reduces the volume of loud sounds or amplifies quiet sounds
 *         by narrowing or "compressing" an audio signal's dynamic range.
 *         Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).
 *
 *  @extends {Tone.AudioNode}
 *  @constructor
 *  @param {Decibels|Object} [threshold] The value above which the compression starts to be applied.
 *  @param {Positive} [ratio] The gain reduction ratio.
 *  @example
 * var comp = new Tone.Compressor(-30, 3);
 */
_Tone.default.Compressor = function () {
  var options = _Tone.default.defaults(arguments, ["threshold", "ratio"], _Tone.default.Compressor);

  _Tone.default.AudioNode.call(this);
  /**
   *  the compressor node
   *  @type {DynamicsCompressorNode}
   *  @private
   */


  this._compressor = this.input = this.output = this.context.createDynamicsCompressor();
  /**
   *  the threshold vaue
   *  @type {Decibels}
   *  @signal
   */

  this.threshold = new _Tone.default.Param({
    "param": this._compressor.threshold,
    "units": _Tone.default.Type.Decibels,
    "convert": false
  });
  /**
   *  The attack parameter
   *  @type {Time}
   *  @signal
   */

  this.attack = new _Tone.default.Param(this._compressor.attack, _Tone.default.Type.Time);
  /**
   *  The release parameter
   *  @type {Time}
   *  @signal
   */

  this.release = new _Tone.default.Param(this._compressor.release, _Tone.default.Type.Time);
  /**
   *  The knee parameter
   *  @type {Decibels}
   *  @signal
   */

  this.knee = new _Tone.default.Param({
    "param": this._compressor.knee,
    "units": _Tone.default.Type.Decibels,
    "convert": false
  });
  /**
   *  The ratio value
   *  @type {Number}
   *  @signal
   */

  this.ratio = new _Tone.default.Param({
    "param": this._compressor.ratio,
    "convert": false
  }); //set the defaults

  this._readOnly(["knee", "release", "attack", "ratio", "threshold"]);

  this.set(options);
};

_Tone.default.extend(_Tone.default.Compressor, _Tone.default.AudioNode);
/**
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.Compressor.defaults = {
  "ratio": 12,
  "threshold": -24,
  "release": 0.25,
  "attack": 0.003,
  "knee": 30
};
/**
 *  clean up
 *  @returns {Tone.Compressor} this
 */

_Tone.default.Compressor.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._writable(["knee", "release", "attack", "ratio", "threshold"]);

  this._compressor.disconnect();

  this._compressor = null;
  this.attack.dispose();
  this.attack = null;
  this.release.dispose();
  this.release = null;
  this.threshold.dispose();
  this.threshold = null;
  this.ratio.dispose();
  this.ratio = null;
  this.knee.dispose();
  this.knee = null;
  return this;
};

var _default = _Tone.default.Compressor;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Param":"../node_modules/tone/tone/core/Param.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/Filter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/Signal");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.Filter is a filter which allows for all of the same native methods
 *          as the [BiquadFilterNode](http://webaudio.github.io/web-audio-api/#the-biquadfilternode-interface).
 *          Tone.Filter has the added ability to set the filter rolloff at -12
 *          (default), -24 and -48.
 *
 *  @constructor
 *  @extends {Tone.AudioNode}
 *  @param {Frequency|Object} [frequency] The cutoff frequency of the filter.
 *  @param {string=} type The type of filter.
 *  @param {number=} rolloff The drop in decibels per octave after the cutoff frequency.
 *                            3 choices: -12, -24, and -48
 *  @example
 *  var filter = new Tone.Filter(200, "highpass");
 */
_Tone.default.Filter = function () {
  var options = _Tone.default.defaults(arguments, ["frequency", "type", "rolloff"], _Tone.default.Filter);

  _Tone.default.AudioNode.call(this);

  this.createInsOuts(1, 1);
  /**
   *  the filter(s)
   *  @type {Array}
   *  @private
   */

  this._filters = [];
  /**
   *  The cutoff frequency of the filter.
   *  @type {Frequency}
   *  @signal
   */

  this.frequency = new _Tone.default.Signal(options.frequency, _Tone.default.Type.Frequency);
  /**
   *  The detune parameter
   *  @type {Cents}
   *  @signal
   */

  this.detune = new _Tone.default.Signal(0, _Tone.default.Type.Cents);
  /**
   *  The gain of the filter, only used in certain filter types
   *  @type {Number}
   *  @signal
   */

  this.gain = new _Tone.default.Signal({
    "value": options.gain,
    "convert": true,
    "type": _Tone.default.Type.Decibels
  });
  /**
   *  The Q or Quality of the filter
   *  @type {Positive}
   *  @signal
   */

  this.Q = new _Tone.default.Signal(options.Q);
  /**
   *  the type of the filter
   *  @type {string}
   *  @private
   */

  this._type = options.type;
  /**
   *  the rolloff value of the filter
   *  @type {number}
   *  @private
   */

  this._rolloff = options.rolloff; //set the rolloff;

  this.rolloff = options.rolloff;

  this._readOnly(["detune", "frequency", "gain", "Q"]);
};

_Tone.default.extend(_Tone.default.Filter, _Tone.default.AudioNode);
/**
 *  the default parameters
 *
 *  @static
 *  @type {Object}
 */


_Tone.default.Filter.defaults = {
  "type": "lowpass",
  "frequency": 350,
  "rolloff": -12,
  "Q": 1,
  "gain": 0
};
/**
 * The type of the filter. Types: "lowpass", "highpass",
 * "bandpass", "lowshelf", "highshelf", "notch", "allpass", or "peaking".
 * @memberOf Tone.Filter#
 * @type {string}
 * @name type
 */

Object.defineProperty(_Tone.default.Filter.prototype, "type", {
  get: function () {
    return this._type;
  },
  set: function (type) {
    var types = ["lowpass", "highpass", "bandpass", "lowshelf", "highshelf", "notch", "allpass", "peaking"];

    if (types.indexOf(type) === -1) {
      throw new TypeError("Tone.Filter: invalid type " + type);
    }

    this._type = type;

    for (var i = 0; i < this._filters.length; i++) {
      this._filters[i].type = type;
    }
  }
});
/**
 * The rolloff of the filter which is the drop in db
 * per octave. Implemented internally by cascading filters.
 * Only accepts the values -12, -24, -48 and -96.
 * @memberOf Tone.Filter#
 * @type {number}
 * @name rolloff
 */

Object.defineProperty(_Tone.default.Filter.prototype, "rolloff", {
  get: function () {
    return this._rolloff;
  },
  set: function (rolloff) {
    rolloff = parseInt(rolloff, 10);
    var possibilities = [-12, -24, -48, -96];
    var cascadingCount = possibilities.indexOf(rolloff); //check the rolloff is valid

    if (cascadingCount === -1) {
      throw new RangeError("Tone.Filter: rolloff can only be -12, -24, -48 or -96");
    }

    cascadingCount += 1;
    this._rolloff = rolloff; //first disconnect the filters and throw them away

    this.input.disconnect();

    for (var i = 0; i < this._filters.length; i++) {
      this._filters[i].disconnect();

      this._filters[i] = null;
    }

    this._filters = new Array(cascadingCount);

    for (var count = 0; count < cascadingCount; count++) {
      var filter = this.context.createBiquadFilter();
      filter.type = this._type;
      this.frequency.connect(filter.frequency);
      this.detune.connect(filter.detune);
      this.Q.connect(filter.Q);
      this.gain.connect(filter.gain);
      this._filters[count] = filter;
    } //connect them up


    var connectionChain = [this.input].concat(this._filters).concat([this.output]);

    _Tone.default.connectSeries.apply(_Tone.default, connectionChain);
  }
});
/**
 * Get the frequency response curve. This curve represets how the filter
 * responses to frequencies between 20hz-20khz. 
 * @param  {Number} [len=128] The number of values to return
 * @return {Float32Array}     The frequency response curve between 20-20k
 */

_Tone.default.Filter.prototype.getFrequencyResponse = function (len) {
  len = _Tone.default.defaultArg(len, 128); //start with all 1s

  var totalResponse = new Float32Array(len).map(function () {
    return 1;
  });
  var freqValues = new Float32Array(len);

  for (var i = 0; i < len; i++) {
    const norm = Math.pow(i / len, 2);
    var freq = norm * (20000 - 20) + 20;
    freqValues[i] = freq;
  }

  var magValues = new Float32Array(len);
  var phaseValues = new Float32Array(len);

  this._filters.forEach(function () {
    var filterClone = this.context.createBiquadFilter();
    filterClone.type = this._type;
    filterClone.Q.value = this.Q.value;
    filterClone.frequency.value = this.frequency.value;
    filterClone.gain.value = this.gain.value;
    filterClone.getFrequencyResponse(freqValues, magValues, phaseValues);
    magValues.forEach(function (val, i) {
      totalResponse[i] *= val;
    });
  }.bind(this));

  return totalResponse;
};
/**
 *  Clean up.
 *  @return {Tone.Filter} this
 */


_Tone.default.Filter.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  for (var i = 0; i < this._filters.length; i++) {
    this._filters[i].disconnect();

    this._filters[i] = null;
  }

  this._filters = null;

  this._writable(["detune", "frequency", "gain", "Q"]);

  this.frequency.dispose();
  this.Q.dispose();
  this.frequency = null;
  this.Q = null;
  this.detune.dispose();
  this.detune = null;
  this.gain.dispose();
  this.gain = null;
  return this;
};

var _default = _Tone.default.Filter;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/MultibandSplit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/Filter");

require("../signal/Signal");

require("../core/Gain");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Split the incoming signal into three bands (low, mid, high)
 *         with two crossover frequency controls.
 *
 *  @extends {Tone.AudioNode}
 *  @constructor
 *  @param {Frequency|Object} [lowFrequency] the low/mid crossover frequency
 *  @param {Frequency} [highFrequency] the mid/high crossover frequency
 */
_Tone.default.MultibandSplit = function () {
  var options = _Tone.default.defaults(arguments, ["lowFrequency", "highFrequency"], _Tone.default.MultibandSplit);

  _Tone.default.AudioNode.call(this);
  /**
   *  the input
   *  @type {Tone.Gain}
   *  @private
   */


  this.input = new _Tone.default.Gain();
  /**
   *  the outputs
   *  @type {Array}
   *  @private
   */

  this.output = new Array(3);
  /**
   *  The low band. Alias for <code>output[0]</code>
   *  @type {Tone.Filter}
   */

  this.low = this.output[0] = new _Tone.default.Filter(0, "lowpass");
  /**
   *  the lower filter of the mid band
   *  @type {Tone.Filter}
   *  @private
   */

  this._lowMidFilter = new _Tone.default.Filter(0, "highpass");
  /**
   *  The mid band output. Alias for <code>output[1]</code>
   *  @type {Tone.Filter}
   */

  this.mid = this.output[1] = new _Tone.default.Filter(0, "lowpass");
  /**
   *  The high band output. Alias for <code>output[2]</code>
   *  @type {Tone.Filter}
   */

  this.high = this.output[2] = new _Tone.default.Filter(0, "highpass");
  /**
   *  The low/mid crossover frequency.
   *  @type {Frequency}
   *  @signal
   */

  this.lowFrequency = new _Tone.default.Signal(options.lowFrequency, _Tone.default.Type.Frequency);
  /**
   *  The mid/high crossover frequency.
   *  @type {Frequency}
   *  @signal
   */

  this.highFrequency = new _Tone.default.Signal(options.highFrequency, _Tone.default.Type.Frequency);
  /**
   *  The quality of all the filters
   *  @type {Number}
   *  @signal
   */

  this.Q = new _Tone.default.Signal(options.Q);
  this.input.fan(this.low, this.high);
  this.input.chain(this._lowMidFilter, this.mid); //the frequency control signal

  this.lowFrequency.connect(this.low.frequency);
  this.lowFrequency.connect(this._lowMidFilter.frequency);
  this.highFrequency.connect(this.mid.frequency);
  this.highFrequency.connect(this.high.frequency); //the Q value

  this.Q.connect(this.low.Q);
  this.Q.connect(this._lowMidFilter.Q);
  this.Q.connect(this.mid.Q);
  this.Q.connect(this.high.Q);

  this._readOnly(["high", "mid", "low", "highFrequency", "lowFrequency"]);
};

_Tone.default.extend(_Tone.default.MultibandSplit, _Tone.default.AudioNode);
/**
 *  @private
 *  @static
 *  @type {Object}
 */


_Tone.default.MultibandSplit.defaults = {
  "lowFrequency": 400,
  "highFrequency": 2500,
  "Q": 1
};
/**
 *  Clean up.
 *  @returns {Tone.MultibandSplit} this
 */

_Tone.default.MultibandSplit.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._writable(["high", "mid", "low", "highFrequency", "lowFrequency"]);

  this.low.dispose();
  this.low = null;

  this._lowMidFilter.dispose();

  this._lowMidFilter = null;
  this.mid.dispose();
  this.mid = null;
  this.high.dispose();
  this.high = null;
  this.lowFrequency.dispose();
  this.lowFrequency = null;
  this.highFrequency.dispose();
  this.highFrequency = null;
  this.Q.dispose();
  this.Q = null;
  return this;
};

var _default = _Tone.default.MultibandSplit;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/Filter":"../node_modules/tone/tone/component/Filter.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/EQ3.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/MultibandSplit");

require("../core/Gain");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.EQ3 is a three band EQ with control over low, mid, and high gain as
 *         well as the low and high crossover frequencies.
 *
 *  @constructor
 *  @extends {Tone.AudioNode}
 *
 *  @param {Decibels|Object} [lowLevel] The gain applied to the lows.
 *  @param {Decibels} [midLevel] The gain applied to the mid.
 *  @param {Decibels} [highLevel] The gain applied to the high.
 *  @example
 * var eq = new Tone.EQ3(-10, 3, -20);
 */
_Tone.default.EQ3 = function () {
  var options = _Tone.default.defaults(arguments, ["low", "mid", "high"], _Tone.default.EQ3);

  _Tone.default.AudioNode.call(this);
  /**
   *  the output node
   *  @type {GainNode}
   *  @private
   */


  this.output = new _Tone.default.Gain();
  /**
   *  the multiband split
   *  @type {Tone.MultibandSplit}
   *  @private
   */

  this._multibandSplit = this.input = new _Tone.default.MultibandSplit({
    "lowFrequency": options.lowFrequency,
    "highFrequency": options.highFrequency
  });
  /**
   *  The gain for the lower signals
   *  @type  {Tone.Gain}
   *  @private
   */

  this._lowGain = new _Tone.default.Gain(options.low, _Tone.default.Type.Decibels);
  /**
   *  The gain for the mid signals
   *  @type  {Tone.Gain}
   *  @private
   */

  this._midGain = new _Tone.default.Gain(options.mid, _Tone.default.Type.Decibels);
  /**
   * The gain in decibels of the high part
   * @type {Tone.Gain}
   * @private
   */

  this._highGain = new _Tone.default.Gain(options.high, _Tone.default.Type.Decibels);
  /**
   * The gain in decibels of the low part
   * @type {Decibels}
   * @signal
   */

  this.low = this._lowGain.gain;
  /**
   * The gain in decibels of the mid part
   * @type {Decibels}
   * @signal
   */

  this.mid = this._midGain.gain;
  /**
   * The gain in decibels of the high part
   * @type {Decibels}
   * @signal
   */

  this.high = this._highGain.gain;
  /**
   *  The Q value for all of the filters.
   *  @type {Positive}
   *  @signal
   */

  this.Q = this._multibandSplit.Q;
  /**
   *  The low/mid crossover frequency.
   *  @type {Frequency}
   *  @signal
   */

  this.lowFrequency = this._multibandSplit.lowFrequency;
  /**
   *  The mid/high crossover frequency.
   *  @type {Frequency}
   *  @signal
   */

  this.highFrequency = this._multibandSplit.highFrequency; //the frequency bands

  this._multibandSplit.low.chain(this._lowGain, this.output);

  this._multibandSplit.mid.chain(this._midGain, this.output);

  this._multibandSplit.high.chain(this._highGain, this.output);

  this._readOnly(["low", "mid", "high", "lowFrequency", "highFrequency"]);
};

_Tone.default.extend(_Tone.default.EQ3, _Tone.default.AudioNode);
/**
 *  the default values
 */


_Tone.default.EQ3.defaults = {
  "low": 0,
  "mid": 0,
  "high": 0,
  "lowFrequency": 400,
  "highFrequency": 2500
};
/**
 *  clean up
 *  @returns {Tone.EQ3} this
 */

_Tone.default.EQ3.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._writable(["low", "mid", "high", "lowFrequency", "highFrequency"]);

  this._multibandSplit.dispose();

  this._multibandSplit = null;
  this.lowFrequency = null;
  this.highFrequency = null;

  this._lowGain.dispose();

  this._lowGain = null;

  this._midGain.dispose();

  this._midGain = null;

  this._highGain.dispose();

  this._highGain = null;
  this.low = null;
  this.mid = null;
  this.high = null;
  this.Q = null;
  return this;
};

var _default = _Tone.default.EQ3;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/MultibandSplit":"../node_modules/tone/tone/component/MultibandSplit.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/signal/Scale.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/Add");

require("../signal/Multiply");

require("../signal/Signal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Performs a linear scaling on an input signal.
 *          Scales a NormalRange input to between
 *          outputMin and outputMax.
 *
 *  @constructor
 *  @extends {Tone.SignalBase}
 *  @param {number} [outputMin=0] The output value when the input is 0. 
 *  @param {number} [outputMax=1]	The output value when the input is 1. 
 *  @example
 * var scale = new Tone.Scale(50, 100);
 * var signal = new Tone.Signal(0.5).connect(scale);
 * //the output of scale equals 75
 */
_Tone.default.Scale = function (outputMin, outputMax) {
  _Tone.default.SignalBase.call(this);
  /** 
   *  @private
   *  @type {number}
   */


  this._outputMin = _Tone.default.defaultArg(outputMin, 0);
  /** 
   *  @private
   *  @type {number}
   */

  this._outputMax = _Tone.default.defaultArg(outputMax, 1);
  /** 
   *  @private
   *  @type {Tone.Multiply}
   *  @private
   */

  this._scale = this.input = new _Tone.default.Multiply(1);
  /** 
   *  @private
   *  @type {Tone.Add}
   *  @private
   */

  this._add = this.output = new _Tone.default.Add(0);

  this._scale.connect(this._add);

  this._setRange();
};

_Tone.default.extend(_Tone.default.Scale, _Tone.default.SignalBase);
/**
 * The minimum output value. This number is output when 
 * the value input value is 0. 
 * @memberOf Tone.Scale#
 * @type {number}
 * @name min
 */


Object.defineProperty(_Tone.default.Scale.prototype, "min", {
  get: function () {
    return this._outputMin;
  },
  set: function (min) {
    this._outputMin = min;

    this._setRange();
  }
});
/**
 * The maximum output value. This number is output when 
 * the value input value is 1. 
 * @memberOf Tone.Scale#
 * @type {number}
 * @name max
 */

Object.defineProperty(_Tone.default.Scale.prototype, "max", {
  get: function () {
    return this._outputMax;
  },
  set: function (max) {
    this._outputMax = max;

    this._setRange();
  }
});
/**
 *  set the values
 *  @private
 */

_Tone.default.Scale.prototype._setRange = function () {
  this._add.value = this._outputMin;
  this._scale.value = this._outputMax - this._outputMin;
};
/**
 *  Clean up.
 *  @returns {Tone.Scale} this
 */


_Tone.default.Scale.prototype.dispose = function () {
  _Tone.default.SignalBase.prototype.dispose.call(this);

  this._add.dispose();

  this._add = null;

  this._scale.dispose();

  this._scale = null;
  return this;
};

var _default = _Tone.default.Scale;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/Add":"../node_modules/tone/tone/signal/Add.js","../signal/Multiply":"../node_modules/tone/tone/signal/Multiply.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js"}],"../node_modules/tone/tone/signal/ScaleExp.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/Scale");

require("../signal/Pow");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Performs an exponential scaling on an input signal.
 *          Scales a NormalRange value [0,1] exponentially
 *          to the output range of outputMin to outputMax.
 *
 *  @constructor
 *  @extends {Tone.SignalBase}
 *  @param {number} [outputMin=0] The output value when the input is 0.
 *  @param {number} [outputMax=1]	The output value when the input is 1.
 *  @param {number} [exponent=2] The exponent which scales the incoming signal.
 *  @example
 * var scaleExp = new Tone.ScaleExp(0, 100, 2);
 * var signal = new Tone.Signal(0.5).connect(scaleExp);
 */
_Tone.default.ScaleExp = function (outputMin, outputMax, exponent) {
  _Tone.default.SignalBase.call(this);
  /**
   *  scale the input to the output range
   *  @type {Tone.Scale}
   *  @private
   */


  this._scale = this.output = new _Tone.default.Scale(outputMin, outputMax);
  /**
   *  @private
   *  @type {Tone.Pow}
   *  @private
   */

  this._exp = this.input = new _Tone.default.Pow(_Tone.default.defaultArg(exponent, 2));

  this._exp.connect(this._scale);
};

_Tone.default.extend(_Tone.default.ScaleExp, _Tone.default.SignalBase);
/**
 * Instead of interpolating linearly between the <code>min</code> and
 * <code>max</code> values, setting the exponent will interpolate between
 * the two values with an exponential curve.
 * @memberOf Tone.ScaleExp#
 * @type {number}
 * @name exponent
 */


Object.defineProperty(_Tone.default.ScaleExp.prototype, "exponent", {
  get: function () {
    return this._exp.value;
  },
  set: function (exp) {
    this._exp.value = exp;
  }
});
/**
 * The minimum output value. This number is output when
 * the value input value is 0.
 * @memberOf Tone.ScaleExp#
 * @type {number}
 * @name min
 */

Object.defineProperty(_Tone.default.ScaleExp.prototype, "min", {
  get: function () {
    return this._scale.min;
  },
  set: function (min) {
    this._scale.min = min;
  }
});
/**
 * The maximum output value. This number is output when
 * the value input value is 1.
 * @memberOf Tone.ScaleExp#
 * @type {number}
 * @name max
 */

Object.defineProperty(_Tone.default.ScaleExp.prototype, "max", {
  get: function () {
    return this._scale.max;
  },
  set: function (max) {
    this._scale.max = max;
  }
});
/**
 *  Clean up.
 *  @returns {Tone.ScaleExp} this
 */

_Tone.default.ScaleExp.prototype.dispose = function () {
  _Tone.default.SignalBase.prototype.dispose.call(this);

  this._scale.dispose();

  this._scale = null;

  this._exp.dispose();

  this._exp = null;
  return this;
};

var _default = _Tone.default.ScaleExp;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/Scale":"../node_modules/tone/tone/signal/Scale.js","../signal/Pow":"../node_modules/tone/tone/signal/Pow.js"}],"../node_modules/tone/tone/core/Delay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Param");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Wrapper around Web Audio's native [DelayNode](http://webaudio.github.io/web-audio-api/#the-delaynode-interface).
 *  @extends {Tone}
 *  @param {Time=} delayTime The delay applied to the incoming signal.
 *  @param {Time=} maxDelay The maximum delay time.
 */
_Tone.default.Delay = function () {
  var options = _Tone.default.defaults(arguments, ["delayTime", "maxDelay"], _Tone.default.Delay);

  _Tone.default.AudioNode.call(this, options);
  /**
   * The maximum delay time initialized with the node
   * @type {Number}
   * @private
   */


  this._maxDelay = Math.max(this.toSeconds(options.maxDelay), this.toSeconds(options.delayTime));
  /**
   *  The native delay node
   *  @type {DelayNode}
   *  @private
   */

  this._delayNode = this.input = this.output = this.context.createDelay(this._maxDelay);
  /**
   *  The amount of time the incoming signal is
   *  delayed.
   *  @type {Time}
   *  @signal
   */

  this.delayTime = new _Tone.default.Param({
    "param": this._delayNode.delayTime,
    "units": _Tone.default.Type.Time,
    "value": options.delayTime
  });

  this._readOnly("delayTime");
};

_Tone.default.extend(_Tone.default.Delay, _Tone.default.AudioNode);
/**
 *  The defaults
 *  @const
 *  @type  {Object}
 */


_Tone.default.Delay.defaults = {
  "maxDelay": 1,
  "delayTime": 0
};
/**
 * The maximum delay time. This cannot be changed. The value is passed into the constructor.
 * @memberof Tone.Delay#
 * @type {Time}
 * @name maxDelay
 * @readOnly
 */

Object.defineProperty(_Tone.default.Delay.prototype, "maxDelay", {
  get: function () {
    return this._maxDelay;
  }
});
/**
 *  Clean up.
 *  @return  {Tone.Delay}  this
 */

_Tone.default.Delay.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._delayNode.disconnect();

  this._delayNode = null;

  this._writable("delayTime");

  this.delayTime = null;
  return this;
};

var _default = _Tone.default.Delay;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Param":"../node_modules/tone/tone/core/Param.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/FeedbackCombFilter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/ScaleExp");

require("../signal/Signal");

require("../core/Param");

require("../core/Delay");

require("../core/Gain");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Comb filters are basic building blocks for physical modeling. Read more
 *         about comb filters on [CCRMA's website](https://ccrma.stanford.edu/~jos/pasp/Feedback_Comb_Filters.html).
 *
 *  @extends {Tone.AudioNode}
 *  @constructor
 *  @param {Time|Object} [delayTime] The delay time of the filter.
 *  @param {NormalRange=} resonance The amount of feedback the filter has.
 */
_Tone.default.FeedbackCombFilter = function () {
  var options = _Tone.default.defaults(arguments, ["delayTime", "resonance"], _Tone.default.FeedbackCombFilter);

  _Tone.default.AudioNode.call(this);
  /**
   *  the delay node
   *  @type {DelayNode}
   *  @private
   */


  this._delay = this.input = this.output = new _Tone.default.Delay(options.delayTime);
  /**
   *  The amount of delay of the comb filter.
   *  @type {Time}
   *  @signal
   */

  this.delayTime = this._delay.delayTime;
  /**
   *  the feedback node
   *  @type {GainNode}
   *  @private
   */

  this._feedback = new _Tone.default.Gain(options.resonance, _Tone.default.Type.NormalRange);
  /**
   *  The amount of feedback of the delayed signal.
   *  @type {NormalRange}
   *  @signal
   */

  this.resonance = this._feedback.gain;

  this._delay.chain(this._feedback, this._delay);

  this._readOnly(["resonance", "delayTime"]);
};

_Tone.default.extend(_Tone.default.FeedbackCombFilter, _Tone.default.AudioNode);
/**
 *  the default parameters
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.FeedbackCombFilter.defaults = {
  "delayTime": 0.1,
  "resonance": 0.5
};
/**
 *  clean up
 *  @returns {Tone.FeedbackCombFilter} this
 */

_Tone.default.FeedbackCombFilter.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._writable(["resonance", "delayTime"]);

  this._delay.dispose();

  this._delay = null;
  this.delayTime = null;

  this._feedback.dispose();

  this._feedback = null;
  this.resonance = null;
  return this;
};

var _default = _Tone.default.FeedbackCombFilter;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/ScaleExp":"../node_modules/tone/tone/signal/ScaleExp.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../core/Param":"../node_modules/tone/tone/core/Param.js","../core/Delay":"../node_modules/tone/tone/core/Delay.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/FFT.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/Analyser");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Get the current frequency data of the connected audio source
 *          using a fast Fourier transform.
 *  @extends {Tone.AudioNode}
 *  @param {Number=} size The size of the FFT. Value must be a power of
 *                       two in the range 16 to 16384.
 */
_Tone.default.FFT = function () {
  var options = _Tone.default.defaults(arguments, ["size"], _Tone.default.FFT);

  options.type = _Tone.default.Analyser.Type.FFT;

  _Tone.default.AudioNode.call(this);
  /**
   *  The analyser node.
   *  @private
   *  @type {Tone.Analyser}
   */


  this._analyser = this.input = this.output = new _Tone.default.Analyser(options);
};

_Tone.default.extend(_Tone.default.FFT, _Tone.default.AudioNode);
/**
 *  The default values.
 *  @type {Object}
 *  @const
 */


_Tone.default.FFT.defaults = {
  "size": 1024
};
/**
 *  Gets the current frequency data from the connected audio source. 
 *  Returns the frequency data of length [size](#size) as a Float32Array of decibel values. 
 *  @returns {TypedArray}
 */

_Tone.default.FFT.prototype.getValue = function () {
  return this._analyser.getValue();
};
/**
 *  The size of analysis. This must be a power of two in the range 16 to 16384.
 *  Determines the size of the array returned by [getValue](#getvalue) (i.e. the number of
 *  frequency bins). Large FFT sizes may be costly to compute.
 *  @memberOf Tone.FFT#
 *  @type {Number}
 *  @name size
 */


Object.defineProperty(_Tone.default.FFT.prototype, "size", {
  get: function () {
    return this._analyser.size;
  },
  set: function (size) {
    this._analyser.size = size;
  }
});
/**
 *  Clean up.
 *  @return  {Tone.FFT}  this
 */

_Tone.default.FFT.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._analyser.dispose();

  this._analyser = null;
};

var _default = _Tone.default.FFT;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/Analyser":"../node_modules/tone/tone/component/Analyser.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/signal/Abs.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/WaveShaper");

require("../signal/SignalBase");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Return the absolute value of an incoming signal.
 *
 *  @constructor
 *  @extends {Tone.SignalBase}
 *  @example
 * var signal = new Tone.Signal(-1);
 * var abs = new Tone.Abs();
 * signal.connect(abs);
 * //the output of abs is 1.
 */
_Tone.default.Abs = function () {
  _Tone.default.SignalBase.call(this);
  /**
   *  @type {Tone.LessThan}
   *  @private
   */


  this._abs = this.input = this.output = new _Tone.default.WaveShaper(function (val) {
    if (Math.abs(val) < 0.001) {
      return 0;
    } else {
      return Math.abs(val);
    }
  }, 1024);
};

_Tone.default.extend(_Tone.default.Abs, _Tone.default.SignalBase);
/**
 *  dispose method
 *  @returns {Tone.Abs} this
 */


_Tone.default.Abs.prototype.dispose = function () {
  _Tone.default.SignalBase.prototype.dispose.call(this);

  this._abs.dispose();

  this._abs = null;
  return this;
};

var _default = _Tone.default.Abs;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/WaveShaper":"../node_modules/tone/tone/signal/WaveShaper.js","../signal/SignalBase":"../node_modules/tone/tone/signal/SignalBase.js"}],"../node_modules/tone/tone/component/Follower.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/Abs");

require("../signal/Subtract");

require("../signal/Signal");

require("../type/Type");

require("../core/Delay");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.Follower is a  crude envelope follower which will follow
 *          the amplitude of an incoming signal. Read more about envelope followers (also known
 *          as envelope detectors) on [Wikipedia](https://en.wikipedia.org/wiki/Envelope_detector).
 *
 *  @constructor
 *  @extends {Tone.AudioNode}
 *  @param {Time} [smoothing=0.05] The rate of change of the follower.
 *  @example
 * var follower = new Tone.Follower(0.3);
 */
_Tone.default.Follower = function () {
  var options = _Tone.default.defaults(arguments, ["smoothing"], _Tone.default.Follower);

  _Tone.default.AudioNode.call(this);

  this.createInsOuts(1, 1);
  /**
   *  @type {Tone.Abs}
   *  @private
   */

  this._abs = new _Tone.default.Abs();
  /**
   *  the lowpass filter which smooths the input
   *  @type {BiquadFilterNode}
   *  @private
   */

  this._filter = this.context.createBiquadFilter();
  this._filter.type = "lowpass";
  this._filter.frequency.value = 0;
  this._filter.Q.value = 0;
  /**
   *  @type {Tone.Subtract}
   *  @private
   */

  this._sub = new _Tone.default.Subtract();
  /**
   *  delay node to compare change over time
   *  @type {Tone.Delay}
   *  @private
   */

  this._delay = new _Tone.default.Delay(this.blockTime);
  /**
   *  the smoothing value
   *  @private
   *  @type {Number}
   */

  this._smoothing = options.smoothing;

  _Tone.default.connect(this.input, this._delay);

  _Tone.default.connect(this.input, this._sub, 0, 1);

  this._sub.chain(this._abs, this._filter, this.output); //set the smoothing initially


  this.smoothing = options.smoothing;
};

_Tone.default.extend(_Tone.default.Follower, _Tone.default.AudioNode);
/**
 *  @static
 *  @type {Object}
 */


_Tone.default.Follower.defaults = {
  "smoothing": 0.05
};
/**
 * The attack time.
 * @memberOf Tone.Follower#
 * @type {Time}
 * @name smoothing
 */

Object.defineProperty(_Tone.default.Follower.prototype, "smoothing", {
  get: function () {
    return this._smoothing;
  },
  set: function (smoothing) {
    this._smoothing = smoothing;
    this._filter.frequency.value = _Tone.default.Time(smoothing).toFrequency() * 0.5;
  }
});
/**
 *  Borrows the connect method from Signal so that the output can be used
 *  as a Tone.Signal control signal.
 *  @function
 */

_Tone.default.Follower.prototype.connect = _Tone.default.SignalBase.prototype.connect;
/**
 *  dispose
 *  @returns {Tone.Follower} this
 */

_Tone.default.Follower.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._filter.disconnect();

  this._filter = null;

  this._delay.dispose();

  this._delay = null;

  this._sub.disconnect();

  this._sub = null;

  this._abs.dispose();

  this._abs = null;
  return this;
};

var _default = _Tone.default.Follower;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/Abs":"../node_modules/tone/tone/signal/Abs.js","../signal/Subtract":"../node_modules/tone/tone/signal/Subtract.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../type/Type":"../node_modules/tone/tone/type/Type.js","../core/Delay":"../node_modules/tone/tone/core/Delay.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/ScaledEnvelope.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/Envelope");

require("../signal/Scale");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.ScaledEnvelop is an envelope which can be scaled
 *         to any range. It's useful for applying an envelope
 *         to a frequency or any other non-NormalRange signal
 *         parameter.
 *
 *  @extends {Tone.Envelope}
 *  @constructor
 *  @param {Time|Object} [attack]	the attack time in seconds
 *  @param {Time} [decay]	the decay time in seconds
 *  @param {number} [sustain] 	a percentage (0-1) of the full amplitude
 *  @param {Time} [release]	the release time in seconds
 *  @example
 *  var scaledEnv = new Tone.ScaledEnvelope({
 *  	"attack" : 0.2,
 *  	"min" : 200,
 *  	"max" : 2000
 *  });
 *  scaledEnv.connect(oscillator.frequency);
 */
_Tone.default.ScaledEnvelope = function () {
  //get all of the defaults
  var options = _Tone.default.defaults(arguments, ["attack", "decay", "sustain", "release"], _Tone.default.Envelope);

  _Tone.default.Envelope.call(this, options);

  options = _Tone.default.defaultArg(options, _Tone.default.ScaledEnvelope.defaults);
  /**
   *  scale the incoming signal by an exponent
   *  @type {Tone.Pow}
   *  @private
   */

  this._exp = this.output = new _Tone.default.Pow(options.exponent);
  /**
   *  scale the signal to the desired range
   *  @type {Tone.Multiply}
   *  @private
   */

  this._scale = this.output = new _Tone.default.Scale(options.min, options.max);

  this._sig.chain(this._exp, this._scale);
};

_Tone.default.extend(_Tone.default.ScaledEnvelope, _Tone.default.Envelope);
/**
 *  the default parameters
 *  @static
 */


_Tone.default.ScaledEnvelope.defaults = {
  "min": 0,
  "max": 1,
  "exponent": 1
};
/**
 * The envelope's min output value. This is the value which it
 * starts at.
 * @memberOf Tone.ScaledEnvelope#
 * @type {number}
 * @name min
 */

Object.defineProperty(_Tone.default.ScaledEnvelope.prototype, "min", {
  get: function () {
    return this._scale.min;
  },
  set: function (min) {
    this._scale.min = min;
  }
});
/**
 * The envelope's max output value. In other words, the value
 * at the peak of the attack portion of the envelope.
 * @memberOf Tone.ScaledEnvelope#
 * @type {number}
 * @name max
 */

Object.defineProperty(_Tone.default.ScaledEnvelope.prototype, "max", {
  get: function () {
    return this._scale.max;
  },
  set: function (max) {
    this._scale.max = max;
  }
});
/**
 * The envelope's exponent value.
 * @memberOf Tone.ScaledEnvelope#
 * @type {number}
 * @name exponent
 */

Object.defineProperty(_Tone.default.ScaledEnvelope.prototype, "exponent", {
  get: function () {
    return this._exp.value;
  },
  set: function (exp) {
    this._exp.value = exp;
  }
});
/**
 *  clean up
 *  @returns {Tone.ScaledEnvelope} this
 */

_Tone.default.ScaledEnvelope.prototype.dispose = function () {
  _Tone.default.Envelope.prototype.dispose.call(this);

  this._scale.dispose();

  this._scale = null;

  this._exp.dispose();

  this._exp = null;
  return this;
};

var _default = _Tone.default.ScaledEnvelope;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/Envelope":"../node_modules/tone/tone/component/Envelope.js","../signal/Scale":"../node_modules/tone/tone/signal/Scale.js"}],"../node_modules/tone/tone/component/FrequencyEnvelope.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/ScaledEnvelope");

require("../component/Envelope");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.FrequencyEnvelope is a Tone.ScaledEnvelope, but instead of `min` and `max`
 *         it's got a `baseFrequency` and `octaves` parameter.
 *
 *  @extends {Tone.Envelope}
 *  @constructor
 *  @param {Time|Object} [attack]	the attack time in seconds
 *  @param {Time} [decay]	the decay time in seconds
 *  @param {number} [sustain] 	a percentage (0-1) of the full amplitude
 *  @param {Time} [release]	the release time in seconds
 *  @example
 *  var freqEnv = new Tone.FrequencyEnvelope({
 *  	"attack" : 0.2,
 *  	"baseFrequency" : "C2",
 *  	"octaves" : 4
 *  });
 *  freqEnv.connect(oscillator.frequency);
 */
_Tone.default.FrequencyEnvelope = function () {
  var options = _Tone.default.defaults(arguments, ["attack", "decay", "sustain", "release"], _Tone.default.Envelope); //merge it with the frequency envelope defaults


  options = _Tone.default.defaultArg(options, _Tone.default.FrequencyEnvelope.defaults);

  _Tone.default.ScaledEnvelope.call(this, options);
  /**
   *  Stores the octave value
   *  @type {Positive}
   *  @private
   */


  this._octaves = options.octaves; //setup

  this.baseFrequency = options.baseFrequency;
  this.octaves = options.octaves;
  this.exponent = options.exponent;
};

_Tone.default.extend(_Tone.default.FrequencyEnvelope, _Tone.default.Envelope);
/**
 *  the default parameters
 *  @static
 */


_Tone.default.FrequencyEnvelope.defaults = {
  "baseFrequency": 200,
  "octaves": 4,
  "exponent": 1
};
/**
 * The envelope's mininum output value. This is the value which it
 * starts at.
 * @memberOf Tone.FrequencyEnvelope#
 * @type {Frequency}
 * @name baseFrequency
 */

Object.defineProperty(_Tone.default.FrequencyEnvelope.prototype, "baseFrequency", {
  get: function () {
    return this._scale.min;
  },
  set: function (min) {
    this._scale.min = this.toFrequency(min); //also update the octaves

    this.octaves = this._octaves;
  }
});
/**
 * The number of octaves above the baseFrequency that the
 * envelope will scale to.
 * @memberOf Tone.FrequencyEnvelope#
 * @type {Positive}
 * @name octaves
 */

Object.defineProperty(_Tone.default.FrequencyEnvelope.prototype, "octaves", {
  get: function () {
    return this._octaves;
  },
  set: function (octaves) {
    this._octaves = octaves;
    this._scale.max = this.baseFrequency * Math.pow(2, octaves);
  }
});
/**
 * The envelope's exponent value.
 * @memberOf Tone.FrequencyEnvelope#
 * @type {number}
 * @name exponent
 */

Object.defineProperty(_Tone.default.FrequencyEnvelope.prototype, "exponent", {
  get: function () {
    return this._exp.value;
  },
  set: function (exp) {
    this._exp.value = exp;
  }
});
/**
 *  clean up
 *  @returns {Tone.FrequencyEnvelope} this
 */

_Tone.default.FrequencyEnvelope.prototype.dispose = function () {
  _Tone.default.ScaledEnvelope.prototype.dispose.call(this);

  return this;
};

var _default = _Tone.default.FrequencyEnvelope;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/ScaledEnvelope":"../node_modules/tone/tone/component/ScaledEnvelope.js","../component/Envelope":"../node_modules/tone/tone/component/Envelope.js"}],"../node_modules/tone/tone/signal/GreaterThanZero.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/Signal");

require("../signal/Multiply");

require("../signal/WaveShaper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  GreaterThanZero outputs 1 when the input is strictly greater than zero
 *
 *  @constructor
 *  @extends {Tone.SignalBase}
 *  @example
 * var gt0 = new Tone.GreaterThanZero();
 * var sig = new Tone.Signal(0.01).connect(gt0);
 * //the output of gt0 is 1.
 * sig.value = 0;
 * //the output of gt0 is 0.
 */
_Tone.default.GreaterThanZero = function () {
  _Tone.default.SignalBase.call(this);
  /**
   *  @type {Tone.WaveShaper}
   *  @private
   */


  this._thresh = this.output = new _Tone.default.WaveShaper(function (val) {
    if (val <= 0) {
      return 0;
    } else {
      return 1;
    }
  }, 127);
  /**
   *  scale the first thresholded signal by a large value.
   *  this will help with values which are very close to 0
   *  @type {Tone.Multiply}
   *  @private
   */

  this._scale = this.input = new _Tone.default.Multiply(10000); //connections

  this._scale.connect(this._thresh);
};

_Tone.default.extend(_Tone.default.GreaterThanZero, _Tone.default.SignalBase);
/**
 *  dispose method
 *  @returns {Tone.GreaterThanZero} this
 */


_Tone.default.GreaterThanZero.prototype.dispose = function () {
  _Tone.default.SignalBase.prototype.dispose.call(this);

  this._scale.dispose();

  this._scale = null;

  this._thresh.dispose();

  this._thresh = null;
  return this;
};

var _default = _Tone.default.GreaterThanZero;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../signal/Multiply":"../node_modules/tone/tone/signal/Multiply.js","../signal/WaveShaper":"../node_modules/tone/tone/signal/WaveShaper.js"}],"../node_modules/tone/tone/signal/GreaterThan.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/GreaterThanZero");

require("../signal/Subtract");

require("../signal/Signal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Output 1 if the signal is greater than the value, otherwise outputs 0.
 *          can compare two signals or a signal and a number.
 *
 *  @constructor
 *  @extends {Tone.Signal}
 *  @param {number} [value=0] the value to compare to the incoming signal
 *  @example
 * var gt = new Tone.GreaterThan(2);
 * var sig = new Tone.Signal(4).connect(gt);
 * //output of gt is equal 1.
 */
_Tone.default.GreaterThan = function (value) {
  _Tone.default.Signal.call(this);

  this.createInsOuts(2, 0);
  /**
   *  subtract the amount from the incoming signal
   *  @type {Tone.Subtract}
   *  @private
   */

  this._param = this.input[0] = new _Tone.default.Subtract(value);
  this.input[1] = this._param.input[1];
  /**
   *  compare that amount to zero
   *  @type {Tone.GreaterThanZero}
   *  @private
   */

  this._gtz = this.output = new _Tone.default.GreaterThanZero(); //connect

  this._param.connect(this._gtz);
};

_Tone.default.extend(_Tone.default.GreaterThan, _Tone.default.Signal);
/**
 *  dispose method
 *  @returns {Tone.GreaterThan} this
 */


_Tone.default.GreaterThan.prototype.dispose = function () {
  _Tone.default.Signal.prototype.dispose.call(this);

  this._gtz.dispose();

  this._gtz = null;
  return this;
};

var _default = _Tone.default.GreaterThan;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/GreaterThanZero":"../node_modules/tone/tone/signal/GreaterThanZero.js","../signal/Subtract":"../node_modules/tone/tone/signal/Subtract.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js"}],"../node_modules/tone/tone/component/Gate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/Follower");

require("../signal/GreaterThan");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.Gate only passes a signal through when the incoming
 *          signal exceeds a specified threshold. To do this, Gate uses
 *          a Tone.Follower to follow the amplitude of the incoming signal.
 *          A common implementation of this class is a [Noise Gate](https://en.wikipedia.org/wiki/Noise_gate).
 *
 *  @constructor
 *  @extends {Tone.AudioNode}
 *  @param {Decibels|Object} [threshold] The threshold above which the gate will open.
 *  @param {Time=} smoothing The follower's smoothing time
 *  @example
 * var gate = new Tone.Gate(-30, 0.2, 0.3).toMaster();
 * var mic = new Tone.UserMedia().connect(gate);
 * //the gate will only pass through the incoming
 * //signal when it's louder than -30db
 */
_Tone.default.Gate = function () {
  var options = _Tone.default.defaults(arguments, ["threshold", "smoothing"], _Tone.default.Gate);

  _Tone.default.AudioNode.call(this);

  this.createInsOuts(1, 1);
  /**
   *  @type {Tone.Follower}
   *  @private
   */

  this._follower = new _Tone.default.Follower(options.smoothing);
  /**
   *  @type {Tone.GreaterThan}
   *  @private
   */

  this._gt = new _Tone.default.GreaterThan(_Tone.default.dbToGain(options.threshold)); //the connections

  _Tone.default.connect(this.input, this.output); //the control signal


  _Tone.default.connectSeries(this.input, this._follower, this._gt, this.output.gain);
};

_Tone.default.extend(_Tone.default.Gate, _Tone.default.AudioNode);
/**
 *  @const
 *  @static
 *  @type {Object}
 */


_Tone.default.Gate.defaults = {
  "smoothing": 0.1,
  "threshold": -40
};
/**
 * The threshold of the gate in decibels
 * @memberOf Tone.Gate#
 * @type {Decibels}
 * @name threshold
 */

Object.defineProperty(_Tone.default.Gate.prototype, "threshold", {
  get: function () {
    return _Tone.default.gainToDb(this._gt.value);
  },
  set: function (thresh) {
    this._gt.value = _Tone.default.dbToGain(thresh);
  }
});
/**
 * The attack/decay speed of the gate
 * @memberOf Tone.Gate#
 * @type {Time}
 * @name smoothing
 */

Object.defineProperty(_Tone.default.Gate.prototype, "smoothing", {
  get: function () {
    return this._follower.smoothing;
  },
  set: function (smoothingTime) {
    this._follower.smoothing = smoothingTime;
  }
});
/**
 *  Clean up.
 *  @returns {Tone.Gate} this
 */

_Tone.default.Gate.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._follower.dispose();

  this._gt.dispose();

  this._follower = null;
  this._gt = null;
  return this;
};

var _default = _Tone.default.Gate;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/Follower":"../node_modules/tone/tone/component/Follower.js","../signal/GreaterThan":"../node_modules/tone/tone/signal/GreaterThan.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/signal/TickSignal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/Signal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class Tone.TickSignal extends Tone.Signal, but adds the capability
 *        to calculate the number of elapsed ticks. exponential and target curves
 *        are approximated with multiple linear ramps.
 *
 *        Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos, for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)
 *        describing integrating timing functions for tempo calculations.
 *
 * @param {Number} value The initial value of the signal
 * @extends {Tone.Signal}
 */
_Tone.default.TickSignal = function (value) {
  value = _Tone.default.defaultArg(value, 1);

  _Tone.default.Signal.call(this, {
    "units": _Tone.default.Type.Ticks,
    "value": value
  }); //extend the memory


  this._events.memory = Infinity; //clear the clock from the beginning

  this.cancelScheduledValues(0); //set an initial event

  this._events.add({
    "type": _Tone.default.Param.AutomationType.SetValue,
    "time": 0,
    "value": value
  });
};

_Tone.default.extend(_Tone.default.TickSignal, _Tone.default.Signal);
/**
 * Wraps Tone.Signal methods so that they also
 * record the ticks.
 * @param  {Function} method
 * @return {Function}
 * @private
 */


function _wrapScheduleMethods(method) {
  return function (value, time) {
    time = this.toSeconds(time);
    method.apply(this, arguments);

    var event = this._events.get(time);

    var previousEvent = this._events.previousEvent(event);

    var ticksUntilTime = this._getTicksUntilEvent(previousEvent, time);

    event.ticks = Math.max(ticksUntilTime, 0);
    return this;
  };
}

_Tone.default.TickSignal.prototype.setValueAtTime = _wrapScheduleMethods(_Tone.default.Signal.prototype.setValueAtTime);
_Tone.default.TickSignal.prototype.linearRampToValueAtTime = _wrapScheduleMethods(_Tone.default.Signal.prototype.linearRampToValueAtTime);
/**
 *  Start exponentially approaching the target value at the given time with
 *  a rate having the given time constant.
 *  @param {number} value
 *  @param {Time} startTime
 *  @param {number} timeConstant
 *  @returns {Tone.TickSignal} this
 */

_Tone.default.TickSignal.prototype.setTargetAtTime = function (value, time, constant) {
  //aproximate it with multiple linear ramps
  time = this.toSeconds(time);
  this.setRampPoint(time);
  value = this._fromUnits(value); //start from previously scheduled value

  var prevEvent = this._events.get(time);

  var segments = Math.round(Math.max(1 / constant, 1));

  for (var i = 0; i <= segments; i++) {
    var segTime = constant * i + time;

    var rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, value, constant, segTime);

    this.linearRampToValueAtTime(this._toUnits(rampVal), segTime);
  }

  return this;
};
/**
 *  Schedules an exponential continuous change in parameter value from
 *  the previous scheduled parameter value to the given value.
 *  @param  {number} value
 *  @param  {Time} endTime
 *  @returns {Tone.TickSignal} this
 */


_Tone.default.TickSignal.prototype.exponentialRampToValueAtTime = function (value, time) {
  //aproximate it with multiple linear ramps
  time = this.toSeconds(time);
  value = this._fromUnits(value); //start from previously scheduled value

  var prevEvent = this._events.get(time); //approx 10 segments per second


  var segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));
  var segmentDur = (time - prevEvent.time) / segments;

  for (var i = 0; i <= segments; i++) {
    var segTime = segmentDur * i + prevEvent.time;

    var rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, value, segTime);

    this.linearRampToValueAtTime(this._toUnits(rampVal), segTime);
  }

  return this;
};
/**
 * Returns the tick value at the time. Takes into account
 * any automation curves scheduled on the signal.
 * @private
 * @param  {Time} time The time to get the tick count at
 * @return {Ticks}      The number of ticks which have elapsed at the time
 *                          given any automations.
 */


_Tone.default.TickSignal.prototype._getTicksUntilEvent = function (event, time) {
  if (event === null) {
    event = {
      "ticks": 0,
      "time": 0
    };
  } else if (_Tone.default.isUndef(event.ticks)) {
    var previousEvent = this._events.previousEvent(event);

    event.ticks = this._getTicksUntilEvent(previousEvent, event.time);
  }

  var val0 = this.getValueAtTime(event.time);
  var val1 = this.getValueAtTime(time); //if it's right on the line, take the previous value

  if (this._events.get(time).time === time && this._events.get(time).type === _Tone.default.Param.AutomationType.SetValue) {
    val1 = this.getValueAtTime(time - this.sampleTime);
  }

  return 0.5 * (time - event.time) * (val0 + val1) + event.ticks;
};
/**
 * Returns the tick value at the time. Takes into account
 * any automation curves scheduled on the signal.
 * @param  {Time} time The time to get the tick count at
 * @return {Ticks}      The number of ticks which have elapsed at the time
 *                          given any automations.
 */


_Tone.default.TickSignal.prototype.getTicksAtTime = function (time) {
  time = this.toSeconds(time);

  var event = this._events.get(time);

  return Math.max(this._getTicksUntilEvent(event, time), 0);
};
/**
 * Return the elapsed time of the number of ticks from the given time
 * @param {Ticks} ticks The number of ticks to calculate
 * @param  {Time} time The time to get the next tick from
 * @return {Seconds} The duration of the number of ticks from the given time in seconds
 */


_Tone.default.TickSignal.prototype.getDurationOfTicks = function (ticks, time) {
  time = this.toSeconds(time);
  var currentTick = this.getTicksAtTime(time);
  return this.getTimeOfTick(currentTick + ticks) - time;
};
/**
 * Given a tick, returns the time that tick occurs at.
 * @param  {Ticks} tick
 * @return {Time}      The time that the tick occurs.
 */


_Tone.default.TickSignal.prototype.getTimeOfTick = function (tick) {
  var before = this._events.get(tick, "ticks");

  var after = this._events.getAfter(tick, "ticks");

  if (before && before.ticks === tick) {
    return before.time;
  } else if (before && after && after.type === _Tone.default.Param.AutomationType.Linear && before.value !== after.value) {
    var val0 = this.getValueAtTime(before.time);
    var val1 = this.getValueAtTime(after.time);
    var delta = (val1 - val0) / (after.time - before.time);
    var k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));
    var sol1 = (-val0 + k) / delta;
    var sol2 = (-val0 - k) / delta;
    return (sol1 > 0 ? sol1 : sol2) + before.time;
  } else if (before) {
    if (before.value === 0) {
      return Infinity;
    } else {
      return before.time + (tick - before.ticks) / before.value;
    }
  } else {
    return tick / this._initialValue;
  }
};
/**
 * Convert some number of ticks their the duration in seconds accounting
 * for any automation curves starting at the given time.
 * @param  {Ticks} ticks The number of ticks to convert to seconds.
 * @param  {Time} [when=now]  When along the automation timeline to convert the ticks.
 * @return {Tone.Time}       The duration in seconds of the ticks.
 */


_Tone.default.TickSignal.prototype.ticksToTime = function (ticks, when) {
  when = this.toSeconds(when);
  return new _Tone.default.Time(this.getDurationOfTicks(ticks, when));
};
/**
 * The inverse of [ticksToTime](#tickstotime). Convert a duration in
 * seconds to the corresponding number of ticks accounting for any
 * automation curves starting at the given time.
 * @param  {Time} duration The time interval to convert to ticks.
 * @param  {Time} [when=now]     When along the automation timeline to convert the ticks.
 * @return {Tone.Ticks}          The duration in ticks.
 */


_Tone.default.TickSignal.prototype.timeToTicks = function (duration, when) {
  when = this.toSeconds(when);
  duration = this.toSeconds(duration);
  var startTicks = this.getTicksAtTime(when);
  var endTicks = this.getTicksAtTime(when + duration);
  return new _Tone.default.Ticks(endTicks - startTicks);
};

var _default = _Tone.default.TickSignal;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js"}],"../node_modules/tone/tone/core/TimelineState.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Timeline");

require("../type/Type");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  A Timeline State. Provides the methods: <code>setStateAtTime("state", time)</code>
 *          and <code>getValueAtTime(time)</code>.
 *
 *  @extends {Tone.Timeline}
 *  @param {String} initial The initial state of the TimelineState. 
 *                          Defaults to <code>undefined</code>
 */
_Tone.default.TimelineState = function (initial) {
  _Tone.default.Timeline.call(this);
  /**
   *  The initial state
   *  @private
   *  @type {String}
   */


  this._initial = initial;
};

_Tone.default.extend(_Tone.default.TimelineState, _Tone.default.Timeline);
/**
 *  Returns the scheduled state scheduled before or at
 *  the given time.
 *  @param  {Number}  time  The time to query.
 *  @return  {String}  The name of the state input in setStateAtTime.
 */


_Tone.default.TimelineState.prototype.getValueAtTime = function (time) {
  var event = this.get(time);

  if (event !== null) {
    return event.state;
  } else {
    return this._initial;
  }
};
/**
 *  Add a state to the timeline.
 *  @param  {String}  state The name of the state to set.
 *  @param  {Number}  time  The time to query.
 *  @returns {Tone.TimelineState} this
 */


_Tone.default.TimelineState.prototype.setStateAtTime = function (state, time) {
  //all state changes need to be >= the previous state time
  //TODO throw error if time < the previous event time
  this.add({
    "state": state,
    "time": time
  });
  return this;
};
/**
 *  Return the event before the time with the given state
 *  @param {Tone.State} state The state to look for
 *  @param  {Time}  time  When to check before			
 *  @return  {Object}  The event with the given state before the time
 */


_Tone.default.TimelineState.prototype.getLastState = function (state, time) {
  time = this.toSeconds(time);

  var index = this._search(time);

  for (var i = index; i >= 0; i--) {
    var event = this._timeline[i];

    if (event.state === state) {
      return event;
    }
  }
};
/**
 *  Return the event after the time with the given state
 *  @param {Tone.State} state The state to look for
 *  @param  {Time}  time  When to check from
 *  @return  {Object}  The event with the given state after the time
 */


_Tone.default.TimelineState.prototype.getNextState = function (state, time) {
  time = this.toSeconds(time);

  var index = this._search(time);

  if (index !== -1) {
    for (var i = index; i < this._timeline.length; i++) {
      var event = this._timeline[i];

      if (event.state === state) {
        return event;
      }
    }
  }
};

var _default = _Tone.default.TimelineState;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Timeline":"../node_modules/tone/tone/core/Timeline.js","../type/Type":"../node_modules/tone/tone/type/Type.js"}],"../node_modules/tone/tone/source/TickSource.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/TickSignal");

require("../core/TimelineState");

require("../core/Timeline");

require("../core/Param");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Uses [Tone.TickSignal](TickSignal) to track elapsed ticks with
 *  		complex automation curves.
 *
 * 	@constructor
 *  @extends {Tone}
 *  @param {Frequency} frequency The initial frequency that the signal ticks at
 *  @param {Tone.Param=} param A parameter to control (such as playbackRate)
 */
_Tone.default.TickSource = function () {
  var options = _Tone.default.defaults(arguments, ["frequency"], _Tone.default.TickSource);
  /**
   *  The frequency the callback function should be invoked.
   *  @type  {Frequency}
   *  @signal
   */


  this.frequency = new _Tone.default.TickSignal(options.frequency);

  this._readOnly("frequency");
  /**
   *  The state timeline
   *  @type {Tone.TimelineState}
   *  @private
   */


  this._state = new _Tone.default.TimelineState(_Tone.default.State.Stopped);

  this._state.setStateAtTime(_Tone.default.State.Stopped, 0);
  /**
   * The offset values of the ticks
   * @type {Tone.Timeline}
   * @private
   */


  this._tickOffset = new _Tone.default.Timeline(); //add the first event

  this.setTicksAtTime(0, 0);
};

_Tone.default.extend(_Tone.default.TickSource);
/**
 *  The defaults
 *  @const
 *  @type  {Object}
 */


_Tone.default.TickSource.defaults = {
  "frequency": 1
};
/**
 *  Returns the playback state of the source, either "started", "stopped" or "paused".
 *  @type {Tone.State}
 *  @readOnly
 *  @memberOf Tone.TickSource#
 *  @name state
 */

Object.defineProperty(_Tone.default.TickSource.prototype, "state", {
  get: function () {
    return this._state.getValueAtTime(this.now());
  }
});
/**
 *  Start the clock at the given time. Optionally pass in an offset
 *  of where to start the tick counter from.
 *  @param  {Time=}  time    The time the clock should start
 *  @param {Ticks} [offset=0] The number of ticks to start the source at
 *  @return  {Tone.TickSource}  this
 */

_Tone.default.TickSource.prototype.start = function (time, offset) {
  time = this.toSeconds(time);

  if (this._state.getValueAtTime(time) !== _Tone.default.State.Started) {
    this._state.setStateAtTime(_Tone.default.State.Started, time);

    if (_Tone.default.isDefined(offset)) {
      this.setTicksAtTime(offset, time);
    }
  }

  return this;
};
/**
 *  Stop the clock. Stopping the clock resets the tick counter to 0.
 *  @param {Time} [time=now] The time when the clock should stop.
 *  @returns {Tone.TickSource} this
 *  @example
 * clock.stop();
 */


_Tone.default.TickSource.prototype.stop = function (time) {
  time = this.toSeconds(time); //cancel the previous stop

  if (this._state.getValueAtTime(time) === _Tone.default.State.Stopped) {
    var event = this._state.get(time);

    if (event.time > 0) {
      this._tickOffset.cancel(event.time);

      this._state.cancel(event.time);
    }
  }

  this._state.cancel(time);

  this._state.setStateAtTime(_Tone.default.State.Stopped, time);

  this.setTicksAtTime(0, time);
  return this;
};
/**
 *  Pause the clock. Pausing does not reset the tick counter.
 *  @param {Time} [time=now] The time when the clock should stop.
 *  @returns {Tone.TickSource} this
 */


_Tone.default.TickSource.prototype.pause = function (time) {
  time = this.toSeconds(time);

  if (this._state.getValueAtTime(time) === _Tone.default.State.Started) {
    this._state.setStateAtTime(_Tone.default.State.Paused, time);
  }

  return this;
};
/**
 *  Cancel start/stop/pause and setTickAtTime events scheduled after the given time.
 *  @param {Time} [time=now] When to clear the events after
 *  @returns {Tone.TickSource} this
 */


_Tone.default.TickSource.prototype.cancel = function (time) {
  time = this.toSeconds(time);

  this._state.cancel(time);

  this._tickOffset.cancel(time);

  return this;
};
/**
 * Get the elapsed ticks at the given time
 * @param  {Time} time  When to get the tick value
 * @return {Ticks}     The number of ticks
 */


_Tone.default.TickSource.prototype.getTicksAtTime = function (time) {
  time = this.toSeconds(time);

  var stopEvent = this._state.getLastState(_Tone.default.State.Stopped, time); //this event allows forEachBetween to iterate until the current time


  var tmpEvent = {
    state: _Tone.default.State.Paused,
    time: time
  };

  this._state.add(tmpEvent); //keep track of the previous offset event


  var lastState = stopEvent;
  var elapsedTicks = 0; //iterate through all the events since the last stop

  this._state.forEachBetween(stopEvent.time, time + this.sampleTime, function (e) {
    var periodStartTime = lastState.time; //if there is an offset event in this period use that

    var offsetEvent = this._tickOffset.get(e.time);

    if (offsetEvent.time >= lastState.time) {
      elapsedTicks = offsetEvent.ticks;
      periodStartTime = offsetEvent.time;
    }

    if (lastState.state === _Tone.default.State.Started && e.state !== _Tone.default.State.Started) {
      elapsedTicks += this.frequency.getTicksAtTime(e.time) - this.frequency.getTicksAtTime(periodStartTime);
    }

    lastState = e;
  }.bind(this)); //remove the temporary event


  this._state.remove(tmpEvent); //return the ticks


  return elapsedTicks;
};
/**
 *  The number of times the callback was invoked. Starts counting at 0
 *  and increments after the callback was invoked. Returns -1 when stopped.
 *  @memberOf Tone.TickSource#
 *  @name ticks
 *  @type {Ticks}
 */


Object.defineProperty(_Tone.default.TickSource.prototype, "ticks", {
  get: function () {
    return this.getTicksAtTime(this.now());
  },
  set: function (t) {
    this.setTicksAtTime(t, this.now());
  }
});
/**
 *  The time since ticks=0 that the TickSource has been running. Accounts
 *  for tempo curves
 *  @memberOf Tone.TickSource#
 *  @name seconds
 *  @type {Seconds}
 */

Object.defineProperty(_Tone.default.TickSource.prototype, "seconds", {
  get: function () {
    return this.getSecondsAtTime(this.now());
  },
  set: function (s) {
    var now = this.now();
    var ticks = this.frequency.timeToTicks(s, now);
    this.setTicksAtTime(ticks, now);
  }
});
/**
 *  Return the elapsed seconds at the given time.
 *  @param  {Time}  time  When to get the elapsed seconds
 *  @return  {Seconds}  The number of elapsed seconds
 */

_Tone.default.TickSource.prototype.getSecondsAtTime = function (time) {
  time = this.toSeconds(time);

  var stopEvent = this._state.getLastState(_Tone.default.State.Stopped, time); //this event allows forEachBetween to iterate until the current time


  var tmpEvent = {
    state: _Tone.default.State.Paused,
    time: time
  };

  this._state.add(tmpEvent); //keep track of the previous offset event


  var lastState = stopEvent;
  var elapsedSeconds = 0; //iterate through all the events since the last stop

  this._state.forEachBetween(stopEvent.time, time + this.sampleTime, function (e) {
    var periodStartTime = lastState.time; //if there is an offset event in this period use that

    var offsetEvent = this._tickOffset.get(e.time);

    if (offsetEvent.time >= lastState.time) {
      elapsedSeconds = offsetEvent.seconds;
      periodStartTime = offsetEvent.time;
    }

    if (lastState.state === _Tone.default.State.Started && e.state !== _Tone.default.State.Started) {
      elapsedSeconds += e.time - periodStartTime;
    }

    lastState = e;
  }.bind(this)); //remove the temporary event


  this._state.remove(tmpEvent); //return the ticks


  return elapsedSeconds;
};
/**
 * Set the clock's ticks at the given time.
 * @param  {Ticks} ticks The tick value to set
 * @param  {Time} time  When to set the tick value
 * @return {Tone.TickSource}       this
 */


_Tone.default.TickSource.prototype.setTicksAtTime = function (ticks, time) {
  time = this.toSeconds(time);

  this._tickOffset.cancel(time);

  this._tickOffset.add({
    "time": time,
    "ticks": ticks,
    "seconds": this.frequency.getDurationOfTicks(ticks, time)
  });

  return this;
};
/**
 *  Returns the scheduled state at the given time.
 *  @param  {Time}  time  The time to query.
 *  @return  {String}  The name of the state input in setStateAtTime.
 *  @example
 * source.start("+0.1");
 * source.getStateAtTime("+0.1"); //returns "started"
 */


_Tone.default.TickSource.prototype.getStateAtTime = function (time) {
  time = this.toSeconds(time);
  return this._state.getValueAtTime(time);
};
/**
 * Get the time of the given tick. The second argument
 * is when to test before. Since ticks can be set (with setTicksAtTime)
 * there may be multiple times for a given tick value. 
 * @param  {Ticks} ticks The tick number.
 * @param  {Time=} before When to measure the tick value from. 
 * @return {Time}       The time of the tick
 */


_Tone.default.TickSource.prototype.getTimeOfTick = function (tick, before) {
  before = _Tone.default.defaultArg(before, this.now());

  var offset = this._tickOffset.get(before);

  var event = this._state.get(before);

  var startTime = Math.max(offset.time, event.time);
  var absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;
  return this.frequency.getTimeOfTick(absoluteTicks);
};
/**
 * @callback forEachTickBetween
 * @param {Time} when
 * @param {Ticks} when
 */

/**
 *  Invoke the callback event at all scheduled ticks between the 
 *  start time and the end time
 *  @param  {Time}    startTime  The beginning of the search range
 *  @param  {Time}    endTime    The end of the search range
 *  @param  {ForEachCallback}  callback   The callback to invoke with each tick
 *  @return  {Tone.TickSource}    this
 */


_Tone.default.TickSource.prototype.forEachTickBetween = function (startTime, endTime, callback) {
  //only iterate through the sections where it is "started"
  var lastStateEvent = this._state.get(startTime);

  this._state.forEachBetween(startTime, endTime, function (event) {
    if (lastStateEvent.state === _Tone.default.State.Started && event.state !== _Tone.default.State.Started) {
      this.forEachTickBetween(Math.max(lastStateEvent.time, startTime), event.time - this.sampleTime, callback);
    }

    lastStateEvent = event;
  }.bind(this));

  startTime = Math.max(lastStateEvent.time, startTime);

  if (lastStateEvent.state === _Tone.default.State.Started && this._state) {
    //figure out the difference between the frequency ticks and the 
    var startTicks = this.frequency.getTicksAtTime(startTime);
    var ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);
    var diff = startTicks - ticksAtStart;
    var offset = diff % 1;

    if (offset !== 0) {
      offset = 1 - offset;
    }

    var nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);
    var error = null;

    while (nextTickTime < endTime && this._state) {
      try {
        callback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));
      } catch (e) {
        error = e;
        break;
      }

      if (this._state) {
        nextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);
      }
    }
  }

  if (error) {
    throw error;
  }

  return this;
};
/**
 *  Clean up
 *  @returns {Tone.TickSource} this
 */


_Tone.default.TickSource.prototype.dispose = function () {
  _Tone.default.Param.prototype.dispose.call(this);

  this._state.dispose();

  this._state = null;

  this._tickOffset.dispose();

  this._tickOffset = null;

  this._writable("frequency");

  this.frequency.dispose();
  this.frequency = null;
  return this;
};

var _default = _Tone.default.TickSource;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/TickSignal":"../node_modules/tone/tone/signal/TickSignal.js","../core/TimelineState":"../node_modules/tone/tone/core/TimelineState.js","../core/Timeline":"../node_modules/tone/tone/core/Timeline.js","../core/Param":"../node_modules/tone/tone/core/Param.js"}],"../node_modules/tone/tone/core/Clock.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../source/TickSource");

require("../core/TimelineState");

require("../core/Emitter");

require("../core/Context");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  A sample accurate clock which provides a callback at the given rate.
 *          While the callback is not sample-accurate (it is still susceptible to
 *          loose JS timing), the time passed in as the argument to the callback
 *          is precise. For most applications, it is better to use Tone.Transport
 *          instead of the Clock by itself since you can synchronize multiple callbacks.
 *
 * 	@constructor
 *  @extends {Tone.Emitter}
 * 	@param {function} callback The callback to be invoked with the time of the audio event
 * 	@param {Frequency} frequency The rate of the callback
 * 	@example
 * //the callback will be invoked approximately once a second
 * //and will print the time exactly once a second apart.
 * var clock = new Tone.Clock(function(time){
 * 	console.log(time);
 * }, 1);
 */
_Tone.default.Clock = function () {
  var options = _Tone.default.defaults(arguments, ["callback", "frequency"], _Tone.default.Clock);

  _Tone.default.Emitter.call(this);
  /**
   *  The callback function to invoke at the scheduled tick.
   *  @type  {Function}
   */


  this.callback = options.callback;
  /**
   *  The next time the callback is scheduled.
   *  @type {Number}
   *  @private
   */

  this._nextTick = 0;
  /**
   *  The tick counter
   *  @type  {Tone.TickSource}
   *  @private
   */

  this._tickSource = new _Tone.default.TickSource(options.frequency);
  /**
   *  The last time the loop callback was invoked
   *  @private
   *  @type {Number}
   */

  this._lastUpdate = 0;
  /**
   *  The rate the callback function should be invoked.
   *  @type  {BPM}
   *  @signal
   */

  this.frequency = this._tickSource.frequency;

  this._readOnly("frequency");
  /**
   *  The state timeline
   *  @type {Tone.TimelineState}
   *  @private
   */


  this._state = new _Tone.default.TimelineState(_Tone.default.State.Stopped); //add an initial state

  this._state.setStateAtTime(_Tone.default.State.Stopped, 0);
  /**
   *  The loop function bound to its context.
   *  This is necessary to remove the event in the end.
   *  @type {Function}
   *  @private
   */


  this._boundLoop = this._loop.bind(this); //bind a callback to the worker thread

  this.context.on("tick", this._boundLoop);
};

_Tone.default.extend(_Tone.default.Clock, _Tone.default.Emitter);
/**
 *  The defaults
 *  @const
 *  @type  {Object}
 */


_Tone.default.Clock.defaults = {
  "callback": _Tone.default.noOp,
  "frequency": 1
};
/**
 *  Returns the playback state of the source, either "started", "stopped" or "paused".
 *  @type {Tone.State}
 *  @readOnly
 *  @memberOf Tone.Clock#
 *  @name state
 */

Object.defineProperty(_Tone.default.Clock.prototype, "state", {
  get: function () {
    return this._state.getValueAtTime(this.now());
  }
});
/**
 *  Start the clock at the given time. Optionally pass in an offset
 *  of where to start the tick counter from.
 *  @param  {Time=}  time    The time the clock should start
 *  @param  {Ticks=}  offset  Where the tick counter starts counting from.
 *  @return  {Tone.Clock}  this
 */

_Tone.default.Clock.prototype.start = function (time, offset) {
  //make sure the context is started
  this.context.resume(); //start the loop

  time = this.toSeconds(time);

  if (this._state.getValueAtTime(time) !== _Tone.default.State.Started) {
    this._state.setStateAtTime(_Tone.default.State.Started, time);

    this._tickSource.start(time, offset);

    if (time < this._lastUpdate) {
      this.emit("start", time, offset);
    }
  }

  return this;
};
/**
 *  Stop the clock. Stopping the clock resets the tick counter to 0.
 *  @param {Time} [time=now] The time when the clock should stop.
 *  @returns {Tone.Clock} this
 *  @example
 * clock.stop();
 */


_Tone.default.Clock.prototype.stop = function (time) {
  time = this.toSeconds(time);

  this._state.cancel(time);

  this._state.setStateAtTime(_Tone.default.State.Stopped, time);

  this._tickSource.stop(time);

  if (time < this._lastUpdate) {
    this.emit("stop", time);
  }

  return this;
};
/**
 *  Pause the clock. Pausing does not reset the tick counter.
 *  @param {Time} [time=now] The time when the clock should stop.
 *  @returns {Tone.Clock} this
 */


_Tone.default.Clock.prototype.pause = function (time) {
  time = this.toSeconds(time);

  if (this._state.getValueAtTime(time) === _Tone.default.State.Started) {
    this._state.setStateAtTime(_Tone.default.State.Paused, time);

    this._tickSource.pause(time);

    if (time < this._lastUpdate) {
      this.emit("pause", time);
    }
  }

  return this;
};
/**
 *  The number of times the callback was invoked. Starts counting at 0
 *  and increments after the callback was invoked.
 *  @type {Ticks}
 */


Object.defineProperty(_Tone.default.Clock.prototype, "ticks", {
  get: function () {
    return Math.ceil(this.getTicksAtTime(this.now()));
  },
  set: function (t) {
    this._tickSource.ticks = t;
  }
});
/**
 *  The time since ticks=0 that the Clock has been running. Accounts
 *  for tempo curves
 *  @type {Seconds}
 */

Object.defineProperty(_Tone.default.Clock.prototype, "seconds", {
  get: function () {
    return this._tickSource.seconds;
  },
  set: function (s) {
    this._tickSource.seconds = s;
  }
});
/**
 *  Return the elapsed seconds at the given time.
 *  @param  {Time}  time  When to get the elapsed seconds
 *  @return  {Seconds}  The number of elapsed seconds
 */

_Tone.default.Clock.prototype.getSecondsAtTime = function (time) {
  return this._tickSource.getSecondsAtTime(time);
};
/**
 * Set the clock's ticks at the given time.
 * @param  {Ticks} ticks The tick value to set
 * @param  {Time} time  When to set the tick value
 * @return {Tone.Clock}       this
 */


_Tone.default.Clock.prototype.setTicksAtTime = function (ticks, time) {
  this._tickSource.setTicksAtTime(ticks, time);

  return this;
};
/**
 * Get the clock's ticks at the given time.
 * @param  {Time} time  When to get the tick value
 * @return {Ticks}       The tick value at the given time.
 */


_Tone.default.Clock.prototype.getTicksAtTime = function (time) {
  return this._tickSource.getTicksAtTime(time);
};
/**
 * Get the time of the next tick
 * @param  {Ticks} ticks The tick number.
 * @param  {Time} before 
 * @return {Tone.Clock}       this
 */


_Tone.default.Clock.prototype.nextTickTime = function (offset, when) {
  when = this.toSeconds(when);
  var currentTick = this.getTicksAtTime(when);
  return this._tickSource.getTimeOfTick(currentTick + offset, when);
};
/**
 *  The scheduling loop.
 *  @private
 */


_Tone.default.Clock.prototype._loop = function () {
  var startTime = this._lastUpdate;
  var endTime = this.now();
  this._lastUpdate = endTime;

  if (startTime !== endTime) {
    //the state change events
    this._state.forEachBetween(startTime, endTime, function (e) {
      switch (e.state) {
        case _Tone.default.State.Started:
          var offset = this._tickSource.getTicksAtTime(e.time);

          this.emit("start", e.time, offset);
          break;

        case _Tone.default.State.Stopped:
          if (e.time !== 0) {
            this.emit("stop", e.time);
          }

          break;

        case _Tone.default.State.Paused:
          this.emit("pause", e.time);
          break;
      }
    }.bind(this)); //the tick callbacks


    this._tickSource.forEachTickBetween(startTime, endTime, function (time, ticks) {
      this.callback(time, ticks);
    }.bind(this));
  }
};
/**
 *  Returns the scheduled state at the given time.
 *  @param  {Time}  time  The time to query.
 *  @return  {String}  The name of the state input in setStateAtTime.
 *  @example
 * clock.start("+0.1");
 * clock.getStateAtTime("+0.1"); //returns "started"
 */


_Tone.default.Clock.prototype.getStateAtTime = function (time) {
  time = this.toSeconds(time);
  return this._state.getValueAtTime(time);
};
/**
 *  Clean up
 *  @returns {Tone.Clock} this
 */


_Tone.default.Clock.prototype.dispose = function () {
  _Tone.default.Emitter.prototype.dispose.call(this);

  this.context.off("tick", this._boundLoop);

  this._writable("frequency");

  this._tickSource.dispose();

  this._tickSource = null;
  this.frequency = null;
  this._boundLoop = null;
  this._nextTick = Infinity;
  this.callback = null;

  this._state.dispose();

  this._state = null;
};

var _default = _Tone.default.Clock;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../source/TickSource":"../node_modules/tone/tone/source/TickSource.js","../core/TimelineState":"../node_modules/tone/tone/core/TimelineState.js","../core/Emitter":"../node_modules/tone/tone/core/Emitter.js","../core/Context":"../node_modules/tone/tone/core/Context.js"}],"../node_modules/tone/tone/core/IntervalTimeline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../type/Type");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Similar to Tone.Timeline, but all events represent
 *         intervals with both "time" and "duration" times. The
 *         events are placed in a tree structure optimized
 *         for querying an intersection point with the timeline
 *         events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)
 *         to represent the data.
 *  @extends {Tone}
 */
_Tone.default.IntervalTimeline = function () {
  _Tone.default.call(this);
  /**
   *  The root node of the inteval tree
   *  @type  {IntervalNode}
   *  @private
   */


  this._root = null;
  /**
   *  Keep track of the length of the timeline.
   *  @type  {Number}
   *  @private
   */

  this._length = 0;
};

_Tone.default.extend(_Tone.default.IntervalTimeline);
/**
 *  The event to add to the timeline. All events must
 *  have a time and duration value
 *  @param  {Object}  event  The event to add to the timeline
 *  @return  {Tone.IntervalTimeline}  this
 */


_Tone.default.IntervalTimeline.prototype.add = function (event) {
  if (_Tone.default.isUndef(event.time) || _Tone.default.isUndef(event.duration)) {
    throw new Error("Tone.IntervalTimeline: events must have time and duration parameters");
  }

  event.time = event.time.valueOf();
  var node = new IntervalNode(event.time, event.time + event.duration, event);

  if (this._root === null) {
    this._root = node;
  } else {
    this._root.insert(node);
  }

  this._length++; // Restructure tree to be balanced

  while (node !== null) {
    node.updateHeight();
    node.updateMax();

    this._rebalance(node);

    node = node.parent;
  }

  return this;
};
/**
 *  Remove an event from the timeline.
 *  @param  {Object}  event  The event to remove from the timeline
 *  @return  {Tone.IntervalTimeline}  this
 */


_Tone.default.IntervalTimeline.prototype.remove = function (event) {
  if (this._root !== null) {
    var results = [];

    this._root.search(event.time, results);

    for (var i = 0; i < results.length; i++) {
      var node = results[i];

      if (node.event === event) {
        this._removeNode(node);

        this._length--;
        break;
      }
    }
  }

  return this;
};
/**
 *  The number of items in the timeline.
 *  @type {Number}
 *  @memberOf Tone.IntervalTimeline#
 *  @name length
 *  @readOnly
 */


Object.defineProperty(_Tone.default.IntervalTimeline.prototype, "length", {
  get: function () {
    return this._length;
  }
});
/**
 *  Remove events whose time time is after the given time
 *  @param  {Number}  time  The time to query.
 *  @returns {Tone.IntervalTimeline} this
 */

_Tone.default.IntervalTimeline.prototype.cancel = function (after) {
  this.forEachFrom(after, function (event) {
    this.remove(event);
  }.bind(this));
  return this;
};
/**
 *  Set the root node as the given node
 *  @param {IntervalNode} node
 *  @private
 */


_Tone.default.IntervalTimeline.prototype._setRoot = function (node) {
  this._root = node;

  if (this._root !== null) {
    this._root.parent = null;
  }
};
/**
 *  Replace the references to the node in the node's parent
 *  with the replacement node.
 *  @param  {IntervalNode}  node
 *  @param  {IntervalNode}  replacement
 *  @private
 */


_Tone.default.IntervalTimeline.prototype._replaceNodeInParent = function (node, replacement) {
  if (node.parent !== null) {
    if (node.isLeftChild()) {
      node.parent.left = replacement;
    } else {
      node.parent.right = replacement;
    }

    this._rebalance(node.parent);
  } else {
    this._setRoot(replacement);
  }
};
/**
 *  Remove the node from the tree and replace it with
 *  a successor which follows the schema.
 *  @param  {IntervalNode}  node
 *  @private
 */


_Tone.default.IntervalTimeline.prototype._removeNode = function (node) {
  if (node.left === null && node.right === null) {
    this._replaceNodeInParent(node, null);
  } else if (node.right === null) {
    this._replaceNodeInParent(node, node.left);
  } else if (node.left === null) {
    this._replaceNodeInParent(node, node.right);
  } else {
    var balance = node.getBalance();
    var replacement, temp;

    if (balance > 0) {
      if (node.left.right === null) {
        replacement = node.left;
        replacement.right = node.right;
        temp = replacement;
      } else {
        replacement = node.left.right;

        while (replacement.right !== null) {
          replacement = replacement.right;
        }

        replacement.parent.right = replacement.left;
        temp = replacement.parent;
        replacement.left = node.left;
        replacement.right = node.right;
      }
    } else if (node.right.left === null) {
      replacement = node.right;
      replacement.left = node.left;
      temp = replacement;
    } else {
      replacement = node.right.left;

      while (replacement.left !== null) {
        replacement = replacement.left;
      }

      replacement.parent.left = replacement.right;
      temp = replacement.parent;
      replacement.left = node.left;
      replacement.right = node.right;
    }

    if (node.parent !== null) {
      if (node.isLeftChild()) {
        node.parent.left = replacement;
      } else {
        node.parent.right = replacement;
      }
    } else {
      this._setRoot(replacement);
    } // this._replaceNodeInParent(node, replacement);


    this._rebalance(temp);
  }

  node.dispose();
};
/**
 *  Rotate the tree to the left
 *  @param  {IntervalNode}  node
 *  @private
 */


_Tone.default.IntervalTimeline.prototype._rotateLeft = function (node) {
  var parent = node.parent;
  var isLeftChild = node.isLeftChild(); // Make node.right the new root of this sub tree (instead of node)

  var pivotNode = node.right;
  node.right = pivotNode.left;
  pivotNode.left = node;

  if (parent !== null) {
    if (isLeftChild) {
      parent.left = pivotNode;
    } else {
      parent.right = pivotNode;
    }
  } else {
    this._setRoot(pivotNode);
  }
};
/**
 *  Rotate the tree to the right
 *  @param  {IntervalNode}  node
 *  @private
 */


_Tone.default.IntervalTimeline.prototype._rotateRight = function (node) {
  var parent = node.parent;
  var isLeftChild = node.isLeftChild(); // Make node.left the new root of this sub tree (instead of node)

  var pivotNode = node.left;
  node.left = pivotNode.right;
  pivotNode.right = node;

  if (parent !== null) {
    if (isLeftChild) {
      parent.left = pivotNode;
    } else {
      parent.right = pivotNode;
    }
  } else {
    this._setRoot(pivotNode);
  }
};
/**
 *  Balance the BST
 *  @param  {IntervalNode}  node
 *  @private
 */


_Tone.default.IntervalTimeline.prototype._rebalance = function (node) {
  var balance = node.getBalance();

  if (balance > 1) {
    if (node.left.getBalance() < 0) {
      this._rotateLeft(node.left);
    } else {
      this._rotateRight(node);
    }
  } else if (balance < -1) {
    if (node.right.getBalance() > 0) {
      this._rotateRight(node.right);
    } else {
      this._rotateLeft(node);
    }
  }
};
/**
 *  Get an event whose time and duration span the give time. Will
 *  return the match whose "time" value is closest to the given time.
 *  @param  {Object}  event  The event to add to the timeline
 *  @return  {Object}  The event which spans the desired time
 */


_Tone.default.IntervalTimeline.prototype.get = function (time) {
  if (this._root !== null) {
    var results = [];

    this._root.search(time, results);

    if (results.length > 0) {
      var max = results[0];

      for (var i = 1; i < results.length; i++) {
        if (results[i].low > max.low) {
          max = results[i];
        }
      }

      return max.event;
    }
  }

  return null;
};
/**
 *  Iterate over everything in the timeline.
 *  @param  {Function}  callback The callback to invoke with every item
 *  @returns {Tone.IntervalTimeline} this
 */


_Tone.default.IntervalTimeline.prototype.forEach = function (callback) {
  if (this._root !== null) {
    var allNodes = [];

    this._root.traverse(function (node) {
      allNodes.push(node);
    });

    for (var i = 0; i < allNodes.length; i++) {
      var ev = allNodes[i].event;

      if (ev) {
        callback(ev);
      }
    }
  }

  return this;
};
/**
 *  Iterate over everything in the array in which the given time
 *  overlaps with the time and duration time of the event.
 *  @param  {Number}  time The time to check if items are overlapping
 *  @param  {Function}  callback The callback to invoke with every item
 *  @returns {Tone.IntervalTimeline} this
 */


_Tone.default.IntervalTimeline.prototype.forEachAtTime = function (time, callback) {
  if (this._root !== null) {
    var results = [];

    this._root.search(time, results);

    for (var i = results.length - 1; i >= 0; i--) {
      var ev = results[i].event;

      if (ev) {
        callback(ev);
      }
    }
  }

  return this;
};
/**
 *  Iterate over everything in the array in which the time is greater
 *  than or equal to the given time.
 *  @param  {Number}  time The time to check if items are before
 *  @param  {Function}  callback The callback to invoke with every item
 *  @returns {Tone.IntervalTimeline} this
 */


_Tone.default.IntervalTimeline.prototype.forEachFrom = function (time, callback) {
  if (this._root !== null) {
    var results = [];

    this._root.searchAfter(time, results);

    for (var i = results.length - 1; i >= 0; i--) {
      var ev = results[i].event;
      callback(ev);
    }
  }

  return this;
};
/**
 *  Clean up
 *  @return  {Tone.IntervalTimeline}  this
 */


_Tone.default.IntervalTimeline.prototype.dispose = function () {
  var allNodes = [];

  if (this._root !== null) {
    this._root.traverse(function (node) {
      allNodes.push(node);
    });
  }

  for (var i = 0; i < allNodes.length; i++) {
    allNodes[i].dispose();
  }

  allNodes = null;
  this._root = null;
  return this;
}; ///////////////////////////////////////////////////////////////////////////
//	INTERVAL NODE HELPER
///////////////////////////////////////////////////////////////////////////

/**
 *  Represents a node in the binary search tree, with the addition
 *  of a "high" value which keeps track of the highest value of
 *  its children.
 *  References:
 *  https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/
 *  http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf
 *  @param {Number} low
 *  @param {Number} high
 *  @private
 */


var IntervalNode = function (low, high, event) {
  //the event container
  this.event = event; //the low value

  this.low = low; //the high value

  this.high = high; //the high value for this and all child nodes

  this.max = this.high; //the nodes to the left

  this._left = null; //the nodes to the right

  this._right = null; //the parent node

  this.parent = null; //the number of child nodes

  this.height = 0;
};
/**
 *  Insert a node into the correct spot in the tree
 *  @param  {IntervalNode}  node
 */


IntervalNode.prototype.insert = function (node) {
  if (node.low <= this.low) {
    if (this.left === null) {
      this.left = node;
    } else {
      this.left.insert(node);
    }
  } else if (this.right === null) {
    this.right = node;
  } else {
    this.right.insert(node);
  }
};
/**
 *  Search the tree for nodes which overlap
 *  with the given point
 *  @param  {Number}  point  The point to query
 *  @param  {Array}  results  The array to put the results
 */


IntervalNode.prototype.search = function (point, results) {
  // If p is to the right of the rightmost point of any interval
  // in this node and all children, there won't be any matches.
  if (point > this.max) {
    return;
  } // Search left children


  if (this.left !== null) {
    this.left.search(point, results);
  } // Check this node


  if (this.low <= point && this.high > point) {
    results.push(this);
  } // If p is to the left of the time of this interval,
  // then it can't be in any child to the right.


  if (this.low > point) {
    return;
  } // Search right children


  if (this.right !== null) {
    this.right.search(point, results);
  }
};
/**
 *  Search the tree for nodes which are less
 *  than the given point
 *  @param  {Number}  point  The point to query
 *  @param  {Array}  results  The array to put the results
 */


IntervalNode.prototype.searchAfter = function (point, results) {
  // Check this node
  if (this.low >= point) {
    results.push(this);

    if (this.left !== null) {
      this.left.searchAfter(point, results);
    }
  } // search the right side


  if (this.right !== null) {
    this.right.searchAfter(point, results);
  }
};
/**
 *  Invoke the callback on this element and both it's branches
 *  @param  {Function}  callback
 */


IntervalNode.prototype.traverse = function (callback) {
  callback(this);

  if (this.left !== null) {
    this.left.traverse(callback);
  }

  if (this.right !== null) {
    this.right.traverse(callback);
  }
};
/**
 *  Update the height of the node
 */


IntervalNode.prototype.updateHeight = function () {
  if (this.left !== null && this.right !== null) {
    this.height = Math.max(this.left.height, this.right.height) + 1;
  } else if (this.right !== null) {
    this.height = this.right.height + 1;
  } else if (this.left !== null) {
    this.height = this.left.height + 1;
  } else {
    this.height = 0;
  }
};
/**
 *  Update the height of the node
 */


IntervalNode.prototype.updateMax = function () {
  this.max = this.high;

  if (this.left !== null) {
    this.max = Math.max(this.max, this.left.max);
  }

  if (this.right !== null) {
    this.max = Math.max(this.max, this.right.max);
  }
};
/**
 *  The balance is how the leafs are distributed on the node
 *  @return  {Number}  Negative numbers are balanced to the right
 */


IntervalNode.prototype.getBalance = function () {
  var balance = 0;

  if (this.left !== null && this.right !== null) {
    balance = this.left.height - this.right.height;
  } else if (this.left !== null) {
    balance = this.left.height + 1;
  } else if (this.right !== null) {
    balance = -(this.right.height + 1);
  }

  return balance;
};
/**
 *  @returns {Boolean} true if this node is the left child
 *  of its parent
 */


IntervalNode.prototype.isLeftChild = function () {
  return this.parent !== null && this.parent.left === this;
};
/**
 *  get/set the left node
 *  @type {IntervalNode}
 */


Object.defineProperty(IntervalNode.prototype, "left", {
  get: function () {
    return this._left;
  },
  set: function (node) {
    this._left = node;

    if (node !== null) {
      node.parent = this;
    }

    this.updateHeight();
    this.updateMax();
  }
});
/**
 *  get/set the right node
 *  @type {IntervalNode}
 */

Object.defineProperty(IntervalNode.prototype, "right", {
  get: function () {
    return this._right;
  },
  set: function (node) {
    this._right = node;

    if (node !== null) {
      node.parent = this;
    }

    this.updateHeight();
    this.updateMax();
  }
});
/**
 *  null out references.
 */

IntervalNode.prototype.dispose = function () {
  this.parent = null;
  this._left = null;
  this._right = null;
  this.event = null;
}; ///////////////////////////////////////////////////////////////////////////
//	END INTERVAL NODE HELPER
///////////////////////////////////////////////////////////////////////////


var _default = _Tone.default.IntervalTimeline;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../type/Type":"../node_modules/tone/tone/type/Type.js"}],"../node_modules/tone/tone/type/Ticks.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../type/TransportTime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Ticks is a primitive type for encoding Time values.
 *         Tone.Ticks can be constructed with or without the `new` keyword. Tone.Ticks can be passed
 *         into the parameter of any method which takes time as an argument.
 *  @constructor
 *  @extends {Tone.TransportTime}
 *  @param  {String|Number}  val    The time value.
 *  @param  {String=}  units  The units of the value.
 *  @example
 * var t = Tone.Ticks("4n");//a quarter note
 */
_Tone.default.Ticks = function (val, units) {
  if (this instanceof _Tone.default.Ticks) {
    _Tone.default.TransportTime.call(this, val, units);
  } else {
    return new _Tone.default.Ticks(val, units);
  }
};

_Tone.default.extend(_Tone.default.Ticks, _Tone.default.TransportTime);
/**
 *  The default units if none are given.
 *  @type {String}
 *  @private
 */


_Tone.default.Ticks.prototype._defaultUnits = "i";
/**
 * Get the current time in the given units
 * @return {Ticks}
 * @private
 */

_Tone.default.Ticks.prototype._now = function () {
  return _Tone.default.Transport.ticks;
};
/**
 *  Return the value of the beats in the current units
 *  @param {Number} beats
 *  @return  {Number}
 *  @private
 */


_Tone.default.Ticks.prototype._beatsToUnits = function (beats) {
  return this._getPPQ() * beats;
};
/**
 *  Returns the value of a second in the current units
 *  @param {Seconds} seconds
 *  @return  {Number}
 *  @private
 */


_Tone.default.Ticks.prototype._secondsToUnits = function (seconds) {
  return Math.floor(seconds / (60 / this._getBpm()) * this._getPPQ());
};
/**
 *  Returns the value of a tick in the current time units
 *  @param {Ticks} ticks
 *  @return  {Number}
 *  @private
 */


_Tone.default.Ticks.prototype._ticksToUnits = function (ticks) {
  return ticks;
};
/**
 *  Return the time in ticks
 *  @return  {Ticks}
 */


_Tone.default.Ticks.prototype.toTicks = function () {
  return this.valueOf();
};
/**
 *  Return the time in ticks
 *  @return  {Ticks}
 */


_Tone.default.Ticks.prototype.toSeconds = function () {
  return this.valueOf() / this._getPPQ() * (60 / this._getBpm());
};

var _default = _Tone.default.Ticks;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../type/TransportTime":"../node_modules/tone/tone/type/TransportTime.js"}],"../node_modules/tone/tone/core/TransportEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../type/Ticks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.TransportEvent is an internal class used by (Tone.Transport)[Transport]
 *         to schedule events. Do no invoke this class directly, it is
 *         handled from within Tone.Transport.
 *  @extends {Tone}
 *  @param {Object} options
 */
_Tone.default.TransportEvent = function (Transport, options) {
  options = _Tone.default.defaultArg(options, _Tone.default.TransportEvent.defaults);

  _Tone.default.call(this);
  /**
   * Reference to the Transport that created it
   * @type {Tone.Transport}
   */


  this.Transport = Transport;
  /**
   * The unique id of the event
   * @type {Number}
   */

  this.id = _Tone.default.TransportEvent._eventId++;
  /**
   * The time the event starts
   * @type {Ticks}
   */

  this.time = _Tone.default.Ticks(options.time);
  /**
   * The callback to invoke
   * @type {Function}
   */

  this.callback = options.callback;
  /**
   * If the event should be removed after being created.
   * @type {Boolean}
   * @private
   */

  this._once = options.once;
};

_Tone.default.extend(_Tone.default.TransportEvent);
/**
 * The defaults
 * @static
 * @type {Object}
 */


_Tone.default.TransportEvent.defaults = {
  "once": false,
  "callback": _Tone.default.noOp
};
/**
 * Current ID counter
 * @private
 * @static
 * @type {Number}
 */

_Tone.default.TransportEvent._eventId = 0;
/**
 * Invoke the event callback.
 * @param  {Time} time  The AudioContext time in seconds of the event
 */

_Tone.default.TransportEvent.prototype.invoke = function (time) {
  if (this.callback) {
    this.callback(time);

    if (this._once && this.Transport) {
      this.Transport.clear(this.id);
    }
  }
};
/**
 * Clean up
 * @return {Tone.TransportEvent} this
 */


_Tone.default.TransportEvent.prototype.dispose = function () {
  _Tone.default.prototype.dispose.call(this);

  this.Transport = null;
  this.callback = null;
  this.time = null;
  return this;
};

var _default = _Tone.default.TransportEvent;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../type/Ticks":"../node_modules/tone/tone/type/Ticks.js"}],"../node_modules/tone/tone/core/TransportRepeatEvent.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/TransportEvent");

require("../type/Ticks");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.TransportRepeatEvent is an internal class used by Tone.Transport
 *         to schedule repeat events. This class should not be instantiated directly.
 *  @extends {Tone.TransportEvent}
 *  @param {Object} options
 */
_Tone.default.TransportRepeatEvent = function (Transport, options) {
  _Tone.default.TransportEvent.call(this, Transport, options);

  options = _Tone.default.defaultArg(options, _Tone.default.TransportRepeatEvent.defaults);
  /**
   * When the event should stop repeating
   * @type {Ticks}
   * @private
   */

  this.duration = _Tone.default.Ticks(options.duration);
  /**
   * The interval of the repeated event
   * @type {Ticks}
   * @private
   */

  this._interval = _Tone.default.Ticks(options.interval);
  /**
   * The ID of the current timeline event
   * @type {Number}
   * @private
   */

  this._currentId = -1;
  /**
   * The ID of the next timeline event
   * @type {Number}
   * @private
   */

  this._nextId = -1;
  /**
    * The time of the next event
    * @type {Ticks}
    * @private
    */

  this._nextTick = this.time;
  /**
   * a reference to the bound start method
   * @type {Function}
   * @private
   */

  this._boundRestart = this._restart.bind(this);
  this.Transport.on("start loopStart", this._boundRestart);

  this._restart();
};

_Tone.default.extend(_Tone.default.TransportRepeatEvent, _Tone.default.TransportEvent);
/**
 * The defaults
 * @static
 * @type {Object}
 */


_Tone.default.TransportRepeatEvent.defaults = {
  "duration": Infinity,
  "interval": 1
};
/**
 * Invoke the callback. Returns the tick time which
 * the next event should be scheduled at.
 * @param  {Number} time  The AudioContext time in seconds of the event
 */

_Tone.default.TransportRepeatEvent.prototype.invoke = function (time) {
  //create more events if necessary
  this._createEvents(time); //call the super class


  _Tone.default.TransportEvent.prototype.invoke.call(this, time);
};
/**
 * Push more events onto the timeline to keep up with the position of the timeline
 * @private
 */


_Tone.default.TransportRepeatEvent.prototype._createEvents = function (time) {
  // schedule the next event
  var ticks = this.Transport.getTicksAtTime(time);

  if (ticks >= this.time && ticks >= this._nextTick && this._nextTick + this._interval < this.time + this.duration) {
    this._nextTick += this._interval;
    this._currentId = this._nextId;
    this._nextId = this.Transport.scheduleOnce(this.invoke.bind(this), _Tone.default.Ticks(this._nextTick));
  }
};
/**
 * Push more events onto the timeline to keep up with the position of the timeline
 * @private
 */


_Tone.default.TransportRepeatEvent.prototype._restart = function (time) {
  this.Transport.clear(this._currentId);
  this.Transport.clear(this._nextId);
  this._nextTick = this.time;
  var ticks = this.Transport.getTicksAtTime(time);

  if (ticks > this.time) {
    this._nextTick = this.time + Math.ceil((ticks - this.time) / this._interval) * this._interval;
  }

  this._currentId = this.Transport.scheduleOnce(this.invoke.bind(this), _Tone.default.Ticks(this._nextTick));
  this._nextTick += this._interval;
  this._nextId = this.Transport.scheduleOnce(this.invoke.bind(this), _Tone.default.Ticks(this._nextTick));
};
/**
 * Clean up
 * @return {Tone.TransportRepeatEvent} this
 */


_Tone.default.TransportRepeatEvent.prototype.dispose = function () {
  this.Transport.clear(this._currentId);
  this.Transport.clear(this._nextId);
  this.Transport.off("start loopStart", this._boundRestart);
  this._boundCreateEvents = null;

  _Tone.default.TransportEvent.prototype.dispose.call(this);

  this.duration = null;
  this._interval = null;
  return this;
};

var _default = _Tone.default.TransportRepeatEvent;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/TransportEvent":"../node_modules/tone/tone/core/TransportEvent.js","../type/Ticks":"../node_modules/tone/tone/type/Ticks.js"}],"../node_modules/tone/tone/core/Transport.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Clock");

require("../type/Type");

require("../core/Timeline");

require("../core/Emitter");

require("../core/Gain");

require("../core/IntervalTimeline");

require("../core/TransportRepeatEvent");

require("../core/TransportEvent");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Transport for timing musical events.
 *          Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)
 *          Tone.Transport timing events pass in the exact time of the scheduled event
 *          in the argument of the callback function. Pass that time value to the object
 *          you're scheduling. <br><br>
 *          A single transport is created for you when the library is initialized.
 *          <br><br>
 *          The transport emits the events: "start", "stop", "pause", and "loop" which are
 *          called with the time of that event as the argument.
 *
 *  @extends {Tone.Emitter}
 *  @singleton
 *  @example
 * //repeated event every 8th note
 * Tone.Transport.scheduleRepeat(function(time){
 * 	//do something with the time
 * }, "8n");
 *  @example
 * //schedule an event on the 16th measure
 * Tone.Transport.schedule(function(time){
 * 	//do something with the time
 * }, "16:0:0");
 */
_Tone.default.Transport = function () {
  _Tone.default.Emitter.call(this);

  _Tone.default.getContext(function () {
    ///////////////////////////////////////////////////////////////////////
    //	LOOPING
    //////////////////////////////////////////////////////////////////////

    /**
     * 	If the transport loops or not.
     *  @type {boolean}
     */
    this.loop = false;
    /**
     * 	The loop start position in ticks
     *  @type {Ticks}
     *  @private
     */

    this._loopStart = 0;
    /**
     * 	The loop end position in ticks
     *  @type {Ticks}
     *  @private
     */

    this._loopEnd = 0; ///////////////////////////////////////////////////////////////////////
    //	CLOCK/TEMPO
    //////////////////////////////////////////////////////////////////////

    /**
     *  Pulses per quarter is the number of ticks per quarter note.
     *  @private
     *  @type  {Number}
     */

    this._ppq = TransportConstructor.defaults.PPQ;
    /**
     *  watches the main oscillator for timing ticks
     *  initially starts at 120bpm
     *  @private
     *  @type {Tone.Clock}
     */

    this._clock = new _Tone.default.Clock({
      "callback": this._processTick.bind(this),
      "frequency": 0
    });

    this._bindClockEvents();
    /**
     *  The Beats Per Minute of the Transport.
     *  @type {BPM}
     *  @signal
     *  @example
     * Tone.Transport.bpm.value = 80;
     * //ramp the bpm to 120 over 10 seconds
     * Tone.Transport.bpm.rampTo(120, 10);
     */


    this.bpm = this._clock.frequency;
    this.bpm._toUnits = this._toUnits.bind(this);
    this.bpm._fromUnits = this._fromUnits.bind(this);
    this.bpm.units = _Tone.default.Type.BPM;
    this.bpm.value = TransportConstructor.defaults.bpm;

    this._readOnly("bpm");
    /**
     *  The time signature, or more accurately the numerator
     *  of the time signature over a denominator of 4.
     *  @type {Number}
     *  @private
     */


    this._timeSignature = TransportConstructor.defaults.timeSignature; ///////////////////////////////////////////////////////////////////////
    //	TIMELINE EVENTS
    //////////////////////////////////////////////////////////////////////

    /**
     *  All the events in an object to keep track by ID
     *  @type {Object}
     *  @private
     */

    this._scheduledEvents = {};
    /**
     * 	The scheduled events.
     *  @type {Tone.Timeline}
     *  @private
     */

    this._timeline = new _Tone.default.Timeline();
    /**
     *  Repeated events
     *  @type {Array}
     *  @private
     */

    this._repeatedEvents = new _Tone.default.IntervalTimeline();
    /**
     *  All of the synced Signals
     *  @private
     *  @type {Array}
     */

    this._syncedSignals = []; ///////////////////////////////////////////////////////////////////////
    //	SWING
    //////////////////////////////////////////////////////////////////////

    /**
     *  The subdivision of the swing
     *  @type  {Ticks}
     *  @private
     */

    this._swingTicks = TransportConstructor.defaults.PPQ / 2; //8n

    /**
     *  The swing amount
     *  @type {NormalRange}
     *  @private
     */

    this._swingAmount = 0; //transport is a singleton so it adds itself to the context

    this.context.transport = this;
  }.bind(this));
};

_Tone.default.extend(_Tone.default.Transport, _Tone.default.Emitter);
/**
 *  the defaults
 *  @type {Object}
 *  @const
 *  @static
 */


_Tone.default.Transport.defaults = {
  "bpm": 120,
  "swing": 0,
  "swingSubdivision": "8n",
  "timeSignature": 4,
  "loopStart": 0,
  "loopEnd": "4m",
  "PPQ": 192
};
/**
 * Is an instanceof Tone.Transport
 * @type {Boolean}
 */

_Tone.default.Transport.prototype.isTransport = true; ///////////////////////////////////////////////////////////////////////////////
//	TICKS
///////////////////////////////////////////////////////////////////////////////

/**
 *  called on every tick
 *  @param   {number} tickTime clock relative tick time
 *  @private
 */

_Tone.default.Transport.prototype._processTick = function (tickTime, ticks) {
  //handle swing
  if (this._swingAmount > 0 && ticks % this._ppq !== 0 && //not on a downbeat
  ticks % (this._swingTicks * 2) !== 0) {
    //add some swing
    var progress = ticks % (this._swingTicks * 2) / (this._swingTicks * 2);

    var amount = Math.sin(progress * Math.PI) * this._swingAmount;

    tickTime += _Tone.default.Ticks(this._swingTicks * 2 / 3).toSeconds() * amount;
  } //do the loop test


  if (this.loop) {
    if (ticks >= this._loopEnd) {
      this.emit("loopEnd", tickTime);

      this._clock.setTicksAtTime(this._loopStart, tickTime);

      ticks = this._loopStart;
      this.emit("loopStart", tickTime, this._clock.getSecondsAtTime(tickTime));
      this.emit("loop", tickTime);
    }
  } //invoke the timeline events scheduled on this tick


  this._timeline.forEachAtTime(ticks, function (event) {
    event.invoke(tickTime);
  });
}; ///////////////////////////////////////////////////////////////////////////////
//	SCHEDULABLE EVENTS
///////////////////////////////////////////////////////////////////////////////

/**
 *  Schedule an event along the timeline.
 *  @param {Function} callback The callback to be invoked at the time.
 *  @param {TransportTime}  time The time to invoke the callback at.
 *  @return {Number} The id of the event which can be used for canceling the event.
 *  @example
 * //trigger the callback when the Transport reaches the desired time
 * Tone.Transport.schedule(function(time){
 * 	envelope.triggerAttack(time);
 * }, "128i");
 */


_Tone.default.Transport.prototype.schedule = function (callback, time) {
  var event = new _Tone.default.TransportEvent(this, {
    "time": _Tone.default.TransportTime(time),
    "callback": callback
  });
  return this._addEvent(event, this._timeline);
};
/**
 *  Schedule a repeated event along the timeline. The event will fire
 *  at the `interval` starting at the `startTime` and for the specified
 *  `duration`.
 *  @param  {Function}  callback   The callback to invoke.
 *  @param  {Time}    interval   The duration between successive
 *                               callbacks. Must be a positive number.
 *  @param  {TransportTime=}    startTime  When along the timeline the events should
 *                               start being invoked.
 *  @param {Time} [duration=Infinity] How long the event should repeat.
 *  @return  {Number}    The ID of the scheduled event. Use this to cancel
 *                           the event.
 *  @example
 * //a callback invoked every eighth note after the first measure
 * Tone.Transport.scheduleRepeat(callback, "8n", "1m");
 */


_Tone.default.Transport.prototype.scheduleRepeat = function (callback, interval, startTime, duration) {
  var event = new _Tone.default.TransportRepeatEvent(this, {
    "callback": callback,
    "interval": _Tone.default.Time(interval),
    "time": _Tone.default.TransportTime(startTime),
    "duration": _Tone.default.Time(_Tone.default.defaultArg(duration, Infinity))
  }); //kick it off if the Transport is started

  return this._addEvent(event, this._repeatedEvents);
};
/**
 *  Schedule an event that will be removed after it is invoked. 
 *  @param {Function} callback The callback to invoke once.
 *  @param {TransportTime} time The time the callback should be invoked.
 *  @returns {Number} The ID of the scheduled event.
 */


_Tone.default.Transport.prototype.scheduleOnce = function (callback, time) {
  var event = new _Tone.default.TransportEvent(this, {
    "time": _Tone.default.TransportTime(time),
    "callback": callback,
    "once": true
  });
  return this._addEvent(event, this._timeline);
};
/**
 *  Clear the passed in event id from the timeline
 *  @param {Number} eventId The id of the event.
 *  @returns {Tone.Transport} this
 */


_Tone.default.Transport.prototype.clear = function (eventId) {
  if (this._scheduledEvents.hasOwnProperty(eventId)) {
    var item = this._scheduledEvents[eventId.toString()];

    item.timeline.remove(item.event);
    item.event.dispose();
    delete this._scheduledEvents[eventId.toString()];
  }

  return this;
};
/**
 * Add an event to the correct timeline. Keep track of the
 * timeline it was added to.
 * @param {Tone.TransportEvent}	event
 * @param {Tone.Timeline} timeline
 * @returns {Number} the event id which was just added
 * @private
 */


_Tone.default.Transport.prototype._addEvent = function (event, timeline) {
  this._scheduledEvents[event.id.toString()] = {
    "event": event,
    "timeline": timeline
  };
  timeline.add(event);
  return event.id;
};
/**
 *  Remove scheduled events from the timeline after
 *  the given time. Repeated events will be removed
 *  if their startTime is after the given time
 *  @param {TransportTime} [after=0] Clear all events after
 *                          this time.
 *  @returns {Tone.Transport} this
 */


_Tone.default.Transport.prototype.cancel = function (after) {
  after = _Tone.default.defaultArg(after, 0);
  after = this.toTicks(after);

  this._timeline.forEachFrom(after, function (event) {
    this.clear(event.id);
  }.bind(this));

  this._repeatedEvents.forEachFrom(after, function (event) {
    this.clear(event.id);
  }.bind(this));

  return this;
}; ///////////////////////////////////////////////////////////////////////////////
//	START/STOP/PAUSE
///////////////////////////////////////////////////////////////////////////////

/**
 *  Bind start/stop/pause events from the clock and emit them.
 *  @private
 */


_Tone.default.Transport.prototype._bindClockEvents = function () {
  this._clock.on("start", function (time, offset) {
    offset = _Tone.default.Ticks(offset).toSeconds();
    this.emit("start", time, offset);
  }.bind(this));

  this._clock.on("stop", function (time) {
    this.emit("stop", time);
  }.bind(this));

  this._clock.on("pause", function (time) {
    this.emit("pause", time);
  }.bind(this));
};
/**
 *  Returns the playback state of the source, either "started", "stopped", or "paused"
 *  @type {Tone.State}
 *  @readOnly
 *  @memberOf Tone.Transport#
 *  @name state
 */


Object.defineProperty(_Tone.default.Transport.prototype, "state", {
  get: function () {
    return this._clock.getStateAtTime(this.now());
  }
});
/**
 *  Start the transport and all sources synced to the transport.
 *  @param  {Time} [time=now] The time when the transport should start.
 *  @param  {TransportTime=} offset The timeline offset to start the transport.
 *  @returns {Tone.Transport} this
 *  @example
 * //start the transport in one second starting at beginning of the 5th measure.
 * Tone.Transport.start("+1", "4:0:0");
 */

_Tone.default.Transport.prototype.start = function (time, offset) {
  //start the clock
  if (_Tone.default.isDefined(offset)) {
    offset = this.toTicks(offset);
  }

  this._clock.start(time, offset);

  return this;
};
/**
 *  Stop the transport and all sources synced to the transport.
 *  @param  {Time} [time=now] The time when the transport should stop.
 *  @returns {Tone.Transport} this
 *  @example
 * Tone.Transport.stop();
 */


_Tone.default.Transport.prototype.stop = function (time) {
  this._clock.stop(time);

  return this;
};
/**
 *  Pause the transport and all sources synced to the transport.
 *  @param  {Time} [time=now]
 *  @returns {Tone.Transport} this
 */


_Tone.default.Transport.prototype.pause = function (time) {
  this._clock.pause(time);

  return this;
};
/**
 * Toggle the current state of the transport. If it is
 * started, it will stop it, otherwise it will start the Transport.
 * @param  {Time=} time The time of the event
 * @return {Tone.Transport}      this
 */


_Tone.default.Transport.prototype.toggle = function (time) {
  time = this.toSeconds(time);

  if (this._clock.getStateAtTime(time) !== _Tone.default.State.Started) {
    this.start(time);
  } else {
    this.stop(time);
  }

  return this;
}; ///////////////////////////////////////////////////////////////////////////////
//	SETTERS/GETTERS
///////////////////////////////////////////////////////////////////////////////

/**
 *  The time signature as just the numerator over 4.
 *  For example 4/4 would be just 4 and 6/8 would be 3.
 *  @memberOf Tone.Transport#
 *  @type {Number|Array}
 *  @name timeSignature
 *  @example
 * //common time
 * Tone.Transport.timeSignature = 4;
 * // 7/8
 * Tone.Transport.timeSignature = [7, 8];
 * //this will be reduced to a single number
 * Tone.Transport.timeSignature; //returns 3.5
 */


Object.defineProperty(_Tone.default.Transport.prototype, "timeSignature", {
  get: function () {
    return this._timeSignature;
  },
  set: function (timeSig) {
    if (_Tone.default.isArray(timeSig)) {
      timeSig = timeSig[0] / timeSig[1] * 4;
    }

    this._timeSignature = timeSig;
  }
});
/**
 * When the Tone.Transport.loop = true, this is the starting position of the loop.
 * @memberOf Tone.Transport#
 * @type {Time}
 * @name loopStart
 */

Object.defineProperty(_Tone.default.Transport.prototype, "loopStart", {
  get: function () {
    return _Tone.default.Ticks(this._loopStart).toSeconds();
  },
  set: function (startPosition) {
    this._loopStart = this.toTicks(startPosition);
  }
});
/**
 * When the Tone.Transport.loop = true, this is the ending position of the loop.
 * @memberOf Tone.Transport#
 * @type {Time}
 * @name loopEnd
 */

Object.defineProperty(_Tone.default.Transport.prototype, "loopEnd", {
  get: function () {
    return _Tone.default.Ticks(this._loopEnd).toSeconds();
  },
  set: function (endPosition) {
    this._loopEnd = this.toTicks(endPosition);
  }
});
/**
 *  Set the loop start and stop at the same time.
 *  @param {TransportTime} startPosition
 *  @param {TransportTime} endPosition
 *  @returns {Tone.Transport} this
 *  @example
 * //loop over the first measure
 * Tone.Transport.setLoopPoints(0, "1m");
 * Tone.Transport.loop = true;
 */

_Tone.default.Transport.prototype.setLoopPoints = function (startPosition, endPosition) {
  this.loopStart = startPosition;
  this.loopEnd = endPosition;
  return this;
};
/**
 *  The swing value. Between 0-1 where 1 equal to
 *  the note + half the subdivision.
 *  @memberOf Tone.Transport#
 *  @type {NormalRange}
 *  @name swing
 */


Object.defineProperty(_Tone.default.Transport.prototype, "swing", {
  get: function () {
    return this._swingAmount;
  },
  set: function (amount) {
    //scale the values to a normal range
    this._swingAmount = amount;
  }
});
/**
 *  Set the subdivision which the swing will be applied to.
 *  The default value is an 8th note. Value must be less
 *  than a quarter note.
 *
 *  @memberOf Tone.Transport#
 *  @type {Time}
 *  @name swingSubdivision
 */

Object.defineProperty(_Tone.default.Transport.prototype, "swingSubdivision", {
  get: function () {
    return _Tone.default.Ticks(this._swingTicks).toNotation();
  },
  set: function (subdivision) {
    this._swingTicks = this.toTicks(subdivision);
  }
});
/**
 *  The Transport's position in Bars:Beats:Sixteenths.
 *  Setting the value will jump to that position right away.
 *  @memberOf Tone.Transport#
 *  @type {BarsBeatsSixteenths}
 *  @name position
 */

Object.defineProperty(_Tone.default.Transport.prototype, "position", {
  get: function () {
    var now = this.now();

    var ticks = this._clock.getTicksAtTime(now);

    return _Tone.default.Ticks(ticks).toBarsBeatsSixteenths();
  },
  set: function (progress) {
    var ticks = this.toTicks(progress);
    this.ticks = ticks;
  }
});
/**
 *  The Transport's position in seconds
 *  Setting the value will jump to that position right away.
 *  @memberOf Tone.Transport#
 *  @type {Seconds}
 *  @name seconds
 */

Object.defineProperty(_Tone.default.Transport.prototype, "seconds", {
  get: function () {
    return this._clock.seconds;
  },
  set: function (s) {
    var now = this.now();
    var ticks = this.bpm.timeToTicks(s, now);
    this.ticks = ticks;
  }
});
/**
 *  The Transport's loop position as a normalized value. Always
 *  returns 0 if the transport if loop is not true.
 *  @memberOf Tone.Transport#
 *  @name progress
 *  @type {NormalRange}
 */

Object.defineProperty(_Tone.default.Transport.prototype, "progress", {
  get: function () {
    if (this.loop) {
      var now = this.now();

      var ticks = this._clock.getTicksAtTime(now);

      return (ticks - this._loopStart) / (this._loopEnd - this._loopStart);
    } else {
      return 0;
    }
  }
});
/**
 *  The transports current tick position.
 *
 *  @memberOf Tone.Transport#
 *  @type {Ticks}
 *  @name ticks
 */

Object.defineProperty(_Tone.default.Transport.prototype, "ticks", {
  get: function () {
    return this._clock.ticks;
  },
  set: function (t) {
    if (this._clock.ticks !== t) {
      var now = this.now(); //stop everything synced to the transport

      if (this.state === _Tone.default.State.Started) {
        this.emit("stop", now);

        this._clock.setTicksAtTime(t, now); //restart it with the new time


        this.emit("start", now, this.seconds);
      } else {
        this._clock.setTicksAtTime(t, now);
      }
    }
  }
});
/**
 * Get the clock's ticks at the given time.
 * @param  {Time} time  When to get the tick value
 * @return {Ticks}       The tick value at the given time.
 */

_Tone.default.Transport.prototype.getTicksAtTime = function (time) {
  return Math.round(this._clock.getTicksAtTime(time));
};
/**
 *  Return the elapsed seconds at the given time.
 *  @param  {Time}  time  When to get the elapsed seconds
 *  @return  {Seconds}  The number of elapsed seconds
 */


_Tone.default.Transport.prototype.getSecondsAtTime = function (time) {
  return this._clock.getSecondsAtTime(time);
};
/**
 *  Pulses Per Quarter note. This is the smallest resolution
 *  the Transport timing supports. This should be set once
 *  on initialization and not set again. Changing this value
 *  after other objects have been created can cause problems.
 *
 *  @memberOf Tone.Transport#
 *  @type {Number}
 *  @name PPQ
 */


Object.defineProperty(_Tone.default.Transport.prototype, "PPQ", {
  get: function () {
    return this._ppq;
  },
  set: function (ppq) {
    var bpm = this.bpm.value;
    this._ppq = ppq;
    this.bpm.value = bpm;
  }
});
/**
 *  Convert from BPM to frequency (factoring in PPQ)
 *  @param  {BPM}  bpm The BPM value to convert to frequency
 *  @return  {Frequency}  The BPM as a frequency with PPQ factored in.
 *  @private
 */

_Tone.default.Transport.prototype._fromUnits = function (bpm) {
  return 1 / (60 / bpm / this.PPQ);
};
/**
 *  Convert from frequency (with PPQ) into BPM
 *  @param  {Frequency}  freq The clocks frequency to convert to BPM
 *  @return  {BPM}  The frequency value as BPM.
 *  @private
 */


_Tone.default.Transport.prototype._toUnits = function (freq) {
  return freq / this.PPQ * 60;
}; ///////////////////////////////////////////////////////////////////////////////
//	SYNCING
///////////////////////////////////////////////////////////////////////////////

/**
 *  Returns the time aligned to the next subdivision
 *  of the Transport. If the Transport is not started,
 *  it will return 0.
 *  Note: this will not work precisely during tempo ramps.
 *  @param  {Time}  subdivision  The subdivision to quantize to
 *  @return  {Number}  The context time of the next subdivision.
 *  @example
 * Tone.Transport.start(); //the transport must be started
 * Tone.Transport.nextSubdivision("4n");
 */


_Tone.default.Transport.prototype.nextSubdivision = function (subdivision) {
  subdivision = this.toTicks(subdivision);

  if (this.state !== _Tone.default.State.Started) {
    //if the transport's not started, return 0
    return 0;
  } else {
    var now = this.now(); //the remainder of the current ticks and the subdivision

    var transportPos = this.getTicksAtTime(now);
    var remainingTicks = subdivision - transportPos % subdivision;
    return this._clock.nextTickTime(remainingTicks, now);
  }
};
/**
 *  Attaches the signal to the tempo control signal so that
 *  any changes in the tempo will change the signal in the same
 *  ratio.
 *
 *  @param  {Tone.Signal} signal
 *  @param {number=} ratio Optionally pass in the ratio between
 *                         the two signals. Otherwise it will be computed
 *                         based on their current values.
 *  @returns {Tone.Transport} this
 */


_Tone.default.Transport.prototype.syncSignal = function (signal, ratio) {
  if (!ratio) {
    //get the sync ratio
    var now = this.now();

    if (signal.getValueAtTime(now) !== 0) {
      ratio = signal.getValueAtTime(now) / this.bpm.getValueAtTime(now);
    } else {
      ratio = 0;
    }
  }

  var ratioSignal = new _Tone.default.Gain(ratio);
  this.bpm.chain(ratioSignal, signal._param);

  this._syncedSignals.push({
    "ratio": ratioSignal,
    "signal": signal,
    "initial": signal.value
  });

  signal.value = 0;
  return this;
};
/**
 *  Unsyncs a previously synced signal from the transport's control.
 *  See Tone.Transport.syncSignal.
 *  @param  {Tone.Signal} signal
 *  @returns {Tone.Transport} this
 */


_Tone.default.Transport.prototype.unsyncSignal = function (signal) {
  for (var i = this._syncedSignals.length - 1; i >= 0; i--) {
    var syncedSignal = this._syncedSignals[i];

    if (syncedSignal.signal === signal) {
      syncedSignal.ratio.dispose();
      syncedSignal.signal.value = syncedSignal.initial;

      this._syncedSignals.splice(i, 1);
    }
  }

  return this;
};
/**
 *  Clean up.
 *  @returns {Tone.Transport} this
 *  @private
 */


_Tone.default.Transport.prototype.dispose = function () {
  _Tone.default.Emitter.prototype.dispose.call(this);

  this._clock.dispose();

  this._clock = null;

  this._writable("bpm");

  this.bpm = null;

  this._timeline.dispose();

  this._timeline = null;

  this._repeatedEvents.dispose();

  this._repeatedEvents = null;
  return this;
}; ///////////////////////////////////////////////////////////////////////////////
//	INITIALIZATION
///////////////////////////////////////////////////////////////////////////////


var TransportConstructor = _Tone.default.Transport;
_Tone.default.Transport = new TransportConstructor();

_Tone.default.Context.on("init", function (context) {
  if (context.transport && context.transport.isTransport) {
    _Tone.default.Transport = context.transport;
  } else {
    _Tone.default.Transport = new TransportConstructor();
  }
});

_Tone.default.Context.on("close", function (context) {
  if (context.transport && context.transport.isTransport) {
    context.transport.dispose();
  }
});

var _default = _Tone.default.Transport;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Clock":"../node_modules/tone/tone/core/Clock.js","../type/Type":"../node_modules/tone/tone/type/Type.js","../core/Timeline":"../node_modules/tone/tone/core/Timeline.js","../core/Emitter":"../node_modules/tone/tone/core/Emitter.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js","../core/IntervalTimeline":"../node_modules/tone/tone/core/IntervalTimeline.js","../core/TransportRepeatEvent":"../node_modules/tone/tone/core/TransportRepeatEvent.js","../core/TransportEvent":"../node_modules/tone/tone/core/TransportEvent.js"}],"../node_modules/tone/tone/core/Master.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/Volume");

require("../core/Context");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  A single master output which is connected to the
 *          AudioDestinationNode (aka your speakers).
 *          It provides useful conveniences such as the ability
 *          to set the volume and mute the entire application.
 *          It also gives you the ability to apply master effects to your application.
 *          <br><br>
 *          Like Tone.Transport, A single Tone.Master is created
 *          on initialization and you do not need to explicitly construct one.
 *
 *  @constructor
 *  @extends {Tone}
 *  @singleton
 *  @example
 * //the audio will go from the oscillator to the speakers
 * oscillator.connect(Tone.Master);
 * //a convenience for connecting to the master output is also provided:
 * oscillator.toMaster();
 * //the above two examples are equivalent.
 */
_Tone.default.Master = function () {
  _Tone.default.AudioNode.call(this);

  _Tone.default.getContext(function () {
    this.createInsOuts(1, 0);
    /**
     *  The private volume node
     *  @type  {Tone.Volume}
     *  @private
     */

    this._volume = this.output = new _Tone.default.Volume();
    /**
     * The volume of the master output.
     * @type {Decibels}
     * @signal
     */

    this.volume = this._volume.volume;

    this._readOnly("volume"); //connections


    _Tone.default.connectSeries(this.input, this.output, this.context.destination); //master is a singleton so it adds itself to the context


    this.context.master = this;
  }.bind(this));
};

_Tone.default.extend(_Tone.default.Master, _Tone.default.AudioNode);
/**
 *  @type {Object}
 *  @const
 */


_Tone.default.Master.defaults = {
  "volume": 0,
  "mute": false
};
/**
 * Is an instanceof Tone.Master
 * @type {Boolean}
 */

_Tone.default.Master.prototype.isMaster = true;
/**
 * Mute the output.
 * @memberOf Tone.Master#
 * @type {boolean}
 * @name mute
 * @example
 * //mute the output
 * Tone.Master.mute = true;
 */

Object.defineProperty(_Tone.default.Master.prototype, "mute", {
  get: function () {
    return this._volume.mute;
  },
  set: function (mute) {
    this._volume.mute = mute;
  }
});
/**
 *  Add a master effects chain. NOTE: this will disconnect any nodes which were previously
 *  chained in the master effects chain.
 *  @param {...(AudioNode|Tone)} nodes All arguments will be connected in a row
 *                                  and the Master will be routed through it.
 *  @return  {Tone.Master}  this
 *  @example
 * //some overall compression to keep the levels in check
 * var masterCompressor = new Tone.Compressor({
 * 	"threshold" : -6,
 * 	"ratio" : 3,
 * 	"attack" : 0.5,
 * 	"release" : 0.1
 * });
 * //give a little boost to the lows
 * var lowBump = new Tone.Filter(200, "lowshelf");
 * //route everything through the filter
 * //and compressor before going to the speakers
 * Tone.Master.chain(lowBump, masterCompressor);
 */

_Tone.default.Master.prototype.chain = function () {
  this.input.disconnect();
  var args = Array.from(arguments);
  args.unshift(this.input);
  args.push(this.output);

  _Tone.default.connectSeries.apply(undefined, args);
};
/**
 *  Clean up
 *  @return  {Tone.Master}  this
 */


_Tone.default.Master.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._writable("volume");

  this._volume.dispose();

  this._volume = null;
  this.volume = null;
}; ///////////////////////////////////////////////////////////////////////////
//	AUGMENT TONE's PROTOTYPE
///////////////////////////////////////////////////////////////////////////

/**
 *  Connect 'this' to the master output. Shorthand for this.connect(Tone.Master)
 *  @returns {Tone.AudioNode} this
 *  @example
 * //connect an oscillator to the master output
 * var osc = new Tone.Oscillator().toMaster();
 */


_Tone.default.AudioNode.prototype.toMaster = function () {
  this.connect(this.context.master);
  return this;
};
/**
 *  initialize the module and listen for new audio contexts
 *  @private
 */


var MasterConstructor = _Tone.default.Master;
_Tone.default.Master = new MasterConstructor();

_Tone.default.Context.on("init", function (context) {
  // if it already exists, just restore it
  if (context.master && context.master.isMaster) {
    _Tone.default.Master = context.master;
  } else {
    _Tone.default.Master = new MasterConstructor();
  }
});

_Tone.default.Context.on("close", function (context) {
  if (context.master && context.master.isMaster) {
    context.master.dispose();
  }
});

var _default = _Tone.default.Master;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/Volume":"../node_modules/tone/tone/component/Volume.js","../core/Context":"../node_modules/tone/tone/core/Context.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/source/Source.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Transport");

require("../component/Volume");

require("../core/Master");

require("../type/Type");

require("../core/TimelineState");

require("../signal/Signal");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Base class for sources. Sources have start/stop methods
 *          and the ability to be synced to the
 *          start/stop of Tone.Transport.
 *
 *  @constructor
 *  @extends {Tone.AudioNode}
 *  @example
 * //Multiple state change events can be chained together,
 * //but must be set in the correct order and with ascending times
 *
 * // OK
 * state.start().stop("+0.2");
 * // AND
 * state.start().stop("+0.2").start("+0.4").stop("+0.7")
 *
 * // BAD
 * state.stop("+0.2").start();
 * // OR
 * state.start("+0.3").stop("+0.2");
 *
 */
_Tone.default.Source = function (options) {
  options = _Tone.default.defaultArg(options, _Tone.default.Source.defaults);

  _Tone.default.AudioNode.call(this);
  /**
   *  The output volume node
   *  @type  {Tone.Volume}
   *  @private
   */


  this._volume = this.output = new _Tone.default.Volume(options.volume);
  /**
   * The volume of the output in decibels.
   * @type {Decibels}
   * @signal
   * @example
   * source.volume.value = -6;
   */

  this.volume = this._volume.volume;

  this._readOnly("volume");
  /**
   * 	Keep track of the scheduled state.
   *  @type {Tone.TimelineState}
   *  @private
   */


  this._state = new _Tone.default.TimelineState(_Tone.default.State.Stopped);
  this._state.memory = 100;
  /**
   *  The synced `start` callback function from the transport
   *  @type {Function}
   *  @private
   */

  this._synced = false;
  /**
   *  Keep track of all of the scheduled event ids
   *  @type  {Array}
   *  @private
   */

  this._scheduled = []; //make the output explicitly stereo

  this._volume.output.output.channelCount = 2;
  this._volume.output.output.channelCountMode = "explicit"; //mute initially

  this.mute = options.mute;
};

_Tone.default.extend(_Tone.default.Source, _Tone.default.AudioNode);
/**
 *  The default parameters
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.Source.defaults = {
  "volume": 0,
  "mute": false
};
/**
 *  Returns the playback state of the source, either "started" or "stopped".
 *  @type {Tone.State}
 *  @readOnly
 *  @memberOf Tone.Source#
 *  @name state
 */

Object.defineProperty(_Tone.default.Source.prototype, "state", {
  get: function () {
    if (this._synced) {
      if (_Tone.default.Transport.state === _Tone.default.State.Started) {
        return this._state.getValueAtTime(_Tone.default.Transport.seconds);
      } else {
        return _Tone.default.State.Stopped;
      }
    } else {
      return this._state.getValueAtTime(this.now());
    }
  }
});
/**
 * Mute the output.
 * @memberOf Tone.Source#
 * @type {boolean}
 * @name mute
 * @example
 * //mute the output
 * source.mute = true;
 */

Object.defineProperty(_Tone.default.Source.prototype, "mute", {
  get: function () {
    return this._volume.mute;
  },
  set: function (mute) {
    this._volume.mute = mute;
  }
}); //overwrite these functions

_Tone.default.Source.prototype._start = _Tone.default.noOp;
_Tone.default.Source.prototype.restart = _Tone.default.noOp;
_Tone.default.Source.prototype._stop = _Tone.default.noOp;
/**
 *  Start the source at the specified time. If no time is given,
 *  start the source now.
 *  @param  {Time} [time=now] When the source should be started.
 *  @returns {Tone.Source} this
 *  @example
 * source.start("+0.5"); //starts the source 0.5 seconds from now
 */

_Tone.default.Source.prototype.start = function (time, offset, duration) {
  if (_Tone.default.isUndef(time) && this._synced) {
    time = _Tone.default.Transport.seconds;
  } else {
    time = this.toSeconds(time);
    time = Math.max(time, this.context.currentTime);
  } //if it's started, stop it and restart it


  if (this._state.getValueAtTime(time) === _Tone.default.State.Started) {
    this._state.cancel(time);

    this._state.setStateAtTime(_Tone.default.State.Started, time);

    this.restart(time, offset, duration);
  } else {
    this._state.setStateAtTime(_Tone.default.State.Started, time);

    if (this._synced) {
      // add the offset time to the event
      var event = this._state.get(time);

      event.offset = _Tone.default.defaultArg(offset, 0);
      event.duration = duration;

      var sched = _Tone.default.Transport.schedule(function (t) {
        this._start(t, offset, duration);
      }.bind(this), time);

      this._scheduled.push(sched); //if it's already started


      if (_Tone.default.Transport.state === _Tone.default.State.Started) {
        this._syncedStart(this.now(), _Tone.default.Transport.seconds);
      }
    } else {
      this._start.apply(this, arguments);
    }
  }

  return this;
};
/**
 *  Stop the source at the specified time. If no time is given,
 *  stop the source now.
 *  @param  {Time} [time=now] When the source should be stopped.
 *  @returns {Tone.Source} this
 *  @example
 * source.stop(); // stops the source immediately
 */


_Tone.default.Source.prototype.stop = function (time) {
  if (_Tone.default.isUndef(time) && this._synced) {
    time = _Tone.default.Transport.seconds;
  } else {
    time = this.toSeconds(time);
    time = Math.max(time, this.context.currentTime);
  }

  if (!this._synced) {
    this._stop.apply(this, arguments);
  } else {
    var sched = _Tone.default.Transport.schedule(this._stop.bind(this), time);

    this._scheduled.push(sched);
  }

  this._state.cancel(time);

  this._state.setStateAtTime(_Tone.default.State.Stopped, time);

  return this;
};
/**
 *  Sync the source to the Transport so that all subsequent
 *  calls to `start` and `stop` are synced to the TransportTime
 *  instead of the AudioContext time.
 *
 *  @returns {Tone.Source} this
 *  @example
 * //sync the source so that it plays between 0 and 0.3 on the Transport's timeline
 * source.sync().start(0).stop(0.3);
 * //start the transport.
 * Tone.Transport.start();
 *
 *  @example
 * //start the transport with an offset and the sync'ed sources
 * //will start in the correct position
 * source.sync().start(0.1);
 * //the source will be invoked with an offset of 0.4
 * Tone.Transport.start("+0.5", 0.5);
 */


_Tone.default.Source.prototype.sync = function () {
  this._synced = true;

  this._syncedStart = function (time, offset) {
    if (offset > 0) {
      // get the playback state at that time
      var stateEvent = this._state.get(offset); // listen for start events which may occur in the middle of the sync'ed time


      if (stateEvent && stateEvent.state === _Tone.default.State.Started && stateEvent.time !== offset) {
        // get the offset
        var startOffset = offset - this.toSeconds(stateEvent.time);
        var duration;

        if (stateEvent.duration) {
          duration = this.toSeconds(stateEvent.duration) - startOffset;
        }

        this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);
      }
    }
  }.bind(this);

  this._syncedStop = function (time) {
    var seconds = _Tone.default.Transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));

    if (this._state.getValueAtTime(seconds) === _Tone.default.State.Started) {
      this._stop(time);
    }
  }.bind(this);

  _Tone.default.Transport.on("start loopStart", this._syncedStart);

  _Tone.default.Transport.on("stop pause loopEnd", this._syncedStop);

  return this;
};
/**
 *  Unsync the source to the Transport. See Tone.Source.sync
 *  @returns {Tone.Source} this
 */


_Tone.default.Source.prototype.unsync = function () {
  if (this._synced) {
    _Tone.default.Transport.off("stop pause loopEnd", this._syncedStop);

    _Tone.default.Transport.off("start loopStart", this._syncedStart);
  }

  this._synced = false; // clear all of the scheduled ids

  for (var i = 0; i < this._scheduled.length; i++) {
    var id = this._scheduled[i];

    _Tone.default.Transport.clear(id);
  }

  this._scheduled = [];

  this._state.cancel(0);

  return this;
};
/**
 *	Clean up.
 *  @return {Tone.Source} this
 */


_Tone.default.Source.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this.unsync();
  this._scheduled = null;

  this._writable("volume");

  this._volume.dispose();

  this._volume = null;
  this.volume = null;

  this._state.dispose();

  this._state = null;
};

var _default = _Tone.default.Source;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Transport":"../node_modules/tone/tone/core/Transport.js","../component/Volume":"../node_modules/tone/tone/component/Volume.js","../core/Master":"../node_modules/tone/tone/core/Master.js","../type/Type":"../node_modules/tone/tone/type/Type.js","../core/TimelineState":"../node_modules/tone/tone/core/TimelineState.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/shim/AudioBuffer.js":[function(require,module,exports) {
"use strict";

var _Tone = _interopRequireDefault(require("../core/Tone"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  AudioBuffer.copyTo/FromChannel polyfill
 *  @private
 */
if (_Tone.default.supported) {
  if (!AudioBuffer.prototype.copyToChannel) {
    AudioBuffer.prototype.copyToChannel = function (src, chanNum, start) {
      var channel = this.getChannelData(chanNum);
      start = start || 0;

      for (var i = 0; i < channel.length; i++) {
        channel[i + start] = src[i];
      }
    };

    AudioBuffer.prototype.copyFromChannel = function (dest, chanNum, start) {
      var channel = this.getChannelData(chanNum);
      start = start || 0;

      for (var i = 0; i < dest.length; i++) {
        dest[i] = channel[i + start];
      }
    };
  }
}
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js"}],"../node_modules/tone/tone/core/Buffer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Emitter");

require("../type/Type");

require("../shim/AudioBuffer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Buffer loading and storage. Tone.Buffer is used internally by all
 *          classes that make requests for audio files such as Tone.Player,
 *          Tone.Sampler and Tone.Convolver.
 *
 *          Aside from load callbacks from individual buffers, Tone.Buffer
 *  		provides events which keep track of the loading progress
 *  		of _all_ of the buffers. These are Tone.Buffer.on("load" / "progress" / "error")
 *
 *  @constructor
 *  @extends {Tone}
 *  @param {AudioBuffer|String} url The url to load, or the audio buffer to set.
 *  @param {Function=} onload A callback which is invoked after the buffer is loaded.
 *                            It's recommended to use `Tone.Buffer.on('load', callback)` instead
 *                            since it will give you a callback when _all_ buffers are loaded.
 *  @param {Function=} onerror The callback to invoke if there is an error
 *  @example
 * var buffer = new Tone.Buffer("path/to/sound.mp3", function(){
 * 	//the buffer is now available.
 * 	var buff = buffer.get();
 * });
 *  @example
 * //can load provide fallback extension types if the first type is not supported.
 * var buffer = new Tone.Buffer("path/to/sound.[mp3|ogg|wav]");
 */
_Tone.default.Buffer = function () {
  var options = _Tone.default.defaults(arguments, ["url", "onload", "onerror"], _Tone.default.Buffer);

  _Tone.default.call(this);
  /**
   *  stores the loaded AudioBuffer
   *  @type {AudioBuffer}
   *  @private
   */


  this._buffer = null;
  /**
   *  indicates if the buffer should be reversed or not
   *  @type {Boolean}
   *  @private
   */

  this._reversed = options.reverse;
  /**
   *  The XHR
   *  @type  {XMLHttpRequest}
   *  @private
   */

  this._xhr = null;
  /**
   * Private callback when the buffer is loaded.
   * @type {Function}
   * @private
   */

  this.onload = _Tone.default.noOp;

  if (options.url instanceof AudioBuffer || options.url instanceof _Tone.default.Buffer) {
    this.set(options.url);

    if (!this.loaded) {
      this.onload = options.onload;
    }
  } else if (_Tone.default.isString(options.url)) {
    this.load(options.url).then(options.onload).catch(options.onerror);
  }
};

_Tone.default.extend(_Tone.default.Buffer);
/**
 *  the default parameters
 *  @type {Object}
 */


_Tone.default.Buffer.defaults = {
  "url": undefined,
  "reverse": false,
  "onload": _Tone.default.noOp,
  "onerror": _Tone.default.noOp
};
/**
 *  Pass in an AudioBuffer or Tone.Buffer to set the value
 *  of this buffer.
 *  @param {AudioBuffer|Tone.Buffer} buffer the buffer
 *  @returns {Tone.Buffer} this
 */

_Tone.default.Buffer.prototype.set = function (buffer) {
  if (buffer instanceof _Tone.default.Buffer) {
    //if it's loaded, set it
    if (buffer.loaded) {
      this._buffer = buffer.get();
    } else {
      //otherwise when it's loaded, invoke it's callback
      buffer.onload = function () {
        this.set(buffer);
        this.onload(this);
      }.bind(this);
    }
  } else {
    this._buffer = buffer;
  } //reverse it initially


  if (this._reversed) {
    this._reverse();
  }

  return this;
};
/**
 *  @return {AudioBuffer} The audio buffer stored in the object.
 */


_Tone.default.Buffer.prototype.get = function () {
  return this._buffer;
};
/**
 *  Makes an xhr reqest for the selected url then decodes
 *  the file as an audio buffer. Invokes
 *  the callback once the audio buffer loads.
 *  @param {String} url The url of the buffer to load.
 *                      filetype support depends on the
 *                      browser.
 *  @returns {Promise} returns a Promise which resolves with the Tone.Buffer
 */


_Tone.default.Buffer.prototype.load = function (url, onload, onerror) {
  var promise = new Promise(function (load, error) {
    this._xhr = _Tone.default.Buffer.load(url, //success
    function (buff) {
      this._xhr = null;
      this.set(buff);
      load(this);
      this.onload(this);

      if (onload) {
        onload(this);
      }
    }.bind(this), //error
    function (err) {
      this._xhr = null;
      error(err);

      if (onerror) {
        onerror(err);
      }
    }.bind(this));
  }.bind(this));
  return promise;
};
/**
 *  dispose and disconnect
 *  @returns {Tone.Buffer} this
 */


_Tone.default.Buffer.prototype.dispose = function () {
  _Tone.default.prototype.dispose.call(this);

  this._buffer = null;

  if (this._xhr) {
    _Tone.default.Buffer._removeFromDownloadQueue(this._xhr);

    this._xhr.abort();

    this._xhr = null;
  }

  return this;
};
/**
 * If the buffer is loaded or not
 * @memberOf Tone.Buffer#
 * @type {Boolean}
 * @name loaded
 * @readOnly
 */


Object.defineProperty(_Tone.default.Buffer.prototype, "loaded", {
  "get": function () {
    return this.length > 0;
  }
});
/**
 * The duration of the buffer.
 * @memberOf Tone.Buffer#
 * @type {Number}
 * @name duration
 * @readOnly
 */

Object.defineProperty(_Tone.default.Buffer.prototype, "duration", {
  "get": function () {
    if (this._buffer) {
      return this._buffer.duration;
    } else {
      return 0;
    }
  }
});
/**
 * The length of the buffer in samples
 * @memberOf Tone.Buffer#
 * @type {Number}
 * @name length
 * @readOnly
 */

Object.defineProperty(_Tone.default.Buffer.prototype, "length", {
  "get": function () {
    if (this._buffer) {
      return this._buffer.length;
    } else {
      return 0;
    }
  }
});
/**
 * The number of discrete audio channels. Returns 0 if no buffer
 * is loaded.
 * @memberOf Tone.Buffer#
 * @type {Number}
 * @name numberOfChannels
 * @readOnly
 */

Object.defineProperty(_Tone.default.Buffer.prototype, "numberOfChannels", {
  "get": function () {
    if (this._buffer) {
      return this._buffer.numberOfChannels;
    } else {
      return 0;
    }
  }
});
/**
 *  Set the audio buffer from the array. To create a multichannel AudioBuffer,
 *  pass in a multidimensional array.
 *  @param {Float32Array} array The array to fill the audio buffer
 *  @return {Tone.Buffer} this
 */

_Tone.default.Buffer.prototype.fromArray = function (array) {
  var isMultidimensional = array[0].length > 0;
  var channels = isMultidimensional ? array.length : 1;
  var len = isMultidimensional ? array[0].length : array.length;
  var buffer = this.context.createBuffer(channels, len, this.context.sampleRate);

  if (!isMultidimensional && channels === 1) {
    array = [array];
  }

  for (var c = 0; c < channels; c++) {
    buffer.copyToChannel(array[c], c);
  }

  this._buffer = buffer;
  return this;
};
/**
 * 	Sums muliple channels into 1 channel
 *  @param {Number=} channel Optionally only copy a single channel from the array.
 *  @return {Array}
 */


_Tone.default.Buffer.prototype.toMono = function (chanNum) {
  if (_Tone.default.isNumber(chanNum)) {
    this.fromArray(this.toArray(chanNum));
  } else {
    var outputArray = new Float32Array(this.length);
    var numChannels = this.numberOfChannels;

    for (var channel = 0; channel < numChannels; channel++) {
      var channelArray = this.toArray(channel);

      for (var i = 0; i < channelArray.length; i++) {
        outputArray[i] += channelArray[i];
      }
    } //divide by the number of channels


    outputArray = outputArray.map(function (sample) {
      return sample / numChannels;
    });
    this.fromArray(outputArray);
  }

  return this;
};
/**
 * 	Get the buffer as an array. Single channel buffers will return a 1-dimensional
 * 	Float32Array, and multichannel buffers will return multidimensional arrays.
 *  @param {Number=} channel Optionally only copy a single channel from the array.
 *  @return {Array}
 */


_Tone.default.Buffer.prototype.toArray = function (channel) {
  if (_Tone.default.isNumber(channel)) {
    return this.getChannelData(channel);
  } else if (this.numberOfChannels === 1) {
    return this.toArray(0);
  } else {
    var ret = [];

    for (var c = 0; c < this.numberOfChannels; c++) {
      ret[c] = this.getChannelData(c);
    }

    return ret;
  }
};
/**
 *  Returns the Float32Array representing the PCM audio data for the specific channel.
 *  @param  {Number}  channel  The channel number to return
 *  @return  {Float32Array}  The audio as a TypedArray
 */


_Tone.default.Buffer.prototype.getChannelData = function (channel) {
  return this._buffer.getChannelData(channel);
};
/**
 *  Cut a subsection of the array and return a buffer of the
 *  subsection. Does not modify the original buffer
 *  @param {Time} start The time to start the slice
 *  @param {Time=} end The end time to slice. If none is given
 *                     will default to the end of the buffer
 *  @return {Tone.Buffer} this
 */


_Tone.default.Buffer.prototype.slice = function (start, end) {
  end = _Tone.default.defaultArg(end, this.duration);
  var startSamples = Math.floor(this.context.sampleRate * this.toSeconds(start));
  var endSamples = Math.floor(this.context.sampleRate * this.toSeconds(end));
  var replacement = [];

  for (var i = 0; i < this.numberOfChannels; i++) {
    replacement[i] = this.toArray(i).slice(startSamples, endSamples);
  }

  var retBuffer = new _Tone.default.Buffer().fromArray(replacement);
  return retBuffer;
};
/**
 *  Reverse the buffer.
 *  @private
 *  @return {Tone.Buffer} this
 */


_Tone.default.Buffer.prototype._reverse = function () {
  if (this.loaded) {
    for (var i = 0; i < this.numberOfChannels; i++) {
      Array.prototype.reverse.call(this.getChannelData(i));
    }
  }

  return this;
};
/**
 * Reverse the buffer.
 * @memberOf Tone.Buffer#
 * @type {Boolean}
 * @name reverse
 */


Object.defineProperty(_Tone.default.Buffer.prototype, "reverse", {
  "get": function () {
    return this._reversed;
  },
  "set": function (rev) {
    if (this._reversed !== rev) {
      this._reversed = rev;

      this._reverse();
    }
  }
}); ///////////////////////////////////////////////////////////////////////////
// STATIC METHODS
///////////////////////////////////////////////////////////////////////////
//statically inherits Emitter methods

_Tone.default.Emitter.mixin(_Tone.default.Buffer);
/**
 *  the static queue for all of the xhr requests
 *  @type {Array}
 *  @private
 */


_Tone.default.Buffer._downloadQueue = [];
/**
 *  A path which is prefixed before every url.
 *  @type  {String}
 *  @static
 */

_Tone.default.Buffer.baseUrl = "";
/**
 *  Create a Tone.Buffer from the array. To create a multichannel AudioBuffer,
 *  pass in a multidimensional array.
 *  @param {Float32Array} array The array to fill the audio buffer
 *  @return {Tone.Buffer} A Tone.Buffer created from the array
 */

_Tone.default.Buffer.fromArray = function (array) {
  return new _Tone.default.Buffer().fromArray(array);
};
/**
 * Creates a Tone.Buffer from a URL, returns a promise
 * which resolves to a Tone.Buffer
 * @param  {String} url The url to load.
 * @return {Promise<Tone.Buffer>}     A promise which resolves to a Tone.Buffer
 */


_Tone.default.Buffer.fromUrl = function (url) {
  var buffer = new _Tone.default.Buffer();
  return buffer.load(url).then(function () {
    return buffer;
  });
};
/**
 * Remove an xhr request from the download queue
 * @private
 */


_Tone.default.Buffer._removeFromDownloadQueue = function (request) {
  var index = _Tone.default.Buffer._downloadQueue.indexOf(request);

  if (index !== -1) {
    _Tone.default.Buffer._downloadQueue.splice(index, 1);
  }
};
/**
 *  Loads a url using XMLHttpRequest.
 *  @param {String} url
 *  @param {Function} onload
 *  @param {Function} onerror
 *  @param {Function} onprogress
 *  @return {XMLHttpRequest}
 */


_Tone.default.Buffer.load = function (url, onload, onerror) {
  //default
  onload = _Tone.default.defaultArg(onload, _Tone.default.noOp); // test if the url contains multiple extensions

  var matches = url.match(/\[(.+\|?)+\]$/);

  if (matches) {
    var extensions = matches[1].split("|");
    var extension = extensions[0];

    for (var i = 0; i < extensions.length; i++) {
      if (_Tone.default.Buffer.supportsType(extensions[i])) {
        extension = extensions[i];
        break;
      }
    }

    url = url.replace(matches[0], extension);
  }

  function onError(e) {
    _Tone.default.Buffer._removeFromDownloadQueue(request);

    _Tone.default.Buffer.emit("error", e);

    if (onerror) {
      onerror(e);
    } else {
      throw e;
    }
  }

  function onProgress() {
    //calculate the progress
    var totalProgress = 0;

    for (var i = 0; i < _Tone.default.Buffer._downloadQueue.length; i++) {
      totalProgress += _Tone.default.Buffer._downloadQueue[i].progress;
    }

    _Tone.default.Buffer.emit("progress", totalProgress / _Tone.default.Buffer._downloadQueue.length);
  }

  var request = new XMLHttpRequest();
  request.open("GET", _Tone.default.Buffer.baseUrl + url, true);
  request.responseType = "arraybuffer"; //start out as 0

  request.progress = 0;

  _Tone.default.Buffer._downloadQueue.push(request);

  request.addEventListener("load", function () {
    if (request.status === 200) {
      _Tone.default.context.decodeAudioData(request.response).then(function (buff) {
        request.progress = 1;
        onProgress();
        onload(buff);

        _Tone.default.Buffer._removeFromDownloadQueue(request);

        if (_Tone.default.Buffer._downloadQueue.length === 0) {
          //emit the event at the end
          _Tone.default.Buffer.emit("load");
        }
      }).catch(function () {
        _Tone.default.Buffer._removeFromDownloadQueue(request);

        onError("Tone.Buffer: could not decode audio data: " + url);
      });
    } else {
      onError("Tone.Buffer: could not locate file: " + url);
    }
  });
  request.addEventListener("error", onError);
  request.addEventListener("progress", function (event) {
    if (event.lengthComputable) {
      //only go to 95%, the last 5% is when the audio is decoded
      request.progress = event.loaded / event.total * 0.95;
      onProgress();
    }
  });
  request.send();
  return request;
};
/**
 *  Stop all of the downloads in progress
 *  @return {Tone.Buffer}
 *  @static
 */


_Tone.default.Buffer.cancelDownloads = function () {
  _Tone.default.Buffer._downloadQueue.slice().forEach(function (request) {
    _Tone.default.Buffer._removeFromDownloadQueue(request);

    request.abort();
  });

  return _Tone.default.Buffer;
};
/**
 *  Checks a url's extension to see if the current browser can play that file type.
 *  @param {String} url The url/extension to test
 *  @return {Boolean} If the file extension can be played
 *  @static
 *  @example
 * Tone.Buffer.supportsType("wav"); //returns true
 * Tone.Buffer.supportsType("path/to/file.wav"); //returns true
 */


_Tone.default.Buffer.supportsType = function (url) {
  var extension = url.split(".");
  extension = extension[extension.length - 1];
  var response = document.createElement("audio").canPlayType("audio/" + extension);
  return response !== "";
};
/**
 *  Returns a Promise which resolves when all of the buffers have loaded
 *  @return {Promise}
 */


_Tone.default.loaded = function () {
  var onload, onerror;

  function removeEvents() {
    //remove the events when it's resolved
    _Tone.default.Buffer.off("load", onload);

    _Tone.default.Buffer.off("error", onerror);
  }

  return new Promise(function (success, fail) {
    onload = function () {
      success();
    };

    onerror = function () {
      fail();
    }; //add the event listeners


    _Tone.default.Buffer.on("load", onload);

    _Tone.default.Buffer.on("error", onerror);
  }).then(removeEvents).catch(function (e) {
    removeEvents();
    throw new Error(e);
  });
};

var _default = _Tone.default.Buffer;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Emitter":"../node_modules/tone/tone/core/Emitter.js","../type/Type":"../node_modules/tone/tone/type/Type.js","../shim/AudioBuffer":"../node_modules/tone/tone/shim/AudioBuffer.js"}],"../node_modules/tone/tone/shim/OscillatorNode.js":[function(require,module,exports) {
"use strict";

var _Tone = _interopRequireDefault(require("../core/Tone"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (_Tone.default.supported) {
  if (!OscillatorNode.prototype.setPeriodicWave) {
    OscillatorNode.prototype.setPeriodicWave = OscillatorNode.prototype.setWaveTable;
  }

  if (!AudioContext.prototype.createPeriodicWave) {
    AudioContext.prototype.createPeriodicWave = AudioContext.prototype.createWaveTable;
  }
}
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js"}],"../node_modules/tone/tone/source/OscillatorNode.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Buffer");

require("../source/Source");

require("../core/Gain");

require("../core/AudioNode");

require("../shim/OscillatorNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Wrapper around the native fire-and-forget OscillatorNode. Adds the
 *     ability to reschedule the stop method. ***[Tone.Oscillator](Oscillator) is better 
 *     for most use-cases***
 *  @extends {Tone.AudioNode}
 *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play
 *  @param  {Function}  onload  The callback to invoke when the
 *                               buffer is done playing.
 */
_Tone.default.OscillatorNode = function () {
  var options = _Tone.default.defaults(arguments, ["frequency", "type"], _Tone.default.OscillatorNode);

  _Tone.default.AudioNode.call(this, options);
  /**
   *  The callback to invoke after the
   *  buffer source is done playing.
   *  @type  {Function}
   */


  this.onended = options.onended;
  /**
   *  The oscillator start time
   *  @type  {Number}
   *  @private
   */

  this._startTime = -1;
  /**
   *  The oscillator stop time
   *  @type  {Number}
   *  @private
   */

  this._stopTime = -1;
  /**
   *  The gain node which envelopes the OscillatorNode
   *  @type  {Tone.Gain}
   *  @private
   */

  this._gainNode = this.output = new _Tone.default.Gain(0);
  /**
   *  The oscillator
   *  @type  {OscillatorNode}
   *  @private
   */

  this._oscillator = this.context.createOscillator();

  _Tone.default.connect(this._oscillator, this._gainNode);

  this.type = options.type;
  /**
   *  The frequency of the oscillator
   *  @type {Frequency}
   *  @signal
   */

  this.frequency = new _Tone.default.Param({
    param: this._oscillator.frequency,
    units: _Tone.default.Type.Frequency,
    value: options.frequency
  });
  /**
   *  The detune of the oscillator
   *  @type {Frequency}
   *  @signal
   */

  this.detune = new _Tone.default.Param({
    param: this._oscillator.detune,
    units: _Tone.default.Type.Cents,
    value: options.detune
  });
  /**
   *  The value that the buffer ramps to
   *  @type {Gain}
   *  @private
   */

  this._gain = 1;
};

_Tone.default.extend(_Tone.default.OscillatorNode, _Tone.default.AudioNode);
/**
 *  The defaults
 *  @const
 *  @type  {Object}
 */


_Tone.default.OscillatorNode.defaults = {
  "frequency": 440,
  "detune": 0,
  "type": "sine",
  "onended": _Tone.default.noOp
};
/**
 *  Returns the playback state of the oscillator, either "started" or "stopped".
 *  @type {Tone.State}
 *  @readOnly
 *  @memberOf Tone.OscillatorNode#
 *  @name state
 */

Object.defineProperty(_Tone.default.OscillatorNode.prototype, "state", {
  get: function () {
    return this.getStateAtTime(this.now());
  }
});
/**
 *  Get the playback state at the given time
 *  @param  {Time}  time  The time to test the state at
 *  @return  {Tone.State}  The playback state. 
 */

_Tone.default.OscillatorNode.prototype.getStateAtTime = function (time) {
  time = this.toSeconds(time);

  if (this._startTime !== -1 && time >= this._startTime && (this._stopTime === -1 || time <= this._stopTime)) {
    return _Tone.default.State.Started;
  } else {
    return _Tone.default.State.Stopped;
  }
};
/**
     * Start the oscillator node at the given time
     * @param  {Time=} time When to start the oscillator
     * @return {OscillatorNode}      this
     */


_Tone.default.OscillatorNode.prototype.start = function (time) {
  this.log("start", time);

  if (this._startTime === -1) {
    this._startTime = this.toSeconds(time);
    this._startTime = Math.max(this._startTime, this.context.currentTime);

    this._oscillator.start(this._startTime);

    this._gainNode.gain.setValueAtTime(1, this._startTime);
  } else {
    throw new Error("cannot call OscillatorNode.start more than once");
  }

  return this;
};
/**
     * Sets an arbitrary custom periodic waveform given a PeriodicWave.
     * @param  {PeriodicWave} periodicWave PeriodicWave should be created with context.createPeriodicWave
     * @return {OscillatorNode} this
     */


_Tone.default.OscillatorNode.prototype.setPeriodicWave = function (periodicWave) {
  this._oscillator.setPeriodicWave(periodicWave);

  return this;
};
/**
     * Stop the oscillator node at the given time
     * @param  {Time=} time When to stop the oscillator
     * @return {OscillatorNode}      this
     */


_Tone.default.OscillatorNode.prototype.stop = function (time) {
  this.log("stop", time);
  this.assert(this._startTime !== -1, "'start' must be called before 'stop'"); //cancel the previous stop

  this.cancelStop(); //reschedule it

  this._stopTime = this.toSeconds(time);
  this._stopTime = Math.max(this._stopTime, this.context.currentTime);

  if (this._stopTime > this._startTime) {
    this._gainNode.gain.setValueAtTime(0, this._stopTime);

    this.context.clearTimeout(this._timeout);
    this._timeout = this.context.setTimeout(function () {
      this._oscillator.stop(this.now());

      this.onended(); //disconnect the object when it's ended

      setTimeout(function () {
        if (this._oscillator) {
          this._oscillator.disconnect();

          this._gainNode.disconnect();
        }
      }.bind(this), 100);
    }.bind(this), this._stopTime - this.context.currentTime);
  } else {
    //cancel the stop envelope
    this._gainNode.gain.cancelScheduledValues(this._startTime);
  }

  return this;
};
/**
 *  Cancel a scheduled stop event
 *  @return  {Tone.OscillatorNode}  this
 */


_Tone.default.OscillatorNode.prototype.cancelStop = function () {
  if (this._startTime !== -1) {
    //cancel the stop envelope
    this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);

    this.context.clearTimeout(this._timeout);
    this._stopTime = -1;
  }

  return this;
};
/**
 * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'
 * @memberOf Tone.OscillatorNode#
 * @type {Time}
 * @name type
 */


Object.defineProperty(_Tone.default.OscillatorNode.prototype, "type", {
  get: function () {
    return this._oscillator.type;
  },
  set: function (type) {
    this._oscillator.type = type;
  }
});
/**
 *  Clean up.
 *  @return  {Tone.OscillatorNode}  this
 */

_Tone.default.OscillatorNode.prototype.dispose = function () {
  if (!this._wasDisposed) {
    this._wasDisposed = true;
    this.context.clearTimeout(this._timeout);

    _Tone.default.AudioNode.prototype.dispose.call(this);

    this.onended = null;

    this._oscillator.disconnect();

    this._oscillator = null;

    this._gainNode.dispose();

    this._gainNode = null;
    this.frequency.dispose();
    this.frequency = null;
    this.detune.dispose();
    this.detune = null;
  }

  return this;
};

var _default = _Tone.default.OscillatorNode;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Buffer":"../node_modules/tone/tone/core/Buffer.js","../source/Source":"../node_modules/tone/tone/source/Source.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js","../shim/OscillatorNode":"../node_modules/tone/tone/shim/OscillatorNode.js"}],"../node_modules/tone/tone/source/Oscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/Signal");

require("../source/Source");

require("../core/Transport");

require("../source/OscillatorNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Oscillator supports a number of features including
 *         phase rotation, multiple oscillator types (see Tone.Oscillator.type),
 *         and Transport syncing (see Tone.Oscillator.syncFrequency).
 *
 *  @constructor
 *  @extends {Tone.Source}
 *  @param {Frequency} [frequency] Starting frequency
 *  @param {string} [type] The oscillator type. Read more about type below.
 *  @example
 * //make and start a 440hz sine tone
 * var osc = new Tone.Oscillator(440, "sine").toMaster().start();
 */
_Tone.default.Oscillator = function () {
  var options = _Tone.default.defaults(arguments, ["frequency", "type"], _Tone.default.Oscillator);

  _Tone.default.Source.call(this, options);
  /**
   *  the main oscillator
   *  @type {OscillatorNode}
   *  @private
   */


  this._oscillator = null;
  /**
   *  The frequency control.
   *  @type {Frequency}
   *  @signal
   */

  this.frequency = new _Tone.default.Signal(options.frequency, _Tone.default.Type.Frequency);
  /**
   *  The detune control signal.
   *  @type {Cents}
   *  @signal
   */

  this.detune = new _Tone.default.Signal(options.detune, _Tone.default.Type.Cents);
  /**
   *  the periodic wave
   *  @type {PeriodicWave}
   *  @private
   */

  this._wave = null;
  /**
   *  The partials of the oscillator
   *  @type {Array}
   *  @private
   */

  this._partials = options.partials;
  /**
   *  The number of partials to limit or extend the periodic wave by
   *  @type {Number}
   *  @private
   */

  this._partialCount = options.partialCount;
  /**
   *  the phase of the oscillator
   *  between 0 - 360
   *  @type {number}
   *  @private
   */

  this._phase = options.phase;
  /**
   *  the type of the oscillator
   *  @type {string}
   *  @private
   */

  this._type = options.type; //setup

  if (options.partialCount && options.type !== _Tone.default.Oscillator.Type.Custom) {
    this._type = this.baseType + options.partialCount.toString();
  }

  this.phase = this._phase;

  this._readOnly(["frequency", "detune"]);
};

_Tone.default.extend(_Tone.default.Oscillator, _Tone.default.Source);
/**
 *  the default parameters
 *  @type {Object}
 */


_Tone.default.Oscillator.defaults = {
  "type": "sine",
  "frequency": 440,
  "detune": 0,
  "phase": 0,
  "partials": [],
  "partialCount": 0
};
/**
 *  The Oscillator types
 *  @enum {String}
 */

_Tone.default.Oscillator.Type = {
  Sine: "sine",
  Triangle: "triangle",
  Sawtooth: "sawtooth",
  Square: "square",
  Custom: "custom"
};
/**
 *  start the oscillator
 *  @param  {Time} [time=now]
 *  @private
 */

_Tone.default.Oscillator.prototype._start = function (time) {
  this.log("start", time); //new oscillator with previous values

  var oscillator = new _Tone.default.OscillatorNode();
  this._oscillator = oscillator;

  if (this._wave) {
    this._oscillator.setPeriodicWave(this._wave);
  } else {
    this._oscillator.type = this._type;
  } //connect the control signal to the oscillator frequency & detune


  this._oscillator.connect(this.output);

  this.frequency.connect(this._oscillator.frequency);
  this.detune.connect(this._oscillator.detune); //start the oscillator

  time = this.toSeconds(time);

  this._oscillator.start(time);
};
/**
 *  stop the oscillator
 *  @private
 *  @param  {Time} [time=now] (optional) timing parameter
 *  @returns {Tone.Oscillator} this
 */


_Tone.default.Oscillator.prototype._stop = function (time) {
  this.log("stop", time);

  if (this._oscillator) {
    time = this.toSeconds(time);

    this._oscillator.stop(time);
  }

  return this;
};
/**
 * Restart the oscillator. Does not stop the oscillator, but instead
 * just cancels any scheduled 'stop' from being invoked.
 * @param  {Time=} time
 * @return {Tone.Oscillator}      this
 */


_Tone.default.Oscillator.prototype.restart = function (time) {
  if (this._oscillator) {
    this._oscillator.cancelStop();
  }

  this._state.cancel(this.toSeconds(time));

  return this;
};
/**
 *  Sync the signal to the Transport's bpm. Any changes to the transports bpm,
 *  will also affect the oscillators frequency.
 *  @returns {Tone.Oscillator} this
 *  @example
 * Tone.Transport.bpm.value = 120;
 * osc.frequency.value = 440;
 * //the ration between the bpm and the frequency will be maintained
 * osc.syncFrequency();
 * Tone.Transport.bpm.value = 240;
 * // the frequency of the oscillator is doubled to 880
 */


_Tone.default.Oscillator.prototype.syncFrequency = function () {
  _Tone.default.Transport.syncSignal(this.frequency);

  return this;
};
/**
 *  Unsync the oscillator's frequency from the Transport.
 *  See Tone.Oscillator.syncFrequency
 *  @returns {Tone.Oscillator} this
 */


_Tone.default.Oscillator.prototype.unsyncFrequency = function () {
  _Tone.default.Transport.unsyncSignal(this.frequency);

  return this;
};
/**
 * The type of the oscillator: either sine, square, triangle, or sawtooth. Also capable of
 * setting the first x number of partials of the oscillator. For example: "sine4" would
 * set be the first 4 partials of the sine wave and "triangle8" would set the first
 * 8 partials of the triangle wave.
 * <br><br>
 * Uses PeriodicWave internally even for native types so that it can set the phase.
 * PeriodicWave equations are from the
 * [Webkit Web Audio implementation](https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/modules/webaudio/PeriodicWave.cpp&sq=package:chromium).
 *
 * @memberOf Tone.Oscillator#
 * @type {string}
 * @name type
 * @example
 * //set it to a square wave
 * osc.type = "square";
 * @example
 * //set the first 6 partials of a sawtooth wave
 * osc.type = "sawtooth6";
 */


Object.defineProperty(_Tone.default.Oscillator.prototype, "type", {
  get: function () {
    return this._type;
  },
  set: function (type) {
    var isBasicType = [_Tone.default.Oscillator.Type.Sine, _Tone.default.Oscillator.Type.Square, _Tone.default.Oscillator.Type.Triangle, _Tone.default.Oscillator.Type.Sawtooth].includes(type);

    if (this._phase === 0 && isBasicType) {
      this._wave = null;
      this._partialCount = 0; //just go with the basic approach

      if (this._oscillator !== null) {
        this._oscillator.type = type;
      }
    } else {
      var coefs = this._getRealImaginary(type, this._phase);

      var periodicWave = this.context.createPeriodicWave(coefs[0], coefs[1]);
      this._wave = periodicWave;

      if (this._oscillator !== null) {
        this._oscillator.setPeriodicWave(this._wave);
      }
    }

    this._type = type;
  }
});
/**
 * The oscillator type without the partialsCount appended to the end
 * @memberOf Tone.Oscillator#
 * @type {string}
 * @name baseType
 * @example
 * osc.type = 'sine2'
 * osc.baseType //'sine'
 * osc.partialCount = 2
 */

Object.defineProperty(_Tone.default.Oscillator.prototype, "baseType", {
  get: function () {
    return this._type.replace(this.partialCount, "");
  },
  set: function (baseType) {
    if (this.partialCount && this._type !== _Tone.default.Oscillator.Type.Custom && baseType !== _Tone.default.Oscillator.Type.Custom) {
      this.type = baseType + this.partialCount;
    } else {
      this.type = baseType;
    }
  }
});
/**
 * 'partialCount' offers an alternative way to set the number of used partials. 
 * When partialCount is 0, the maximum number of partials are used when representing
 * the waveform using the periodicWave. When 'partials' is set, this value is 
 * not settable, but equals the length of the partials array.
 * @example
 * osc.type = 'sine'
 * osc.partialCount = 3
 * //is equivalent to
 * osc.type = 'sine3'
 * @memberOf Tone.Oscillator#
 * @type {Number}
 * @name partialCount
 */

Object.defineProperty(_Tone.default.Oscillator.prototype, "partialCount", {
  get: function () {
    return this._partialCount;
  },
  set: function (p) {
    var type = this._type;
    var partial = /^(sine|triangle|square|sawtooth)(\d+)$/.exec(this._type);

    if (partial) {
      type = partial[1];
    }

    if (this._type !== _Tone.default.Oscillator.Type.Custom) {
      if (p === 0) {
        this.type = type;
      } else {
        this.type = type + p.toString();
      }
    }
  }
});
/**
 *  Get the object's attributes. Given no arguments get
 *  will return all available object properties and their corresponding
 *  values. 
 *  @memberOf Tone.Oscillator#
 *  @returns {Object}
 */

_Tone.default.Oscillator.prototype.get = function () {
  var values = _Tone.default.prototype.get.apply(this, arguments);

  if (values.type !== _Tone.default.Oscillator.Type.Custom) {
    delete values.partials;
  }

  return values;
};
/**
 *  Returns the real and imaginary components based
 *  on the oscillator type.
 *  @returns {Array} [real, imaginary]
 *  @private
 */


_Tone.default.Oscillator.prototype._getRealImaginary = function (type, phase) {
  var fftSize = 4096;
  var periodicWaveSize = fftSize / 2;
  var real = new Float32Array(periodicWaveSize);
  var imag = new Float32Array(periodicWaveSize);
  var partialCount = 1;

  if (type === _Tone.default.Oscillator.Type.Custom) {
    partialCount = this._partials.length + 1;
    this._partialCount = this._partials.length;
    periodicWaveSize = partialCount;
  } else {
    var partial = /^(sine|triangle|square|sawtooth)(\d+)$/.exec(type);

    if (partial) {
      partialCount = parseInt(partial[2]) + 1;
      this._partialCount = parseInt(partial[2]);
      type = partial[1];
      partialCount = Math.max(partialCount, 2);
      periodicWaveSize = partialCount;
    } else {
      this._partialCount = 0;
    }

    this._partials = [];
  }

  for (var n = 1; n < periodicWaveSize; ++n) {
    var piFactor = 2 / (n * Math.PI);
    var b;

    switch (type) {
      case _Tone.default.Oscillator.Type.Sine:
        b = n <= partialCount ? 1 : 0;
        this._partials[n - 1] = b;
        break;

      case _Tone.default.Oscillator.Type.Square:
        b = n & 1 ? 2 * piFactor : 0;
        this._partials[n - 1] = b;
        break;

      case _Tone.default.Oscillator.Type.Sawtooth:
        b = piFactor * (n & 1 ? 1 : -1);
        this._partials[n - 1] = b;
        break;

      case _Tone.default.Oscillator.Type.Triangle:
        if (n & 1) {
          b = 2 * (piFactor * piFactor) * (n - 1 >> 1 & 1 ? -1 : 1);
        } else {
          b = 0;
        }

        this._partials[n - 1] = b;
        break;

      case _Tone.default.Oscillator.Type.Custom:
        b = this._partials[n - 1];
        break;

      default:
        throw new TypeError("Tone.Oscillator: invalid type: " + type);
    }

    if (b !== 0) {
      real[n] = -b * Math.sin(phase * n);
      imag[n] = b * Math.cos(phase * n);
    } else {
      real[n] = 0;
      imag[n] = 0;
    }
  }

  return [real, imag];
};
/**
 *  Compute the inverse FFT for a given phase.
 *  @param  {Float32Array}  real
 *  @param  {Float32Array}  imag
 *  @param  {NormalRange}  phase
 *  @return  {AudioRange}
 *  @private
 */


_Tone.default.Oscillator.prototype._inverseFFT = function (real, imag, phase) {
  var sum = 0;
  var len = real.length;

  for (var i = 0; i < len; i++) {
    sum += real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);
  }

  return sum;
};
/**
 *  Returns the initial value of the oscillator.
 *  @return  {AudioRange}
 *  @private
 */


_Tone.default.Oscillator.prototype._getInitialValue = function () {
  var coefs = this._getRealImaginary(this._type, 0);

  var real = coefs[0];
  var imag = coefs[1];
  var maxValue = 0;
  var twoPi = Math.PI * 2; //check for peaks in 8 places

  for (var i = 0; i < 8; i++) {
    maxValue = Math.max(this._inverseFFT(real, imag, i / 8 * twoPi), maxValue);
  }

  return -this._inverseFFT(real, imag, this._phase) / maxValue;
};
/**
 * The partials of the waveform. A partial represents
 * the amplitude at a harmonic. The first harmonic is the
 * fundamental frequency, the second is the octave and so on
 * following the harmonic series.
 * Setting this value will automatically set the type to "custom".
 * The value is an empty array when the type is not "custom".
 * @memberOf Tone.Oscillator#
 * @type {Array}
 * @name partials
 * @example
 * osc.partials = [1, 0.2, 0.01];
 */


Object.defineProperty(_Tone.default.Oscillator.prototype, "partials", {
  get: function () {
    return this._partials;
  },
  set: function (partials) {
    this._partials = partials;
    this.type = _Tone.default.Oscillator.Type.Custom;
  }
});
/**
 * The phase of the oscillator in degrees.
 * @memberOf Tone.Oscillator#
 * @type {Degrees}
 * @name phase
 * @example
 * osc.phase = 180; //flips the phase of the oscillator
 */

Object.defineProperty(_Tone.default.Oscillator.prototype, "phase", {
  get: function () {
    return this._phase * (180 / Math.PI);
  },
  set: function (phase) {
    this._phase = phase * Math.PI / 180; //reset the type

    this.type = this._type;
  }
});
/**
 *  Dispose and disconnect.
 *  @return {Tone.Oscillator} this
 */

_Tone.default.Oscillator.prototype.dispose = function () {
  _Tone.default.Source.prototype.dispose.call(this);

  if (this._oscillator !== null) {
    this._oscillator.dispose();

    this._oscillator = null;
  }

  this._wave = null;

  this._writable(["frequency", "detune"]);

  this.frequency.dispose();
  this.frequency = null;
  this.detune.dispose();
  this.detune = null;
  this._partials = null;
  return this;
};

var _default = _Tone.default.Oscillator;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../source/Source":"../node_modules/tone/tone/source/Source.js","../core/Transport":"../node_modules/tone/tone/core/Transport.js","../source/OscillatorNode":"../node_modules/tone/tone/source/OscillatorNode.js"}],"../node_modules/tone/tone/component/LFO.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../source/Oscillator");

require("../signal/Scale");

require("../core/AudioNode");

require("../signal/Signal");

require("../signal/AudioToGain");

require("../type/Type");

require("../signal/Zero");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  LFO stands for low frequency oscillator. Tone.LFO produces an output signal
 *          which can be attached to an AudioParam or Tone.Signal
 *          in order to modulate that parameter with an oscillator. The LFO can
 *          also be synced to the transport to start/stop and change when the tempo changes.
 *
 *  @constructor
 *  @extends {Tone.AudioNode}
 *  @param {Frequency|Object} [frequency] The frequency of the oscillation. Typically, LFOs will be
 *                               in the frequency range of 0.1 to 10 hertz.
 *  @param {number=} min The minimum output value of the LFO.
 *  @param {number=} max The maximum value of the LFO.
 *  @example
 * var lfo = new Tone.LFO("4n", 400, 4000);
 * lfo.connect(filter.frequency);
 */
_Tone.default.LFO = function () {
  var options = _Tone.default.defaults(arguments, ["frequency", "min", "max"], _Tone.default.LFO);

  _Tone.default.AudioNode.call(this);
  /**
   *  The oscillator.
   *  @type {Tone.Oscillator}
   *  @private
   */


  this._oscillator = new _Tone.default.Oscillator({
    "frequency": options.frequency,
    "type": options.type
  });
  /**
   *  the lfo's frequency
   *  @type {Frequency}
   *  @signal
   */

  this.frequency = this._oscillator.frequency;
  /**
   * The amplitude of the LFO, which controls the output range between
   * the min and max output. For example if the min is -10 and the max
   * is 10, setting the amplitude to 0.5 would make the LFO modulate
   * between -5 and 5.
   * @type {Number}
   * @signal
   */

  this.amplitude = this._oscillator.volume;
  this.amplitude.units = _Tone.default.Type.NormalRange;
  this.amplitude.value = options.amplitude;
  /**
   *  The signal which is output when the LFO is stopped
   *  @type  {Tone.Signal}
   *  @private
   */

  this._stoppedSignal = new _Tone.default.Signal(0, _Tone.default.Type.AudioRange);
  /**
   *  Just outputs zeros.
   *  @type {Tone.Zero}
   *  @private
   */

  this._zeros = new _Tone.default.Zero();
  /**
   *  The value that the LFO outputs when it's stopped
   *  @type {AudioRange}
   *  @private
   */

  this._stoppedValue = 0;
  /**
   *  @type {Tone.AudioToGain}
   *  @private
   */

  this._a2g = new _Tone.default.AudioToGain();
  /**
   *  @type {Tone.Scale}
   *  @private
   */

  this._scaler = this.output = new _Tone.default.Scale(options.min, options.max);
  /**
   *  the units of the LFO (used for converting)
   *  @type {Tone.Type}
   *  @private
   */

  this._units = _Tone.default.Type.Default;
  this.units = options.units; //connect it up

  this._oscillator.chain(this._a2g, this._scaler);

  this._zeros.connect(this._a2g);

  this._stoppedSignal.connect(this._a2g);

  this._readOnly(["amplitude", "frequency"]);

  this.phase = options.phase;
};

_Tone.default.extend(_Tone.default.LFO, _Tone.default.AudioNode);
/**
 *  the default parameters
 *
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.LFO.defaults = {
  "type": "sine",
  "min": 0,
  "max": 1,
  "phase": 0,
  "frequency": "4n",
  "amplitude": 1,
  "units": _Tone.default.Type.Default
};
/**
 *  Start the LFO.
 *  @param  {Time} [time=now] the time the LFO will start
 *  @returns {Tone.LFO} this
 */

_Tone.default.LFO.prototype.start = function (time) {
  time = this.toSeconds(time);

  this._stoppedSignal.setValueAtTime(0, time);

  this._oscillator.start(time);

  return this;
};
/**
 *  Stop the LFO.
 *  @param  {Time} [time=now] the time the LFO will stop
 *  @returns {Tone.LFO} this
 */


_Tone.default.LFO.prototype.stop = function (time) {
  time = this.toSeconds(time);

  this._stoppedSignal.setValueAtTime(this._stoppedValue, time);

  this._oscillator.stop(time);

  return this;
};
/**
 *  Sync the start/stop/pause to the transport
 *  and the frequency to the bpm of the transport
 *  @returns {Tone.LFO} this
 *  @example
 *  lfo.frequency.value = "8n";
 *  lfo.sync().start(0)
 *  //the rate of the LFO will always be an eighth note,
 *  //even as the tempo changes
 */


_Tone.default.LFO.prototype.sync = function () {
  this._oscillator.sync();

  this._oscillator.syncFrequency();

  return this;
};
/**
 *  unsync the LFO from transport control
 *  @returns {Tone.LFO} this
 */


_Tone.default.LFO.prototype.unsync = function () {
  this._oscillator.unsync();

  this._oscillator.unsyncFrequency();

  return this;
};
/**
 * The miniumum output of the LFO.
 * @memberOf Tone.LFO#
 * @type {number}
 * @name min
 */


Object.defineProperty(_Tone.default.LFO.prototype, "min", {
  get: function () {
    return this._toUnits(this._scaler.min);
  },
  set: function (min) {
    min = this._fromUnits(min);
    this._scaler.min = min;
  }
});
/**
 * The maximum output of the LFO.
 * @memberOf Tone.LFO#
 * @type {number}
 * @name max
 */

Object.defineProperty(_Tone.default.LFO.prototype, "max", {
  get: function () {
    return this._toUnits(this._scaler.max);
  },
  set: function (max) {
    max = this._fromUnits(max);
    this._scaler.max = max;
  }
});
/**
 * The type of the oscillator: sine, square, sawtooth, triangle.
 * @memberOf Tone.LFO#
 * @type {string}
 * @name type
 */

Object.defineProperty(_Tone.default.LFO.prototype, "type", {
  get: function () {
    return this._oscillator.type;
  },
  set: function (type) {
    this._oscillator.type = type;
    this._stoppedValue = this._oscillator._getInitialValue();
    this._stoppedSignal.value = this._stoppedValue;
  }
});
/**
 * The phase of the LFO.
 * @memberOf Tone.LFO#
 * @type {number}
 * @name phase
 */

Object.defineProperty(_Tone.default.LFO.prototype, "phase", {
  get: function () {
    return this._oscillator.phase;
  },
  set: function (phase) {
    this._oscillator.phase = phase;
    this._stoppedValue = this._oscillator._getInitialValue();
    this._stoppedSignal.value = this._stoppedValue;
  }
});
/**
 * The output units of the LFO.
 * @memberOf Tone.LFO#
 * @type {Tone.Type}
 * @name units
 */

Object.defineProperty(_Tone.default.LFO.prototype, "units", {
  get: function () {
    return this._units;
  },
  set: function (val) {
    var currentMin = this.min;
    var currentMax = this.max; //convert the min and the max

    this._units = val;
    this.min = currentMin;
    this.max = currentMax;
  }
});
/**
 *  Returns the playback state of the source, either "started" or "stopped".
 *  @type {Tone.State}
 *  @readOnly
 *  @memberOf Tone.LFO#
 *  @name state
 */

Object.defineProperty(_Tone.default.LFO.prototype, "state", {
  get: function () {
    return this._oscillator.state;
  }
});
/**
 *  Connect the output of the LFO to an AudioParam, AudioNode, or Tone Node.
 *  Tone.LFO will automatically convert to the destination units of the
 *  will get the units from the connected node.
 *  @param  {Tone | AudioParam | AudioNode} node
 *  @param {number} [outputNum=0] optionally which output to connect from
 *  @param {number} [inputNum=0] optionally which input to connect to
 *  @returns {Tone.LFO} this
 *  @private
 */

_Tone.default.LFO.prototype.connect = function (node) {
  if (node.constructor === _Tone.default.Signal || node.constructor === _Tone.default.Param) {
    this.convert = node.convert;
    this.units = node.units;
  }

  _Tone.default.SignalBase.prototype.connect.apply(this, arguments);

  return this;
};
/**
 *  private method borrowed from Param converts
 *  units from their destination value
 *  @function
 *  @private
 */


_Tone.default.LFO.prototype._fromUnits = _Tone.default.Param.prototype._fromUnits;
/**
 *  private method borrowed from Param converts
 *  units to their destination value
 *  @function
 *  @private
 */

_Tone.default.LFO.prototype._toUnits = _Tone.default.Param.prototype._toUnits;
/**
 *  disconnect and dispose
 *  @returns {Tone.LFO} this
 */

_Tone.default.LFO.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._writable(["amplitude", "frequency"]);

  this._oscillator.dispose();

  this._oscillator = null;

  this._stoppedSignal.dispose();

  this._stoppedSignal = null;

  this._zeros.dispose();

  this._zeros = null;

  this._scaler.dispose();

  this._scaler = null;

  this._a2g.dispose();

  this._a2g = null;
  this.frequency = null;
  this.amplitude = null;
  return this;
};

var _default = _Tone.default.LFO;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../source/Oscillator":"../node_modules/tone/tone/source/Oscillator.js","../signal/Scale":"../node_modules/tone/tone/signal/Scale.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../signal/AudioToGain":"../node_modules/tone/tone/signal/AudioToGain.js","../type/Type":"../node_modules/tone/tone/type/Type.js","../signal/Zero":"../node_modules/tone/tone/signal/Zero.js"}],"../node_modules/tone/tone/component/Limiter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/Compressor");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Limiter will limit the loudness of an incoming signal.
 *         It is composed of a Tone.Compressor with a fast attack
 *         and release. Limiters are commonly used to safeguard against
 *         signal clipping. Unlike a compressor, limiters do not provide
 *         smooth gain reduction and almost completely prevent
 *         additional gain above the threshold.
 *
 *  @extends {Tone.AudioNode}
 *  @constructor
 *  @param {number} threshold The theshold above which the limiting is applied.
 *  @example
 *  var limiter = new Tone.Limiter(-6);
 */
_Tone.default.Limiter = function () {
  var options = _Tone.default.defaults(arguments, ["threshold"], _Tone.default.Limiter);

  _Tone.default.AudioNode.call(this);
  /**
   *  the compressor
   *  @private
   *  @type {Tone.Compressor}
   */


  this._compressor = this.input = this.output = new _Tone.default.Compressor({
    "attack": 0.001,
    "decay": 0.001,
    "threshold": options.threshold
  });
  /**
   * The threshold of of the limiter
   * @type {Decibel}
   * @signal
   */

  this.threshold = this._compressor.threshold;

  this._readOnly("threshold");
};

_Tone.default.extend(_Tone.default.Limiter, _Tone.default.AudioNode);
/**
 *  The default value
 *  @type {Object}
 *  @const
 *  @static
 */


_Tone.default.Limiter.defaults = {
  "threshold": -12
};
/**
 *  Clean up.
 *  @returns {Tone.Limiter} this
 */

_Tone.default.Limiter.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._compressor.dispose();

  this._compressor = null;

  this._writable("threshold");

  this.threshold = null;
  return this;
};

var _default = _Tone.default.Limiter;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/Compressor":"../node_modules/tone/tone/component/Compressor.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/LowpassCombFilter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/Signal");

require("../component/Filter");

require("../core/AudioNode");

require("../component/FeedbackCombFilter");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Lowpass is a lowpass feedback comb filter. It is similar to
 *         Tone.FeedbackCombFilter, but includes a lowpass filter.
 *
 *  @extends {Tone.AudioNode}
 *  @constructor
 *  @param {Time|Object} [delayTime] The delay time of the comb filter
 *  @param {NormalRange=} resonance The resonance (feedback) of the comb filter
 *  @param {Frequency=} dampening The cutoff of the lowpass filter dampens the
 *                                signal as it is fedback.
 */
_Tone.default.LowpassCombFilter = function () {
  var options = _Tone.default.defaults(arguments, ["delayTime", "resonance", "dampening"], _Tone.default.LowpassCombFilter);

  _Tone.default.AudioNode.call(this);
  /**
   *  the delay node
   *  @type {DelayNode}
   *  @private
   */


  this._combFilter = this.output = new _Tone.default.FeedbackCombFilter(options.delayTime, options.resonance);
  /**
   *  The delayTime of the comb filter.
   *  @type {Time}
   *  @signal
   */

  this.delayTime = this._combFilter.delayTime;
  /**
   *  the lowpass filter
   *  @type  {BiquadFilterNode}
   *  @private
   */

  this._lowpass = this.input = new _Tone.default.Filter({
    "frequency": options.dampening,
    "type": "lowpass",
    "Q": 0,
    "rolloff": -12
  });
  /**
   *  The dampening control of the feedback
   *  @type {Frequency}
   *  @signal
   */

  this.dampening = this._lowpass.frequency;
  /**
   *  The amount of feedback of the delayed signal.
   *  @type {NormalRange}
   *  @signal
   */

  this.resonance = this._combFilter.resonance; //connections

  this._lowpass.connect(this._combFilter);

  this._readOnly(["dampening", "resonance", "delayTime"]);
};

_Tone.default.extend(_Tone.default.LowpassCombFilter, _Tone.default.AudioNode);
/**
 *  the default parameters
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.LowpassCombFilter.defaults = {
  "delayTime": 0.1,
  "resonance": 0.5,
  "dampening": 3000
};
/**
 *  Clean up.
 *  @returns {Tone.LowpassCombFilter} this
 */

_Tone.default.LowpassCombFilter.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._writable(["dampening", "resonance", "delayTime"]);

  this._combFilter.dispose();

  this._combFilter = null;
  this.resonance = null;
  this.delayTime = null;

  this._lowpass.dispose();

  this._lowpass = null;
  this.dampening = null;
  return this;
};

var _default = _Tone.default.LowpassCombFilter;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../component/Filter":"../node_modules/tone/tone/component/Filter.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js","../component/FeedbackCombFilter":"../node_modules/tone/tone/component/FeedbackCombFilter.js"}],"../node_modules/tone/tone/component/Meter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/Analyser");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.Meter gets the [RMS](https://en.wikipedia.org/wiki/Root_mean_square)
 *          of an input signal. It can also get the raw
 *          value of the input signal.
 *
 *  @constructor
 *  @param {Number} smoothing The amount of smoothing applied between frames.
 *  @extends {Tone.AudioNode}
 *  @example
 * var meter = new Tone.Meter();
 * var mic = new Tone.UserMedia().open();
 * //connect mic to the meter
 * mic.connect(meter);
 * //the current level of the mic input in decibels
 * var level = meter.getLevel();
 */
_Tone.default.Meter = function () {
  var options = _Tone.default.defaults(arguments, ["smoothing"], _Tone.default.Meter);

  _Tone.default.AudioNode.call(this);
  /**
   * A value from 0 -> 1 where 0 represents no time averaging with the last analysis frame.
   * @type {Number}
   */


  this.smoothing = options.smoothing;
  /**
   * The previous frame's value
   * @type {Number}
   * @private
   */

  this._rms = 0;
  /**
   *  The analyser node which computes the levels.
   *  @private
   *  @type  {Tone.Analyser}
   */

  this.input = this.output = this._analyser = new _Tone.default.Analyser("waveform", 256);
};

_Tone.default.extend(_Tone.default.Meter, _Tone.default.AudioNode);
/**
 *  The defaults
 *  @type {Object}
 *  @static
 *  @const
 */


_Tone.default.Meter.defaults = {
  "smoothing": 0.8
};
/**
 *  Get the current decibel value of the incoming signal
 *  @returns {Decibels}
 */

_Tone.default.Meter.prototype.getLevel = function () {
  var values = this._analyser.getValue();

  var totalSquared = 0;

  for (var i = 0; i < values.length; i++) {
    var value = values[i];
    totalSquared += value * value;
  }

  var rms = Math.sqrt(totalSquared / values.length); //the rms can only fall at the rate of the smoothing
  //but can jump up instantly

  this._rms = Math.max(rms, this._rms * this.smoothing);
  return _Tone.default.gainToDb(this._rms);
};
/**
 *  Get the signal value of the incoming signal
 *  @returns {Number}
 */


_Tone.default.Meter.prototype.getValue = function () {
  var value = this._analyser.getValue();

  return value[0];
};
/**
 *  Clean up.
 *  @returns {Tone.Meter} this
 */


_Tone.default.Meter.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._analyser.dispose();

  this._analyser = null;
  return this;
};

var _default = _Tone.default.Meter;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/Analyser":"../node_modules/tone/tone/component/Analyser.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/MidSideSplit.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/Add");

require("../signal/Subtract");

require("../signal/Signal");

require("../component/Split");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Mid/Side processing separates the the 'mid' signal
 *         (which comes out of both the left and the right channel)
 *         and the 'side' (which only comes out of the the side channels). <br><br>
 *         <code>
 *         Mid = (Left+Right)/sqrt(2);   // obtain mid-signal from left and right<br>
 *         Side = (Left-Right)/sqrt(2);   // obtain side-signal from left and righ<br>
 *         </code>
 *
 *  @extends {Tone.AudioNode}
 *  @constructor
 */
_Tone.default.MidSideSplit = function () {
  _Tone.default.AudioNode.call(this);

  this.createInsOuts(0, 2);
  /**
   *  split the incoming signal into left and right channels
   *  @type  {Tone.Split}
   *  @private
   */

  this._split = this.input = new _Tone.default.Split();
  /**
   *  The mid send. Connect to mid processing. Alias for
   *  <code>output[0]</code>
   *  @type {Tone.Add}
   */

  this._midAdd = new _Tone.default.Add();
  /**
   * Multiply the _midAdd by sqrt(1/2)
   * @type {Tone.Multiply}
   */

  this.mid = this.output[0] = new _Tone.default.Multiply(Math.SQRT1_2);
  /**
   *  The side output. Connect to side processing. Also Output 1
   *  @type {Tone.Subtract}
   */

  this._sideSubtract = new _Tone.default.Subtract();
  /**
   * Multiply the _midAdd by sqrt(1/2)
   * @type {Tone.Multiply}
   */

  this.side = this.output[1] = new _Tone.default.Multiply(Math.SQRT1_2);

  this._split.connect(this._midAdd, 0, 0);

  this._split.connect(this._midAdd, 1, 1);

  this._split.connect(this._sideSubtract, 0, 0);

  this._split.connect(this._sideSubtract, 1, 1);

  this._midAdd.connect(this.mid);

  this._sideSubtract.connect(this.side);
};

_Tone.default.extend(_Tone.default.MidSideSplit, _Tone.default.AudioNode);
/**
 *  clean up
 *  @returns {Tone.MidSideSplit} this
 */


_Tone.default.MidSideSplit.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this.mid.dispose();
  this.mid = null;
  this.side.dispose();
  this.side = null;

  this._midAdd.dispose();

  this._midAdd = null;

  this._sideSubtract.dispose();

  this._sideSubtract = null;

  this._split.dispose();

  this._split = null;
  return this;
};

var _default = _Tone.default.MidSideSplit;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/Add":"../node_modules/tone/tone/signal/Add.js","../signal/Subtract":"../node_modules/tone/tone/signal/Subtract.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../component/Split":"../node_modules/tone/tone/component/Split.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/MidSideMerge.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/Signal");

require("../signal/Subtract");

require("../signal/Add");

require("../component/Merge");

require("../core/Gain");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Mid/Side processing separates the the 'mid' signal
 *         (which comes out of both the left and the right channel)
 *         and the 'side' (which only comes out of the the side channels).
 *         MidSideMerge merges the mid and side signal after they've been seperated
 *         by Tone.MidSideSplit.<br><br>
 *         <code>
 *         Left = (Mid+Side)/sqrt(2);   // obtain left signal from mid and side<br>
 *         Right = (Mid-Side)/sqrt(2);   // obtain right signal from mid and side<br>
 *         </code>
 *
 *  @extends {Tone.AudioNode}
 *  @constructor
 */
_Tone.default.MidSideMerge = function () {
  _Tone.default.AudioNode.call(this);

  this.createInsOuts(2, 0);
  /**
   *  The mid signal input. Alias for
   *  <code>input[0]</code>
   *  @type  {Tone.Gain}
   */

  this.mid = this.input[0] = new _Tone.default.Gain();
  /**
   *  recombine the mid/side into Left
   *  @type {Tone.Add}
   *  @private
   */

  this._left = new _Tone.default.Add();
  /**
   * Multiply the left by sqrt(1/2)
   * @type {Tone.Multiply}
   */

  this._timesTwoLeft = new _Tone.default.Multiply(Math.SQRT1_2);
  /**
   *  The side signal input. Alias for
   *  <code>input[1]</code>
   *  @type  {Tone.Gain}
   */

  this.side = this.input[1] = new _Tone.default.Gain();
  /**
   *  recombine the mid/side into Right
   *  @type {Tone.Subtract}
   *  @private
   */

  this._right = new _Tone.default.Subtract();
  /**
   * Multiply the right by sqrt(1/2)
   * @type {Tone.Multiply}
   */

  this._timesTwoRight = new _Tone.default.Multiply(Math.SQRT1_2);
  /**
   *  Merge the left/right signal back into a stereo signal.
   *  @type {Tone.Merge}
   *  @private
   */

  this._merge = this.output = new _Tone.default.Merge();
  this.mid.connect(this._left, 0, 0);
  this.side.connect(this._left, 0, 1);
  this.mid.connect(this._right, 0, 0);
  this.side.connect(this._right, 0, 1);

  this._left.connect(this._timesTwoLeft);

  this._right.connect(this._timesTwoRight);

  this._timesTwoLeft.connect(this._merge, 0, 0);

  this._timesTwoRight.connect(this._merge, 0, 1);
};

_Tone.default.extend(_Tone.default.MidSideMerge, _Tone.default.AudioNode);
/**
 *  clean up
 *  @returns {Tone.MidSideMerge} this
 */


_Tone.default.MidSideMerge.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this.mid.dispose();
  this.mid = null;
  this.side.dispose();
  this.side = null;

  this._left.dispose();

  this._left = null;

  this._timesTwoLeft.dispose();

  this._timesTwoLeft = null;

  this._right.dispose();

  this._right = null;

  this._timesTwoRight.dispose();

  this._timesTwoRight = null;

  this._merge.dispose();

  this._merge = null;
  return this;
};

var _default = _Tone.default.MidSideMerge;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../signal/Subtract":"../node_modules/tone/tone/signal/Subtract.js","../signal/Add":"../node_modules/tone/tone/signal/Add.js","../component/Merge":"../node_modules/tone/tone/component/Merge.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/MidSideCompressor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/MidSideSplit");

require("../component/MidSideMerge");

require("../component/Compressor");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.MidSideCompressor applies two different compressors to the mid
 *         and side signal components. See Tone.MidSideSplit.
 *
 *  @extends {Tone.AudioNode}
 *  @param {Object} options The options that are passed to the mid and side
 *                          compressors.
 *  @constructor
 */
_Tone.default.MidSideCompressor = function (options) {
  _Tone.default.AudioNode.call(this);

  options = _Tone.default.defaultArg(options, _Tone.default.MidSideCompressor.defaults);
  /**
   *  the mid/side split
   *  @type  {Tone.MidSideSplit}
   *  @private
   */

  this._midSideSplit = this.input = new _Tone.default.MidSideSplit();
  /**
   *  the mid/side recombination
   *  @type  {Tone.MidSideMerge}
   *  @private
   */

  this._midSideMerge = this.output = new _Tone.default.MidSideMerge();
  /**
   *  The compressor applied to the mid signal
   *  @type  {Tone.Compressor}
   */

  this.mid = new _Tone.default.Compressor(options.mid);
  /**
   *  The compressor applied to the side signal
   *  @type  {Tone.Compressor}
   */

  this.side = new _Tone.default.Compressor(options.side);

  this._midSideSplit.mid.chain(this.mid, this._midSideMerge.mid);

  this._midSideSplit.side.chain(this.side, this._midSideMerge.side);

  this._readOnly(["mid", "side"]);
};

_Tone.default.extend(_Tone.default.MidSideCompressor, _Tone.default.AudioNode);
/**
 *  @const
 *  @static
 *  @type {Object}
 */


_Tone.default.MidSideCompressor.defaults = {
  "mid": {
    "ratio": 3,
    "threshold": -24,
    "release": 0.03,
    "attack": 0.02,
    "knee": 16
  },
  "side": {
    "ratio": 6,
    "threshold": -30,
    "release": 0.25,
    "attack": 0.03,
    "knee": 10
  }
};
/**
 *  Clean up.
 *  @returns {Tone.MidSideCompressor} this
 */

_Tone.default.MidSideCompressor.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._writable(["mid", "side"]);

  this.mid.dispose();
  this.mid = null;
  this.side.dispose();
  this.side = null;

  this._midSideSplit.dispose();

  this._midSideSplit = null;

  this._midSideMerge.dispose();

  this._midSideMerge = null;
  return this;
};

var _default = _Tone.default.MidSideCompressor;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/MidSideSplit":"../node_modules/tone/tone/component/MidSideSplit.js","../component/MidSideMerge":"../node_modules/tone/tone/component/MidSideMerge.js","../component/Compressor":"../node_modules/tone/tone/component/Compressor.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/Mono.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/Merge");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Mono coerces the incoming mono or stereo signal into a mono signal
 *         where both left and right channels have the same value. This can be useful
 *         for [stereo imaging](https://en.wikipedia.org/wiki/Stereo_imaging).
 *
 *  @extends {Tone.AudioNode}
 *  @constructor
 */
_Tone.default.Mono = function () {
  _Tone.default.AudioNode.call(this);

  this.createInsOuts(1, 0);
  /**
   *  merge the signal
   *  @type {Tone.Merge}
   *  @private
   */

  this._merge = this.output = new _Tone.default.Merge();

  _Tone.default.connect(this.input, this._merge, 0, 0);

  _Tone.default.connect(this.input, this._merge, 0, 1);
};

_Tone.default.extend(_Tone.default.Mono, _Tone.default.AudioNode);
/**
 *  clean up
 *  @returns {Tone.Mono} this
 */


_Tone.default.Mono.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._merge.dispose();

  this._merge = null;
  return this;
};

var _default = _Tone.default.Mono;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/Merge":"../node_modules/tone/tone/component/Merge.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/MultibandCompressor.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/MultibandSplit");

require("../component/Compressor");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class A compressor with seperate controls over low/mid/high dynamics
 *
 *  @extends {Tone.AudioNode}
 *  @constructor
 *  @param {Object} options The low/mid/high compressor settings.
 *  @example
 *  var multiband = new Tone.MultibandCompressor({
 *  	"lowFrequency" : 200,
 *  	"highFrequency" : 1300
 *  	"low" : {
 *  		"threshold" : -12
 *  	}
 *  })
 */
_Tone.default.MultibandCompressor = function (options) {
  _Tone.default.AudioNode.call(this);

  options = _Tone.default.defaultArg(arguments, _Tone.default.MultibandCompressor.defaults);
  /**
   *  split the incoming signal into high/mid/low
   *  @type {Tone.MultibandSplit}
   *  @private
   */

  this._splitter = this.input = new _Tone.default.MultibandSplit({
    "lowFrequency": options.lowFrequency,
    "highFrequency": options.highFrequency
  });
  /**
   *  low/mid crossover frequency.
   *  @type {Frequency}
   *  @signal
   */

  this.lowFrequency = this._splitter.lowFrequency;
  /**
   *  mid/high crossover frequency.
   *  @type {Frequency}
   *  @signal
   */

  this.highFrequency = this._splitter.highFrequency;
  /**
   *  the output
   *  @type {Tone.Gain}
   *  @private
   */

  this.output = new _Tone.default.Gain();
  /**
   *  The compressor applied to the low frequencies.
   *  @type {Tone.Compressor}
   */

  this.low = new _Tone.default.Compressor(options.low);
  /**
   *  The compressor applied to the mid frequencies.
   *  @type {Tone.Compressor}
   */

  this.mid = new _Tone.default.Compressor(options.mid);
  /**
   *  The compressor applied to the high frequencies.
   *  @type {Tone.Compressor}
   */

  this.high = new _Tone.default.Compressor(options.high); //connect the compressor

  this._splitter.low.chain(this.low, this.output);

  this._splitter.mid.chain(this.mid, this.output);

  this._splitter.high.chain(this.high, this.output);

  this._readOnly(["high", "mid", "low", "highFrequency", "lowFrequency"]);
};

_Tone.default.extend(_Tone.default.MultibandCompressor, _Tone.default.AudioNode);
/**
 *  @const
 *  @static
 *  @type {Object}
 */


_Tone.default.MultibandCompressor.defaults = {
  "low": _Tone.default.Compressor.defaults,
  "mid": _Tone.default.Compressor.defaults,
  "high": _Tone.default.Compressor.defaults,
  "lowFrequency": 250,
  "highFrequency": 2000
};
/**
 *  clean up
 *  @returns {Tone.MultibandCompressor} this
 */

_Tone.default.MultibandCompressor.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._splitter.dispose();

  this._writable(["high", "mid", "low", "highFrequency", "lowFrequency"]);

  this.low.dispose();
  this.mid.dispose();
  this.high.dispose();
  this._splitter = null;
  this.low = null;
  this.mid = null;
  this.high = null;
  this.lowFrequency = null;
  this.highFrequency = null;
  return this;
};

var _default = _Tone.default.MultibandCompressor;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/MultibandSplit":"../node_modules/tone/tone/component/MultibandSplit.js","../component/Compressor":"../node_modules/tone/tone/component/Compressor.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/Panner3D.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/CrossFade");

require("../component/Merge");

require("../component/Split");

require("../signal/Signal");

require("../signal/AudioToGain");

require("../signal/Zero");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  A spatialized panner node which supports equalpower or HRTF panning.
 *          Tries to normalize the API across various browsers. See Tone.Listener
 *
 *  @constructor
 *  @extends {Tone.AudioNode}
 *  @param {Number} positionX The initial x position.
 *  @param {Number} positionY The initial y position.
 *  @param {Number} positionZ The initial z position.
 */
_Tone.default.Panner3D = function () {
  var options = _Tone.default.defaults(arguments, ["positionX", "positionY", "positionZ"], _Tone.default.Panner3D);

  _Tone.default.AudioNode.call(this);
  /**
   *  The panner node
   *  @type {PannerNode}
   *  @private
   */


  this._panner = this.input = this.output = this.context.createPanner(); //set some values

  this._panner.panningModel = options.panningModel;
  this._panner.maxDistance = options.maxDistance;
  this._panner.distanceModel = options.distanceModel;
  this._panner.coneOuterGain = options.coneOuterGain;
  this._panner.coneOuterAngle = options.coneOuterAngle;
  this._panner.coneInnerAngle = options.coneInnerAngle;
  this._panner.refDistance = options.refDistance;
  this._panner.rolloffFactor = options.rolloffFactor;
  /**
   *  Holds the current orientation
   *  @type  {Array}
   *  @private
   */

  this._orientation = [options.orientationX, options.orientationY, options.orientationZ];
  /**
   *  Holds the current position
   *  @type  {Array}
   *  @private
   */

  this._position = [options.positionX, options.positionY, options.positionZ]; // set the default position/orientation

  this.orientationX = options.orientationX;
  this.orientationY = options.orientationY;
  this.orientationZ = options.orientationZ;
  this.positionX = options.positionX;
  this.positionY = options.positionY;
  this.positionZ = options.positionZ;
};

_Tone.default.extend(_Tone.default.Panner3D, _Tone.default.AudioNode);
/**
 *  Defaults according to the specification
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.Panner3D.defaults = {
  "positionX": 0,
  "positionY": 0,
  "positionZ": 0,
  "orientationX": 0,
  "orientationY": 0,
  "orientationZ": 0,
  "panningModel": "equalpower",
  "maxDistance": 10000,
  "distanceModel": "inverse",
  "coneOuterGain": 0,
  "coneOuterAngle": 360,
  "coneInnerAngle": 360,
  "refDistance": 1,
  "rolloffFactor": 1
};
/**
 * The ramp time which is applied to the setTargetAtTime
 * @type {Number}
 * @private
 */

_Tone.default.Panner3D.prototype._rampTimeConstant = 0.01;
/**
 *  Sets the position of the source in 3d space.
 *  @param  {Number}  x
 *  @param  {Number}  y
 *  @param  {Number}  z
 *  @return {Tone.Panner3D} this
 */

_Tone.default.Panner3D.prototype.setPosition = function (x, y, z) {
  if (this._panner.positionX) {
    var now = this.now();

    this._panner.positionX.setTargetAtTime(x, now, this._rampTimeConstant);

    this._panner.positionY.setTargetAtTime(y, now, this._rampTimeConstant);

    this._panner.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);
  } else {
    this._panner.setPosition(x, y, z);
  }

  this._position = Array.prototype.slice.call(arguments);
  return this;
};
/**
 *  Sets the orientation of the source in 3d space.
 *  @param  {Number}  x
 *  @param  {Number}  y
 *  @param  {Number}  z
 *  @return {Tone.Panner3D} this
 */


_Tone.default.Panner3D.prototype.setOrientation = function (x, y, z) {
  if (this._panner.orientationX) {
    var now = this.now();

    this._panner.orientationX.setTargetAtTime(x, now, this._rampTimeConstant);

    this._panner.orientationY.setTargetAtTime(y, now, this._rampTimeConstant);

    this._panner.orientationZ.setTargetAtTime(z, now, this._rampTimeConstant);
  } else {
    this._panner.setOrientation(x, y, z);
  }

  this._orientation = Array.prototype.slice.call(arguments);
  return this;
};
/**
 *  The x position of the panner object.
 *  @type {Number}
 *  @memberOf Tone.Panner3D#
 *  @name positionX
 */


Object.defineProperty(_Tone.default.Panner3D.prototype, "positionX", {
  set: function (pos) {
    this._position[0] = pos;
    this.setPosition.apply(this, this._position);
  },
  get: function () {
    return this._position[0];
  }
});
/**
 *  The y position of the panner object.
 *  @type {Number}
 *  @memberOf Tone.Panner3D#
 *  @name positionY
 */

Object.defineProperty(_Tone.default.Panner3D.prototype, "positionY", {
  set: function (pos) {
    this._position[1] = pos;
    this.setPosition.apply(this, this._position);
  },
  get: function () {
    return this._position[1];
  }
});
/**
 *  The z position of the panner object.
 *  @type {Number}
 *  @memberOf Tone.Panner3D#
 *  @name positionZ
 */

Object.defineProperty(_Tone.default.Panner3D.prototype, "positionZ", {
  set: function (pos) {
    this._position[2] = pos;
    this.setPosition.apply(this, this._position);
  },
  get: function () {
    return this._position[2];
  }
});
/**
 *  The x orientation of the panner object.
 *  @type {Number}
 *  @memberOf Tone.Panner3D#
 *  @name orientationX
 */

Object.defineProperty(_Tone.default.Panner3D.prototype, "orientationX", {
  set: function (pos) {
    this._orientation[0] = pos;
    this.setOrientation.apply(this, this._orientation);
  },
  get: function () {
    return this._orientation[0];
  }
});
/**
 *  The y orientation of the panner object.
 *  @type {Number}
 *  @memberOf Tone.Panner3D#
 *  @name orientationY
 */

Object.defineProperty(_Tone.default.Panner3D.prototype, "orientationY", {
  set: function (pos) {
    this._orientation[1] = pos;
    this.setOrientation.apply(this, this._orientation);
  },
  get: function () {
    return this._orientation[1];
  }
});
/**
 *  The z orientation of the panner object.
 *  @type {Number}
 *  @memberOf Tone.Panner3D#
 *  @name orientationZ
 */

Object.defineProperty(_Tone.default.Panner3D.prototype, "orientationZ", {
  set: function (pos) {
    this._orientation[2] = pos;
    this.setOrientation.apply(this, this._orientation);
  },
  get: function () {
    return this._orientation[2];
  }
});
/**
 *  Proxy a property on the panner to an exposed public propery
 *  @param  {String}  prop
 *  @private
 */

_Tone.default.Panner3D._aliasProperty = function (prop) {
  Object.defineProperty(_Tone.default.Panner3D.prototype, prop, {
    set: function (val) {
      this._panner[prop] = val;
    },
    get: function () {
      return this._panner[prop];
    }
  });
};
/**
 *  The panning model. Either "equalpower" or "HRTF".
 *  @type {String}
 *  @memberOf Tone.Panner3D#
 *  @name panningModel
 */


_Tone.default.Panner3D._aliasProperty("panningModel");
/**
 *  A reference distance for reducing volume as source move further from the listener
 *  @type {Number}
 *  @memberOf Tone.Panner3D#
 *  @name refDistance
 */


_Tone.default.Panner3D._aliasProperty("refDistance");
/**
 *  Describes how quickly the volume is reduced as source moves away from listener.
 *  @type {Number}
 *  @memberOf Tone.Panner3D#
 *  @name rolloffFactor
 */


_Tone.default.Panner3D._aliasProperty("rolloffFactor");
/**
 *  The distance model used by,  "linear", "inverse", or "exponential".
 *  @type {String}
 *  @memberOf Tone.Panner3D#
 *  @name distanceModel
 */


_Tone.default.Panner3D._aliasProperty("distanceModel");
/**
 *  The angle, in degrees, inside of which there will be no volume reduction
 *  @type {Degrees}
 *  @memberOf Tone.Panner3D#
 *  @name coneInnerAngle
 */


_Tone.default.Panner3D._aliasProperty("coneInnerAngle");
/**
 *  The angle, in degrees, outside of which the volume will be reduced
 *  to a constant value of coneOuterGain
 *  @type {Degrees}
 *  @memberOf Tone.Panner3D#
 *  @name coneOuterAngle
 */


_Tone.default.Panner3D._aliasProperty("coneOuterAngle");
/**
 *  The gain outside of the coneOuterAngle
 *  @type {Gain}
 *  @memberOf Tone.Panner3D#
 *  @name coneOuterGain
 */


_Tone.default.Panner3D._aliasProperty("coneOuterGain");
/**
 *  The maximum distance between source and listener,
 *  after which the volume will not be reduced any further.
 *  @type {Positive}
 *  @memberOf Tone.Panner3D#
 *  @name maxDistance
 */


_Tone.default.Panner3D._aliasProperty("maxDistance");
/**
 *  Clean up.
 *  @returns {Tone.Panner3D} this
 */


_Tone.default.Panner3D.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._panner.disconnect();

  this._panner = null;
  this._orientation = null;
  this._position = null;
  return this;
};

var _default = _Tone.default.Panner3D;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/CrossFade":"../node_modules/tone/tone/component/CrossFade.js","../component/Merge":"../node_modules/tone/tone/component/Merge.js","../component/Split":"../node_modules/tone/tone/component/Split.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../signal/AudioToGain":"../node_modules/tone/tone/signal/AudioToGain.js","../signal/Zero":"../node_modules/tone/tone/signal/Zero.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/component/Waveform.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/Analyser");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Get the current waveform data of the connected audio source.
 *  @extends {Tone.AudioNode}
 *  @param {Number=} size The size of the FFT. Value must be a power of
 *                       two in the range 32 to 32768.
 */
_Tone.default.Waveform = function () {
  var options = _Tone.default.defaults(arguments, ["size"], _Tone.default.Waveform);

  options.type = _Tone.default.Analyser.Type.Waveform;

  _Tone.default.AudioNode.call(this);
  /**
   *  The analyser node.
   *  @private
   *  @type {Tone.Analyser}
   */


  this._analyser = this.input = this.output = new _Tone.default.Analyser(options);
};

_Tone.default.extend(_Tone.default.Waveform, _Tone.default.AudioNode);
/**
 *  The default values.
 *  @type {Object}
 *  @const
 */


_Tone.default.Waveform.defaults = {
  "size": 1024
};
/**
 *  Gets the waveform of the audio source. Returns the waveform data
 *  of length [size](#size) as a Float32Array with values between -1 and 1.
 *  @returns {TypedArray}
 */

_Tone.default.Waveform.prototype.getValue = function () {
  return this._analyser.getValue();
};
/**
 *  The size of analysis. This must be a power of two in the range 32 to 32768.
 *  @memberOf Tone.Waveform#
 *  @type {Number}
 *  @name size
 */


Object.defineProperty(_Tone.default.Waveform.prototype, "size", {
  get: function () {
    return this._analyser.size;
  },
  set: function (size) {
    this._analyser.size = size;
  }
});
/**
 *  Clean up.
 *  @return  {Tone.Waveform}  this
 */

_Tone.default.Waveform.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._analyser.dispose();

  this._analyser = null;
};

var _default = _Tone.default.Waveform;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/Analyser":"../node_modules/tone/tone/component/Analyser.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/control/CtrlInterpolate.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../type/Type");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.CtrlInterpolate will interpolate between given values based
 *         on the "index" property. Passing in an array or object literal
 *         will interpolate each of the parameters. Note (i.e. "C3")
 *         and Time (i.e. "4n + 2") can be interpolated. All other values are
 *         assumed to be numbers. 
 *  @example
 * var interp = new Tone.CtrlInterpolate([0, 2, 9, 4]);
 * interp.index = 0.75;
 * interp.value; //returns 1.5
 *
 *  @example
 * var interp = new Tone.CtrlInterpolate([
 * 	[2, 4, 5],
 * 	[9, 3, 2],
 * ]);
 * @param {Array} values The array of values to interpolate over
 * @param {Positive} index The initial interpolation index.
 * @extends {Tone}
 */
_Tone.default.CtrlInterpolate = function () {
  var options = _Tone.default.defaults(arguments, ["values", "index"], _Tone.default.CtrlInterpolate);

  _Tone.default.call(this);
  /**
   *  The values to interpolate between
   *  @type  {Array}
   */


  this.values = options.values;
  /**
   *  The interpolated index between values. For example: a value of 1.5
   *  would interpolate equally between the value at index 1
   *  and the value at index 2. 
   *  @example
   * interp.index = 0; 
   * interp.value; //returns the value at 0
   * interp.index = 0.5;
   * interp.value; //returns the value between indices 0 and 1. 
   *  @type  {Positive}
   */

  this.index = options.index;
};

_Tone.default.extend(_Tone.default.CtrlInterpolate);
/**
 *  The defaults
 *  @const
 *  @type  {Object}
 */


_Tone.default.CtrlInterpolate.defaults = {
  "index": 0,
  "values": []
};
/**
 *  The current interpolated value based on the index
 *  @readOnly
 *  @memberOf Tone.CtrlInterpolate#
 *  @type {*}
 *  @name value
 */

Object.defineProperty(_Tone.default.CtrlInterpolate.prototype, "value", {
  get: function () {
    var index = this.index;
    index = Math.min(index, this.values.length - 1);
    var lowerPosition = Math.floor(index);
    var lower = this.values[lowerPosition];
    var upper = this.values[Math.ceil(index)];
    return this._interpolate(index - lowerPosition, lower, upper);
  }
});
/**
 *  Internal interpolation routine
 *  @param  {NormalRange}  index  The index between the lower and upper
 *  @param  {*}  lower 
 *  @param  {*}  upper 
 *  @return  {*}  The interpolated value
 *  @private
 */

_Tone.default.CtrlInterpolate.prototype._interpolate = function (index, lower, upper) {
  if (_Tone.default.isArray(lower)) {
    var retArray = [];

    for (var i = 0; i < lower.length; i++) {
      retArray[i] = this._interpolate(index, lower[i], upper[i]);
    }

    return retArray;
  } else if (_Tone.default.isObject(lower)) {
    var retObj = {};

    for (var attr in lower) {
      retObj[attr] = this._interpolate(index, lower[attr], upper[attr]);
    }

    return retObj;
  } else {
    lower = this._toNumber(lower);
    upper = this._toNumber(upper);
    return (1 - index) * lower + index * upper;
  }
};
/**
 *  Convert from the given type into a number
 *  @param  {Number|String}  value
 *  @return  {Number}
 *  @private
 */


_Tone.default.CtrlInterpolate.prototype._toNumber = function (val) {
  if (_Tone.default.isNumber(val)) {
    return val;
  } else {
    //otherwise assume that it's Time...
    return this.toSeconds(val);
  }
};
/**
 *  Clean up
 *  @return  {Tone.CtrlInterpolate}  this
 */


_Tone.default.CtrlInterpolate.prototype.dispose = function () {
  this.values = null;
};

var _default = _Tone.default.CtrlInterpolate;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../type/Type":"../node_modules/tone/tone/type/Type.js"}],"../node_modules/tone/tone/control/CtrlMarkov.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.CtrlMarkov represents a Markov Chain where each call
 *         to Tone.CtrlMarkov.next will move to the next state. If the next
 *         state choice is an array, the next state is chosen randomly with
 *         even probability for all of the choices. For a weighted probability
 *         of the next choices, pass in an object with "state" and "probability" attributes. 
 *         The probabilities will be normalized and then chosen. If no next options
 *         are given for the current state, the state will stay there. 
 *  @extends {Tone}
 *  @example
 * var chain = new Tone.CtrlMarkov({
 * 	"beginning" : ["end", "middle"],
 * 	"middle" : "end"
 * });
 * chain.value = "beginning";
 * chain.next(); //returns "end" or "middle" with 50% probability
 *
 *  @example
 * var chain = new Tone.CtrlMarkov({
 * 	"beginning" : [{"value" : "end", "probability" : 0.8}, 
 * 					{"value" : "middle", "probability" : 0.2}],
 * 	"middle" : "end"
 * });
 * chain.value = "beginning";
 * chain.next(); //returns "end" with 80% probability or "middle" with 20%.
 *  @param {Object} values An object with the state names as the keys
 *                         and the next state(s) as the values. 
 */
_Tone.default.CtrlMarkov = function (values, initial) {
  _Tone.default.call(this);
  /**
   *  The Markov values with states as the keys
   *  and next state(s) as the values. 
   *  @type {Object}
   */


  this.values = _Tone.default.defaultArg(values, {});
  /**
   *  The current state of the Markov values. The next
   *  state will be evaluated and returned when Tone.CtrlMarkov.next
   *  is invoked.
   *  @type {String}
   */

  this.value = _Tone.default.defaultArg(initial, Object.keys(this.values)[0]);
};

_Tone.default.extend(_Tone.default.CtrlMarkov);
/**
 *  Returns the next state of the Markov values. 
 *  @return  {String}
 */


_Tone.default.CtrlMarkov.prototype.next = function () {
  if (this.values.hasOwnProperty(this.value)) {
    var next = this.values[this.value];

    if (_Tone.default.isArray(next)) {
      var distribution = this._getProbDistribution(next);

      var rand = Math.random();
      var total = 0;

      for (var i = 0; i < distribution.length; i++) {
        var dist = distribution[i];

        if (rand > total && rand < total + dist) {
          var chosen = next[i];

          if (_Tone.default.isObject(chosen)) {
            this.value = chosen.value;
          } else {
            this.value = chosen;
          }
        }

        total += dist;
      }
    } else {
      this.value = next;
    }
  }

  return this.value;
};
/**
 *  Choose randomly from an array weighted options in the form 
 *  {"state" : string, "probability" : number} or an array of values
 *  @param  {Array}  options 
 *  @return  {Array}  The randomly selected choice
 *  @private
 */


_Tone.default.CtrlMarkov.prototype._getProbDistribution = function (options) {
  var distribution = [];
  var total = 0;
  var needsNormalizing = false;

  for (var i = 0; i < options.length; i++) {
    var option = options[i];

    if (_Tone.default.isObject(option)) {
      needsNormalizing = true;
      distribution[i] = option.probability;
    } else {
      distribution[i] = 1 / options.length;
    }

    total += distribution[i];
  }

  if (needsNormalizing) {
    //normalize the values
    for (var j = 0; j < distribution.length; j++) {
      distribution[j] = distribution[j] / total;
    }
  }

  return distribution;
};
/**
 *  Clean up
 *  @return  {Tone.CtrlMarkov}  this
 */


_Tone.default.CtrlMarkov.prototype.dispose = function () {
  this.values = null;
};

var _default = _Tone.default.CtrlMarkov;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js"}],"../node_modules/tone/tone/control/CtrlPattern.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Generate patterns from an array of values.
 *         Has a number of arpeggiation and randomized
 *         selection patterns. 
 *           <ul>
 *  	        <li>"up" - cycles upward</li>
 *  			<li>"down" - cycles downward</li>
 *  			<li>"upDown" - up then and down</li>
 *  			<li>"downUp" - cycles down then and up</li>
 *  			<li>"alternateUp" - jump up two and down one</li>
 *  			<li>"alternateDown" - jump down two and up one</li>
 *  			<li>"random" - randomly select an index</li>
 *  			<li>"randomWalk" - randomly moves one index away from the current position</li>
 *  			<li>"randomOnce" - randomly select an index without repeating until all values have been chosen.</li>
 *     		</ul>
 *  @param  {Array}  values   An array of options to choose from.
 *  @param  {Tone.CtrlPattern.Type=}  type  The name of the pattern.
 *  @extends {Tone}
 */
_Tone.default.CtrlPattern = function () {
  var options = _Tone.default.defaults(arguments, ["values", "type"], _Tone.default.CtrlPattern);

  _Tone.default.call(this);
  /**
   *  The array of values to arpeggiate over
   *  @type {Array}
   */


  this.values = options.values;
  /**
   *  The current position in the values array
   *  @type  {Number}
   */

  this.index = 0;
  /**
   *  The type placeholder
   *  @type {Tone.CtrlPattern.Type}
   *  @private
   */

  this._type = null;
  /**
   *  Shuffled values for the RandomOnce type
   *  @type {Array}
   *  @private
   */

  this._shuffled = null;
  /**
   *  The direction of the movement
   *  @type {String}
   *  @private
   */

  this._direction = null;
  this.type = options.type;
};

_Tone.default.extend(_Tone.default.CtrlPattern);
/**
 *  The Control Patterns
 *  @type  {Object}
 *  @static
 */


_Tone.default.CtrlPattern.Type = {
  Up: "up",
  Down: "down",
  UpDown: "upDown",
  DownUp: "downUp",
  AlternateUp: "alternateUp",
  AlternateDown: "alternateDown",
  Random: "random",
  RandomWalk: "randomWalk",
  RandomOnce: "randomOnce"
};
/**
 *  The default values. 
 *  @type  {Object}
 */

_Tone.default.CtrlPattern.defaults = {
  "type": _Tone.default.CtrlPattern.Type.Up,
  "values": []
};
/**
 *  The value at the current index of the pattern.
 *  @readOnly
 *  @memberOf Tone.CtrlPattern#
 *  @type {*}
 *  @name value
 */

Object.defineProperty(_Tone.default.CtrlPattern.prototype, "value", {
  get: function () {
    //some safeguards
    if (this.values.length === 0) {
      return undefined;
    } else if (this.values.length === 1) {
      return this.values[0];
    }

    this.index = Math.min(this.index, this.values.length - 1);
    var val = this.values[this.index];

    if (this.type === _Tone.default.CtrlPattern.Type.RandomOnce) {
      if (this.values.length !== this._shuffled.length) {
        this._shuffleValues();
      }

      val = this.values[this._shuffled[this.index]];
    }

    return val;
  }
});
/**
 *  The pattern used to select the next
 *  item from the values array
 *  @memberOf Tone.CtrlPattern#
 *  @type {Tone.CtrlPattern.Type}
 *  @name type
 */

Object.defineProperty(_Tone.default.CtrlPattern.prototype, "type", {
  get: function () {
    return this._type;
  },
  set: function (type) {
    this._type = type;
    this._shuffled = null; //the first index

    if (this._type === _Tone.default.CtrlPattern.Type.Up || this._type === _Tone.default.CtrlPattern.Type.UpDown || this._type === _Tone.default.CtrlPattern.Type.RandomOnce || this._type === _Tone.default.CtrlPattern.Type.AlternateUp) {
      this.index = 0;
    } else if (this._type === _Tone.default.CtrlPattern.Type.Down || this._type === _Tone.default.CtrlPattern.Type.DownUp || this._type === _Tone.default.CtrlPattern.Type.AlternateDown) {
      this.index = this.values.length - 1;
    } //the direction


    if (this._type === _Tone.default.CtrlPattern.Type.UpDown || this._type === _Tone.default.CtrlPattern.Type.AlternateUp) {
      this._direction = _Tone.default.CtrlPattern.Type.Up;
    } else if (this._type === _Tone.default.CtrlPattern.Type.DownUp || this._type === _Tone.default.CtrlPattern.Type.AlternateDown) {
      this._direction = _Tone.default.CtrlPattern.Type.Down;
    } //randoms


    if (this._type === _Tone.default.CtrlPattern.Type.RandomOnce) {
      this._shuffleValues();
    } else if (this._type === _Tone.default.CtrlPattern.Type.Random) {
      this.index = Math.floor(Math.random() * this.values.length);
    }
  }
});
/**
 *  Return the next value given the current position
 *  and pattern.
 *  @return {*} The next value
 */

_Tone.default.CtrlPattern.prototype.next = function () {
  var type = this.type; //choose the next index

  if (type === _Tone.default.CtrlPattern.Type.Up) {
    this.index++;

    if (this.index >= this.values.length) {
      this.index = 0;
    }
  } else if (type === _Tone.default.CtrlPattern.Type.Down) {
    this.index--;

    if (this.index < 0) {
      this.index = this.values.length - 1;
    }
  } else if (type === _Tone.default.CtrlPattern.Type.UpDown || type === _Tone.default.CtrlPattern.Type.DownUp) {
    if (this._direction === _Tone.default.CtrlPattern.Type.Up) {
      this.index++;
    } else {
      this.index--;
    }

    if (this.index < 0) {
      this.index = 1;
      this._direction = _Tone.default.CtrlPattern.Type.Up;
    } else if (this.index >= this.values.length) {
      this.index = this.values.length - 2;
      this._direction = _Tone.default.CtrlPattern.Type.Down;
    }
  } else if (type === _Tone.default.CtrlPattern.Type.Random) {
    this.index = Math.floor(Math.random() * this.values.length);
  } else if (type === _Tone.default.CtrlPattern.Type.RandomWalk) {
    if (Math.random() < 0.5) {
      this.index--;
      this.index = Math.max(this.index, 0);
    } else {
      this.index++;
      this.index = Math.min(this.index, this.values.length - 1);
    }
  } else if (type === _Tone.default.CtrlPattern.Type.RandomOnce) {
    this.index++;

    if (this.index >= this.values.length) {
      this.index = 0; //reshuffle the values for next time

      this._shuffleValues();
    }
  } else if (type === _Tone.default.CtrlPattern.Type.AlternateUp) {
    if (this._direction === _Tone.default.CtrlPattern.Type.Up) {
      this.index += 2;
      this._direction = _Tone.default.CtrlPattern.Type.Down;
    } else {
      this.index -= 1;
      this._direction = _Tone.default.CtrlPattern.Type.Up;
    }

    if (this.index >= this.values.length) {
      this.index = 0;
      this._direction = _Tone.default.CtrlPattern.Type.Up;
    }
  } else if (type === _Tone.default.CtrlPattern.Type.AlternateDown) {
    if (this._direction === _Tone.default.CtrlPattern.Type.Up) {
      this.index += 1;
      this._direction = _Tone.default.CtrlPattern.Type.Down;
    } else {
      this.index -= 2;
      this._direction = _Tone.default.CtrlPattern.Type.Up;
    }

    if (this.index < 0) {
      this.index = this.values.length - 1;
      this._direction = _Tone.default.CtrlPattern.Type.Down;
    }
  }

  return this.value;
};
/**
 *  Shuffles the values and places the results into the _shuffled
 *  @private
 */


_Tone.default.CtrlPattern.prototype._shuffleValues = function () {
  var copy = [];
  this._shuffled = [];

  for (var i = 0; i < this.values.length; i++) {
    copy[i] = i;
  }

  while (copy.length > 0) {
    var randVal = copy.splice(Math.floor(copy.length * Math.random()), 1);

    this._shuffled.push(randVal[0]);
  }
};
/**
 *  Clean up
 *  @returns {Tone.CtrlPattern} this
 */


_Tone.default.CtrlPattern.prototype.dispose = function () {
  this._shuffled = null;
  this.values = null;
};

var _default = _Tone.default.CtrlPattern;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js"}],"../node_modules/tone/tone/control/CtrlRandom.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../type/Type");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Choose a random value.
 *  @extends {Tone}
 *  @example
 * var randomWalk = new Tone.CtrlRandom({
 * 	"min" : 0,
 * 	"max" : 10,
 * 	"integer" : true
 * });
 * randomWalk.eval();
 *
 *  @param {Number|Time=} min The minimum return value.
 *  @param {Number|Time=} max The maximum return value.
 */
_Tone.default.CtrlRandom = function () {
  var options = _Tone.default.defaults(arguments, ["min", "max"], _Tone.default.CtrlRandom);

  _Tone.default.call(this);
  /**
   *  The minimum return value
   *  @type  {Number|Time}
   */


  this.min = options.min;
  /**
   *  The maximum return value
   *  @type  {Number|Time}
   */

  this.max = options.max;
  /**
   *  If the return value should be an integer
   *  @type  {Boolean}
   */

  this.integer = options.integer;
};

_Tone.default.extend(_Tone.default.CtrlRandom);
/**
 *  The defaults
 *  @const
 *  @type  {Object}
 */


_Tone.default.CtrlRandom.defaults = {
  "min": 0,
  "max": 1,
  "integer": false
};
/**
 *  Return a random value between min and max. 
 *  @readOnly
 *  @memberOf Tone.CtrlRandom#
 *  @type {*}
 *  @name value
 */

Object.defineProperty(_Tone.default.CtrlRandom.prototype, "value", {
  get: function () {
    var min = this.toSeconds(this.min);
    var max = this.toSeconds(this.max);
    var rand = Math.random();
    var val = rand * min + (1 - rand) * max;

    if (this.integer) {
      val = Math.floor(val);
    }

    return val;
  }
});
var _default = _Tone.default.CtrlRandom;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../type/Type":"../node_modules/tone/tone/type/Type.js"}],"../node_modules/tone/tone/core/Buffers.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Buffer");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class A data structure for holding multiple buffers.
 *  
 *  @param  {Object|Array}    urls      An object literal or array
 *                                      of urls to load.
 *  @param  {Function=}  callback  The callback to invoke when
 *                                 the buffers are loaded. 
 *  @extends {Tone}
 *  @example
 * //load a whole bank of piano samples
 * var pianoSamples = new Tone.Buffers({
 * 	"C4" : "path/to/C4.mp3"
 * 	"C#4" : "path/to/C#4.mp3"
 * 	"D4" : "path/to/D4.mp3"
 * 	"D#4" : "path/to/D#4.mp3"
 * 	...
 * }, function(){
 * 	//play one of the samples when they all load
 * 	player.buffer = pianoSamples.get("C4");
 * 	player.start();
 * });
 * 	@example
 * //To pass in additional parameters in the second parameter
 * var buffers = new Tone.Buffers(urls, {
 * 	"onload" : callback,
 * 	"baseUrl" : "../path/to/audio/"
 * })
 */
_Tone.default.Buffers = function (urls) {
  //remove the urls from the options
  var args = Array.prototype.slice.call(arguments);
  args.shift();

  var options = _Tone.default.defaults(args, ["onload", "baseUrl"], _Tone.default.Buffers);

  _Tone.default.call(this);
  /**
   *  All of the buffers
   *  @type  {Object}
   *  @private
   */


  this._buffers = {};
  /**
   *  A path which is prefixed before every url.
   *  @type  {String}
   */

  this.baseUrl = options.baseUrl;
  this._loadingCount = 0; //add each one

  for (var key in urls) {
    this._loadingCount++;
    this.add(key, urls[key], this._bufferLoaded.bind(this, options.onload));
  }
};

_Tone.default.extend(_Tone.default.Buffers);
/**
 *  Defaults
 *  @type  {Object}
 */


_Tone.default.Buffers.defaults = {
  "onload": _Tone.default.noOp,
  "baseUrl": ""
};
/**
 *  True if the buffers object has a buffer by that name.
 *  @param  {String|Number}  name  The key or index of the 
 *                                 buffer.
 *  @return  {Boolean}
 */

_Tone.default.Buffers.prototype.has = function (name) {
  return this._buffers.hasOwnProperty(name);
};
/**
 *  Get a buffer by name. If an array was loaded, 
 *  then use the array index.
 *  @param  {String|Number}  name  The key or index of the 
 *                                 buffer.
 *  @return  {Tone.Buffer}
 */


_Tone.default.Buffers.prototype.get = function (name) {
  if (this.has(name)) {
    return this._buffers[name];
  } else {
    throw new Error("Tone.Buffers: no buffer named " + name);
  }
};
/**
 *  A buffer was loaded. decrement the counter.
 *  @param  {Function}  callback 
 *  @private
 */


_Tone.default.Buffers.prototype._bufferLoaded = function (callback) {
  this._loadingCount--;

  if (this._loadingCount === 0 && callback) {
    callback(this);
  }
};
/**
 * If the buffers are loaded or not
 * @memberOf Tone.Buffers#
 * @type {Boolean}
 * @name loaded
 * @readOnly
 */


Object.defineProperty(_Tone.default.Buffers.prototype, "loaded", {
  get: function () {
    var isLoaded = true;

    for (var buffName in this._buffers) {
      var buff = this.get(buffName);
      isLoaded = isLoaded && buff.loaded;
    }

    return isLoaded;
  }
});
/**
 *  Add a buffer by name and url to the Buffers
 *  @param  {String}    name      A unique name to give
 *                                the buffer
 *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer, 
 *                                                 or a buffer which will be added
 *                                                 with the given name.
 *  @param  {Function=}  callback  The callback to invoke 
 *                                 when the url is loaded.
 */

_Tone.default.Buffers.prototype.add = function (name, url, callback) {
  callback = _Tone.default.defaultArg(callback, _Tone.default.noOp);

  if (url instanceof _Tone.default.Buffer) {
    this._buffers[name] = url;
    callback(this);
  } else if (url instanceof AudioBuffer) {
    this._buffers[name] = new _Tone.default.Buffer(url);
    callback(this);
  } else if (_Tone.default.isString(url)) {
    this._buffers[name] = new _Tone.default.Buffer(this.baseUrl + url, callback);
  }

  return this;
};
/**
 *  Clean up.
 *  @return  {Tone.Buffers} this
 */


_Tone.default.Buffers.prototype.dispose = function () {
  _Tone.default.prototype.dispose.call(this);

  for (var name in this._buffers) {
    this._buffers[name].dispose();
  }

  this._buffers = null;
  return this;
};

var _default = _Tone.default.Buffers;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Buffer":"../node_modules/tone/tone/core/Buffer.js"}],"../node_modules/tone/tone/core/Bus.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Gain");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  buses are another way of routing audio
 *
 *  augments Tone.prototype to include send and receive
 */

/**
 *  All of the routes
 *
 *  @type {Object}
 *  @static
 *  @private
 */
var Buses = {};
/**
 *  Send this signal to the channel name.
 *  @param  {String} channelName A named channel to send the signal to.
 *  @param  {Decibels} amount The amount of the source to send to the bus.
 *  @return {GainNode} The gain node which connects this node to the desired channel.
 *                     Can be used to adjust the levels of the send.
 *  @example
 * source.send("reverb", -12);
 */

_Tone.default.prototype.send = function (channelName, amount) {
  if (!Buses.hasOwnProperty(channelName)) {
    Buses[channelName] = this.context.createGain();
  }

  amount = _Tone.default.defaultArg(amount, 0);
  var sendKnob = new _Tone.default.Gain(amount, _Tone.default.Type.Decibels);
  this.connect(sendKnob);
  sendKnob.connect(Buses[channelName]);
  return sendKnob;
};
/**
 *  Receive the input from the desired channelName to the input
 *
 *  @param  {String} channelName A named channel to send the signal to.
 *  @param  {Number=} channelNumber The channel to connect to
 *  @returns {Tone} this
 *  @example
 * reverbEffect.receive("reverb");
 */


_Tone.default.prototype.receive = function (channelName, inputNum) {
  if (!Buses.hasOwnProperty(channelName)) {
    Buses[channelName] = this.context.createGain();
  }

  _Tone.default.connect(Buses[channelName], this, 0, inputNum);

  return this;
}; //remove all the send/receives when a new audio context is passed in


_Tone.default.Context.on("init", function (context) {
  if (context.buses) {
    Buses = context.buses;
  } else {
    Buses = {};
    context.buses = Buses;
  }
});

var _default = _Tone.default;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js"}],"../node_modules/tone/tone/core/Draw.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Timeline");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Draw is useful for synchronizing visuals and audio events.
 *         Callbacks from Tone.Transport or any of the Tone.Event classes
 *         always happen _before_ the scheduled time and are not synchronized
 *         to the animation frame so they are not good for triggering tightly
 *         synchronized visuals and sound. Tone.Draw makes it easy to schedule
 *         callbacks using the AudioContext time and uses requestAnimationFrame.
 *         
 *  @singleton
 *  @extends {Tone}
 *  @example
 * Tone.Transport.schedule(function(time){
 * 	//use the time argument to schedule a callback with Tone.Draw
 * 	Tone.Draw.schedule(function(){
 * 		//do drawing or DOM manipulation here
 * 	}, time)
 * }, "+0.5")
 */
_Tone.default.Draw = function () {
  _Tone.default.call(this);
  /**
   *  All of the events.
   *  @type  {Tone.Timeline}
   *  @private
   */


  this._events = new _Tone.default.Timeline();
  /**
   *  The duration after which events are not invoked.
   *  @type  {Number}
   *  @default 0.25
   */

  this.expiration = 0.25;
  /**
   *  The amount of time before the scheduled time 
   *  that the callback can be invoked. Default is
   *  half the time of an animation frame (0.008 seconds).
   *  @type  {Number}
   *  @default 0.008
   */

  this.anticipation = 0.008;
  /**
   *  The draw loop
   *  @type  {Function}
   *  @private
   */

  this._boundDrawLoop = this._drawLoop.bind(this);
};

_Tone.default.extend(_Tone.default.Draw);
/**
 *  Schedule a function at the given time to be invoked
 *  on the nearest animation frame.
 *  @param  {Function}  callback  Callback is invoked at the given time.
 *  @param  {Time}    time      The time relative to the AudioContext time
 *                              to invoke the callback.
 *  @return  {Tone.Draw}    this
 */


_Tone.default.Draw.prototype.schedule = function (callback, time) {
  this._events.add({
    callback: callback,
    time: this.toSeconds(time)
  }); //start the draw loop on the first event


  if (this._events.length === 1) {
    requestAnimationFrame(this._boundDrawLoop);
  }

  return this;
};
/**
 *  Cancel events scheduled after the given time
 *  @param  {Time=}  after  Time after which scheduled events will 
 *                          be removed from the scheduling timeline.
 *  @return  {Tone.Draw}  this
 */


_Tone.default.Draw.prototype.cancel = function (after) {
  this._events.cancel(this.toSeconds(after));

  return this;
};
/**
 *  The draw loop
 *  @private
 */


_Tone.default.Draw.prototype._drawLoop = function () {
  var now = _Tone.default.context.currentTime;

  while (this._events.length && this._events.peek().time - this.anticipation <= now) {
    var event = this._events.shift();

    if (now - event.time <= this.expiration) {
      event.callback();
    }
  }

  if (this._events.length > 0) {
    requestAnimationFrame(this._boundDrawLoop);
  }
}; //make a singleton


_Tone.default.Draw = new _Tone.default.Draw();
var _default = _Tone.default.Draw;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Timeline":"../node_modules/tone/tone/core/Timeline.js"}],"../node_modules/tone/tone/core/Listener.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/CrossFade");

require("../component/Merge");

require("../component/Split");

require("../signal/Signal");

require("../signal/AudioToGain");

require("../signal/Zero");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Both Tone.Panner3D and Tone.Listener have a position in 3D space
 *          using a right-handed cartesian coordinate system.
 *          The units used in the coordinate system are not defined;
 *          these coordinates are independent/invariant of any particular
 *          units such as meters or feet. Tone.Panner3D objects have an forward
 *          vector representing the direction the sound is projecting. Additionally,
 *          they have a sound cone representing how directional the sound is.
 *          For example, the sound could be omnidirectional, in which case it would
 *          be heard anywhere regardless of its forward, or it can be more directional
 *          and heard only if it is facing the listener. Tone.Listener objects
 *          (representing a person's ears) have an forward and up vector
 *          representing in which direction the person is facing. Because both the
 *          source stream and the listener can be moving, they both have a velocity
 *          vector representing both the speed and direction of movement. Taken together,
 *          these two velocities can be used to generate a doppler shift effect which changes the pitch.
 *          <br><br>
 *          Note: the position of the Listener will have no effect on nodes not connected to a Tone.Panner3D
 *
 *  @constructor
 *  @extends {Tone}
 *  @singleton
 */
_Tone.default.Listener = function () {
  _Tone.default.call(this);
  /**
   *  Holds the current forward orientation
   *  @type  {Array}
   *  @private
   */


  this._orientation = [0, 0, 0, 0, 0, 0];
  /**
   *  Holds the current position
   *  @type  {Array}
   *  @private
   */

  this._position = [0, 0, 0];

  _Tone.default.getContext(function () {
    // set the default position/forward
    this.set(ListenerConstructor.defaults); //listener is a singleton so it adds itself to the context
    // this.context.listener = this;
  }.bind(this));
};

_Tone.default.extend(_Tone.default.Listener);
/**
 *  Defaults according to the specification
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.Listener.defaults = {
  "positionX": 0,
  "positionY": 0,
  "positionZ": 0,
  "forwardX": 0,
  "forwardY": 0,
  "forwardZ": 1,
  "upX": 0,
  "upY": 1,
  "upZ": 0
};
/**
 * Is an instanceof Tone.Listener
 * @type {Boolean}
 */

_Tone.default.Listener.prototype.isListener = true;
/**
 * The ramp time which is applied to the setTargetAtTime
 * @type {Number}
 * @private
 */

_Tone.default.Listener.prototype._rampTimeConstant = 0.01;
/**
 *  Sets the position of the listener in 3d space.
 *  @param  {Number}  x
 *  @param  {Number}  y
 *  @param  {Number}  z
 *  @return {Tone.Listener} this
 */

_Tone.default.Listener.prototype.setPosition = function (x, y, z) {
  if (this.context.rawContext.listener.positionX) {
    var now = this.now();
    this.context.rawContext.listener.positionX.setTargetAtTime(x, now, this._rampTimeConstant);
    this.context.rawContext.listener.positionY.setTargetAtTime(y, now, this._rampTimeConstant);
    this.context.rawContext.listener.positionZ.setTargetAtTime(z, now, this._rampTimeConstant);
  } else {
    this.context.rawContext.listener.setPosition(x, y, z);
  }

  this._position = Array.prototype.slice.call(arguments);
  return this;
};
/**
 *  Sets the orientation of the listener using two vectors, the forward
 *  vector (which direction the listener is facing) and the up vector
 *  (which the up direction of the listener). An up vector
 *  of 0, 0, 1 is equivalent to the listener standing up in the Z direction.
 *  @param  {Number}  x
 *  @param  {Number}  y
 *  @param  {Number}  z
 *  @param  {Number}  upX
 *  @param  {Number}  upY
 *  @param  {Number}  upZ
 *  @return {Tone.Listener} this
 */


_Tone.default.Listener.prototype.setOrientation = function (x, y, z, upX, upY, upZ) {
  if (this.context.rawContext.listener.forwardX) {
    var now = this.now();
    this.context.rawContext.listener.forwardX.setTargetAtTime(x, now, this._rampTimeConstant);
    this.context.rawContext.listener.forwardY.setTargetAtTime(y, now, this._rampTimeConstant);
    this.context.rawContext.listener.forwardZ.setTargetAtTime(z, now, this._rampTimeConstant);
    this.context.rawContext.listener.upX.setTargetAtTime(upX, now, this._rampTimeConstant);
    this.context.rawContext.listener.upY.setTargetAtTime(upY, now, this._rampTimeConstant);
    this.context.rawContext.listener.upZ.setTargetAtTime(upZ, now, this._rampTimeConstant);
  } else {
    this.context.rawContext.listener.setOrientation(x, y, z, upX, upY, upZ);
  }

  this._orientation = Array.prototype.slice.call(arguments);
  return this;
};
/**
 *  The x position of the panner object.
 *  @type {Number}
 *  @memberOf Tone.Listener#
 *  @name positionX
 */


Object.defineProperty(_Tone.default.Listener.prototype, "positionX", {
  set: function (pos) {
    this._position[0] = pos;
    this.setPosition.apply(this, this._position);
  },
  get: function () {
    return this._position[0];
  }
});
/**
 *  The y position of the panner object.
 *  @type {Number}
 *  @memberOf Tone.Listener#
 *  @name positionY
 */

Object.defineProperty(_Tone.default.Listener.prototype, "positionY", {
  set: function (pos) {
    this._position[1] = pos;
    this.setPosition.apply(this, this._position);
  },
  get: function () {
    return this._position[1];
  }
});
/**
 *  The z position of the panner object.
 *  @type {Number}
 *  @memberOf Tone.Listener#
 *  @name positionZ
 */

Object.defineProperty(_Tone.default.Listener.prototype, "positionZ", {
  set: function (pos) {
    this._position[2] = pos;
    this.setPosition.apply(this, this._position);
  },
  get: function () {
    return this._position[2];
  }
});
/**
 *  The x coordinate of the listeners front direction. i.e.
 *  which way they are facing.
 *  @type {Number}
 *  @memberOf Tone.Listener#
 *  @name forwardX
 */

Object.defineProperty(_Tone.default.Listener.prototype, "forwardX", {
  set: function (pos) {
    this._orientation[0] = pos;
    this.setOrientation.apply(this, this._orientation);
  },
  get: function () {
    return this._orientation[0];
  }
});
/**
 *  The y coordinate of the listeners front direction. i.e.
 *  which way they are facing.
 *  @type {Number}
 *  @memberOf Tone.Listener#
 *  @name forwardY
 */

Object.defineProperty(_Tone.default.Listener.prototype, "forwardY", {
  set: function (pos) {
    this._orientation[1] = pos;
    this.setOrientation.apply(this, this._orientation);
  },
  get: function () {
    return this._orientation[1];
  }
});
/**
 *  The z coordinate of the listeners front direction. i.e.
 *  which way they are facing.
 *  @type {Number}
 *  @memberOf Tone.Listener#
 *  @name forwardZ
 */

Object.defineProperty(_Tone.default.Listener.prototype, "forwardZ", {
  set: function (pos) {
    this._orientation[2] = pos;
    this.setOrientation.apply(this, this._orientation);
  },
  get: function () {
    return this._orientation[2];
  }
});
/**
 *  The x coordinate of the listener's up direction. i.e.
 *  the direction the listener is standing in.
 *  @type {Number}
 *  @memberOf Tone.Listener#
 *  @name upX
 */

Object.defineProperty(_Tone.default.Listener.prototype, "upX", {
  set: function (pos) {
    this._orientation[3] = pos;
    this.setOrientation.apply(this, this._orientation);
  },
  get: function () {
    return this._orientation[3];
  }
});
/**
 *  The y coordinate of the listener's up direction. i.e.
 *  the direction the listener is standing in.
 *  @type {Number}
 *  @memberOf Tone.Listener#
 *  @name upY
 */

Object.defineProperty(_Tone.default.Listener.prototype, "upY", {
  set: function (pos) {
    this._orientation[4] = pos;
    this.setOrientation.apply(this, this._orientation);
  },
  get: function () {
    return this._orientation[4];
  }
});
/**
 *  The z coordinate of the listener's up direction. i.e.
 *  the direction the listener is standing in.
 *  @type {Number}
 *  @memberOf Tone.Listener#
 *  @name upZ
 */

Object.defineProperty(_Tone.default.Listener.prototype, "upZ", {
  set: function (pos) {
    this._orientation[5] = pos;
    this.setOrientation.apply(this, this._orientation);
  },
  get: function () {
    return this._orientation[5];
  }
});
/**
 *  Clean up.
 *  @returns {Tone.Listener} this
 */

_Tone.default.Listener.prototype.dispose = function () {
  this._orientation = null;
  this._position = null;
  return this;
}; //SINGLETON SETUP


var ListenerConstructor = _Tone.default.Listener;
_Tone.default.Listener = new ListenerConstructor();

_Tone.default.Context.on("init", function (context) {
  if (context.listener && context.listener.isListener) {
    //a single listener object
    _Tone.default.Listener = context.listener;
  } else {
    //make new Listener insides
    _Tone.default.Listener = new ListenerConstructor();
  }
}); //END SINGLETON SETUP


var _default = _Tone.default.Listener;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/CrossFade":"../node_modules/tone/tone/component/CrossFade.js","../component/Merge":"../node_modules/tone/tone/component/Merge.js","../component/Split":"../node_modules/tone/tone/component/Split.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../signal/AudioToGain":"../node_modules/tone/tone/signal/AudioToGain.js","../signal/Zero":"../node_modules/tone/tone/signal/Zero.js"}],"../node_modules/tone/tone/core/OfflineContext.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Context");

require("../shim/OfflineAudioContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Wrapper around the OfflineAudioContext
 *  @extends {Tone.Context}
 *  @param  {Number}  channels  The number of channels to render
 *  @param  {Number}  duration  The duration to render in samples
 *  @param {Number} sampleRate the sample rate to render at
 */
_Tone.default.OfflineContext = function (channels, duration, sampleRate) {
  /**
   *  The offline context
   *  @private
   *  @type  {OfflineAudioContext}
   */
  var offlineContext = new OfflineAudioContext(channels, duration * sampleRate, sampleRate); //wrap the methods/members

  _Tone.default.Context.call(this, {
    "context": offlineContext,
    "clockSource": "offline",
    "lookAhead": 0,
    "updateInterval": 128 / sampleRate
  });
  /**
   *  A private reference to the duration
   *  @private
   *  @type  {Number}
   */


  this._duration = duration;
  /**
   *  An artificial clock source
   *  @type  {Number}
   *  @private
   */

  this._currentTime = 0;
};

_Tone.default.extend(_Tone.default.OfflineContext, _Tone.default.Context);
/**
 *  Override the now method to point to the internal clock time
 *  @return  {Number}
 */


_Tone.default.OfflineContext.prototype.now = function () {
  return this._currentTime;
};
/**
 *  Overwrite resume, should not do anything in the OfflineAudioContext.
 *  @return {Promise}
 */


_Tone.default.OfflineContext.prototype.resume = function () {
  return Promise.resolve();
};
/**
 *  Render the output of the OfflineContext
 *  @return  {Promise}
 */


_Tone.default.OfflineContext.prototype.render = function () {
  while (this._duration - this._currentTime >= 0) {
    //invoke all the callbacks on that time
    this.emit("tick"); //increment the clock in 5ms chunks

    this._currentTime += 0.005;
  }

  return this._context.startRendering();
};
/**
 *  Close the context
 *  @return  {Promise}
 */


_Tone.default.OfflineContext.prototype.close = function () {
  this._context = null;
  return Promise.resolve();
};

var _default = _Tone.default.OfflineContext;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Context":"../node_modules/tone/tone/core/Context.js","../shim/OfflineAudioContext":"../node_modules/tone/tone/shim/OfflineAudioContext.js"}],"../node_modules/tone/tone/core/Offline.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Transport");

require("../core/Buffer");

require("../core/OfflineContext");

require("../core/Master");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  Generate a buffer by rendering all of the Tone.js code within the callback using the OfflineAudioContext.
 *  The OfflineAudioContext is capable of rendering much faster than real time in many cases.
 *  The callback function also passes in an offline instance of Tone.Transport which can be used
 *  to schedule events along the Transport. **NOTE** OfflineAudioContext has the same restrictions
 *  as the AudioContext in that on certain platforms (like iOS) it must be invoked by an explicit
 *  user action like a click or tap. 
 *  @param  {Function}  callback  All Tone.js nodes which are created and scheduled within this callback are recorded into the output Buffer.
 *  @param  {Time}  duration     the amount of time to record for.
 *  @return  {Promise}  The promise which is invoked with the Tone.Buffer of the recorded output.
 *  @example
 * //render 2 seconds of the oscillator
 * Tone.Offline(function(){
 * 	//only nodes created in this callback will be recorded
 * 	var oscillator = new Tone.Oscillator().toMaster().start(0)
 * 	//schedule their events
 * }, 2).then(function(buffer){
 * 	//do something with the output buffer
 * })
 * @example
 * //can also schedule events along the Transport
 * //using the passed in Offline Transport
 * Tone.Offline(function(Transport){
 * 	var osc = new Tone.Oscillator().toMaster()
 * 	Transport.schedule(function(time){
 * 		osc.start(time).stop(time + 0.1)
 * 	}, 1)
 * 	Transport.start(0.2)
 * }, 4).then(function(buffer){
 * 	//do something with the output buffer
 * })
 */
_Tone.default.Offline = function (callback, duration) {
  //set the OfflineAudioContext
  var sampleRate = _Tone.default.context.sampleRate;
  var originalContext = _Tone.default.context;
  var context = new _Tone.default.OfflineContext(2, duration, sampleRate);
  _Tone.default.context = context; //invoke the callback/scheduling

  var response = callback(_Tone.default.Transport); //the return value

  var ret = null;

  if (response && _Tone.default.isFunction(response.then)) {
    //wait for the promise to resolve
    ret = response.then(function () {
      //then render the audio
      return context.render();
    });
  } else {
    //process the audio
    ret = context.render();
  } //return the original AudioContext


  _Tone.default.context = originalContext; //return the audio

  return ret.then(function (buffer) {
    //wrap it in a Tone.Buffer
    return new _Tone.default.Buffer(buffer);
  });
};

var _default = _Tone.default.Offline;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Transport":"../node_modules/tone/tone/core/Transport.js","../core/Buffer":"../node_modules/tone/tone/core/Buffer.js","../core/OfflineContext":"../node_modules/tone/tone/core/OfflineContext.js","../core/Master":"../node_modules/tone/tone/core/Master.js"}],"../node_modules/tone/tone/effect/Effect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/CrossFade");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 	@class  Tone.Effect is the base class for effects. Connect the effect between
 * 	        the effectSend and effectReturn GainNodes, then control the amount of
 * 	        effect which goes to the output using the wet control.
 *
 *  @constructor
 *  @extends {Tone.AudioNode}
 *  @param {NormalRange|Object} [wet] The starting wet value.
 */
_Tone.default.Effect = function () {
  var options = _Tone.default.defaults(arguments, ["wet"], _Tone.default.Effect);

  _Tone.default.AudioNode.call(this);

  this.createInsOuts(1, 1);
  /**
   *  the drywet knob to control the amount of effect
   *  @type {Tone.CrossFade}
   *  @private
   */

  this._dryWet = new _Tone.default.CrossFade(options.wet);
  /**
   *  The wet control is how much of the effected
   *  will pass through to the output. 1 = 100% effected
   *  signal, 0 = 100% dry signal.
   *  @type {NormalRange}
   *  @signal
   */

  this.wet = this._dryWet.fade;
  /**
   *  connect the effectSend to the input of hte effect
   *  @type {Tone.Gain}
   *  @private
   */

  this.effectSend = new _Tone.default.Gain();
  /**
   *  connect the output of the effect to the effectReturn
   *  @type {Tone.Gain}
   *  @private
   */

  this.effectReturn = new _Tone.default.Gain(); //connections

  _Tone.default.connect(this.input, this._dryWet.a);

  _Tone.default.connect(this.input, this.effectSend);

  this.effectReturn.connect(this._dryWet.b);

  this._dryWet.connect(this.output);

  this._readOnly(["wet"]);
};

_Tone.default.extend(_Tone.default.Effect, _Tone.default.AudioNode);
/**
 *  @static
 *  @type {Object}
 */


_Tone.default.Effect.defaults = {
  "wet": 1
};
/**
 *  chains the effect in between the effectSend and effectReturn
 *  @param  {Tone} effect
 *  @private
 *  @returns {Tone.Effect} this
 */

_Tone.default.Effect.prototype.connectEffect = function (effect) {
  this.effectSend.chain(effect, this.effectReturn);
  return this;
};
/**
 *  Clean up.
 *  @returns {Tone.Effect} this
 */


_Tone.default.Effect.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._dryWet.dispose();

  this._dryWet = null;
  this.effectSend.dispose();
  this.effectSend = null;
  this.effectReturn.dispose();
  this.effectReturn = null;

  this._writable(["wet"]);

  this.wet = null;
  return this;
};

var _default = _Tone.default.Effect;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/CrossFade":"../node_modules/tone/tone/component/CrossFade.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/effect/AutoFilter.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../effect/Effect");

require("../component/LFO");

require("../component/Filter");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.AutoFilter is a Tone.Filter with a Tone.LFO connected to the filter cutoff frequency.
 *         Setting the LFO rate and depth allows for control over the filter modulation rate 
 *         and depth.
 *
 *  @constructor
 *  @extends {Tone.Effect}
 *  @param {Time|Object} [frequency] The rate of the LFO.
 *  @param {Frequency=} baseFrequency The lower value of the LFOs oscillation
 	 *  @param {Frequency=} octaves The number of octaves above the baseFrequency
 *  @example
 * //create an autofilter and start it's LFO
 * var autoFilter = new Tone.AutoFilter("4n").toMaster().start();
 * //route an oscillator through the filter and start it
 * var oscillator = new Tone.Oscillator().connect(autoFilter).start();
 */
_Tone.default.AutoFilter = function () {
  var options = _Tone.default.defaults(arguments, ["frequency", "baseFrequency", "octaves"], _Tone.default.AutoFilter);

  _Tone.default.Effect.call(this, options);
  /**
   *  the lfo which drives the filter cutoff
   *  @type {Tone.LFO}
   *  @private
   */


  this._lfo = new _Tone.default.LFO({
    "frequency": options.frequency,
    "amplitude": options.depth
  });
  /**
   * The range of the filter modulating between the min and max frequency. 
   * 0 = no modulation. 1 = full modulation.
   * @type {NormalRange}
   * @signal
   */

  this.depth = this._lfo.amplitude;
  /**
   * How fast the filter modulates between min and max. 
   * @type {Frequency}
   * @signal
   */

  this.frequency = this._lfo.frequency;
  /**
   *  The filter node
   *  @type {Tone.Filter}
   */

  this.filter = new _Tone.default.Filter(options.filter);
  /**
   *  The octaves placeholder
   *  @type {Positive}
   *  @private
   */

  this._octaves = 0; //connections

  this.connectEffect(this.filter);

  this._lfo.connect(this.filter.frequency);

  this.type = options.type;

  this._readOnly(["frequency", "depth"]);

  this.octaves = options.octaves;
  this.baseFrequency = options.baseFrequency;
}; //extend Effect


_Tone.default.extend(_Tone.default.AutoFilter, _Tone.default.Effect);
/**
 *  defaults
 *  @static
 *  @type {Object}
 */


_Tone.default.AutoFilter.defaults = {
  "frequency": 1,
  "type": "sine",
  "depth": 1,
  "baseFrequency": 200,
  "octaves": 2.6,
  "filter": {
    "type": "lowpass",
    "rolloff": -12,
    "Q": 1
  }
};
/**
 * Start the effect.
 * @param {Time} [time=now] When the LFO will start. 
 * @returns {Tone.AutoFilter} this
 */

_Tone.default.AutoFilter.prototype.start = function (time) {
  this._lfo.start(time);

  return this;
};
/**
 * Stop the effect.
 * @param {Time} [time=now] When the LFO will stop. 
 * @returns {Tone.AutoFilter} this
 */


_Tone.default.AutoFilter.prototype.stop = function (time) {
  this._lfo.stop(time);

  return this;
};
/**
 * Sync the filter to the transport.
 * @param {Time} [delay=0] Delay time before starting the effect after the
 *                               Transport has started. 
 * @returns {Tone.AutoFilter} this
 */


_Tone.default.AutoFilter.prototype.sync = function (delay) {
  this._lfo.sync(delay);

  return this;
};
/**
 * Unsync the filter from the transport.
 * @returns {Tone.AutoFilter} this
 */


_Tone.default.AutoFilter.prototype.unsync = function () {
  this._lfo.unsync();

  return this;
};
/**
 * Type of oscillator attached to the AutoFilter. 
 * Possible values: "sine", "square", "triangle", "sawtooth".
 * @memberOf Tone.AutoFilter#
 * @type {string}
 * @name type
 */


Object.defineProperty(_Tone.default.AutoFilter.prototype, "type", {
  get: function () {
    return this._lfo.type;
  },
  set: function (type) {
    this._lfo.type = type;
  }
});
/**
 * The minimum value of the filter's cutoff frequency.
 * @memberOf Tone.AutoFilter#
 * @type {Frequency}
 * @name baseFrequency
 */

Object.defineProperty(_Tone.default.AutoFilter.prototype, "baseFrequency", {
  get: function () {
    return this._lfo.min;
  },
  set: function (freq) {
    this._lfo.min = this.toFrequency(freq); //and set the max

    this.octaves = this._octaves;
  }
});
/**
 * The maximum value of the filter's cutoff frequency. 
 * @memberOf Tone.AutoFilter#
 * @type {Positive}
 * @name octaves
 */

Object.defineProperty(_Tone.default.AutoFilter.prototype, "octaves", {
  get: function () {
    return this._octaves;
  },
  set: function (oct) {
    this._octaves = oct;
    this._lfo.max = this.baseFrequency * Math.pow(2, oct);
  }
});
/**
 *  Clean up. 
 *  @returns {Tone.AutoFilter} this
 */

_Tone.default.AutoFilter.prototype.dispose = function () {
  _Tone.default.Effect.prototype.dispose.call(this);

  this._lfo.dispose();

  this._lfo = null;
  this.filter.dispose();
  this.filter = null;

  this._writable(["frequency", "depth"]);

  this.frequency = null;
  this.depth = null;
  return this;
};

var _default = _Tone.default.AutoFilter;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../effect/Effect":"../node_modules/tone/tone/effect/Effect.js","../component/LFO":"../node_modules/tone/tone/component/LFO.js","../component/Filter":"../node_modules/tone/tone/component/Filter.js"}],"../node_modules/tone/tone/effect/AutoPanner.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../effect/Effect");

require("../component/LFO");

require("../component/Panner");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.AutoPanner is a Tone.Panner with an LFO connected to the pan amount. 
 *         More on using autopanners [here](https://www.ableton.com/en/blog/autopan-chopper-effect-and-more-liveschool/).
 *
 *  @constructor
 *  @extends {Tone.Effect}
 *  @param {Frequency|Object} [frequency] Rate of left-right oscillation. 
 *  @example
 * //create an autopanner and start it's LFO
 * var autoPanner = new Tone.AutoPanner("4n").toMaster().start();
 * //route an oscillator through the panner and start it
 * var oscillator = new Tone.Oscillator().connect(autoPanner).start();
 */
_Tone.default.AutoPanner = function () {
  var options = _Tone.default.defaults(arguments, ["frequency"], _Tone.default.AutoPanner);

  _Tone.default.Effect.call(this, options);
  /**
   *  the lfo which drives the panning
   *  @type {Tone.LFO}
   *  @private
   */


  this._lfo = new _Tone.default.LFO({
    "frequency": options.frequency,
    "amplitude": options.depth,
    "min": -1,
    "max": 1
  });
  /**
   * The amount of panning between left and right. 
   * 0 = always center. 1 = full range between left and right. 
   * @type {NormalRange}
   * @signal
   */

  this.depth = this._lfo.amplitude;
  /**
   *  the panner node which does the panning
   *  @type {Tone.Panner}
   *  @private
   */

  this._panner = new _Tone.default.Panner();
  /**
   * How fast the panner modulates between left and right. 
   * @type {Frequency}
   * @signal
   */

  this.frequency = this._lfo.frequency; //connections

  this.connectEffect(this._panner);

  this._lfo.connect(this._panner.pan);

  this.type = options.type;

  this._readOnly(["depth", "frequency"]);
}; //extend Effect


_Tone.default.extend(_Tone.default.AutoPanner, _Tone.default.Effect);
/**
 *  defaults
 *  @static
 *  @type {Object}
 */


_Tone.default.AutoPanner.defaults = {
  "frequency": 1,
  "type": "sine",
  "depth": 1
};
/**
 * Start the effect.
 * @param {Time} [time=now] When the LFO will start. 
 * @returns {Tone.AutoPanner} this
 */

_Tone.default.AutoPanner.prototype.start = function (time) {
  this._lfo.start(time);

  return this;
};
/**
 * Stop the effect.
 * @param {Time} [time=now] When the LFO will stop. 
 * @returns {Tone.AutoPanner} this
 */


_Tone.default.AutoPanner.prototype.stop = function (time) {
  this._lfo.stop(time);

  return this;
};
/**
 * Sync the panner to the transport.
 * @param {Time} [delay=0] Delay time before starting the effect after the
 *                               Transport has started. 
 * @returns {Tone.AutoPanner} this
 */


_Tone.default.AutoPanner.prototype.sync = function (delay) {
  this._lfo.sync(delay);

  return this;
};
/**
 * Unsync the panner from the transport
 * @returns {Tone.AutoPanner} this
 */


_Tone.default.AutoPanner.prototype.unsync = function () {
  this._lfo.unsync();

  return this;
};
/**
 * Type of oscillator attached to the AutoFilter. 
 * Possible values: "sine", "square", "triangle", "sawtooth".
 * @memberOf Tone.AutoFilter#
 * @type {string}
 * @name type
 */


Object.defineProperty(_Tone.default.AutoPanner.prototype, "type", {
  get: function () {
    return this._lfo.type;
  },
  set: function (type) {
    this._lfo.type = type;
  }
});
/**
 *  clean up
 *  @returns {Tone.AutoPanner} this
 */

_Tone.default.AutoPanner.prototype.dispose = function () {
  _Tone.default.Effect.prototype.dispose.call(this);

  this._lfo.dispose();

  this._lfo = null;

  this._panner.dispose();

  this._panner = null;

  this._writable(["depth", "frequency"]);

  this.frequency = null;
  this.depth = null;
  return this;
};

var _default = _Tone.default.AutoPanner;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../effect/Effect":"../node_modules/tone/tone/effect/Effect.js","../component/LFO":"../node_modules/tone/tone/component/LFO.js","../component/Panner":"../node_modules/tone/tone/component/Panner.js"}],"../node_modules/tone/tone/effect/AutoWah.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/Follower");

require("../signal/ScaleExp");

require("../effect/Effect");

require("../component/Filter");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.AutoWah connects a Tone.Follower to a bandpass filter (Tone.Filter).
 *          The frequency of the filter is adjusted proportionally to the
 *          incoming signal's amplitude. Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna).
 *
 *  @constructor
 *  @extends {Tone.Effect}
 *  @param {Frequency|Object} [baseFrequency] The frequency the filter is set
 *                                            to at the low point of the wah
 *  @param {Positive} [octaves] The number of octaves above the baseFrequency
 *                                the filter will sweep to when fully open
 *  @param {Decibels} [sensitivity] The decibel threshold sensitivity for
 *                                   the incoming signal. Normal range of -40 to 0.
 *  @example
 * var autoWah = new Tone.AutoWah(50, 6, -30).toMaster();
 * //initialize the synth and connect to autowah
 * var synth = new Synth.connect(autoWah);
 * //Q value influences the effect of the wah - default is 2
 * autoWah.Q.value = 6;
 * //more audible on higher notes
 * synth.triggerAttackRelease("C4", "8n")
 */
_Tone.default.AutoWah = function () {
  var options = _Tone.default.defaults(arguments, ["baseFrequency", "octaves", "sensitivity"], _Tone.default.AutoWah);

  _Tone.default.Effect.call(this, options);
  /**
   *  The envelope follower. Set the attack/release
   *  timing to adjust how the envelope is followed.
   *  @type {Tone.Follower}
   *  @private
   */


  this.follower = new _Tone.default.Follower(options.follower);
  /**
   *  scales the follower value to the frequency domain
   *  @type {Tone}
   *  @private
   */

  this._sweepRange = new _Tone.default.ScaleExp(0, 1, 0.5);
  /**
   *  @type {number}
   *  @private
   */

  this._baseFrequency = options.baseFrequency;
  /**
   *  @type {number}
   *  @private
   */

  this._octaves = options.octaves;
  /**
   *  the input gain to adjust the sensitivity
   *  @type {Tone.Gain}
   *  @private
   */

  this._inputBoost = new _Tone.default.Gain();
  /**
   *  @type {BiquadFilterNode}
   *  @private
   */

  this._bandpass = new _Tone.default.Filter({
    "rolloff": -48,
    "frequency": 0,
    "Q": options.Q
  });
  /**
   *  @type {Tone.Filter}
   *  @private
   */

  this._peaking = new _Tone.default.Filter(0, "peaking");
  this._peaking.gain.value = options.gain;
  /**
   * The gain of the filter.
   * @type {Number}
   * @signal
   */

  this.gain = this._peaking.gain;
  /**
   * The quality of the filter.
   * @type {Positive}
   * @signal
   */

  this.Q = this._bandpass.Q; //the control signal path

  this.effectSend.chain(this._inputBoost, this.follower, this._sweepRange);

  this._sweepRange.connect(this._bandpass.frequency);

  this._sweepRange.connect(this._peaking.frequency); //the filtered path


  this.effectSend.chain(this._bandpass, this._peaking, this.effectReturn); //set the initial value

  this._setSweepRange();

  this.sensitivity = options.sensitivity;

  this._readOnly(["gain", "Q"]);
};

_Tone.default.extend(_Tone.default.AutoWah, _Tone.default.Effect);
/**
 *  @static
 *  @type {Object}
 */


_Tone.default.AutoWah.defaults = {
  "baseFrequency": 100,
  "octaves": 6,
  "sensitivity": 0,
  "Q": 2,
  "gain": 2,
  "follower": {
    "attack": 0.3,
    "release": 0.5
  }
};
/**
 * The number of octaves that the filter will sweep above the
 * baseFrequency.
 * @memberOf Tone.AutoWah#
 * @type {Number}
 * @name octaves
 */

Object.defineProperty(_Tone.default.AutoWah.prototype, "octaves", {
  get: function () {
    return this._octaves;
  },
  set: function (octaves) {
    this._octaves = octaves;

    this._setSweepRange();
  }
});
/**
 * The base frequency from which the sweep will start from.
 * @memberOf Tone.AutoWah#
 * @type {Frequency}
 * @name baseFrequency
 */

Object.defineProperty(_Tone.default.AutoWah.prototype, "baseFrequency", {
  get: function () {
    return this._baseFrequency;
  },
  set: function (baseFreq) {
    this._baseFrequency = baseFreq;

    this._setSweepRange();
  }
});
/**
 * The sensitivity to control how responsive to the input signal the filter is.
 * @memberOf Tone.AutoWah#
 * @type {Decibels}
 * @name sensitivity
 */

Object.defineProperty(_Tone.default.AutoWah.prototype, "sensitivity", {
  get: function () {
    return _Tone.default.gainToDb(1 / this._inputBoost.gain.value);
  },
  set: function (sensitivy) {
    this._inputBoost.gain.value = 1 / _Tone.default.dbToGain(sensitivy);
  }
});
/**
 *  sets the sweep range of the scaler
 *  @private
 */

_Tone.default.AutoWah.prototype._setSweepRange = function () {
  this._sweepRange.min = this._baseFrequency;
  this._sweepRange.max = Math.min(this._baseFrequency * Math.pow(2, this._octaves), this.context.sampleRate / 2);
};
/**
 *  Clean up.
 *  @returns {Tone.AutoWah} this
 */


_Tone.default.AutoWah.prototype.dispose = function () {
  _Tone.default.Effect.prototype.dispose.call(this);

  this.follower.dispose();
  this.follower = null;

  this._sweepRange.dispose();

  this._sweepRange = null;

  this._bandpass.dispose();

  this._bandpass = null;

  this._peaking.dispose();

  this._peaking = null;

  this._inputBoost.dispose();

  this._inputBoost = null;

  this._writable(["gain", "Q"]);

  this.gain = null;
  this.Q = null;
  return this;
};

var _default = _Tone.default.AutoWah;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/Follower":"../node_modules/tone/tone/component/Follower.js","../signal/ScaleExp":"../node_modules/tone/tone/signal/ScaleExp.js","../effect/Effect":"../node_modules/tone/tone/effect/Effect.js","../component/Filter":"../node_modules/tone/tone/component/Filter.js"}],"../node_modules/tone/tone/signal/Modulo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/WaveShaper");

require("../signal/Multiply");

require("../signal/Subtract");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Signal-rate modulo operator. Only works in AudioRange [-1, 1] and for modulus
 *         values in the NormalRange.
 *
 *  @constructor
 *  @extends {Tone.SignalBase}
 *  @param {NormalRange} modulus The modulus to apply.
 *  @example
 * var mod = new Tone.Modulo(0.2)
 * var sig = new Tone.Signal(0.5).connect(mod);
 * //mod outputs 0.1
 */
_Tone.default.Modulo = function (modulus) {
  _Tone.default.SignalBase.call(this);

  this.createInsOuts(1, 0);
  /**
   *  A waveshaper gets the integer multiple of
   *  the input signal and the modulus.
   *  @private
   *  @type {Tone.WaveShaper}
   */

  this._shaper = new _Tone.default.WaveShaper(Math.pow(2, 16));
  /**
   *  the integer multiple is multiplied by the modulus
   *  @type  {Tone.Multiply}
   *  @private
   */

  this._multiply = new _Tone.default.Multiply();
  /**
   *  and subtracted from the input signal
   *  @type  {Tone.Subtract}
   *  @private
   */

  this._subtract = this.output = new _Tone.default.Subtract();
  /**
   *  the modulus signal
   *  @type  {Tone.Signal}
   *  @private
   */

  this._modSignal = new _Tone.default.Signal(modulus); //connections

  _Tone.default.connect(this.input, this._shaper);

  _Tone.default.connect(this.input, this._subtract);

  this._modSignal.connect(this._multiply, 0, 0);

  this._shaper.connect(this._multiply, 0, 1);

  this._multiply.connect(this._subtract, 0, 1);

  this._setWaveShaper(modulus);
};

_Tone.default.extend(_Tone.default.Modulo, _Tone.default.SignalBase);
/**
 *  @param  {number}  mod  the modulus to apply
 *  @private
 */


_Tone.default.Modulo.prototype._setWaveShaper = function (mod) {
  this._shaper.setMap(function (val) {
    var multiple = Math.floor((val + 0.0001) / mod);
    return multiple;
  });
};
/**
 * The modulus value.
 * @memberOf Tone.Modulo#
 * @type {NormalRange}
 * @name value
 */


Object.defineProperty(_Tone.default.Modulo.prototype, "value", {
  get: function () {
    return this._modSignal.value;
  },
  set: function (mod) {
    this._modSignal.value = mod;

    this._setWaveShaper(mod);
  }
});
/**
 * clean up
 *  @returns {Tone.Modulo} this
 */

_Tone.default.Modulo.prototype.dispose = function () {
  _Tone.default.SignalBase.prototype.dispose.call(this);

  this._shaper.dispose();

  this._shaper = null;

  this._multiply.dispose();

  this._multiply = null;

  this._subtract.dispose();

  this._subtract = null;

  this._modSignal.dispose();

  this._modSignal = null;
  return this;
};

var _default = _Tone.default.Modulo;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/WaveShaper":"../node_modules/tone/tone/signal/WaveShaper.js","../signal/Multiply":"../node_modules/tone/tone/signal/Multiply.js","../signal/Subtract":"../node_modules/tone/tone/signal/Subtract.js"}],"../node_modules/tone/tone/effect/BitCrusher.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../effect/Effect");

require("../signal/Subtract");

require("../signal/Modulo");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Bitcrusher downsamples the incoming signal to a different bitdepth.
 *         Lowering the bitdepth of the signal creates distortion. Read more about Bitcrushing
 *         on [Wikipedia](https://en.wikipedia.org/wiki/Bitcrusher).
 *
 *  @constructor
 *  @extends {Tone.Effect}
 *  @param {Number} bits The number of bits to downsample the signal. Nominal range
 *                       of 1 to 8.
 *  @example
 * //initialize crusher and route a synth through it
 * var crusher = new Tone.BitCrusher(4).toMaster();
 * var synth = new Tone.MonoSynth().connect(crusher);
 */
_Tone.default.BitCrusher = function () {
  var options = _Tone.default.defaults(arguments, ["bits"], _Tone.default.BitCrusher);

  _Tone.default.Effect.call(this, options);

  var invStepSize = 1 / Math.pow(2, options.bits - 1);
  /**
   *  Subtract the input signal and the modulus of the input signal
   *  @type {Tone.Subtract}
   *  @private
   */

  this._subtract = new _Tone.default.Subtract();
  /**
   *  The mod function
   *  @type  {Tone.Modulo}
   *  @private
   */

  this._modulo = new _Tone.default.Modulo(invStepSize);
  /**
   *  keeps track of the bits
   *  @type {number}
   *  @private
   */

  this._bits = options.bits; //connect it up

  this.effectSend.fan(this._subtract, this._modulo);

  this._modulo.connect(this._subtract, 0, 1);

  this._subtract.connect(this.effectReturn);
};

_Tone.default.extend(_Tone.default.BitCrusher, _Tone.default.Effect);
/**
 *  the default values
 *  @static
 *  @type {Object}
 */


_Tone.default.BitCrusher.defaults = {
  "bits": 4
};
/**
 * The bit depth of the effect. Nominal range of 1-8.
 * @memberOf Tone.BitCrusher#
 * @type {number}
 * @name bits
 */

Object.defineProperty(_Tone.default.BitCrusher.prototype, "bits", {
  get: function () {
    return this._bits;
  },
  set: function (bits) {
    this._bits = bits;
    var invStepSize = 1 / Math.pow(2, bits - 1);
    this._modulo.value = invStepSize;
  }
});
/**
 *  Clean up.
 *  @returns {Tone.BitCrusher} this
 */

_Tone.default.BitCrusher.prototype.dispose = function () {
  _Tone.default.Effect.prototype.dispose.call(this);

  this._subtract.dispose();

  this._subtract = null;

  this._modulo.dispose();

  this._modulo = null;
  return this;
};

var _default = _Tone.default.BitCrusher;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../effect/Effect":"../node_modules/tone/tone/effect/Effect.js","../signal/Subtract":"../node_modules/tone/tone/signal/Subtract.js","../signal/Modulo":"../node_modules/tone/tone/signal/Modulo.js"}],"../node_modules/tone/tone/effect/Chebyshev.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../effect/Effect");

require("../signal/WaveShaper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.ChebyShev is a Chebyshev waveshaper, an effect which is good 
 *         for making different types of distortion sounds.
 *         Note that odd orders sound very different from even ones, 
 *         and order = 1 is no change. 
 *         Read more at [music.columbia.edu](http://music.columbia.edu/cmc/musicandcomputers/chapter4/04_06.php).
 *
 *  @extends {Tone.Effect}
 *  @constructor
 *  @param {Positive|Object} [order] The order of the chebyshev polynomial. Normal range between 1-100. 
 *  @example
 * //create a new cheby
 * var cheby = new Tone.Chebyshev(50);
 * //create a monosynth connected to our cheby
 * synth = new Tone.MonoSynth().connect(cheby);
 */
_Tone.default.Chebyshev = function () {
  var options = _Tone.default.defaults(arguments, ["order"], _Tone.default.Chebyshev);

  _Tone.default.Effect.call(this, options);
  /**
   *  @type {WaveShaperNode}
   *  @private
   */


  this._shaper = new _Tone.default.WaveShaper(4096);
  /**
   * holds onto the order of the filter
   * @type {number}
   * @private
   */

  this._order = options.order;
  this.connectEffect(this._shaper);
  this.order = options.order;
  this.oversample = options.oversample;
};

_Tone.default.extend(_Tone.default.Chebyshev, _Tone.default.Effect);
/**
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.Chebyshev.defaults = {
  "order": 1,
  "oversample": "none"
};
/**
 *  get the coefficient for that degree
 *  @param {number} x the x value
 *  @param   {number} degree 
 *  @param {Object} memo memoize the computed value. 
 *                       this speeds up computation greatly. 
 *  @return  {number}       the coefficient 
 *  @private
 */

_Tone.default.Chebyshev.prototype._getCoefficient = function (x, degree, memo) {
  if (memo.hasOwnProperty(degree)) {
    return memo[degree];
  } else if (degree === 0) {
    memo[degree] = 0;
  } else if (degree === 1) {
    memo[degree] = x;
  } else {
    memo[degree] = 2 * x * this._getCoefficient(x, degree - 1, memo) - this._getCoefficient(x, degree - 2, memo);
  }

  return memo[degree];
};
/**
 * The order of the Chebyshev polynomial which creates
 * the equation which is applied to the incoming 
 * signal through a Tone.WaveShaper. The equations
 * are in the form:<br>
 * order 2: 2x^2 + 1<br>
 * order 3: 4x^3 + 3x <br>
 * @memberOf Tone.Chebyshev#
 * @type {Positive}
 * @name order
 */


Object.defineProperty(_Tone.default.Chebyshev.prototype, "order", {
  get: function () {
    return this._order;
  },
  set: function (order) {
    this._order = order;
    var curve = new Array(4096);
    var len = curve.length;

    for (var i = 0; i < len; ++i) {
      var x = i * 2 / len - 1;

      if (x === 0) {
        //should output 0 when input is 0
        curve[i] = 0;
      } else {
        curve[i] = this._getCoefficient(x, order, {});
      }
    }

    this._shaper.curve = curve;
  }
});
/**
 * The oversampling of the effect. Can either be "none", "2x" or "4x".
 * @memberOf Tone.Chebyshev#
 * @type {string}
 * @name oversample
 */

Object.defineProperty(_Tone.default.Chebyshev.prototype, "oversample", {
  get: function () {
    return this._shaper.oversample;
  },
  set: function (oversampling) {
    this._shaper.oversample = oversampling;
  }
});
/**
 *  Clean up. 
 *  @returns {Tone.Chebyshev} this
 */

_Tone.default.Chebyshev.prototype.dispose = function () {
  _Tone.default.Effect.prototype.dispose.call(this);

  this._shaper.dispose();

  this._shaper = null;
  return this;
};

var _default = _Tone.default.Chebyshev;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../effect/Effect":"../node_modules/tone/tone/effect/Effect.js","../signal/WaveShaper":"../node_modules/tone/tone/signal/WaveShaper.js"}],"../node_modules/tone/tone/effect/StereoEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../effect/Effect");

require("../component/Split");

require("../component/Merge");

require("../component/CrossFade");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Base class for Stereo effects. Provides effectSendL/R and effectReturnL/R.
 *
 *	@constructor
 *	@extends {Tone.Effect}
 */
_Tone.default.StereoEffect = function () {
  //get the defaults
  _Tone.default.AudioNode.call(this);

  var options = _Tone.default.defaults(arguments, ["wet"], _Tone.default.Effect);

  this.createInsOuts(1, 1);
  /**
   *  the drywet knob to control the amount of effect
   *  @type {Tone.CrossFade}
   *  @private
   */

  this._dryWet = new _Tone.default.CrossFade(options.wet);
  /**
   *  The wet control, i.e. how much of the effected
   *  will pass through to the output.
   *  @type {NormalRange}
   *  @signal
   */

  this.wet = this._dryWet.fade;
  /**
   *  then split it
   *  @type {Tone.Split}
   *  @private
   */

  this._split = new _Tone.default.Split();
  /**
   *  the effects send LEFT
   *  @type {GainNode}
   *  @private
   */

  this.effectSendL = this._split.left;
  /**
   *  the effects send RIGHT
   *  @type {GainNode}
   *  @private
   */

  this.effectSendR = this._split.right;
  /**
   *  the stereo effect merger
   *  @type {Tone.Merge}
   *  @private
   */

  this._merge = new _Tone.default.Merge();
  /**
   *  the effect return LEFT
   *  @type {GainNode}
   *  @private
   */

  this.effectReturnL = this._merge.left;
  /**
   *  the effect return RIGHT
   *  @type {GainNode}
   *  @private
   */

  this.effectReturnR = this._merge.right; //connections

  _Tone.default.connect(this.input, this._split); //dry wet connections


  _Tone.default.connect(this.input, this._dryWet, 0, 0);

  this._merge.connect(this._dryWet, 0, 1);

  this._dryWet.connect(this.output);

  this._readOnly(["wet"]);
};

_Tone.default.extend(_Tone.default.StereoEffect, _Tone.default.Effect);
/**
 *  Clean up.
 *  @returns {Tone.StereoEffect} this
 */


_Tone.default.StereoEffect.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._dryWet.dispose();

  this._dryWet = null;

  this._split.dispose();

  this._split = null;

  this._merge.dispose();

  this._merge = null;
  this.effectSendL = null;
  this.effectSendR = null;
  this.effectReturnL = null;
  this.effectReturnR = null;

  this._writable(["wet"]);

  this.wet = null;
  return this;
};

var _default = _Tone.default.StereoEffect;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../effect/Effect":"../node_modules/tone/tone/effect/Effect.js","../component/Split":"../node_modules/tone/tone/component/Split.js","../component/Merge":"../node_modules/tone/tone/component/Merge.js","../component/CrossFade":"../node_modules/tone/tone/component/CrossFade.js"}],"../node_modules/tone/tone/effect/Chorus.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/LFO");

require("../effect/StereoEffect");

require("../core/Delay");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Chorus is a stereo chorus effect composed of
 *         a left and right delay with a Tone.LFO applied to the delayTime of each channel.
 *         Inspiration from [Tuna.js](https://github.com/Dinahmoe/tuna/blob/master/tuna.js).
 *         Read more on the chorus effect on [SoundOnSound](http://www.soundonsound.com/sos/jun04/articles/synthsecrets.htm).
 *
 *	@constructor
 *	@extends {Tone.StereoEffect}
 *	@param {Frequency|Object} [frequency] The frequency of the LFO.
 *	@param {Milliseconds} [delayTime] The delay of the chorus effect in ms.
 *	@param {NormalRange} [depth] The depth of the chorus.
 *	@example
 * var chorus = new Tone.Chorus(4, 2.5, 0.5);
 * var synth = new Tone.PolySynth(4, Tone.MonoSynth).connect(chorus);
 * synth.triggerAttackRelease(["C3","E3","G3"], "8n");
 */
_Tone.default.Chorus = function () {
  var options = _Tone.default.defaults(arguments, ["frequency", "delayTime", "depth"], _Tone.default.Chorus);

  _Tone.default.StereoEffect.call(this, options);
  /**
   *  the depth of the chorus
   *  @type {number}
   *  @private
   */


  this._depth = options.depth;
  /**
   *  the delayTime
   *  @type {number}
   *  @private
   */

  this._delayTime = options.delayTime / 1000;
  /**
   *  the lfo which controls the delayTime
   *  @type {Tone.LFO}
   *  @private
   */

  this._lfoL = new _Tone.default.LFO({
    "frequency": options.frequency,
    "min": 0,
    "max": 1
  });
  /**
   *  another LFO for the right side with a 180 degree phase diff
   *  @type {Tone.LFO}
   *  @private
   */

  this._lfoR = new _Tone.default.LFO({
    "frequency": options.frequency,
    "min": 0,
    "max": 1,
    "phase": 180
  });
  /**
   *  delay for left
   *  @type {Tone.Delay}
   *  @private
   */

  this._delayNodeL = new _Tone.default.Delay();
  /**
   *  delay for right
   *  @type {Tone.Delay}
   *  @private
   */

  this._delayNodeR = new _Tone.default.Delay();
  /**
   * The frequency of the LFO which modulates the delayTime.
   * @type {Frequency}
   * @signal
   */

  this.frequency = this._lfoL.frequency; //connections

  this.effectSendL.chain(this._delayNodeL, this.effectReturnL);
  this.effectSendR.chain(this._delayNodeR, this.effectReturnR); //and pass through to make the detune apparent

  this.effectSendL.connect(this.effectReturnL);
  this.effectSendR.connect(this.effectReturnR); //lfo setup

  this._lfoL.connect(this._delayNodeL.delayTime);

  this._lfoR.connect(this._delayNodeR.delayTime); //start the lfo


  this._lfoL.start();

  this._lfoR.start(); //have one LFO frequency control the other


  this._lfoL.frequency.connect(this._lfoR.frequency); //set the initial values


  this.depth = this._depth;
  this.frequency.value = options.frequency;
  this.type = options.type;

  this._readOnly(["frequency"]);

  this.spread = options.spread;
};

_Tone.default.extend(_Tone.default.Chorus, _Tone.default.StereoEffect);
/**
 *  @static
 *  @type {Object}
 */


_Tone.default.Chorus.defaults = {
  "frequency": 1.5,
  "delayTime": 3.5,
  "depth": 0.7,
  "type": "sine",
  "spread": 180
};
/**
 * The depth of the effect. A depth of 1 makes the delayTime
 * modulate between 0 and 2*delayTime (centered around the delayTime).
 * @memberOf Tone.Chorus#
 * @type {NormalRange}
 * @name depth
 */

Object.defineProperty(_Tone.default.Chorus.prototype, "depth", {
  get: function () {
    return this._depth;
  },
  set: function (depth) {
    this._depth = depth;
    var deviation = this._delayTime * depth;
    this._lfoL.min = Math.max(this._delayTime - deviation, 0);
    this._lfoL.max = this._delayTime + deviation;
    this._lfoR.min = Math.max(this._delayTime - deviation, 0);
    this._lfoR.max = this._delayTime + deviation;
  }
});
/**
 * The delayTime in milliseconds of the chorus. A larger delayTime
 * will give a more pronounced effect. Nominal range a delayTime
 * is between 2 and 20ms.
 * @memberOf Tone.Chorus#
 * @type {Milliseconds}
 * @name delayTime
 */

Object.defineProperty(_Tone.default.Chorus.prototype, "delayTime", {
  get: function () {
    return this._delayTime * 1000;
  },
  set: function (delayTime) {
    this._delayTime = delayTime / 1000;
    this.depth = this._depth;
  }
});
/**
 * The oscillator type of the LFO.
 * @memberOf Tone.Chorus#
 * @type {string}
 * @name type
 */

Object.defineProperty(_Tone.default.Chorus.prototype, "type", {
  get: function () {
    return this._lfoL.type;
  },
  set: function (type) {
    this._lfoL.type = type;
    this._lfoR.type = type;
  }
});
/**
 * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.
 * When set to 180, LFO's will be panned hard left and right respectively.
 * @memberOf Tone.Chorus#
 * @type {Degrees}
 * @name spread
 */

Object.defineProperty(_Tone.default.Chorus.prototype, "spread", {
  get: function () {
    return this._lfoR.phase - this._lfoL.phase;
  },
  set: function (spread) {
    this._lfoL.phase = 90 - spread / 2;
    this._lfoR.phase = spread / 2 + 90;
  }
});
/**
 *  Clean up.
 *  @returns {Tone.Chorus} this
 */

_Tone.default.Chorus.prototype.dispose = function () {
  _Tone.default.StereoEffect.prototype.dispose.call(this);

  this._lfoL.dispose();

  this._lfoL = null;

  this._lfoR.dispose();

  this._lfoR = null;

  this._delayNodeL.dispose();

  this._delayNodeL = null;

  this._delayNodeR.dispose();

  this._delayNodeR = null;

  this._writable("frequency");

  this.frequency = null;
  return this;
};

var _default = _Tone.default.Chorus;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/LFO":"../node_modules/tone/tone/component/LFO.js","../effect/StereoEffect":"../node_modules/tone/tone/effect/StereoEffect.js","../core/Delay":"../node_modules/tone/tone/core/Delay.js"}],"../node_modules/tone/tone/effect/Convolver.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Buffer");

require("../effect/Effect");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.Convolver is a wrapper around the Native Web Audio
 *          [ConvolverNode](http://webaudio.github.io/web-audio-api/#the-convolvernode-interface).
 *          Convolution is useful for reverb and filter emulation. Read more about convolution reverb on
 *          [Wikipedia](https://en.wikipedia.org/wiki/Convolution_reverb).
 *
 *  @constructor
 *  @extends {Tone.Effect}
 *  @param {string|Tone.Buffer|Object} [url] The URL of the impulse response or the Tone.Buffer
 *                                           contianing the impulse response.
 *  @param {Function=} onload The callback to invoke when the url is loaded.
 *  @example
 * //initializing the convolver with an impulse response
 * var convolver = new Tone.Convolver("./path/to/ir.wav").toMaster();
 */
_Tone.default.Convolver = function () {
  var options = _Tone.default.defaults(arguments, ["url", "onload"], _Tone.default.Convolver);

  _Tone.default.Effect.call(this, options);
  /**
   *  convolver node
   *  @type {ConvolverNode}
   *  @private
   */


  this._convolver = this.context.createConvolver();
  /**
   *  the convolution buffer
   *  @type {Tone.Buffer}
   *  @private
   */

  this._buffer = new _Tone.default.Buffer(options.url, function (buffer) {
    this.buffer = buffer.get();
    options.onload();
  }.bind(this)); //set if it's already loaded

  if (this._buffer.loaded) {
    this.buffer = this._buffer;
  } //initially set normalization


  this.normalize = options.normalize;
  this.connectEffect(this._convolver);
};

_Tone.default.extend(_Tone.default.Convolver, _Tone.default.Effect);
/**
 *  @static
 *  @const
 *  @type  {Object}
 */


_Tone.default.Convolver.defaults = {
  "onload": _Tone.default.noOp,
  "normalize": true
};
/**
 *  The convolver's buffer
 *  @memberOf Tone.Convolver#
 *  @type {AudioBuffer}
 *  @name buffer
 */

Object.defineProperty(_Tone.default.Convolver.prototype, "buffer", {
  "get": function () {
    if (this._buffer.length) {
      return this._buffer;
    } else {
      return null;
    }
  },
  "set": function (buffer) {
    this._buffer.set(buffer); //if it's already got a buffer, create a new one


    if (this._convolver.buffer) {
      //disconnect the old one
      this.effectSend.disconnect();

      this._convolver.disconnect(); //create and connect a new one


      this._convolver = this.context.createConvolver();
      this.connectEffect(this._convolver);
    }

    this._convolver.buffer = this._buffer.get();
  }
});
/**
 *  The normalize property of the ConvolverNode interface is a boolean that controls whether the impulse response from the buffer will be scaled by an equal-power normalization when the buffer attribute is set, or not.
 *  @memberOf Tone.Convolver#
 *  @type {Boolean}
 *  @name normalize
 */

Object.defineProperty(_Tone.default.Convolver.prototype, "normalize", {
  "get": function () {
    return this._convolver.normalize;
  },
  "set": function (norm) {
    this._convolver.normalize = norm;
  }
});
/**
 *  Load an impulse response url as an audio buffer.
 *  Decodes the audio asynchronously and invokes
 *  the callback once the audio buffer loads.
 *  @param {string} url The url of the buffer to load.
 *                      filetype support depends on the
 *                      browser.
 *  @param  {function=} callback
 *  @returns {Promise}
 */

_Tone.default.Convolver.prototype.load = function (url, callback) {
  return this._buffer.load(url, function (buff) {
    this.buffer = buff;

    if (callback) {
      callback();
    }
  }.bind(this));
};
/**
 *  Clean up.
 *  @returns {Tone.Convolver} this
 */


_Tone.default.Convolver.prototype.dispose = function () {
  _Tone.default.Effect.prototype.dispose.call(this);

  this._buffer.dispose();

  this._buffer = null;

  this._convolver.disconnect();

  this._convolver = null;
  return this;
};

var _default = _Tone.default.Convolver;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Buffer":"../node_modules/tone/tone/core/Buffer.js","../effect/Effect":"../node_modules/tone/tone/effect/Effect.js"}],"../node_modules/tone/tone/effect/Distortion.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../effect/Effect");

require("../signal/WaveShaper");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Distortion is a simple distortion effect using Tone.WaveShaper.
 *         Algorithm from [a stackoverflow answer](http://stackoverflow.com/a/22313408).
 *
 *  @extends {Tone.Effect}
 *  @constructor
 *  @param {Number|Object} [distortion] The amount of distortion (nominal range of 0-1)
 *  @example
 * var dist = new Tone.Distortion(0.8).toMaster();
 * var fm = new Tone.SimpleFM().connect(dist);
 * //this sounds good on bass notes
 * fm.triggerAttackRelease("A1", "8n");
 */
_Tone.default.Distortion = function () {
  var options = _Tone.default.defaults(arguments, ["distortion"], _Tone.default.Distortion);

  _Tone.default.Effect.call(this, options);
  /**
   *  @type {Tone.WaveShaper}
   *  @private
   */


  this._shaper = new _Tone.default.WaveShaper(4096);
  /**
   * holds the distortion amount
   * @type {number}
   * @private
   */

  this._distortion = options.distortion;
  this.connectEffect(this._shaper);
  this.distortion = options.distortion;
  this.oversample = options.oversample;
};

_Tone.default.extend(_Tone.default.Distortion, _Tone.default.Effect);
/**
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.Distortion.defaults = {
  "distortion": 0.4,
  "oversample": "none"
};
/**
 * The amount of distortion.
 * @memberOf Tone.Distortion#
 * @type {NormalRange}
 * @name distortion
 */

Object.defineProperty(_Tone.default.Distortion.prototype, "distortion", {
  get: function () {
    return this._distortion;
  },
  set: function (amount) {
    this._distortion = amount;
    var k = amount * 100;
    var deg = Math.PI / 180;

    this._shaper.setMap(function (x) {
      if (Math.abs(x) < 0.001) {
        //should output 0 when input is 0
        return 0;
      } else {
        return (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x));
      }
    });
  }
});
/**
 * The oversampling of the effect. Can either be "none", "2x" or "4x".
 * @memberOf Tone.Distortion#
 * @type {string}
 * @name oversample
 */

Object.defineProperty(_Tone.default.Distortion.prototype, "oversample", {
  get: function () {
    return this._shaper.oversample;
  },
  set: function (oversampling) {
    this._shaper.oversample = oversampling;
  }
});
/**
 *  Clean up. 
 *  @returns {Tone.Distortion} this
 */

_Tone.default.Distortion.prototype.dispose = function () {
  _Tone.default.Effect.prototype.dispose.call(this);

  this._shaper.dispose();

  this._shaper = null;
  return this;
};

var _default = _Tone.default.Distortion;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../effect/Effect":"../node_modules/tone/tone/effect/Effect.js","../signal/WaveShaper":"../node_modules/tone/tone/signal/WaveShaper.js"}],"../node_modules/tone/tone/effect/FeedbackEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../effect/Effect");

require("../signal/Signal");

require("../signal/Multiply");

require("../core/Gain");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * 	@class  Tone.FeedbackEffect provides a loop between an 
 * 	        audio source and its own output. This is a base-class
 * 	        for feedback effects. 
 *
 *  @constructor
 *  @extends {Tone.Effect}
 *  @param {NormalRange|Object} [feedback] The initial feedback value.
 */
_Tone.default.FeedbackEffect = function () {
  var options = _Tone.default.defaults(arguments, ["feedback"], _Tone.default.FeedbackEffect);

  _Tone.default.Effect.call(this, options);
  /**
   *  the gain which controls the feedback
   *  @type {Tone.Gain}
   *  @private
   */


  this._feedbackGain = new _Tone.default.Gain(options.feedback, _Tone.default.Type.NormalRange);
  /**
   *  The amount of signal which is fed back into the effect input. 
   *  @type {NormalRange}
   *  @signal
   */

  this.feedback = this._feedbackGain.gain; //the feedback loop

  this.effectReturn.chain(this._feedbackGain, this.effectSend);

  this._readOnly(["feedback"]);
};

_Tone.default.extend(_Tone.default.FeedbackEffect, _Tone.default.Effect);
/**
 *  @static
 *  @type {Object}
 */


_Tone.default.FeedbackEffect.defaults = {
  "feedback": 0.125
};
/**
 *  Clean up. 
 *  @returns {Tone.FeedbackEffect} this
 */

_Tone.default.FeedbackEffect.prototype.dispose = function () {
  _Tone.default.Effect.prototype.dispose.call(this);

  this._writable(["feedback"]);

  this._feedbackGain.dispose();

  this._feedbackGain = null;
  this.feedback = null;
  return this;
};

var _default = _Tone.default.FeedbackEffect;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../effect/Effect":"../node_modules/tone/tone/effect/Effect.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../signal/Multiply":"../node_modules/tone/tone/signal/Multiply.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js"}],"../node_modules/tone/tone/effect/FeedbackDelay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../effect/FeedbackEffect");

require("../signal/Signal");

require("../core/Delay");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.FeedbackDelay is a DelayNode in which part of output
 *          signal is fed back into the delay.
 *
 *  @constructor
 *  @extends {Tone.FeedbackEffect}
 *  @param {Time|Object} [delayTime] The delay applied to the incoming signal.
 *  @param {NormalRange=} feedback The amount of the effected signal which
 *                            is fed back through the delay.
 *  @example
 * var feedbackDelay = new Tone.FeedbackDelay("8n", 0.5).toMaster();
 * var tom = new Tone.MembraneSynth({
 * 	"octaves" : 4,
 * 	"pitchDecay" : 0.1
 * }).connect(feedbackDelay);
 * tom.triggerAttackRelease("A2","32n");
 */
_Tone.default.FeedbackDelay = function () {
  var options = _Tone.default.defaults(arguments, ["delayTime", "feedback"], _Tone.default.FeedbackDelay);

  _Tone.default.FeedbackEffect.call(this, options);
  /**
   *  the delay node
   *  @type {Tone.Delay}
   *  @private
   */


  this._delayNode = new _Tone.default.Delay(options.delayTime, options.maxDelay);
  /**
   *  The delayTime of the DelayNode.
   *  @type {Time}
   *  @signal
   */

  this.delayTime = this._delayNode.delayTime; // connect it up

  this.connectEffect(this._delayNode);

  this._readOnly(["delayTime"]);
};

_Tone.default.extend(_Tone.default.FeedbackDelay, _Tone.default.FeedbackEffect);
/**
 *  The default values.
 *  @const
 *  @static
 *  @type {Object}
 */


_Tone.default.FeedbackDelay.defaults = {
  "delayTime": 0.25,
  "maxDelay": 1
};
/**
 *  clean up
 *  @returns {Tone.FeedbackDelay} this
 */

_Tone.default.FeedbackDelay.prototype.dispose = function () {
  _Tone.default.FeedbackEffect.prototype.dispose.call(this);

  this._delayNode.dispose();

  this._delayNode = null;

  this._writable(["delayTime"]);

  this.delayTime = null;
  return this;
};

var _default = _Tone.default.FeedbackDelay;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../effect/FeedbackEffect":"../node_modules/tone/tone/effect/FeedbackEffect.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../core/Delay":"../node_modules/tone/tone/core/Delay.js"}],"../node_modules/tone/tone/effect/Freeverb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/LowpassCombFilter");

require("../effect/StereoEffect");

require("../signal/Signal");

require("../component/Split");

require("../component/Merge");

require("../signal/ScaleExp");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  an array of comb filter delay values from Freeverb implementation
 *  @static
 *  @private
 *  @type {Array}
 */
var combFilterTunings = [1557 / 44100, 1617 / 44100, 1491 / 44100, 1422 / 44100, 1277 / 44100, 1356 / 44100, 1188 / 44100, 1116 / 44100];
/**
 *  an array of allpass filter frequency values from Freeverb implementation
 *  @private
 *  @static
 *  @type {Array}
 */

var allpassFilterFrequencies = [225, 556, 441, 341];
/**
 *  @class Tone.Freeverb is a reverb based on [Freeverb](https://ccrma.stanford.edu/~jos/pasp/Freeverb.html).
 *         Read more on reverb on [Sound On Sound](https://web.archive.org/web/20160404083902/http://www.soundonsound.com:80/sos/feb01/articles/synthsecrets.asp).
 *
 *  @extends {Tone.Effect}
 *  @constructor
 *  @param {NormalRange|Object} [roomSize] Correlated to the decay time.
 *  @param {Frequency} [dampening] The cutoff frequency of a lowpass filter as part
 *                                 of the reverb.
 *  @example
 * var freeverb = new Tone.Freeverb().toMaster();
 * freeverb.dampening.value = 1000;
 * //routing synth through the reverb
 * var synth = new Tone.AMSynth().connect(freeverb);
 */

_Tone.default.Freeverb = function () {
  var options = _Tone.default.defaults(arguments, ["roomSize", "dampening"], _Tone.default.Freeverb);

  _Tone.default.StereoEffect.call(this, options);
  /**
   *  The roomSize value between. A larger roomSize
   *  will result in a longer decay.
   *  @type {NormalRange}
   *  @signal
   */


  this.roomSize = new _Tone.default.Signal(options.roomSize, _Tone.default.Type.NormalRange);
  /**
   *  The amount of dampening of the reverberant signal.
   *  @type {Frequency}
   *  @signal
   */

  this.dampening = new _Tone.default.Signal(options.dampening, _Tone.default.Type.Frequency);
  /**
   *  the comb filters
   *  @type {Array}
   *  @private
   */

  this._combFilters = [];
  /**
   *  the allpass filters on the left
   *  @type {Array}
   *  @private
   */

  this._allpassFiltersL = [];
  /**
   *  the allpass filters on the right
   *  @type {Array}
   *  @private
   */

  this._allpassFiltersR = []; //make the allpass filters on the right

  for (var l = 0; l < allpassFilterFrequencies.length; l++) {
    var allpassL = this.context.createBiquadFilter();
    allpassL.type = "allpass";
    allpassL.frequency.value = allpassFilterFrequencies[l];

    this._allpassFiltersL.push(allpassL);
  } //make the allpass filters on the left


  for (var r = 0; r < allpassFilterFrequencies.length; r++) {
    var allpassR = this.context.createBiquadFilter();
    allpassR.type = "allpass";
    allpassR.frequency.value = allpassFilterFrequencies[r];

    this._allpassFiltersR.push(allpassR);
  } //make the comb filters


  for (var c = 0; c < combFilterTunings.length; c++) {
    var lfpf = new _Tone.default.LowpassCombFilter(combFilterTunings[c]);

    if (c < combFilterTunings.length / 2) {
      this.effectSendL.chain(lfpf, this._allpassFiltersL[0]);
    } else {
      this.effectSendR.chain(lfpf, this._allpassFiltersR[0]);
    }

    this.roomSize.connect(lfpf.resonance);
    this.dampening.connect(lfpf.dampening);

    this._combFilters.push(lfpf);
  } //chain the allpass filters togetehr


  _Tone.default.connectSeries.apply(_Tone.default, this._allpassFiltersL);

  _Tone.default.connectSeries.apply(_Tone.default, this._allpassFiltersR);

  _Tone.default.connect(this._allpassFiltersL[this._allpassFiltersL.length - 1], this.effectReturnL);

  _Tone.default.connect(this._allpassFiltersR[this._allpassFiltersR.length - 1], this.effectReturnR);

  this._readOnly(["roomSize", "dampening"]);
};

_Tone.default.extend(_Tone.default.Freeverb, _Tone.default.StereoEffect);
/**
 *  @static
 *  @type {Object}
 */


_Tone.default.Freeverb.defaults = {
  "roomSize": 0.7,
  "dampening": 3000
};
/**
 *  Clean up.
 *  @returns {Tone.Freeverb} this
 */

_Tone.default.Freeverb.prototype.dispose = function () {
  _Tone.default.StereoEffect.prototype.dispose.call(this);

  for (var al = 0; al < this._allpassFiltersL.length; al++) {
    this._allpassFiltersL[al].disconnect();

    this._allpassFiltersL[al] = null;
  }

  this._allpassFiltersL = null;

  for (var ar = 0; ar < this._allpassFiltersR.length; ar++) {
    this._allpassFiltersR[ar].disconnect();

    this._allpassFiltersR[ar] = null;
  }

  this._allpassFiltersR = null;

  for (var cf = 0; cf < this._combFilters.length; cf++) {
    this._combFilters[cf].dispose();

    this._combFilters[cf] = null;
  }

  this._combFilters = null;

  this._writable(["roomSize", "dampening"]);

  this.roomSize.dispose();
  this.roomSize = null;
  this.dampening.dispose();
  this.dampening = null;
  return this;
};

var _default = _Tone.default.Freeverb;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/LowpassCombFilter":"../node_modules/tone/tone/component/LowpassCombFilter.js","../effect/StereoEffect":"../node_modules/tone/tone/effect/StereoEffect.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../component/Split":"../node_modules/tone/tone/component/Split.js","../component/Merge":"../node_modules/tone/tone/component/Merge.js","../signal/ScaleExp":"../node_modules/tone/tone/signal/ScaleExp.js"}],"../node_modules/tone/tone/effect/JCReverb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/FeedbackCombFilter");

require("../effect/StereoEffect");

require("../signal/Scale");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  an array of the comb filter delay time values
 *  @private
 *  @static
 *  @type {Array}
 */
var combFilterDelayTimes = [1687 / 25000, 1601 / 25000, 2053 / 25000, 2251 / 25000];
/**
 *  the resonances of each of the comb filters
 *  @private
 *  @static
 *  @type {Array}
 */

var combFilterResonances = [0.773, 0.802, 0.753, 0.733];
/**
 *  the allpass filter frequencies
 *  @private
 *  @static
 *  @type {Array}
 */

var allpassFilterFreqs = [347, 113, 37];
/**
 *  @class Tone.JCReverb is a simple [Schroeder Reverberator](https://ccrma.stanford.edu/~jos/pasp/Schroeder_Reverberators.html)
 *         tuned by John Chowning in 1970.
 *         It is made up of three allpass filters and four Tone.FeedbackCombFilter.
 *
 *
 *  @extends {Tone.Effect}
 *  @constructor
 *  @param {NormalRange|Object} [roomSize] Coorelates to the decay time.
 *  @example
 * var reverb = new Tone.JCReverb(0.4).connect(Tone.Master);
 * var delay = new Tone.FeedbackDelay(0.5);
 * //connecting the synth to reverb through delay
 * var synth = new Tone.DuoSynth().chain(delay, reverb);
 * synth.triggerAttackRelease("A4","8n");
 */

_Tone.default.JCReverb = function () {
  var options = _Tone.default.defaults(arguments, ["roomSize"], _Tone.default.JCReverb);

  _Tone.default.StereoEffect.call(this, options);
  /**
   *  room size control values between [0,1]
   *  @type {NormalRange}
   *  @signal
   */


  this.roomSize = new _Tone.default.Signal(options.roomSize, _Tone.default.Type.NormalRange);
  /**
   *  scale the room size
   *  @type {Tone.Scale}
   *  @private
   */

  this._scaleRoomSize = new _Tone.default.Scale(-0.733, 0.197);
  /**
   *  a series of allpass filters
   *  @type {Array}
   *  @private
   */

  this._allpassFilters = [];
  /**
   *  parallel feedback comb filters
   *  @type {Array}
   *  @private
   */

  this._feedbackCombFilters = []; //make the allpass filters

  for (var af = 0; af < allpassFilterFreqs.length; af++) {
    var allpass = this.context.createBiquadFilter();
    allpass.type = "allpass";
    allpass.frequency.value = allpassFilterFreqs[af];

    this._allpassFilters.push(allpass);
  } //and the comb filters


  for (var cf = 0; cf < combFilterDelayTimes.length; cf++) {
    var fbcf = new _Tone.default.FeedbackCombFilter(combFilterDelayTimes[cf], 0.1);

    this._scaleRoomSize.connect(fbcf.resonance);

    fbcf.resonance.value = combFilterResonances[cf];

    _Tone.default.connect(this._allpassFilters[this._allpassFilters.length - 1], fbcf);

    if (cf < combFilterDelayTimes.length / 2) {
      fbcf.connect(this.effectReturnL);
    } else {
      fbcf.connect(this.effectReturnR);
    }

    this._feedbackCombFilters.push(fbcf);
  } //chain the allpass filters together


  this.roomSize.connect(this._scaleRoomSize);

  _Tone.default.connectSeries.apply(_Tone.default, this._allpassFilters);

  this.effectSendL.connect(this._allpassFilters[0]);
  this.effectSendR.connect(this._allpassFilters[0]);

  this._readOnly(["roomSize"]);
};

_Tone.default.extend(_Tone.default.JCReverb, _Tone.default.StereoEffect);
/**
 *  the default values
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.JCReverb.defaults = {
  "roomSize": 0.5
};
/**
 *  Clean up.
 *  @returns {Tone.JCReverb} this
 */

_Tone.default.JCReverb.prototype.dispose = function () {
  _Tone.default.StereoEffect.prototype.dispose.call(this);

  for (var apf = 0; apf < this._allpassFilters.length; apf++) {
    this._allpassFilters[apf].disconnect();

    this._allpassFilters[apf] = null;
  }

  this._allpassFilters = null;

  for (var fbcf = 0; fbcf < this._feedbackCombFilters.length; fbcf++) {
    this._feedbackCombFilters[fbcf].dispose();

    this._feedbackCombFilters[fbcf] = null;
  }

  this._feedbackCombFilters = null;

  this._writable(["roomSize"]);

  this.roomSize.dispose();
  this.roomSize = null;

  this._scaleRoomSize.dispose();

  this._scaleRoomSize = null;
  return this;
};

var _default = _Tone.default.JCReverb;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/FeedbackCombFilter":"../node_modules/tone/tone/component/FeedbackCombFilter.js","../effect/StereoEffect":"../node_modules/tone/tone/effect/StereoEffect.js","../signal/Scale":"../node_modules/tone/tone/signal/Scale.js"}],"../node_modules/tone/tone/effect/MidSideEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../effect/Effect");

require("../component/MidSideSplit");

require("../component/MidSideMerge");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Mid/Side processing separates the the 'mid' signal
 *         (which comes out of both the left and the right channel)
 *         and the 'side' (which only comes out of the the side channels)
 *         and effects them separately before being recombined.
 *         Applies a Mid/Side seperation and recombination.
 *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).
 *         <br><br>
 *         This is a base-class for Mid/Side Effects.
 *
 *  @extends {Tone.Effect}
 *  @constructor
 */
_Tone.default.MidSideEffect = function () {
  _Tone.default.Effect.apply(this, arguments);
  /**
   *  The mid/side split
   *  @type  {Tone.MidSideSplit}
   *  @private
   */


  this._midSideSplit = new _Tone.default.MidSideSplit();
  /**
   *  The mid/side merge
   *  @type  {Tone.MidSideMerge}
   *  @private
   */

  this._midSideMerge = new _Tone.default.MidSideMerge();
  /**
   *  The mid send. Connect to mid processing
   *  @type {Tone}
   *  @private
   */

  this.midSend = this._midSideSplit.mid;
  /**
   *  The side send. Connect to side processing
   *  @type {Tone}
   *  @private
   */

  this.sideSend = this._midSideSplit.side;
  /**
   *  The mid return connection
   *  @type {GainNode}
   *  @private
   */

  this.midReturn = this._midSideMerge.mid;
  /**
   *  The side return connection
   *  @type {GainNode}
   *  @private
   */

  this.sideReturn = this._midSideMerge.side; //the connections

  this.effectSend.connect(this._midSideSplit);

  this._midSideMerge.connect(this.effectReturn);
};

_Tone.default.extend(_Tone.default.MidSideEffect, _Tone.default.Effect);
/**
 *  Clean up.
 *  @returns {Tone.MidSideEffect} this
 */


_Tone.default.MidSideEffect.prototype.dispose = function () {
  _Tone.default.Effect.prototype.dispose.call(this);

  this._midSideSplit.dispose();

  this._midSideSplit = null;

  this._midSideMerge.dispose();

  this._midSideMerge = null;
  this.midSend = null;
  this.sideSend = null;
  this.midReturn = null;
  this.sideReturn = null;
  return this;
};

var _default = _Tone.default.MidSideEffect;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../effect/Effect":"../node_modules/tone/tone/effect/Effect.js","../component/MidSideSplit":"../node_modules/tone/tone/component/MidSideSplit.js","../component/MidSideMerge":"../node_modules/tone/tone/component/MidSideMerge.js"}],"../node_modules/tone/tone/effect/Phaser.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/LFO");

require("../component/Filter");

require("../effect/StereoEffect");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Phaser is a phaser effect. Phasers work by changing the phase
 *         of different frequency components of an incoming signal. Read more on
 *         [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).
 *         Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).
 *
 *	@extends {Tone.StereoEffect}
 *	@constructor
 *	@param {Frequency|Object} [frequency] The speed of the phasing.
 *	@param {number} [octaves] The octaves of the effect.
 *	@param {Frequency} [baseFrequency] The base frequency of the filters.
 *	@example
 * var phaser = new Tone.Phaser({
 * 	"frequency" : 15,
 * 	"octaves" : 5,
 * 	"baseFrequency" : 1000
 * }).toMaster();
 * var synth = new Tone.FMSynth().connect(phaser);
 * synth.triggerAttackRelease("E3", "2n");
 */
_Tone.default.Phaser = function () {
  //set the defaults
  var options = _Tone.default.defaults(arguments, ["frequency", "octaves", "baseFrequency"], _Tone.default.Phaser);

  _Tone.default.StereoEffect.call(this, options);
  /**
   *  the lfo which controls the frequency on the left side
   *  @type {Tone.LFO}
   *  @private
   */


  this._lfoL = new _Tone.default.LFO(options.frequency, 0, 1);
  /**
   *  the lfo which controls the frequency on the right side
   *  @type {Tone.LFO}
   *  @private
   */

  this._lfoR = new _Tone.default.LFO(options.frequency, 0, 1);
  this._lfoR.phase = 180;
  /**
   *  the base modulation frequency
   *  @type {number}
   *  @private
   */

  this._baseFrequency = options.baseFrequency;
  /**
   *  the octaves of the phasing
   *  @type {number}
   *  @private
   */

  this._octaves = options.octaves;
  /**
   *  The quality factor of the filters
   *  @type {Positive}
   *  @signal
   */

  this.Q = new _Tone.default.Signal(options.Q, _Tone.default.Type.Positive);
  /**
   *  the array of filters for the left side
   *  @type {Array}
   *  @private
   */

  this._filtersL = this._makeFilters(options.stages, this._lfoL, this.Q);
  /**
   *  the array of filters for the left side
   *  @type {Array}
   *  @private
   */

  this._filtersR = this._makeFilters(options.stages, this._lfoR, this.Q);
  /**
   * the frequency of the effect
   * @type {Tone.Signal}
   */

  this.frequency = this._lfoL.frequency;
  this.frequency.value = options.frequency; //connect them up

  this.effectSendL.connect(this._filtersL[0]);
  this.effectSendR.connect(this._filtersR[0]);

  _Tone.default.connect(this._filtersL[options.stages - 1], this.effectReturnL);

  _Tone.default.connect(this._filtersR[options.stages - 1], this.effectReturnR); //control the frequency with one LFO


  this._lfoL.frequency.connect(this._lfoR.frequency); //set the options


  this.baseFrequency = options.baseFrequency;
  this.octaves = options.octaves; //start the lfo

  this._lfoL.start();

  this._lfoR.start();

  this._readOnly(["frequency", "Q"]);
};

_Tone.default.extend(_Tone.default.Phaser, _Tone.default.StereoEffect);
/**
 *  defaults
 *  @static
 *  @type {object}
 */


_Tone.default.Phaser.defaults = {
  "frequency": 0.5,
  "octaves": 3,
  "stages": 10,
  "Q": 10,
  "baseFrequency": 350
};
/**
 *  @param {number} stages
 *  @returns {Array} the number of filters all connected together
 *  @private
 */

_Tone.default.Phaser.prototype._makeFilters = function (stages, connectToFreq, Q) {
  var filters = new Array(stages); //make all the filters

  for (var i = 0; i < stages; i++) {
    var filter = this.context.createBiquadFilter();
    filter.type = "allpass";
    Q.connect(filter.Q);
    connectToFreq.connect(filter.frequency);
    filters[i] = filter;
  }

  _Tone.default.connectSeries.apply(_Tone.default, filters);

  return filters;
};
/**
 * The number of octaves the phase goes above
 * the baseFrequency
 * @memberOf Tone.Phaser#
 * @type {Positive}
 * @name octaves
 */


Object.defineProperty(_Tone.default.Phaser.prototype, "octaves", {
  get: function () {
    return this._octaves;
  },
  set: function (octaves) {
    this._octaves = octaves;
    var max = this._baseFrequency * Math.pow(2, octaves);
    this._lfoL.max = max;
    this._lfoR.max = max;
  }
});
/**
 * The the base frequency of the filters.
 * @memberOf Tone.Phaser#
 * @type {number}
 * @name baseFrequency
 */

Object.defineProperty(_Tone.default.Phaser.prototype, "baseFrequency", {
  get: function () {
    return this._baseFrequency;
  },
  set: function (freq) {
    this._baseFrequency = freq;
    this._lfoL.min = freq;
    this._lfoR.min = freq;
    this.octaves = this._octaves;
  }
});
/**
 *  clean up
 *  @returns {Tone.Phaser} this
 */

_Tone.default.Phaser.prototype.dispose = function () {
  _Tone.default.StereoEffect.prototype.dispose.call(this);

  this._writable(["frequency", "Q"]);

  this.Q.dispose();
  this.Q = null;

  this._lfoL.dispose();

  this._lfoL = null;

  this._lfoR.dispose();

  this._lfoR = null;

  for (var i = 0; i < this._filtersL.length; i++) {
    this._filtersL[i].disconnect();

    this._filtersL[i] = null;
  }

  this._filtersL = null;

  for (var j = 0; j < this._filtersR.length; j++) {
    this._filtersR[j].disconnect();

    this._filtersR[j] = null;
  }

  this._filtersR = null;
  this.frequency = null;
  return this;
};

var _default = _Tone.default.Phaser;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/LFO":"../node_modules/tone/tone/component/LFO.js","../component/Filter":"../node_modules/tone/tone/component/Filter.js","../effect/StereoEffect":"../node_modules/tone/tone/effect/StereoEffect.js"}],"../node_modules/tone/tone/effect/StereoXFeedbackEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../effect/StereoEffect");

require("../effect/FeedbackEffect");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Just like a stereo feedback effect, but the feedback is routed from left to right
 *         and right to left instead of on the same channel.
 *
 *	@constructor
 *	@extends {Tone.StereoEffect}
 */
_Tone.default.StereoXFeedbackEffect = function () {
  var options = _Tone.default.defaults(arguments, ["feedback"], _Tone.default.FeedbackEffect);

  _Tone.default.StereoEffect.call(this, options);
  /**
   *  The amount of feedback from the output
   *  back into the input of the effect (routed
   *  across left and right channels).
   *  @type {NormalRange}
   *  @signal
   */


  this.feedback = new _Tone.default.Signal(options.feedback, _Tone.default.Type.NormalRange);
  /**
   *  the left side feeback
   *  @type {Tone.Gain}
   *  @private
   */

  this._feedbackLR = new _Tone.default.Gain();
  /**
   *  the right side feeback
   *  @type {Tone.Gain}
   *  @private
   */

  this._feedbackRL = new _Tone.default.Gain(); //connect it up

  this.effectReturnL.chain(this._feedbackLR, this.effectSendR);
  this.effectReturnR.chain(this._feedbackRL, this.effectSendL);
  this.feedback.fan(this._feedbackLR.gain, this._feedbackRL.gain);

  this._readOnly(["feedback"]);
};

_Tone.default.extend(_Tone.default.StereoXFeedbackEffect, _Tone.default.StereoEffect);
/**
 *  clean up
 *  @returns {Tone.StereoXFeedbackEffect} this
 */


_Tone.default.StereoXFeedbackEffect.prototype.dispose = function () {
  _Tone.default.StereoEffect.prototype.dispose.call(this);

  this._writable(["feedback"]);

  this.feedback.dispose();
  this.feedback = null;

  this._feedbackLR.dispose();

  this._feedbackLR = null;

  this._feedbackRL.dispose();

  this._feedbackRL = null;
  return this;
};

var _default = _Tone.default.StereoXFeedbackEffect;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../effect/StereoEffect":"../node_modules/tone/tone/effect/StereoEffect.js","../effect/FeedbackEffect":"../node_modules/tone/tone/effect/FeedbackEffect.js"}],"../node_modules/tone/tone/effect/PingPongDelay.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../effect/StereoXFeedbackEffect");

require("../signal/Signal");

require("../core/Delay");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.PingPongDelay is a feedback delay effect where the echo is heard
 *          first in one channel and next in the opposite channel. In a stereo
 *          system these are the right and left channels.
 *          PingPongDelay in more simplified terms is two Tone.FeedbackDelays
 *          with independent delay values. Each delay is routed to one channel
 *          (left or right), and the channel triggered second will always
 *          trigger at the same interval after the first.
 *
 * 	@constructor
 * 	@extends {Tone.StereoXFeedbackEffect}
 *  @param {Time|Object} [delayTime] The delayTime between consecutive echos.
 *  @param {NormalRange=} feedback The amount of the effected signal which
 *                                 is fed back through the delay.
 *  @example
 * var pingPong = new Tone.PingPongDelay("4n", 0.2).toMaster();
 * var drum = new Tone.MembraneSynth().connect(pingPong);
 * drum.triggerAttackRelease("C4", "32n");
 */
_Tone.default.PingPongDelay = function () {
  var options = _Tone.default.defaults(arguments, ["delayTime", "feedback"], _Tone.default.PingPongDelay);

  _Tone.default.StereoXFeedbackEffect.call(this, options);
  /**
   *  the delay node on the left side
   *  @type {Tone.Delay}
   *  @private
   */


  this._leftDelay = new _Tone.default.Delay(0, options.maxDelayTime);
  /**
   *  the delay node on the right side
   *  @type {Tone.Delay}
   *  @private
   */

  this._rightDelay = new _Tone.default.Delay(0, options.maxDelayTime);
  /**
   *  the predelay on the right side
   *  @type {Tone.Delay}
   *  @private
   */

  this._rightPreDelay = new _Tone.default.Delay(0, options.maxDelayTime);
  /**
   *  the delay time signal
   *  @type {Time}
   *  @signal
   */

  this.delayTime = new _Tone.default.Signal(options.delayTime, _Tone.default.Type.Time); //connect it up

  this.effectSendL.chain(this._leftDelay, this.effectReturnL);
  this.effectSendR.chain(this._rightPreDelay, this._rightDelay, this.effectReturnR);
  this.delayTime.fan(this._leftDelay.delayTime, this._rightDelay.delayTime, this._rightPreDelay.delayTime); //rearranged the feedback to be after the rightPreDelay

  this._feedbackLR.disconnect();

  this._feedbackLR.connect(this._rightDelay);

  this._readOnly(["delayTime"]);
};

_Tone.default.extend(_Tone.default.PingPongDelay, _Tone.default.StereoXFeedbackEffect);
/**
 *  @static
 *  @type {Object}
 */


_Tone.default.PingPongDelay.defaults = {
  "delayTime": 0.25,
  "maxDelayTime": 1
};
/**
 *  Clean up.
 *  @returns {Tone.PingPongDelay} this
 */

_Tone.default.PingPongDelay.prototype.dispose = function () {
  _Tone.default.StereoXFeedbackEffect.prototype.dispose.call(this);

  this._leftDelay.dispose();

  this._leftDelay = null;

  this._rightDelay.dispose();

  this._rightDelay = null;

  this._rightPreDelay.dispose();

  this._rightPreDelay = null;

  this._writable(["delayTime"]);

  this.delayTime.dispose();
  this.delayTime = null;
  return this;
};

var _default = _Tone.default.PingPongDelay;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../effect/StereoXFeedbackEffect":"../node_modules/tone/tone/effect/StereoXFeedbackEffect.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../core/Delay":"../node_modules/tone/tone/core/Delay.js"}],"../node_modules/tone/tone/effect/PitchShift.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/LFO");

require("../component/CrossFade");

require("../signal/Signal");

require("../effect/FeedbackEffect");

require("../core/Delay");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.PitchShift does near-realtime pitch shifting to the incoming signal.
 *         The effect is achieved by speeding up or slowing down the delayTime
 *         of a DelayNode using a sawtooth wave.
 *         Algorithm found in [this pdf](http://dsp-book.narod.ru/soundproc.pdf).
 *         Additional reference by [Miller Pucket](http://msp.ucsd.edu/techniques/v0.11/book-html/node115.html).
 *
 *  @extends {Tone.FeedbackEffect}
 *  @param {Interval=} pitch The interval to transpose the incoming signal by.
 */
_Tone.default.PitchShift = function () {
  var options = _Tone.default.defaults(arguments, ["pitch"], _Tone.default.PitchShift);

  _Tone.default.FeedbackEffect.call(this, options);
  /**
   *  The pitch signal
   *  @type  {Tone.Signal}
   *  @private
   */


  this._frequency = new _Tone.default.Signal(0);
  /**
   *  Uses two DelayNodes to cover up the jump in
   *  the sawtooth wave.
   *  @type  {DelayNode}
   *  @private
   */

  this._delayA = new _Tone.default.Delay(0, 1);
  /**
   *  The first LFO.
   *  @type  {Tone.LFO}
   *  @private
   */

  this._lfoA = new _Tone.default.LFO({
    "min": 0,
    "max": 0.1,
    "type": "sawtooth"
  }).connect(this._delayA.delayTime);
  /**
   *  The second DelayNode
   *  @type  {DelayNode}
   *  @private
   */

  this._delayB = new _Tone.default.Delay(0, 1);
  /**
   *  The first LFO.
   *  @type  {Tone.LFO}
   *  @private
   */

  this._lfoB = new _Tone.default.LFO({
    "min": 0,
    "max": 0.1,
    "type": "sawtooth",
    "phase": 180
  }).connect(this._delayB.delayTime);
  /**
   *  Crossfade quickly between the two delay lines
   *  to cover up the jump in the sawtooth wave
   *  @type  {Tone.CrossFade}
   *  @private
   */

  this._crossFade = new _Tone.default.CrossFade();
  /**
   *  LFO which alternates between the two
   *  delay lines to cover up the disparity in the
   *  sawtooth wave.
   *  @type  {Tone.LFO}
   *  @private
   */

  this._crossFadeLFO = new _Tone.default.LFO({
    "min": 0,
    "max": 1,
    "type": "triangle",
    "phase": 90
  }).connect(this._crossFade.fade);
  /**
   *  The delay node
   *  @type {Tone.Delay}
   *  @private
   */

  this._feedbackDelay = new _Tone.default.Delay(options.delayTime);
  /**
   *  The amount of delay on the input signal
   *  @type {Time}
   *  @signal
   */

  this.delayTime = this._feedbackDelay.delayTime;

  this._readOnly("delayTime");
  /**
   *  Hold the current pitch
   *  @type {Number}
   *  @private
   */


  this._pitch = options.pitch;
  /**
   *  Hold the current windowSize
   *  @type {Number}
   *  @private
   */

  this._windowSize = options.windowSize; //connect the two delay lines up

  this._delayA.connect(this._crossFade.a);

  this._delayB.connect(this._crossFade.b); //connect the frequency


  this._frequency.fan(this._lfoA.frequency, this._lfoB.frequency, this._crossFadeLFO.frequency); //route the input


  this.effectSend.fan(this._delayA, this._delayB);

  this._crossFade.chain(this._feedbackDelay, this.effectReturn); //start the LFOs at the same time


  var now = this.now();

  this._lfoA.start(now);

  this._lfoB.start(now);

  this._crossFadeLFO.start(now); //set the initial value


  this.windowSize = this._windowSize;
};

_Tone.default.extend(_Tone.default.PitchShift, _Tone.default.FeedbackEffect);
/**
 *  default values
 *  @static
 *  @type {Object}
 *  @const
 */


_Tone.default.PitchShift.defaults = {
  "pitch": 0,
  "windowSize": 0.1,
  "delayTime": 0,
  "feedback": 0
};
/**
 * Repitch the incoming signal by some interval (measured
 * in semi-tones).
 * @memberOf Tone.PitchShift#
 * @type {Interval}
 * @name pitch
 * @example
 * pitchShift.pitch = -12; //down one octave
 * pitchShift.pitch = 7; //up a fifth
 */

Object.defineProperty(_Tone.default.PitchShift.prototype, "pitch", {
  get: function () {
    return this._pitch;
  },
  set: function (interval) {
    this._pitch = interval;
    var factor = 0;

    if (interval < 0) {
      this._lfoA.min = 0;
      this._lfoA.max = this._windowSize;
      this._lfoB.min = 0;
      this._lfoB.max = this._windowSize;
      factor = _Tone.default.intervalToFrequencyRatio(interval - 1) + 1;
    } else {
      this._lfoA.min = this._windowSize;
      this._lfoA.max = 0;
      this._lfoB.min = this._windowSize;
      this._lfoB.max = 0;
      factor = _Tone.default.intervalToFrequencyRatio(interval) - 1;
    }

    this._frequency.value = factor * (1.2 / this._windowSize);
  }
});
/**
 * The window size corresponds roughly to the sample length in a looping sampler.
 * Smaller values are desirable for a less noticeable delay time of the pitch shifted
 * signal, but larger values will result in smoother pitch shifting for larger intervals.
 * A nominal range of 0.03 to 0.1 is recommended.
 * @memberOf Tone.PitchShift#
 * @type {Time}
 * @name windowSize
 * @example
 * pitchShift.windowSize = 0.1;
 */

Object.defineProperty(_Tone.default.PitchShift.prototype, "windowSize", {
  get: function () {
    return this._windowSize;
  },
  set: function (size) {
    this._windowSize = this.toSeconds(size);
    this.pitch = this._pitch;
  }
});
/**
 *  Clean up.
 *  @return  {Tone.PitchShift}  this
 */

_Tone.default.PitchShift.prototype.dispose = function () {
  _Tone.default.FeedbackEffect.prototype.dispose.call(this);

  this._frequency.dispose();

  this._frequency = null;

  this._delayA.disconnect();

  this._delayA = null;

  this._delayB.disconnect();

  this._delayB = null;

  this._lfoA.dispose();

  this._lfoA = null;

  this._lfoB.dispose();

  this._lfoB = null;

  this._crossFade.dispose();

  this._crossFade = null;

  this._crossFadeLFO.dispose();

  this._crossFadeLFO = null;

  this._writable("delayTime");

  this._feedbackDelay.dispose();

  this._feedbackDelay = null;
  this.delayTime = null;
  return this;
};

var _default = _Tone.default.PitchShift;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/LFO":"../node_modules/tone/tone/component/LFO.js","../component/CrossFade":"../node_modules/tone/tone/component/CrossFade.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../effect/FeedbackEffect":"../node_modules/tone/tone/effect/FeedbackEffect.js","../core/Delay":"../node_modules/tone/tone/core/Delay.js"}],"../node_modules/tone/tone/source/BufferSource.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Buffer");

require("../source/Source");

require("../core/Gain");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Wrapper around the native BufferSourceNode.
 *  @extends {Tone.AudioNode}
 *  @param  {AudioBuffer|Tone.Buffer}  buffer   The buffer to play
 *  @param  {Function}  onload  The callback to invoke when the
 *                               buffer is done playing.
 */
_Tone.default.BufferSource = function () {
  var options = _Tone.default.defaults(arguments, ["buffer", "onload"], _Tone.default.BufferSource);

  _Tone.default.AudioNode.call(this, options);
  /**
   *  The callback to invoke after the
   *  buffer source is done playing.
   *  @type  {Function}
   */


  this.onended = options.onended;
  /**
   *  The time that the buffer was started.
   *  @type  {Number}
   *  @private
   */

  this._startTime = -1;
  /**
   *  An additional flag if the actual BufferSourceNode
   *  has been started. b/c stopping an unstarted buffer
   *  will throw it into an invalid state
   *  @type  {Boolean}
   *  @private
   */

  this._sourceStarted = false;
  /**
   *  Flag if the source has already been stopped
   *  @type  {Boolean}
   *  @private
   */

  this._sourceStopped = false;
  /**
   *  The time that the buffer is scheduled to stop.
   *  @type  {Number}
   *  @private
   */

  this._stopTime = -1;
  /**
   *  The gain node which envelopes the BufferSource
   *  @type  {Tone.Gain}
   *  @private
   */

  this._gainNode = this.output = new _Tone.default.Gain(0);
  /**
   *  The buffer source
   *  @type  {AudioBufferSourceNode}
   *  @private
   */

  this._source = this.context.createBufferSource();

  _Tone.default.connect(this._source, this._gainNode);

  this._source.onended = this._onended.bind(this);
  /**
   * The private buffer instance
   * @type {Tone.Buffer}
   * @private
   */

  this._buffer = new _Tone.default.Buffer(options.buffer, options.onload);
  /**
   *  The playbackRate of the buffer
   *  @type {Positive}
   *  @signal
   */

  this.playbackRate = new _Tone.default.Param({
    param: this._source.playbackRate,
    units: _Tone.default.Type.Positive,
    value: options.playbackRate
  });
  /**
   *  The fadeIn time of the amplitude envelope.
   *  @type {Time}
   */

  this.fadeIn = options.fadeIn;
  /**
   *  The fadeOut time of the amplitude envelope.
   *  @type {Time}
   */

  this.fadeOut = options.fadeOut;
  /**
   * The curve applied to the fades, either "linear" or "exponential"
   * @type {String}
   */

  this.curve = options.curve;
  /**
   * The onended timeout
   * @type {Number}
   * @private
   */

  this._onendedTimeout = -1; //set some values initially

  this.loop = options.loop;
  this.loopStart = options.loopStart;
  this.loopEnd = options.loopEnd;
};

_Tone.default.extend(_Tone.default.BufferSource, _Tone.default.AudioNode);
/**
 *  The defaults
 *  @const
 *  @type  {Object}
 */


_Tone.default.BufferSource.defaults = {
  "onended": _Tone.default.noOp,
  "onload": _Tone.default.noOp,
  "loop": false,
  "loopStart": 0,
  "loopEnd": 0,
  "fadeIn": 0,
  "fadeOut": 0,
  "curve": "linear",
  "playbackRate": 1
};
/**
 *  Returns the playback state of the source, either "started" or "stopped".
 *  @type {Tone.State}
 *  @readOnly
 *  @memberOf Tone.BufferSource#
 *  @name state
 */

Object.defineProperty(_Tone.default.BufferSource.prototype, "state", {
  get: function () {
    return this.getStateAtTime(this.now());
  }
});
/**
 *  Get the playback state at the given time
 *  @param  {Time}  time  The time to test the state at
 *  @return  {Tone.State}  The playback state. 
 */

_Tone.default.BufferSource.prototype.getStateAtTime = function (time) {
  time = this.toSeconds(time);

  if (this._startTime !== -1 && this._startTime <= time && (this._stopTime === -1 || time < this._stopTime) && !this._sourceStopped) {
    return _Tone.default.State.Started;
  } else {
    return _Tone.default.State.Stopped;
  }
};
/**
 *  Start the buffer
 *  @param  {Time} [startTime=now] When the player should start.
 *  @param  {Time} [offset=0] The offset from the beginning of the sample
 *                                 to start at.
 *  @param  {Time=} duration How long the sample should play. If no duration
 *                                is given, it will default to the full length
 *                                of the sample (minus any offset)
 *  @param  {Gain}  [gain=1]  The gain to play the buffer back at.
 *  @return  {Tone.BufferSource}  this
 */


_Tone.default.BufferSource.prototype.start = function (time, offset, duration, gain) {
  this.log("start", time, offset, duration, gain);
  this.assert(this._startTime === -1, "can only be started once");
  this.assert(this.buffer.loaded, "buffer is either not set or not loaded");
  this.assert(!this._sourceStopped, "source is already stopped");
  time = this.toSeconds(time); //if it's a loop the default offset is the loopstart point

  if (this.loop) {
    offset = _Tone.default.defaultArg(offset, this.loopStart);
  } else {
    //otherwise the default offset is 0
    offset = _Tone.default.defaultArg(offset, 0);
  }

  offset = this.toSeconds(offset); //make sure the offset is not less than 0

  offset = Math.max(offset, 0);
  gain = _Tone.default.defaultArg(gain, 1); //apply a fade in envelope

  var fadeInTime = this.toSeconds(this.fadeIn);

  if (fadeInTime > 0) {
    this._gainNode.gain.setValueAtTime(0, time);

    if (this.curve === "linear") {
      this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);
    } else {
      this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);
    }
  } else {
    this._gainNode.gain.setValueAtTime(gain, time);
  }

  this._startTime = time; //if a duration is given, schedule a stop

  if (_Tone.default.isDefined(duration)) {
    var computedDur = this.toSeconds(duration); //make sure it's never negative

    computedDur = Math.max(computedDur, 0);
    this.stop(time + computedDur);
  } //start the buffer source


  if (this.loop) {
    //modify the offset if it's greater than the loop time
    var loopEnd = this.loopEnd || this.buffer.duration;
    var loopStart = this.loopStart;
    var loopDuration = loopEnd - loopStart; //move the offset back

    if (offset >= loopEnd) {
      offset = (offset - loopStart) % loopDuration + loopStart;
    }
  }

  this._source.buffer = this.buffer.get();
  this._source.loopEnd = this.loopEnd || this.buffer.duration;

  if (offset < this.buffer.duration) {
    this._sourceStarted = true;

    this._source.start(time, offset);
  }

  return this;
};
/**
 *  Stop the buffer. 
 *  @param  {Time=}  time         The time the buffer should stop.
 *  @return  {Tone.BufferSource}  this
 */


_Tone.default.BufferSource.prototype.stop = function (time) {
  this.log("stop", time);
  this.assert(this.buffer.loaded, "buffer is either not set or not loaded");
  this.assert(!this._sourceStopped, "source is already stopped");
  time = this.toSeconds(time); //if the event has already been scheduled, clear it

  if (this._stopTime !== -1) {
    this.cancelStop();
  } //the fadeOut time


  var fadeOutTime = this.toSeconds(this.fadeOut); //cancel the previous curve

  this._stopTime = time + fadeOutTime;

  if (fadeOutTime > 0) {
    //start the fade out curve at the given time
    if (this.curve === "linear") {
      this._gainNode.gain.linearRampTo(0, fadeOutTime, time);
    } else {
      this._gainNode.gain.targetRampTo(0, fadeOutTime, time);
    }
  } else {
    //stop any ongoing ramps, and set the value to 0
    this._gainNode.gain.cancelAndHoldAtTime(time);

    this._gainNode.gain.setValueAtTime(0, time);
  }

  _Tone.default.context.clearTimeout(this._onendedTimeout);

  this._onendedTimeout = _Tone.default.context.setTimeout(this._onended.bind(this), this._stopTime - this.now());
  return this;
};
/**
 *  Cancel a scheduled stop event
 *  @return  {Tone.BufferSource}  this
 */


_Tone.default.BufferSource.prototype.cancelStop = function () {
  if (this._startTime !== -1 && !this._sourceStopped) {
    //cancel the stop envelope
    var fadeInTime = this.toSeconds(this.fadeIn);

    this._gainNode.gain.cancelScheduledValues(this._startTime + fadeInTime + this.sampleTime);

    this.context.clearTimeout(this._onendedTimeout);
    this._stopTime = -1;
  }

  return this;
};
/**
 *  Internal callback when the buffer is ended.
 *  Invokes `onended` and disposes the node.
 *  @private
 */


_Tone.default.BufferSource.prototype._onended = function () {
  if (!this._sourceStopped) {
    this._sourceStopped = true; //allow additional time for the exponential curve to fully decay

    var additionalTail = this.curve === "exponential" ? this.fadeOut * 2 : 0;

    if (this._sourceStarted && this._stopTime !== -1) {
      this._source.stop(this._stopTime + additionalTail);
    }

    this.onended(this); //dispose the source after it's come to a stop

    setTimeout(function () {
      //if it hasn't already been disposed
      if (this._source) {
        this._source.disconnect();

        this._gainNode.disconnect();
      }
    }.bind(this), additionalTail * 1000 + 100);
  }
};
/**
 * If loop is true, the loop will start at this position.
 * @memberOf Tone.BufferSource#
 * @type {Time}
 * @name loopStart
 */


Object.defineProperty(_Tone.default.BufferSource.prototype, "loopStart", {
  get: function () {
    return this._source.loopStart;
  },
  set: function (loopStart) {
    this._source.loopStart = this.toSeconds(loopStart);
  }
});
/**
 * If loop is true, the loop will end at this position.
 * @memberOf Tone.BufferSource#
 * @type {Time}
 * @name loopEnd
 */

Object.defineProperty(_Tone.default.BufferSource.prototype, "loopEnd", {
  get: function () {
    return this._source.loopEnd;
  },
  set: function (loopEnd) {
    this._source.loopEnd = this.toSeconds(loopEnd);
  }
});
/**
 * The audio buffer belonging to the player.
 * @memberOf Tone.BufferSource#
 * @type {Tone.Buffer}
 * @name buffer
 */

Object.defineProperty(_Tone.default.BufferSource.prototype, "buffer", {
  get: function () {
    return this._buffer;
  },
  set: function (buffer) {
    this._buffer.set(buffer);
  }
});
/**
 * If the buffer should loop once it's over.
 * @memberOf Tone.BufferSource#
 * @type {Boolean}
 * @name loop
 */

Object.defineProperty(_Tone.default.BufferSource.prototype, "loop", {
  get: function () {
    return this._source.loop;
  },
  set: function (loop) {
    this._source.loop = loop;
    this.cancelStop();
  }
});
/**
 *  Clean up.
 *  @return  {Tone.BufferSource}  this
 */

_Tone.default.BufferSource.prototype.dispose = function () {
  if (!this._wasDisposed) {
    this._wasDisposed = true;

    _Tone.default.AudioNode.prototype.dispose.call(this);

    this.onended = null;
    this._source.onended = null;

    this._source.disconnect();

    this._source = null;

    this._gainNode.dispose();

    this._gainNode = null;

    this._buffer.dispose();

    this._buffer = null;
    this._startTime = -1;
    this.playbackRate = null;

    _Tone.default.context.clearTimeout(this._onendedTimeout);
  }

  return this;
};

var _default = _Tone.default.BufferSource;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Buffer":"../node_modules/tone/tone/core/Buffer.js","../source/Source":"../node_modules/tone/tone/source/Source.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/source/Noise.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../source/Source");

require("../core/Buffer");

require("../source/BufferSource");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.Noise is a noise generator. It uses looped noise buffers to save on performance.
 *          Tone.Noise supports the noise types: "pink", "white", and "brown". Read more about
 *          colors of noise on [Wikipedia](https://en.wikipedia.org/wiki/Colors_of_noise).
 *
 *  @constructor
 *  @extends {Tone.Source}
 *  @param {string} type the noise type (white|pink|brown)
 *  @example
 * //initialize the noise and start
 * var noise = new Tone.Noise("pink").start();
 *
 * //make an autofilter to shape the noise
 * var autoFilter = new Tone.AutoFilter({
 * 	"frequency" : "8m",
 * 	"min" : 800,
 * 	"max" : 15000
 * }).connect(Tone.Master);
 *
 * //connect the noise
 * noise.connect(autoFilter);
 * //start the autofilter LFO
 * autoFilter.start()
 */
_Tone.default.Noise = function () {
  var options = _Tone.default.defaults(arguments, ["type"], _Tone.default.Noise);

  _Tone.default.Source.call(this, options);
  /**
   *  @private
   *  @type {AudioBufferSourceNode}
   */


  this._source = null;
  /**
   *  the buffer
   *  @private
   *  @type {AudioBuffer}
   */

  this._type = options.type;
  /**
   *  The playback rate of the noise. Affects
   *  the "frequency" of the noise.
   *  @type {Positive}
   *  @signal
   */

  this._playbackRate = options.playbackRate;
};

_Tone.default.extend(_Tone.default.Noise, _Tone.default.Source);
/**
 *  the default parameters
 *
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.Noise.defaults = {
  "type": "white",
  "playbackRate": 1
};
/**
 * The type of the noise. Can be "white", "brown", or "pink".
 * @memberOf Tone.Noise#
 * @type {string}
 * @name type
 * @example
 * noise.type = "white";
 */

Object.defineProperty(_Tone.default.Noise.prototype, "type", {
  get: function () {
    return this._type;
  },
  set: function (type) {
    if (this._type !== type) {
      if (type in _noiseBuffers) {
        this._type = type; //if it's playing, stop and restart it

        if (this.state === _Tone.default.State.Started) {
          var now = this.now();

          this._stop(now);

          this._start(now);
        }
      } else {
        throw new TypeError("Tone.Noise: invalid type: " + type);
      }
    }
  }
});
/**
 *  The playback rate of the noise. Affects
 *  the "frequency" of the noise.
 *  @type {Positive}
 *  @signal
 */

Object.defineProperty(_Tone.default.Noise.prototype, "playbackRate", {
  get: function () {
    return this._playbackRate;
  },
  set: function (rate) {
    this._playbackRate = rate;

    if (this._source) {
      this._source.playbackRate.value = rate;
    }
  }
});
/**
 *  internal start method
 *
 *  @param {Time} time
 *  @private
 */

_Tone.default.Noise.prototype._start = function (time) {
  var buffer = _noiseBuffers[this._type];
  this._source = new _Tone.default.BufferSource(buffer).connect(this.output);
  this._source.loop = true;
  this._source.playbackRate.value = this._playbackRate;

  this._source.start(this.toSeconds(time), Math.random() * (buffer.duration - 0.001));
};
/**
 *  internal stop method
 *
 *  @param {Time} time
 *  @private
 */


_Tone.default.Noise.prototype._stop = function (time) {
  if (this._source) {
    this._source.stop(this.toSeconds(time));

    this._source = null;
  }
};
/**
 * Restarts the noise.
 * @param  {Time} time When to restart the noise.
 * @return {Tone.Noise}      this
 */


_Tone.default.Noise.prototype.restart = function (time) {
  //TODO could be optimized by cancelling the buffer source 'stop'
  //stop and restart
  this._stop(time);

  this._start(time);

  return this;
};
/**
 *  Clean up.
 *  @returns {Tone.Noise} this
 */


_Tone.default.Noise.prototype.dispose = function () {
  _Tone.default.Source.prototype.dispose.call(this);

  if (this._source !== null) {
    this._source.disconnect();

    this._source = null;
  }

  this._buffer = null;
  return this;
}; ///////////////////////////////////////////////////////////////////////////
// THE BUFFERS
///////////////////////////////////////////////////////////////////////////
//Noise buffer stats


var bufferLength = 44100 * 5;
var channels = 2;
/**
 *	The noise arrays. Generated on initialization.
 *  borrowed heavily from https://github.com/zacharydenton/noise.js
 *  (c) 2013 Zach Denton (MIT)
 *  @static
 *  @private
 *  @type {Array}
 */

var _noiseBuffers = {};
var _noiseCache = {};
Object.defineProperty(_noiseBuffers, "pink", {
  get: function () {
    if (!_noiseCache.pink) {
      var buffer = [];

      for (var channelNum = 0; channelNum < channels; channelNum++) {
        var channel = new Float32Array(bufferLength);
        buffer[channelNum] = channel;
        var b0, b1, b2, b3, b4, b5, b6;
        b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;

        for (var i = 0; i < bufferLength; i++) {
          var white = Math.random() * 2 - 1;
          b0 = 0.99886 * b0 + white * 0.0555179;
          b1 = 0.99332 * b1 + white * 0.0750759;
          b2 = 0.96900 * b2 + white * 0.1538520;
          b3 = 0.86650 * b3 + white * 0.3104856;
          b4 = 0.55000 * b4 + white * 0.5329522;
          b5 = -0.7616 * b5 - white * 0.0168980;
          channel[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;
          channel[i] *= 0.11; // (roughly) compensate for gain

          b6 = white * 0.115926;
        }
      }

      _noiseCache.pink = new _Tone.default.Buffer().fromArray(buffer);
    }

    return _noiseCache.pink;
  }
});
Object.defineProperty(_noiseBuffers, "brown", {
  get: function () {
    if (!_noiseCache.brown) {
      var buffer = [];

      for (var channelNum = 0; channelNum < channels; channelNum++) {
        var channel = new Float32Array(bufferLength);
        buffer[channelNum] = channel;
        var lastOut = 0.0;

        for (var i = 0; i < bufferLength; i++) {
          var white = Math.random() * 2 - 1;
          channel[i] = (lastOut + 0.02 * white) / 1.02;
          lastOut = channel[i];
          channel[i] *= 3.5; // (roughly) compensate for gain
        }
      }

      _noiseCache.brown = new _Tone.default.Buffer().fromArray(buffer);
    }

    return _noiseCache.brown;
  }
});
Object.defineProperty(_noiseBuffers, "white", {
  get: function () {
    if (!_noiseCache.white) {
      var buffer = [];

      for (var channelNum = 0; channelNum < channels; channelNum++) {
        var channel = new Float32Array(bufferLength);
        buffer[channelNum] = channel;

        for (var i = 0; i < bufferLength; i++) {
          channel[i] = Math.random() * 2 - 1;
        }
      }

      _noiseCache.white = new _Tone.default.Buffer().fromArray(buffer);
    }

    return _noiseCache.white;
  }
});
var _default = _Tone.default.Noise;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../source/Source":"../node_modules/tone/tone/source/Source.js","../core/Buffer":"../node_modules/tone/tone/core/Buffer.js","../source/BufferSource":"../node_modules/tone/tone/source/BufferSource.js"}],"../node_modules/tone/tone/effect/Reverb.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Offline");

require("../component/Filter");

require("../component/Merge");

require("../source/Noise");

require("../core/Gain");

require("../effect/Convolver");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Simple convolution created with decaying noise.
 *  		Generates an Impulse Response Buffer
 * 			with Tone.Offline then feeds the IR into ConvolverNode.
 * 			Note: the Reverb will not make any sound until [generate](#generate)
 * 			has been invoked and resolved.
 *
 * 			Inspiration from [ReverbGen](https://github.com/adelespinasse/reverbGen).
 * 			Copyright (c) 2014 Alan deLespinasse Apache 2.0 License.
 *
 *  @extends {Tone.Convolver}
 *  @param {Time=} decay The amount of time it will reverberate for.
 */
_Tone.default.Reverb = function () {
  var options = _Tone.default.defaults(arguments, ["decay"], _Tone.default.Reverb);

  _Tone.default.Effect.call(this, options);
  /**
   *  Convolver node
   *  @type {ConvolverNode}
   *  @private
   */


  this._convolver = this.context.createConvolver();
  /**
   * The duration of the reverb
   * @type {Time}
   */

  this.decay = options.decay;
  /**
   * The amount of time before the reverb is fully
   * ramped in.
   * @type {Time}
   */

  this.preDelay = options.preDelay;
  this.connectEffect(this._convolver);
};

_Tone.default.extend(_Tone.default.Reverb, _Tone.default.Effect);
/**
 * The defaults
 * @type {Object}
 * @static
 */


_Tone.default.Reverb.defaults = {
  "decay": 1.5,
  "preDelay": 0.01
};
/**
 * Generate the Impulse Response. Returns a promise while the IR is being
 * generated.
 * @return {Promise<Tone.Reverb>} Promise which returns this object.
 */

_Tone.default.Reverb.prototype.generate = function () {
  return _Tone.default.Offline(function () {
    //create a noise burst which decays over the duration
    var noiseL = new _Tone.default.Noise();
    var noiseR = new _Tone.default.Noise();
    var merge = new _Tone.default.Merge();
    noiseL.connect(merge.left);
    noiseR.connect(merge.right);
    var gainNode = new _Tone.default.Gain().toMaster();
    merge.connect(gainNode);
    noiseL.start(0);
    noiseR.start(0); //predelay

    gainNode.gain.setValueAtTime(0, 0);
    gainNode.gain.setValueAtTime(1, this.preDelay); //decay

    gainNode.gain.exponentialApproachValueAtTime(0, this.preDelay, this.decay + this.preDelay);
  }.bind(this), this.decay + this.preDelay).then(function (buffer) {
    this._convolver.buffer = buffer.get();
    return this;
  }.bind(this));
};
/**
 *  Clean up.
 *  @return  {Tone.Reverb}  this
 */


_Tone.default.Reverb.prototype.dispose = function () {
  _Tone.default.Effect.prototype.dispose.call(this);

  this._convolver.disconnect();

  this._convolver = null;
  return this;
};

var _default = _Tone.default.Reverb;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Offline":"../node_modules/tone/tone/core/Offline.js","../component/Filter":"../node_modules/tone/tone/component/Filter.js","../component/Merge":"../node_modules/tone/tone/component/Merge.js","../source/Noise":"../node_modules/tone/tone/source/Noise.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js","../effect/Convolver":"../node_modules/tone/tone/effect/Convolver.js"}],"../node_modules/tone/tone/effect/StereoFeedbackEffect.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../effect/StereoEffect");

require("../effect/FeedbackEffect");

require("../core/Gain");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Base class for stereo feedback effects where the effectReturn
 *         is fed back into the same channel.
 *
 *	@constructor
 *	@extends {Tone.StereoEffect}
 */
_Tone.default.StereoFeedbackEffect = function () {
  var options = _Tone.default.defaults(arguments, ["feedback"], _Tone.default.FeedbackEffect);

  _Tone.default.StereoEffect.call(this, options);
  /**
   *  controls the amount of feedback
   *  @type {NormalRange}
   *  @signal
   */


  this.feedback = new _Tone.default.Signal(options.feedback, _Tone.default.Type.NormalRange);
  /**
   *  the left side feeback
   *  @type {Tone.Gain}
   *  @private
   */

  this._feedbackL = new _Tone.default.Gain();
  /**
   *  the right side feeback
   *  @type {Tone.Gain}
   *  @private
   */

  this._feedbackR = new _Tone.default.Gain(); //connect it up

  this.effectReturnL.chain(this._feedbackL, this.effectSendL);
  this.effectReturnR.chain(this._feedbackR, this.effectSendR);
  this.feedback.fan(this._feedbackL.gain, this._feedbackR.gain);

  this._readOnly(["feedback"]);
};

_Tone.default.extend(_Tone.default.StereoFeedbackEffect, _Tone.default.StereoEffect);
/**
 *  clean up
 *  @returns {Tone.StereoFeedbackEffect} this
 */


_Tone.default.StereoFeedbackEffect.prototype.dispose = function () {
  _Tone.default.StereoEffect.prototype.dispose.call(this);

  this._writable(["feedback"]);

  this.feedback.dispose();
  this.feedback = null;

  this._feedbackL.dispose();

  this._feedbackL = null;

  this._feedbackR.dispose();

  this._feedbackR = null;
  return this;
};

var _default = _Tone.default.StereoFeedbackEffect;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../effect/StereoEffect":"../node_modules/tone/tone/effect/StereoEffect.js","../effect/FeedbackEffect":"../node_modules/tone/tone/effect/FeedbackEffect.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js"}],"../node_modules/tone/tone/effect/StereoWidener.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../effect/MidSideEffect");

require("../signal/Signal");

require("../signal/Multiply");

require("../signal/Subtract");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Applies a width factor to the mid/side seperation.
 *         0 is all mid and 1 is all side.
 *         Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).
 *         <br><br>
 *         <code>
 *         Mid *= 2*(1-width)<br>
 *         Side *= 2*width
 *         </code>
 *
 *  @extends {Tone.MidSideEffect}
 *  @constructor
 *  @param {NormalRange|Object} [width] The stereo width. A width of 0 is mono and 1 is stereo. 0.5 is no change.
 */
_Tone.default.StereoWidener = function () {
  var options = _Tone.default.defaults(arguments, ["width"], _Tone.default.StereoWidener);

  _Tone.default.MidSideEffect.call(this, options);
  /**
   *  The width control. 0 = 100% mid. 1 = 100% side. 0.5 = no change.
   *  @type {NormalRange}
   *  @signal
   */


  this.width = new _Tone.default.Signal(options.width, _Tone.default.Type.NormalRange);

  this._readOnly(["width"]);
  /**
   * Two times the (1-width) for the mid channel
   * @type {Tone.Multiply}
   * @private
   */


  this._twoTimesWidthMid = new _Tone.default.Multiply(2);
  /**
   * Two times the width for the side channel
   * @type {Tone.Multiply}
   * @private
   */

  this._twoTimesWidthSide = new _Tone.default.Multiply(2);
  /**
   *  Mid multiplier
   *  @type {Tone.Multiply}
   *  @private
   */

  this._midMult = new _Tone.default.Multiply();

  this._twoTimesWidthMid.connect(this._midMult, 0, 1);

  this.midSend.chain(this._midMult, this.midReturn);
  /**
   * 1 - width
   * @type {Tone.Subtract}
   * @private
   */

  this._oneMinusWidth = new _Tone.default.Subtract();

  this._oneMinusWidth.connect(this._twoTimesWidthMid);

  _Tone.default.connect(this.context.getConstant(1), this._oneMinusWidth, 0, 0);

  this.width.connect(this._oneMinusWidth, 0, 1);
  /**
   *  Side multiplier
   *  @type {Tone.Multiply}
   *  @private
   */

  this._sideMult = new _Tone.default.Multiply();
  this.width.connect(this._twoTimesWidthSide);

  this._twoTimesWidthSide.connect(this._sideMult, 0, 1);

  this.sideSend.chain(this._sideMult, this.sideReturn);
};

_Tone.default.extend(_Tone.default.StereoWidener, _Tone.default.MidSideEffect);
/**
 *  the default values
 *  @static
 *  @type {Object}
 */


_Tone.default.StereoWidener.defaults = {
  "width": 0.5
};
/**
 *  Clean up.
 *  @returns {Tone.StereoWidener} this
 */

_Tone.default.StereoWidener.prototype.dispose = function () {
  _Tone.default.MidSideEffect.prototype.dispose.call(this);

  this._writable(["width"]);

  this.width.dispose();
  this.width = null;

  this._midMult.dispose();

  this._midMult = null;

  this._sideMult.dispose();

  this._sideMult = null;

  this._twoTimesWidthMid.dispose();

  this._twoTimesWidthMid = null;

  this._twoTimesWidthSide.dispose();

  this._twoTimesWidthSide = null;

  this._oneMinusWidth.dispose();

  this._oneMinusWidth = null;
  return this;
};

var _default = _Tone.default.StereoWidener;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../effect/MidSideEffect":"../node_modules/tone/tone/effect/MidSideEffect.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../signal/Multiply":"../node_modules/tone/tone/signal/Multiply.js","../signal/Subtract":"../node_modules/tone/tone/signal/Subtract.js"}],"../node_modules/tone/tone/effect/Tremolo.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/LFO");

require("../effect/StereoEffect");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Tremolo modulates the amplitude of an incoming signal using a Tone.LFO.
 *         The type, frequency, and depth of the LFO is controllable.
 *
 *  @extends {Tone.StereoEffect}
 *  @constructor
 *  @param {Frequency} [frequency] The rate of the effect.
 *  @param {NormalRange} [depth] The depth of the effect.
 *  @example
 * //create a tremolo and start it's LFO
 * var tremolo = new Tone.Tremolo(9, 0.75).toMaster().start();
 * //route an oscillator through the tremolo and start it
 * var oscillator = new Tone.Oscillator().connect(tremolo).start();
 */
_Tone.default.Tremolo = function () {
  var options = _Tone.default.defaults(arguments, ["frequency", "depth"], _Tone.default.Tremolo);

  _Tone.default.StereoEffect.call(this, options);
  /**
   *  The tremelo LFO in the left channel
   *  @type  {Tone.LFO}
   *  @private
   */


  this._lfoL = new _Tone.default.LFO({
    "phase": options.spread,
    "min": 1,
    "max": 0
  });
  /**
   *  The tremelo LFO in the left channel
   *  @type  {Tone.LFO}
   *  @private
   */

  this._lfoR = new _Tone.default.LFO({
    "phase": options.spread,
    "min": 1,
    "max": 0
  });
  /**
   *  Where the gain is multiplied
   *  @type  {Tone.Gain}
   *  @private
   */

  this._amplitudeL = new _Tone.default.Gain();
  /**
   *  Where the gain is multiplied
   *  @type  {Tone.Gain}
   *  @private
   */

  this._amplitudeR = new _Tone.default.Gain();
  /**
   *  The frequency of the tremolo.
   *  @type  {Frequency}
   *  @signal
   */

  this.frequency = new _Tone.default.Signal(options.frequency, _Tone.default.Type.Frequency);
  /**
   *  The depth of the effect. A depth of 0, has no effect
   *  on the amplitude, and a depth of 1 makes the amplitude
   *  modulate fully between 0 and 1.
   *  @type  {NormalRange}
   *  @signal
   */

  this.depth = new _Tone.default.Signal(options.depth, _Tone.default.Type.NormalRange);

  this._readOnly(["frequency", "depth"]);

  this.effectSendL.chain(this._amplitudeL, this.effectReturnL);
  this.effectSendR.chain(this._amplitudeR, this.effectReturnR);

  this._lfoL.connect(this._amplitudeL.gain);

  this._lfoR.connect(this._amplitudeR.gain);

  this.frequency.fan(this._lfoL.frequency, this._lfoR.frequency);
  this.depth.fan(this._lfoR.amplitude, this._lfoL.amplitude);
  this.type = options.type;
  this.spread = options.spread;
};

_Tone.default.extend(_Tone.default.Tremolo, _Tone.default.StereoEffect);
/**
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.Tremolo.defaults = {
  "frequency": 10,
  "type": "sine",
  "depth": 0.5,
  "spread": 180
};
/**
 * Start the tremolo.
 * @param {Time} [time=now] When the tremolo begins.
 * @returns {Tone.Tremolo} this
 */

_Tone.default.Tremolo.prototype.start = function (time) {
  this._lfoL.start(time);

  this._lfoR.start(time);

  return this;
};
/**
 * Stop the tremolo.
 * @param {Time} [time=now] When the tremolo stops.
 * @returns {Tone.Tremolo} this
 */


_Tone.default.Tremolo.prototype.stop = function (time) {
  this._lfoL.stop(time);

  this._lfoR.stop(time);

  return this;
};
/**
 * Sync the effect to the transport.
 * @param {Time} [delay=0] Delay time before starting the effect after the
 *                              Transport has started.
 * @returns {Tone.Tremolo} this
 */


_Tone.default.Tremolo.prototype.sync = function (delay) {
  this._lfoL.sync(delay);

  this._lfoR.sync(delay);

  _Tone.default.Transport.syncSignal(this.frequency);

  return this;
};
/**
 * Unsync the filter from the transport
 * @returns {Tone.Tremolo} this
 */


_Tone.default.Tremolo.prototype.unsync = function () {
  this._lfoL.unsync();

  this._lfoR.unsync();

  _Tone.default.Transport.unsyncSignal(this.frequency);

  return this;
};
/**
 * The Tremolo's oscillator type.
 * @memberOf Tone.Tremolo#
 * @type {string}
 * @name type
 */


Object.defineProperty(_Tone.default.Tremolo.prototype, "type", {
  get: function () {
    return this._lfoL.type;
  },
  set: function (type) {
    this._lfoL.type = type;
    this._lfoR.type = type;
  }
});
/**
 * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.
 * When set to 180, LFO's will be panned hard left and right respectively.
 * @memberOf Tone.Tremolo#
 * @type {Degrees}
 * @name spread
 */

Object.defineProperty(_Tone.default.Tremolo.prototype, "spread", {
  get: function () {
    return this._lfoR.phase - this._lfoL.phase; //180
  },
  set: function (spread) {
    this._lfoL.phase = 90 - spread / 2;
    this._lfoR.phase = spread / 2 + 90;
  }
});
/**
 *  clean up
 *  @returns {Tone.Tremolo} this
 */

_Tone.default.Tremolo.prototype.dispose = function () {
  _Tone.default.StereoEffect.prototype.dispose.call(this);

  this._writable(["frequency", "depth"]);

  this._lfoL.dispose();

  this._lfoL = null;

  this._lfoR.dispose();

  this._lfoR = null;

  this._amplitudeL.dispose();

  this._amplitudeL = null;

  this._amplitudeR.dispose();

  this._amplitudeR = null;
  this.frequency = null;
  this.depth = null;
  return this;
};

var _default = _Tone.default.Tremolo;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/LFO":"../node_modules/tone/tone/component/LFO.js","../effect/StereoEffect":"../node_modules/tone/tone/effect/StereoEffect.js"}],"../node_modules/tone/tone/effect/Vibrato.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../effect/Effect");

require("../core/Delay");

require("../component/LFO");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class A Vibrato effect composed of a Tone.Delay and a Tone.LFO. The LFO
 *         modulates the delayTime of the delay, causing the pitch to rise
 *         and fall. 
 *  @extends {Tone.Effect}
 *  @param {Frequency} frequency The frequency of the vibrato.
 *  @param {NormalRange} depth The amount the pitch is modulated.
 */
_Tone.default.Vibrato = function () {
  var options = _Tone.default.defaults(arguments, ["frequency", "depth"], _Tone.default.Vibrato);

  _Tone.default.Effect.call(this, options);
  /**
   *  The delay node used for the vibrato effect
   *  @type {Tone.Delay}
   *  @private
   */


  this._delayNode = new _Tone.default.Delay(0, options.maxDelay);
  /**
   *  The LFO used to control the vibrato
   *  @type {Tone.LFO}
   *  @private
   */

  this._lfo = new _Tone.default.LFO({
    "type": options.type,
    "min": 0,
    "max": options.maxDelay,
    "frequency": options.frequency,
    "phase": -90 //offse the phase so the resting position is in the center

  }).start().connect(this._delayNode.delayTime);
  /**
   *  The frequency of the vibrato
   *  @type {Frequency}
   *  @signal
   */

  this.frequency = this._lfo.frequency;
  /**
   *  The depth of the vibrato. 
   *  @type {NormalRange}
   *  @signal
   */

  this.depth = this._lfo.amplitude;
  this.depth.value = options.depth;

  this._readOnly(["frequency", "depth"]);

  this.effectSend.chain(this._delayNode, this.effectReturn);
};

_Tone.default.extend(_Tone.default.Vibrato, _Tone.default.Effect);
/**
 *  The defaults
 *  @type  {Object}
 *  @const
 */


_Tone.default.Vibrato.defaults = {
  "maxDelay": 0.005,
  "frequency": 5,
  "depth": 0.1,
  "type": "sine"
};
/**
 * Type of oscillator attached to the Vibrato.
 * @memberOf Tone.Vibrato#
 * @type {string}
 * @name type
 */

Object.defineProperty(_Tone.default.Vibrato.prototype, "type", {
  get: function () {
    return this._lfo.type;
  },
  set: function (type) {
    this._lfo.type = type;
  }
});
/**
 *  Clean up.
 *  @returns {Tone.Vibrato} this
 */

_Tone.default.Vibrato.prototype.dispose = function () {
  _Tone.default.Effect.prototype.dispose.call(this);

  this._delayNode.dispose();

  this._delayNode = null;

  this._lfo.dispose();

  this._lfo = null;

  this._writable(["frequency", "depth"]);

  this.frequency = null;
  this.depth = null;
};

var _default = _Tone.default.Vibrato;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../effect/Effect":"../node_modules/tone/tone/effect/Effect.js","../core/Delay":"../node_modules/tone/tone/core/Delay.js","../component/LFO":"../node_modules/tone/tone/component/LFO.js"}],"../node_modules/tone/tone/event/Event.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Transport");

require("../type/Type");

require("../core/TimelineState");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.Event abstracts away Tone.Transport.schedule and provides a schedulable
 *          callback for a single or repeatable events along the timeline.
 *
 *  @extends {Tone}
 *  @param {function} callback The callback to invoke at the time.
 *  @param {*} value The value or values which should be passed to
 *                      the callback function on invocation.
 *  @example
 * var chord = new Tone.Event(function(time, chord){
 * 	//the chord as well as the exact time of the event
 * 	//are passed in as arguments to the callback function
 * }, ["D4", "E4", "F4"]);
 * //start the chord at the beginning of the transport timeline
 * chord.start();
 * //loop it every measure for 8 measures
 * chord.loop = 8;
 * chord.loopEnd = "1m";
 */
_Tone.default.Event = function () {
  var options = _Tone.default.defaults(arguments, ["callback", "value"], _Tone.default.Event);

  _Tone.default.call(this);
  /**
   *  Loop value
   *  @type  {Boolean|Positive}
   *  @private
   */


  this._loop = options.loop;
  /**
   *  The callback to invoke.
   *  @type  {Function}
   */

  this.callback = options.callback;
  /**
   *  The value which is passed to the
   *  callback function.
   *  @type  {*}
   *  @private
   */

  this.value = options.value;
  /**
   *  When the note is scheduled to start.
   *  @type  {Number}
   *  @private
   */

  this._loopStart = this.toTicks(options.loopStart);
  /**
   *  When the note is scheduled to start.
   *  @type  {Number}
   *  @private
   */

  this._loopEnd = this.toTicks(options.loopEnd);
  /**
   *  Tracks the scheduled events
   *  @type {Tone.TimelineState}
   *  @private
   */

  this._state = new _Tone.default.TimelineState(_Tone.default.State.Stopped);
  /**
   *  The playback speed of the note. A speed of 1
   *  is no change.
   *  @private
   *  @type {Positive}
   */

  this._playbackRate = 1;
  /**
   *  A delay time from when the event is scheduled to start
   *  @type {Ticks}
   *  @private
   */

  this._startOffset = 0;
  /**
   *  private holder of probability value
   *  @type {NormalRange}
   *  @private
   */

  this._probability = options.probability;
  /**
   *  the amount of variation from the
   *  given time.
   *  @type {Boolean|Time}
   *  @private
   */

  this._humanize = options.humanize;
  /**
   *  If mute is true, the callback won't be
   *  invoked.
   *  @type {Boolean}
   */

  this.mute = options.mute; //set the initial values

  this.playbackRate = options.playbackRate;
};

_Tone.default.extend(_Tone.default.Event);
/**
 *  The default values
 *  @type  {Object}
 *  @const
 */


_Tone.default.Event.defaults = {
  "callback": _Tone.default.noOp,
  "loop": false,
  "loopEnd": "1m",
  "loopStart": 0,
  "playbackRate": 1,
  "value": null,
  "probability": 1,
  "mute": false,
  "humanize": false
};
/**
 *  Reschedule all of the events along the timeline
 *  with the updated values.
 *  @param {Time} after Only reschedules events after the given time.
 *  @return  {Tone.Event}  this
 *  @private
 */

_Tone.default.Event.prototype._rescheduleEvents = function (after) {
  //if no argument is given, schedules all of the events
  after = _Tone.default.defaultArg(after, -1);

  this._state.forEachFrom(after, function (event) {
    var duration;

    if (event.state === _Tone.default.State.Started) {
      if (_Tone.default.isDefined(event.id)) {
        _Tone.default.Transport.clear(event.id);
      }

      var startTick = event.time + Math.round(this.startOffset / this._playbackRate);

      if (this._loop === true || _Tone.default.isNumber(this._loop) && this._loop > 1) {
        duration = Infinity;

        if (_Tone.default.isNumber(this._loop)) {
          duration = this._loop * this._getLoopDuration();
        }

        var nextEvent = this._state.getAfter(startTick);

        if (nextEvent !== null) {
          duration = Math.min(duration, nextEvent.time - startTick);
        }

        if (duration !== Infinity) {
          //schedule a stop since it's finite duration
          this._state.setStateAtTime(_Tone.default.State.Stopped, startTick + duration + 1);

          duration = _Tone.default.Ticks(duration);
        }

        var interval = _Tone.default.Ticks(this._getLoopDuration());

        event.id = _Tone.default.Transport.scheduleRepeat(this._tick.bind(this), interval, _Tone.default.Ticks(startTick), duration);
      } else {
        event.id = _Tone.default.Transport.schedule(this._tick.bind(this), _Tone.default.Ticks(startTick));
      }
    }
  }.bind(this));

  return this;
};
/**
 *  Returns the playback state of the note, either "started" or "stopped".
 *  @type {String}
 *  @readOnly
 *  @memberOf Tone.Event#
 *  @name state
 */


Object.defineProperty(_Tone.default.Event.prototype, "state", {
  get: function () {
    return this._state.getValueAtTime(_Tone.default.Transport.ticks);
  }
});
/**
 *  The start from the scheduled start time
 *  @type {Ticks}
 *  @memberOf Tone.Event#
 *  @name startOffset
 *  @private
 */

Object.defineProperty(_Tone.default.Event.prototype, "startOffset", {
  get: function () {
    return this._startOffset;
  },
  set: function (offset) {
    this._startOffset = offset;
  }
});
/**
 *  The probability of the notes being triggered.
 *  @memberOf Tone.Event#
 *  @type {NormalRange}
 *  @name probability
 */

Object.defineProperty(_Tone.default.Event.prototype, "probability", {
  get: function () {
    return this._probability;
  },
  set: function (prob) {
    this._probability = prob;
  }
});
/**
 *  If set to true, will apply small random variation
 *  to the callback time. If the value is given as a time, it will randomize
 *  by that amount.
 *  @type {Boolean|Time}
 *  @name humanize
 *  @memberof Tone.Event#
 *  @example
 * event.humanize = true;
 */

Object.defineProperty(_Tone.default.Event.prototype, "humanize", {
  get: function () {
    return this._humanize;
  },
  set: function (variation) {
    this._humanize = variation;
  }
});
/**
 *  Start the note at the given time.
 *  @param  {TimelinePosition}  time  When the note should start.
 *  @return  {Tone.Event}  this
 */

_Tone.default.Event.prototype.start = function (time) {
  time = this.toTicks(time);

  if (this._state.getValueAtTime(time) === _Tone.default.State.Stopped) {
    this._state.add({
      "state": _Tone.default.State.Started,
      "time": time,
      "id": undefined
    });

    this._rescheduleEvents(time);
  }

  return this;
};
/**
 *  Stop the Event at the given time.
 *  @param  {TimelinePosition}  time  When the note should stop.
 *  @return  {Tone.Event}  this
 */


_Tone.default.Event.prototype.stop = function (time) {
  this.cancel(time);
  time = this.toTicks(time);

  if (this._state.getValueAtTime(time) === _Tone.default.State.Started) {
    this._state.setStateAtTime(_Tone.default.State.Stopped, time);

    var previousEvent = this._state.getBefore(time);

    var reschedulTime = time;

    if (previousEvent !== null) {
      reschedulTime = previousEvent.time;
    }

    this._rescheduleEvents(reschedulTime);
  }

  return this;
};
/**
 *  Cancel all scheduled events greater than or equal to the given time
 *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.
 *  @return  {Tone.Event}  this
 */


_Tone.default.Event.prototype.cancel = function (time) {
  time = _Tone.default.defaultArg(time, -Infinity);
  time = this.toTicks(time);

  this._state.forEachFrom(time, function (event) {
    _Tone.default.Transport.clear(event.id);
  });

  this._state.cancel(time);

  return this;
};
/**
 *  The callback function invoker. Also
 *  checks if the Event is done playing
 *  @param  {Number}  time  The time of the event in seconds
 *  @private
 */


_Tone.default.Event.prototype._tick = function (time) {
  var ticks = _Tone.default.Transport.getTicksAtTime(time);

  if (!this.mute && this._state.getValueAtTime(ticks) === _Tone.default.State.Started) {
    if (this.probability < 1 && Math.random() > this.probability) {
      return;
    }

    if (this.humanize) {
      var variation = 0.02;

      if (!_Tone.default.isBoolean(this.humanize)) {
        variation = this.toSeconds(this.humanize);
      }

      time += (Math.random() * 2 - 1) * variation;
    }

    this.callback(time, this.value);
  }
};
/**
 *  Get the duration of the loop.
 *  @return  {Ticks}
 *  @private
 */


_Tone.default.Event.prototype._getLoopDuration = function () {
  return Math.round((this._loopEnd - this._loopStart) / this._playbackRate);
};
/**
 *  If the note should loop or not
 *  between Tone.Event.loopStart and
 *  Tone.Event.loopEnd. If set to true,
 *  the event will loop indefinitely,
 *  if set to a number greater than 1
 *  it will play a specific number of
 *  times, if set to false, 0 or 1, the
 *  part will only play once.
 *  @memberOf Tone.Event#
 *  @type {Boolean|Positive}
 *  @name loop
 */


Object.defineProperty(_Tone.default.Event.prototype, "loop", {
  get: function () {
    return this._loop;
  },
  set: function (loop) {
    this._loop = loop;

    this._rescheduleEvents();
  }
});
/**
 * 	The playback rate of the note. Defaults to 1.
 *  @memberOf Tone.Event#
 *  @type {Positive}
 *  @name playbackRate
 *  @example
 * note.loop = true;
 * //repeat the note twice as fast
 * note.playbackRate = 2;
 */

Object.defineProperty(_Tone.default.Event.prototype, "playbackRate", {
  get: function () {
    return this._playbackRate;
  },
  set: function (rate) {
    this._playbackRate = rate;

    this._rescheduleEvents();
  }
});
/**
 *  The loopEnd point is the time the event will loop
 *  if Tone.Event.loop is true.
 *  @memberOf Tone.Event#
 *  @type {Time}
 *  @name loopEnd
 */

Object.defineProperty(_Tone.default.Event.prototype, "loopEnd", {
  get: function () {
    return _Tone.default.Ticks(this._loopEnd).toSeconds();
  },
  set: function (loopEnd) {
    this._loopEnd = this.toTicks(loopEnd);

    if (this._loop) {
      this._rescheduleEvents();
    }
  }
});
/**
 *  The time when the loop should start.
 *  @memberOf Tone.Event#
 *  @type {Time}
 *  @name loopStart
 */

Object.defineProperty(_Tone.default.Event.prototype, "loopStart", {
  get: function () {
    return _Tone.default.Ticks(this._loopStart).toSeconds();
  },
  set: function (loopStart) {
    this._loopStart = this.toTicks(loopStart);

    if (this._loop) {
      this._rescheduleEvents();
    }
  }
});
/**
 *  The current progress of the loop interval.
 *  Returns 0 if the event is not started yet or
 *  it is not set to loop.
 *  @memberOf Tone.Event#
 *  @type {NormalRange}
 *  @name progress
 *  @readOnly
 */

Object.defineProperty(_Tone.default.Event.prototype, "progress", {
  get: function () {
    if (this._loop) {
      var ticks = _Tone.default.Transport.ticks;

      var lastEvent = this._state.get(ticks);

      if (lastEvent !== null && lastEvent.state === _Tone.default.State.Started) {
        var loopDuration = this._getLoopDuration();

        var progress = (ticks - lastEvent.time) % loopDuration;
        return progress / loopDuration;
      } else {
        return 0;
      }
    } else {
      return 0;
    }
  }
});
/**
 *  Clean up
 *  @return  {Tone.Event}  this
 */

_Tone.default.Event.prototype.dispose = function () {
  this.cancel();

  this._state.dispose();

  this._state = null;
  this.callback = null;
  this.value = null;
};

var _default = _Tone.default.Event;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Transport":"../node_modules/tone/tone/core/Transport.js","../type/Type":"../node_modules/tone/tone/type/Type.js","../core/TimelineState":"../node_modules/tone/tone/core/TimelineState.js"}],"../node_modules/tone/tone/event/Loop.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../event/Event");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Loop creates a looped callback at the 
 *         specified interval. The callback can be 
 *         started, stopped and scheduled along
 *         the Transport's timeline. 
 *  @example
 * var loop = new Tone.Loop(function(time){
 * 	//triggered every eighth note. 
 * 	console.log(time);
 * }, "8n").start(0);
 * Tone.Transport.start();
 *  @extends {Tone}
 *  @param {Function} callback The callback to invoke with the event.
 *  @param {Time} interval The time between successive callback calls. 
 */
_Tone.default.Loop = function () {
  var options = _Tone.default.defaults(arguments, ["callback", "interval"], _Tone.default.Loop);

  _Tone.default.call(this);
  /**
   *  The event which produces the callbacks
   */


  this._event = new _Tone.default.Event({
    "callback": this._tick.bind(this),
    "loop": true,
    "loopEnd": options.interval,
    "playbackRate": options.playbackRate,
    "probability": options.probability
  });
  /**
   *  The callback to invoke with the next event in the pattern
   *  @type {Function}
   */

  this.callback = options.callback; //set the iterations

  this.iterations = options.iterations;
};

_Tone.default.extend(_Tone.default.Loop);
/**
 *  The defaults
 *  @const
 *  @type  {Object}
 */


_Tone.default.Loop.defaults = {
  "interval": "4n",
  "callback": _Tone.default.noOp,
  "playbackRate": 1,
  "iterations": Infinity,
  "probability": true,
  "mute": false
};
/**
 *  Start the loop at the specified time along the Transport's
 *  timeline.
 *  @param  {TimelinePosition=}  time  When to start the Loop.
 *  @return  {Tone.Loop}  this
 */

_Tone.default.Loop.prototype.start = function (time) {
  this._event.start(time);

  return this;
};
/**
 *  Stop the loop at the given time.
 *  @param  {TimelinePosition=}  time  When to stop the Loop.
 *  @return  {Tone.Loop}  this
 */


_Tone.default.Loop.prototype.stop = function (time) {
  this._event.stop(time);

  return this;
};
/**
 *  Cancel all scheduled events greater than or equal to the given time
 *  @param  {TimelinePosition}  [time=0]  The time after which events will be cancel.
 *  @return  {Tone.Loop}  this
 */


_Tone.default.Loop.prototype.cancel = function (time) {
  this._event.cancel(time);

  return this;
};
/**
 *  Internal function called when the notes should be called
 *  @param  {Number}  time  The time the event occurs
 *  @private
 */


_Tone.default.Loop.prototype._tick = function (time) {
  this.callback(time);
};
/**
 *  The state of the Loop, either started or stopped.
 *  @memberOf Tone.Loop#
 *  @type {String}
 *  @name state
 *  @readOnly
 */


Object.defineProperty(_Tone.default.Loop.prototype, "state", {
  get: function () {
    return this._event.state;
  }
});
/**
 *  The progress of the loop as a value between 0-1. 0, when
 *  the loop is stopped or done iterating. 
 *  @memberOf Tone.Loop#
 *  @type {NormalRange}
 *  @name progress
 *  @readOnly
 */

Object.defineProperty(_Tone.default.Loop.prototype, "progress", {
  get: function () {
    return this._event.progress;
  }
});
/**
 *  The time between successive callbacks. 
 *  @example
 * loop.interval = "8n"; //loop every 8n
 *  @memberOf Tone.Loop#
 *  @type {Time}
 *  @name interval
 */

Object.defineProperty(_Tone.default.Loop.prototype, "interval", {
  get: function () {
    return this._event.loopEnd;
  },
  set: function (interval) {
    this._event.loopEnd = interval;
  }
});
/**
 *  The playback rate of the loop. The normal playback rate is 1 (no change). 
 *  A `playbackRate` of 2 would be twice as fast. 
 *  @memberOf Tone.Loop#
 *  @type {Time}
 *  @name playbackRate
 */

Object.defineProperty(_Tone.default.Loop.prototype, "playbackRate", {
  get: function () {
    return this._event.playbackRate;
  },
  set: function (rate) {
    this._event.playbackRate = rate;
  }
});
/**
 *  Random variation +/-0.01s to the scheduled time. 
 *  Or give it a time value which it will randomize by.
 *  @type {Boolean|Time}
 *  @memberOf Tone.Loop#
 *  @name humanize
 */

Object.defineProperty(_Tone.default.Loop.prototype, "humanize", {
  get: function () {
    return this._event.humanize;
  },
  set: function (variation) {
    this._event.humanize = variation;
  }
});
/**
 *  The probably of the callback being invoked.
 *  @memberOf Tone.Loop#
 *  @type {NormalRange}
 *  @name probability
 */

Object.defineProperty(_Tone.default.Loop.prototype, "probability", {
  get: function () {
    return this._event.probability;
  },
  set: function (prob) {
    this._event.probability = prob;
  }
});
/**
 *  Muting the Loop means that no callbacks are invoked.
 *  @memberOf Tone.Loop#
 *  @type {Boolean}
 *  @name mute
 */

Object.defineProperty(_Tone.default.Loop.prototype, "mute", {
  get: function () {
    return this._event.mute;
  },
  set: function (mute) {
    this._event.mute = mute;
  }
});
/**
 *  The number of iterations of the loop. The default
 *  value is Infinity (loop forever).
 *  @memberOf Tone.Loop#
 *  @type {Positive}
 *  @name iterations
 */

Object.defineProperty(_Tone.default.Loop.prototype, "iterations", {
  get: function () {
    if (this._event.loop === true) {
      return Infinity;
    } else {
      return this._event.loop;
    }
  },
  set: function (iters) {
    if (iters === Infinity) {
      this._event.loop = true;
    } else {
      this._event.loop = iters;
    }
  }
});
/**
 *  Clean up
 *  @return  {Tone.Loop}  this
 */

_Tone.default.Loop.prototype.dispose = function () {
  this._event.dispose();

  this._event = null;
  this.callback = null;
};

var _default = _Tone.default.Loop;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../event/Event":"../node_modules/tone/tone/event/Event.js"}],"../node_modules/tone/tone/event/Part.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../event/Event");

require("../type/Type");

require("../core/Transport");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Part is a collection Tone.Events which can be
 *         started/stopped and looped as a single unit.
 *
 *  @extends {Tone.Event}
 *  @param {Function} callback The callback to invoke on each event
 *  @param {Array} events the array of events
 *  @example
 * var part = new Tone.Part(function(time, note){
 * 	//the notes given as the second element in the array
 * 	//will be passed in as the second argument
 * 	synth.triggerAttackRelease(note, "8n", time);
 * }, [[0, "C2"], ["0:2", "C3"], ["0:3:2", "G2"]]);
 *  @example
 * //use an array of objects as long as the object has a "time" attribute
 * var part = new Tone.Part(function(time, value){
 * 	//the value is an object which contains both the note and the velocity
 * 	synth.triggerAttackRelease(value.note, "8n", time, value.velocity);
 * }, [{"time" : 0, "note" : "C3", "velocity": 0.9},
 * 	   {"time" : "0:2", "note" : "C4", "velocity": 0.5}
 * ]).start(0);
 */
_Tone.default.Part = function () {
  var options = _Tone.default.defaults(arguments, ["callback", "events"], _Tone.default.Part);

  _Tone.default.Event.call(this, options);
  /**
   *  An array of Objects.
   *  @type  {Array}
   *  @private
   */


  this._events = []; //add the events

  for (var i = 0; i < options.events.length; i++) {
    if (Array.isArray(options.events[i])) {
      this.add(options.events[i][0], options.events[i][1]);
    } else {
      this.add(options.events[i]);
    }
  }
};

_Tone.default.extend(_Tone.default.Part, _Tone.default.Event);
/**
 *  The default values
 *  @type  {Object}
 *  @const
 */


_Tone.default.Part.defaults = {
  "callback": _Tone.default.noOp,
  "loop": false,
  "loopEnd": "1m",
  "loopStart": 0,
  "playbackRate": 1,
  "probability": 1,
  "humanize": false,
  "mute": false,
  "events": []
};
/**
 *  Start the part at the given time.
 *  @param  {TransportTime}  time    When to start the part.
 *  @param  {Time=}  offset  The offset from the start of the part
 *                           to begin playing at.
 *  @return  {Tone.Part}  this
 */

_Tone.default.Part.prototype.start = function (time, offset) {
  var ticks = this.toTicks(time);

  if (this._state.getValueAtTime(ticks) !== _Tone.default.State.Started) {
    if (this._loop) {
      offset = _Tone.default.defaultArg(offset, this._loopStart);
    } else {
      offset = _Tone.default.defaultArg(offset, 0);
    }

    offset = this.toTicks(offset);

    this._state.add({
      "state": _Tone.default.State.Started,
      "time": ticks,
      "offset": offset
    });

    this._forEach(function (event) {
      this._startNote(event, ticks, offset);
    });
  }

  return this;
};
/**
 *  Start the event in the given event at the correct time given
 *  the ticks and offset and looping.
 *  @param  {Tone.Event}  event
 *  @param  {Ticks}  ticks
 *  @param  {Ticks}  offset
 *  @private
 */


_Tone.default.Part.prototype._startNote = function (event, ticks, offset) {
  ticks -= offset;

  if (this._loop) {
    if (event.startOffset >= this._loopStart && event.startOffset < this._loopEnd) {
      if (event.startOffset < offset) {
        //start it on the next loop
        ticks += this._getLoopDuration();
      }

      event.start(_Tone.default.Ticks(ticks));
    } else if (event.startOffset < this._loopStart && event.startOffset >= offset) {
      event.loop = false;
      event.start(_Tone.default.Ticks(ticks));
    }
  } else if (event.startOffset >= offset) {
    event.start(_Tone.default.Ticks(ticks));
  }
};
/**
 *  The start from the scheduled start time
 *  @type {Ticks}
 *  @memberOf Tone.Part#
 *  @name startOffset
 *  @private
 */


Object.defineProperty(_Tone.default.Part.prototype, "startOffset", {
  get: function () {
    return this._startOffset;
  },
  set: function (offset) {
    this._startOffset = offset;

    this._forEach(function (event) {
      event.startOffset += this._startOffset;
    });
  }
});
/**
 *  Stop the part at the given time.
 *  @param  {TimelinePosition}  time  When to stop the part.
 *  @return  {Tone.Part}  this
 */

_Tone.default.Part.prototype.stop = function (time) {
  var ticks = this.toTicks(time);

  this._state.cancel(ticks);

  this._state.setStateAtTime(_Tone.default.State.Stopped, ticks);

  this._forEach(function (event) {
    event.stop(time);
  });

  return this;
};
/**
 *  Get/Set an Event's value at the given time.
 *  If a value is passed in and no event exists at
 *  the given time, one will be created with that value.
 *  If two events are at the same time, the first one will
 *  be returned.
 *  @example
 * part.at("1m"); //returns the part at the first measure
 *
 * part.at("2m", "C2"); //set the value at "2m" to C2.
 * //if an event didn't exist at that time, it will be created.
 *  @param {TransportTime} time The time of the event to get or set.
 *  @param {*=} value If a value is passed in, the value of the
 *                    event at the given time will be set to it.
 *  @return {Tone.Event} the event at the time
 */


_Tone.default.Part.prototype.at = function (time, value) {
  time = _Tone.default.TransportTime(time);

  var tickTime = _Tone.default.Ticks(1).toSeconds();

  for (var i = 0; i < this._events.length; i++) {
    var event = this._events[i];

    if (Math.abs(time.toTicks() - event.startOffset) < tickTime) {
      if (_Tone.default.isDefined(value)) {
        event.value = value;
      }

      return event;
    }
  } //if there was no event at that time, create one


  if (_Tone.default.isDefined(value)) {
    this.add(time, value); //return the new event

    return this._events[this._events.length - 1];
  } else {
    return null;
  }
};
/**
 *  Add a an event to the part.
 *  @param {Time} time The time the note should start.
 *                            If an object is passed in, it should
 *                            have a 'time' attribute and the rest
 *                            of the object will be used as the 'value'.
 *  @param  {Tone.Event|*}  value
 *  @returns {Tone.Part} this
 *  @example
 * part.add("1m", "C#+11");
 */


_Tone.default.Part.prototype.add = function (time, value) {
  //extract the parameters
  if (time.hasOwnProperty("time")) {
    value = time;
    time = value.time;
  }

  time = this.toTicks(time);
  var event;

  if (value instanceof _Tone.default.Event) {
    event = value;
    event.callback = this._tick.bind(this);
  } else {
    event = new _Tone.default.Event({
      "callback": this._tick.bind(this),
      "value": value
    });
  } //the start offset


  event.startOffset = time; //initialize the values

  event.set({
    "loopEnd": this.loopEnd,
    "loopStart": this.loopStart,
    "loop": this.loop,
    "humanize": this.humanize,
    "playbackRate": this.playbackRate,
    "probability": this.probability
  });

  this._events.push(event); //start the note if it should be played right now


  this._restartEvent(event);

  return this;
};
/**
 *  Restart the given event
 *  @param  {Tone.Event}  event
 *  @private
 */


_Tone.default.Part.prototype._restartEvent = function (event) {
  this._state.forEach(function (stateEvent) {
    if (stateEvent.state === _Tone.default.State.Started) {
      this._startNote(event, stateEvent.time, stateEvent.offset);
    } else {
      //stop the note
      event.stop(_Tone.default.Ticks(stateEvent.time));
    }
  }.bind(this));
};
/**
 *  Remove an event from the part. If the event at that time is a Tone.Part,
 *  it will remove the entire part.
 *  @param {Time} time The time of the event
 *  @param {*} value Optionally select only a specific event value
 *  @return  {Tone.Part}  this
 */


_Tone.default.Part.prototype.remove = function (time, value) {
  //extract the parameters
  if (time.hasOwnProperty("time")) {
    value = time;
    time = value.time;
  }

  time = this.toTicks(time);

  for (var i = this._events.length - 1; i >= 0; i--) {
    var event = this._events[i];

    if (event.startOffset === time) {
      if (_Tone.default.isUndef(value) || _Tone.default.isDefined(value) && event.value === value) {
        this._events.splice(i, 1);

        event.dispose();
      }
    }
  }

  return this;
};
/**
 *  Remove all of the notes from the group.
 *  @return  {Tone.Part}  this
 */


_Tone.default.Part.prototype.removeAll = function () {
  this._forEach(function (event) {
    event.dispose();
  });

  this._events = [];
  return this;
};
/**
 *  Cancel scheduled state change events: i.e. "start" and "stop".
 *  @param {TimelinePosition} after The time after which to cancel the scheduled events.
 *  @return  {Tone.Part}  this
 */


_Tone.default.Part.prototype.cancel = function (after) {
  this._forEach(function (event) {
    event.cancel(after);
  });

  this._state.cancel(this.toTicks(after));

  return this;
};
/**
 *  Iterate over all of the events
 *  @param {Function} callback
 *  @param {Object} ctx The context
 *  @private
 */


_Tone.default.Part.prototype._forEach = function (callback, ctx) {
  if (this._events) {
    ctx = _Tone.default.defaultArg(ctx, this);

    for (var i = this._events.length - 1; i >= 0; i--) {
      var e = this._events[i];

      if (e instanceof _Tone.default.Part) {
        e._forEach(callback, ctx);
      } else {
        callback.call(ctx, e);
      }
    }
  }

  return this;
};
/**
 *  Set the attribute of all of the events
 *  @param  {String}  attr  the attribute to set
 *  @param  {*}  value      The value to set it to
 *  @private
 */


_Tone.default.Part.prototype._setAll = function (attr, value) {
  this._forEach(function (event) {
    event[attr] = value;
  });
};
/**
 *  Internal tick method
 *  @param  {Number}  time  The time of the event in seconds
 *  @private
 */


_Tone.default.Part.prototype._tick = function (time, value) {
  if (!this.mute) {
    this.callback(time, value);
  }
};
/**
 *  Determine if the event should be currently looping
 *  given the loop boundries of this Part.
 *  @param  {Tone.Event}  event  The event to test
 *  @private
 */


_Tone.default.Part.prototype._testLoopBoundries = function (event) {
  if (this._loop && (event.startOffset < this._loopStart || event.startOffset >= this._loopEnd)) {
    event.cancel(0);
  } else if (event.state === _Tone.default.State.Stopped) {
    //reschedule it if it's stopped
    this._restartEvent(event);
  }
};
/**
 *  The probability of the notes being triggered.
 *  @memberOf Tone.Part#
 *  @type {NormalRange}
 *  @name probability
 */


Object.defineProperty(_Tone.default.Part.prototype, "probability", {
  get: function () {
    return this._probability;
  },
  set: function (prob) {
    this._probability = prob;

    this._setAll("probability", prob);
  }
});
/**
 *  If set to true, will apply small random variation
 *  to the callback time. If the value is given as a time, it will randomize
 *  by that amount.
 *  @example
 * event.humanize = true;
 *  @type {Boolean|Time}
 *  @name humanize
 *  @memberof Tone.Part#
 */

Object.defineProperty(_Tone.default.Part.prototype, "humanize", {
  get: function () {
    return this._humanize;
  },
  set: function (variation) {
    this._humanize = variation;

    this._setAll("humanize", variation);
  }
});
/**
 *  If the part should loop or not
 *  between Tone.Part.loopStart and
 *  Tone.Part.loopEnd. If set to true,
 *  the part will loop indefinitely,
 *  if set to a number greater than 1
 *  it will play a specific number of
 *  times, if set to false, 0 or 1, the
 *  part will only play once.
 *  @memberOf Tone.Part#
 *  @type {Boolean|Positive}
 *  @name loop
 *  @example
 * //loop the part 8 times
 * part.loop = 8;
 */

Object.defineProperty(_Tone.default.Part.prototype, "loop", {
  get: function () {
    return this._loop;
  },
  set: function (loop) {
    this._loop = loop;

    this._forEach(function (event) {
      event._loopStart = this._loopStart;
      event._loopEnd = this._loopEnd;
      event.loop = loop;

      this._testLoopBoundries(event);
    });
  }
});
/**
 *  The loopEnd point determines when it will
 *  loop if Tone.Part.loop is true.
 *  @memberOf Tone.Part#
 *  @type {Time}
 *  @name loopEnd
 */

Object.defineProperty(_Tone.default.Part.prototype, "loopEnd", {
  get: function () {
    return _Tone.default.Ticks(this._loopEnd).toSeconds();
  },
  set: function (loopEnd) {
    this._loopEnd = this.toTicks(loopEnd);

    if (this._loop) {
      this._forEach(function (event) {
        event.loopEnd = loopEnd;

        this._testLoopBoundries(event);
      });
    }
  }
});
/**
 *  The loopStart point determines when it will
 *  loop if Tone.Part.loop is true.
 *  @memberOf Tone.Part#
 *  @type {Time}
 *  @name loopStart
 */

Object.defineProperty(_Tone.default.Part.prototype, "loopStart", {
  get: function () {
    return _Tone.default.Ticks(this._loopStart).toSeconds();
  },
  set: function (loopStart) {
    this._loopStart = this.toTicks(loopStart);

    if (this._loop) {
      this._forEach(function (event) {
        event.loopStart = this.loopStart;

        this._testLoopBoundries(event);
      });
    }
  }
});
/**
 * 	The playback rate of the part
 *  @memberOf Tone.Part#
 *  @type {Positive}
 *  @name playbackRate
 */

Object.defineProperty(_Tone.default.Part.prototype, "playbackRate", {
  get: function () {
    return this._playbackRate;
  },
  set: function (rate) {
    this._playbackRate = rate;

    this._setAll("playbackRate", rate);
  }
});
/**
 * 	The number of scheduled notes in the part.
 *  @memberOf Tone.Part#
 *  @type {Positive}
 *  @name length
 *  @readOnly
 */

Object.defineProperty(_Tone.default.Part.prototype, "length", {
  get: function () {
    return this._events.length;
  }
});
/**
 *  Clean up
 *  @return  {Tone.Part}  this
 */

_Tone.default.Part.prototype.dispose = function () {
  _Tone.default.Event.prototype.dispose.call(this);

  this.removeAll();
  this.callback = null;
  this._events = null;
  return this;
};

var _default = _Tone.default.Part;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../event/Event":"../node_modules/tone/tone/event/Event.js","../type/Type":"../node_modules/tone/tone/type/Type.js","../core/Transport":"../node_modules/tone/tone/core/Transport.js"}],"../node_modules/tone/tone/event/Pattern.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../event/Loop");

require("../control/CtrlPattern");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Pattern arpeggiates between the given notes
 *         in a number of patterns. See Tone.CtrlPattern for
 *         a full list of patterns.
 *  @example
 * var pattern = new Tone.Pattern(function(time, note){
 *   //the order of the notes passed in depends on the pattern
 * }, ["C2", "D4", "E5", "A6"], "upDown");
 *  @extends {Tone.Loop}
 *  @param {Function} callback The callback to invoke with the event.
 *  @param {Array} values The values to arpeggiate over.
 */
_Tone.default.Pattern = function () {
  var options = _Tone.default.defaults(arguments, ["callback", "values", "pattern"], _Tone.default.Pattern);

  _Tone.default.Loop.call(this, options);
  /**
   *  The pattern manager
   *  @type {Tone.CtrlPattern}
   *  @private
   */


  this._pattern = new _Tone.default.CtrlPattern({
    "values": options.values,
    "type": options.pattern,
    "index": options.index
  });
};

_Tone.default.extend(_Tone.default.Pattern, _Tone.default.Loop);
/**
 *  The defaults
 *  @const
 *  @type  {Object}
 */


_Tone.default.Pattern.defaults = {
  "pattern": _Tone.default.CtrlPattern.Type.Up,
  "callback": _Tone.default.noOp,
  "values": []
};
/**
 *  Internal function called when the notes should be called
 *  @param  {Number}  time  The time the event occurs
 *  @private
 */

_Tone.default.Pattern.prototype._tick = function (time) {
  this.callback(time, this._pattern.value);

  this._pattern.next();
};
/**
 *  The current index in the values array.
 *  @memberOf Tone.Pattern#
 *  @type {Positive}
 *  @name index
 */


Object.defineProperty(_Tone.default.Pattern.prototype, "index", {
  get: function () {
    return this._pattern.index;
  },
  set: function (i) {
    this._pattern.index = i;
  }
});
/**
 *  The array of events.
 *  @memberOf Tone.Pattern#
 *  @type {Array}
 *  @name values
 */

Object.defineProperty(_Tone.default.Pattern.prototype, "values", {
  get: function () {
    return this._pattern.values;
  },
  set: function (vals) {
    this._pattern.values = vals;
  }
});
/**
 *  The current value of the pattern.
 *  @memberOf Tone.Pattern#
 *  @type {*}
 *  @name value
 *  @readOnly
 */

Object.defineProperty(_Tone.default.Pattern.prototype, "value", {
  get: function () {
    return this._pattern.value;
  }
});
/**
 *  The pattern type. See Tone.CtrlPattern for the full list of patterns.
 *  @memberOf Tone.Pattern#
 *  @type {String}
 *  @name pattern
 */

Object.defineProperty(_Tone.default.Pattern.prototype, "pattern", {
  get: function () {
    return this._pattern.type;
  },
  set: function (pattern) {
    this._pattern.type = pattern;
  }
});
/**
 *  Clean up
 *  @return  {Tone.Pattern}  this
 */

_Tone.default.Pattern.prototype.dispose = function () {
  _Tone.default.Loop.prototype.dispose.call(this);

  this._pattern.dispose();

  this._pattern = null;
};

var _default = _Tone.default.Pattern;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../event/Loop":"../node_modules/tone/tone/event/Loop.js","../control/CtrlPattern":"../node_modules/tone/tone/control/CtrlPattern.js"}],"../node_modules/tone/tone/event/Sequence.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../event/Part");

require("../core/Transport");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class A sequence is an alternate notation of a part. Instead
 *         of passing in an array of [time, event] pairs, pass
 *         in an array of events which will be spaced at the
 *         given subdivision. Sub-arrays will subdivide that beat
 *         by the number of items are in the array.
 *         Sequence notation inspiration from [Tidal](http://yaxu.org/tidal/)
 *  @param  {Function}  callback  The callback to invoke with every note
 *  @param  {Array}    events  The sequence
 *  @param  {Time} subdivision  The subdivision between which events are placed.
 *  @extends {Tone.Part}
 *  @example
 * var seq = new Tone.Sequence(function(time, note){
 * 	console.log(note);
 * //straight quater notes
 * }, ["C4", "E4", "G4", "A4"], "4n");
 *  @example
 * var seq = new Tone.Sequence(function(time, note){
 * 	console.log(note);
 * //subdivisions are given as subarrays
 * }, ["C4", ["E4", "D4", "E4"], "G4", ["A4", "G4"]]);
 */
_Tone.default.Sequence = function () {
  var options = _Tone.default.defaults(arguments, ["callback", "events", "subdivision"], _Tone.default.Sequence); //remove the events


  var events = options.events;
  delete options.events;

  _Tone.default.Part.call(this, options);
  /**
   *  The subdivison of each note
   *  @type  {Ticks}
   *  @private
   */


  this._subdivision = this.toTicks(options.subdivision); //if no time was passed in, the loop end is the end of the cycle

  if (_Tone.default.isUndef(options.loopEnd) && _Tone.default.isDefined(events)) {
    this._loopEnd = events.length * this._subdivision;
  } //defaults to looping


  this._loop = true; //add all of the events

  if (_Tone.default.isDefined(events)) {
    for (var i = 0; i < events.length; i++) {
      this.add(i, events[i]);
    }
  }
};

_Tone.default.extend(_Tone.default.Sequence, _Tone.default.Part);
/**
 *  The default values.
 *  @type  {Object}
 */


_Tone.default.Sequence.defaults = {
  "subdivision": "4n"
};
/**
 *  The subdivision of the sequence. This can only be
 *  set in the constructor. The subdivision is the
 *  interval between successive steps.
 *  @type {Time}
 *  @memberOf Tone.Sequence#
 *  @name subdivision
 *  @readOnly
 */

Object.defineProperty(_Tone.default.Sequence.prototype, "subdivision", {
  get: function () {
    return _Tone.default.Ticks(this._subdivision).toSeconds();
  }
});
/**
 *  Get/Set an index of the sequence. If the index contains a subarray,
 *  a Tone.Sequence representing that sub-array will be returned.
 *  @example
 * var sequence = new Tone.Sequence(playNote, ["E4", "C4", "F#4", ["A4", "Bb3"]])
 * sequence.at(0)// => returns "E4"
 * //set a value
 * sequence.at(0, "G3");
 * //get a nested sequence
 * sequence.at(3).at(1)// => returns "Bb3"
 * @param {Positive} index The index to get or set
 * @param {*} value Optionally pass in the value to set at the given index.
 */

_Tone.default.Sequence.prototype.at = function (index, value) {
  //if the value is an array,
  if (_Tone.default.isArray(value)) {
    //remove the current event at that index
    this.remove(index);
  } //call the parent's method


  return _Tone.default.Part.prototype.at.call(this, this._indexTime(index), value);
};
/**
 *  Add an event at an index, if there's already something
 *  at that index, overwrite it. If `value` is an array,
 *  it will be parsed as a subsequence.
 *  @param {Number} index The index to add the event to
 *  @param {*} value The value to add at that index
 *  @returns {Tone.Sequence} this
 */


_Tone.default.Sequence.prototype.add = function (index, value) {
  if (value === null) {
    return this;
  }

  if (_Tone.default.isArray(value)) {
    //make a subsequence and add that to the sequence
    var subSubdivision = Math.round(this._subdivision / value.length);
    value = new _Tone.default.Sequence(this._tick.bind(this), value, _Tone.default.Ticks(subSubdivision));
  }

  _Tone.default.Part.prototype.add.call(this, this._indexTime(index), value);

  return this;
};
/**
 *  Remove a value from the sequence by index
 *  @param {Number} index The index of the event to remove
 *  @returns {Tone.Sequence} this
 */


_Tone.default.Sequence.prototype.remove = function (index, value) {
  _Tone.default.Part.prototype.remove.call(this, this._indexTime(index), value);

  return this;
};
/**
 *  Get the time of the index given the Sequence's subdivision
 *  @param  {Number}  index
 *  @return  {Time}  The time of that index
 *  @private
 */


_Tone.default.Sequence.prototype._indexTime = function (index) {
  if (index instanceof _Tone.default.TransportTime) {
    return index;
  } else {
    return _Tone.default.Ticks(index * this._subdivision + this.startOffset).toSeconds();
  }
};
/**
 *  Clean up.
 *  @return {Tone.Sequence} this
 */


_Tone.default.Sequence.prototype.dispose = function () {
  _Tone.default.Part.prototype.dispose.call(this);

  return this;
};

var _default = _Tone.default.Sequence;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../event/Part":"../node_modules/tone/tone/event/Part.js","../core/Transport":"../node_modules/tone/tone/core/Transport.js"}],"../node_modules/tone/tone/source/PulseOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../source/Source");

require("../source/Oscillator");

require("../signal/Signal");

require("../signal/WaveShaper");

require("../core/Gain");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.PulseOscillator is a pulse oscillator with control over pulse width,
 *         also known as the duty cycle. At 50% duty cycle (width = 0.5) the wave is
 *         a square and only odd-numbered harmonics are present. At all other widths
 *         even-numbered harmonics are present. Read more
 *         [here](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).
 *
 *  @constructor
 *  @extends {Tone.Source}
 *  @param {Frequency} [frequency] The frequency of the oscillator
 *  @param {NormalRange} [width] The width of the pulse
 *  @example
 * var pulse = new Tone.PulseOscillator("E5", 0.4).toMaster().start();
 */
_Tone.default.PulseOscillator = function () {
  var options = _Tone.default.defaults(arguments, ["frequency", "width"], _Tone.default.Oscillator);

  _Tone.default.Source.call(this, options);
  /**
   *  The width of the pulse.
   *  @type {NormalRange}
   *  @signal
   */


  this.width = new _Tone.default.Signal(options.width, _Tone.default.Type.NormalRange);
  /**
   *  gate the width amount
   *  @type {Tone.Gain}
   *  @private
   */

  this._widthGate = new _Tone.default.Gain(0);
  /**
   *  the sawtooth oscillator
   *  @type {Tone.Oscillator}
   *  @private
   */

  this._sawtooth = new _Tone.default.Oscillator({
    frequency: options.frequency,
    detune: options.detune,
    type: "sawtooth",
    phase: options.phase
  });
  /**
   *  The frequency control.
   *  @type {Frequency}
   *  @signal
   */

  this.frequency = this._sawtooth.frequency;
  /**
   *  The detune in cents.
   *  @type {Cents}
   *  @signal
   */

  this.detune = this._sawtooth.detune;
  /**
   *  Threshold the signal to turn it into a square
   *  @type {Tone.WaveShaper}
   *  @private
   */

  this._thresh = new _Tone.default.WaveShaper(function (val) {
    if (val < 0) {
      return -1;
    } else {
      return 1;
    }
  }); //connections

  this._sawtooth.chain(this._thresh, this.output);

  this.width.chain(this._widthGate, this._thresh);

  this._readOnly(["width", "frequency", "detune"]);
};

_Tone.default.extend(_Tone.default.PulseOscillator, _Tone.default.Source);
/**
 *  The default parameters.
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.PulseOscillator.defaults = {
  "frequency": 440,
  "detune": 0,
  "phase": 0,
  "width": 0.2
};
/**
 *  start the oscillator
 *  @param  {Time} time
 *  @private
 */

_Tone.default.PulseOscillator.prototype._start = function (time) {
  time = this.toSeconds(time);

  this._sawtooth.start(time);

  this._widthGate.gain.setValueAtTime(1, time);
};
/**
 *  stop the oscillator
 *  @param  {Time} time
 *  @private
 */


_Tone.default.PulseOscillator.prototype._stop = function (time) {
  time = this.toSeconds(time);

  this._sawtooth.stop(time); //the width is still connected to the output.
  //that needs to be stopped also


  this._widthGate.gain.setValueAtTime(0, time);
};
/**
 *  restart the oscillator
 *  @param  {Time} time (optional) timing parameter
 *  @private
 */


_Tone.default.PulseOscillator.prototype.restart = function (time) {
  this._sawtooth.restart(time);

  this._widthGate.gain.cancelScheduledValues(time);

  this._widthGate.gain.setValueAtTime(1, time);
};
/**
 * The phase of the oscillator in degrees.
 * @memberOf Tone.PulseOscillator#
 * @type {Degrees}
 * @name phase
 */


Object.defineProperty(_Tone.default.PulseOscillator.prototype, "phase", {
  get: function () {
    return this._sawtooth.phase;
  },
  set: function (phase) {
    this._sawtooth.phase = phase;
  }
});
/**
 * The type of the oscillator. Always returns "pulse".
 * @readOnly
 * @memberOf Tone.PulseOscillator#
 * @type {string}
 * @name type
 */

Object.defineProperty(_Tone.default.PulseOscillator.prototype, "type", {
  get: function () {
    return "pulse";
  }
});
/**
 * The baseType of the oscillator. Always returns "pulse".
 * @readOnly
 * @memberOf Tone.PulseOscillator#
 * @type {string}
 * @name baseType
 */

Object.defineProperty(_Tone.default.PulseOscillator.prototype, "baseType", {
  get: function () {
    return "pulse";
  }
});
/**
 * The partials of the waveform. Cannot set partials for this waveform type
 * @memberOf Tone.PulseOscillator#
 * @type {Array}
 * @name partials
 * @private
 */

Object.defineProperty(_Tone.default.PulseOscillator.prototype, "partials", {
  get: function () {
    return [];
  }
});
/**
 *  Clean up method.
 *  @return {Tone.PulseOscillator} this
 */

_Tone.default.PulseOscillator.prototype.dispose = function () {
  _Tone.default.Source.prototype.dispose.call(this);

  this._sawtooth.dispose();

  this._sawtooth = null;

  this._writable(["width", "frequency", "detune"]);

  this.width.dispose();
  this.width = null;

  this._widthGate.dispose();

  this._widthGate = null;

  this._thresh.dispose();

  this._thresh = null;
  this.frequency = null;
  this.detune = null;
  return this;
};

var _default = _Tone.default.PulseOscillator;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../source/Source":"../node_modules/tone/tone/source/Source.js","../source/Oscillator":"../node_modules/tone/tone/source/Oscillator.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../signal/WaveShaper":"../node_modules/tone/tone/signal/WaveShaper.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js"}],"../node_modules/tone/tone/source/PWMOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../source/Source");

require("../source/PulseOscillator");

require("../source/Oscillator");

require("../signal/Multiply");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.PWMOscillator modulates the width of a Tone.PulseOscillator
 *         at the modulationFrequency. This has the effect of continuously
 *         changing the timbre of the oscillator by altering the harmonics
 *         generated.
 *
 *  @extends {Tone.Source}
 *  @constructor
 *  @param {Frequency} frequency The starting frequency of the oscillator.
 *  @param {Frequency} modulationFrequency The modulation frequency of the width of the pulse.
 *  @example
 *  var pwm = new Tone.PWMOscillator("Ab3", 0.3).toMaster().start();
 */
_Tone.default.PWMOscillator = function () {
  var options = _Tone.default.defaults(arguments, ["frequency", "modulationFrequency"], _Tone.default.PWMOscillator);

  _Tone.default.Source.call(this, options);
  /**
   *  the pulse oscillator
   *  @type {Tone.PulseOscillator}
   *  @private
   */


  this._pulse = new _Tone.default.PulseOscillator(options.modulationFrequency); //change the pulse oscillator type

  this._pulse._sawtooth.type = "sine";
  /**
   *  the modulator
   *  @type {Tone.Oscillator}
   *  @private
   */

  this._modulator = new _Tone.default.Oscillator({
    "frequency": options.frequency,
    "detune": options.detune,
    "phase": options.phase
  });
  /**
   *  Scale the oscillator so it doesn't go silent
   *  at the extreme values.
   *  @type {Tone.Multiply}
   *  @private
   */

  this._scale = new _Tone.default.Multiply(2);
  /**
   *  The frequency control.
   *  @type {Frequency}
   *  @signal
   */

  this.frequency = this._modulator.frequency;
  /**
   *  The detune of the oscillator.
   *  @type {Cents}
   *  @signal
   */

  this.detune = this._modulator.detune;
  /**
   *  The modulation rate of the oscillator.
   *  @type {Frequency}
   *  @signal
   */

  this.modulationFrequency = this._pulse.frequency; //connections

  this._modulator.chain(this._scale, this._pulse.width);

  this._pulse.connect(this.output);

  this._readOnly(["modulationFrequency", "frequency", "detune"]);
};

_Tone.default.extend(_Tone.default.PWMOscillator, _Tone.default.Source);
/**
 *  default values
 *  @static
 *  @type {Object}
 *  @const
 */


_Tone.default.PWMOscillator.defaults = {
  "frequency": 440,
  "detune": 0,
  "phase": 0,
  "modulationFrequency": 0.4
};
/**
 *  start the oscillator
 *  @param  {Time} [time=now]
 *  @private
 */

_Tone.default.PWMOscillator.prototype._start = function (time) {
  time = this.toSeconds(time);

  this._modulator.start(time);

  this._pulse.start(time);
};
/**
 *  stop the oscillator
 *  @param  {Time} time (optional) timing parameter
 *  @private
 */


_Tone.default.PWMOscillator.prototype._stop = function (time) {
  time = this.toSeconds(time);

  this._modulator.stop(time);

  this._pulse.stop(time);
};
/**
 *  restart the oscillator
 *  @param  {Time} time (optional) timing parameter
 *  @private
 */


_Tone.default.PWMOscillator.prototype.restart = function (time) {
  this._modulator.restart(time);

  this._pulse.restart(time);
};
/**
 * The type of the oscillator. Always returns "pwm".
 * @readOnly
 * @memberOf Tone.PWMOscillator#
 * @type {string}
 * @name type
 */


Object.defineProperty(_Tone.default.PWMOscillator.prototype, "type", {
  get: function () {
    return "pwm";
  }
});
/**
 * The baseType of the oscillator. Always returns "pwm".
 * @readOnly
 * @memberOf Tone.PWMOscillator#
 * @type {string}
 * @name baseType
 */

Object.defineProperty(_Tone.default.PWMOscillator.prototype, "baseType", {
  get: function () {
    return "pwm";
  }
});
/**
 * The partials of the waveform. Cannot set partials for this waveform type
 * @memberOf Tone.PWMOscillator#
 * @type {Array}
 * @name partials
 * @private
 */

Object.defineProperty(_Tone.default.PWMOscillator.prototype, "partials", {
  get: function () {
    return [];
  }
});
/**
 * The phase of the oscillator in degrees.
 * @memberOf Tone.PWMOscillator#
 * @type {number}
 * @name phase
 */

Object.defineProperty(_Tone.default.PWMOscillator.prototype, "phase", {
  get: function () {
    return this._modulator.phase;
  },
  set: function (phase) {
    this._modulator.phase = phase;
  }
});
/**
 *  Clean up.
 *  @return {Tone.PWMOscillator} this
 */

_Tone.default.PWMOscillator.prototype.dispose = function () {
  _Tone.default.Source.prototype.dispose.call(this);

  this._pulse.dispose();

  this._pulse = null;

  this._scale.dispose();

  this._scale = null;

  this._modulator.dispose();

  this._modulator = null;

  this._writable(["modulationFrequency", "frequency", "detune"]);

  this.frequency = null;
  this.detune = null;
  this.modulationFrequency = null;
  return this;
};

var _default = _Tone.default.PWMOscillator;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../source/Source":"../node_modules/tone/tone/source/Source.js","../source/PulseOscillator":"../node_modules/tone/tone/source/PulseOscillator.js","../source/Oscillator":"../node_modules/tone/tone/source/Oscillator.js","../signal/Multiply":"../node_modules/tone/tone/signal/Multiply.js"}],"../node_modules/tone/tone/source/FMOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../source/Source");

require("../source/Oscillator");

require("../signal/Multiply");

require("../core/Gain");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.FMOscillator
 *
 *  @extends {Tone.Source}
 *  @constructor
 *  @param {Frequency} frequency The starting frequency of the oscillator.
 *  @param {String} type The type of the carrier oscillator.
 *  @param {String} modulationType The type of the modulator oscillator.
 *  @example
 * //a sine oscillator frequency-modulated by a square wave
 * var fmOsc = new Tone.FMOscillator("Ab3", "sine", "square").toMaster().start();
 */
_Tone.default.FMOscillator = function () {
  var options = _Tone.default.defaults(arguments, ["frequency", "type", "modulationType"], _Tone.default.FMOscillator);

  _Tone.default.Source.call(this, options);
  /**
   *  The carrier oscillator
   *  @type {Tone.Oscillator}
   *  @private
   */


  this._carrier = new _Tone.default.Oscillator(options.frequency, options.type);
  /**
   *  The oscillator's frequency
   *  @type {Frequency}
   *  @signal
   */

  this.frequency = new _Tone.default.Signal(options.frequency, _Tone.default.Type.Frequency);
  /**
   *  The detune control signal.
   *  @type {Cents}
   *  @signal
   */

  this.detune = this._carrier.detune;
  this.detune.value = options.detune;
  /**
   *  The modulation index which is in essence the depth or amount of the modulation. In other terms it is the
   *  ratio of the frequency of the modulating signal (mf) to the amplitude of the
   *  modulating signal (ma) -- as in ma/mf.
   *	@type {Positive}
   *	@signal
   */

  this.modulationIndex = new _Tone.default.Multiply(options.modulationIndex);
  this.modulationIndex.units = _Tone.default.Type.Positive;
  /**
   *  The modulating oscillator
   *  @type  {Tone.Oscillator}
   *  @private
   */

  this._modulator = new _Tone.default.Oscillator(options.frequency, options.modulationType);
  /**
   *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.
   *  A harmonicity of 1 gives both oscillators the same frequency.
   *  Harmonicity = 2 means a change of an octave.
   *  @type {Positive}
   *  @signal
   *  @example
   * //pitch the modulator an octave below carrier
   * synth.harmonicity.value = 0.5;
   */

  this.harmonicity = new _Tone.default.Multiply(options.harmonicity);
  this.harmonicity.units = _Tone.default.Type.Positive;
  /**
   *  the node where the modulation happens
   *  @type {Tone.Gain}
   *  @private
   */

  this._modulationNode = new _Tone.default.Gain(0); //connections

  this.frequency.connect(this._carrier.frequency);
  this.frequency.chain(this.harmonicity, this._modulator.frequency);
  this.frequency.chain(this.modulationIndex, this._modulationNode);

  this._modulator.connect(this._modulationNode.gain);

  this._modulationNode.connect(this._carrier.frequency);

  this._carrier.connect(this.output);

  this.detune.connect(this._modulator.detune);
  this.phase = options.phase;

  this._readOnly(["modulationIndex", "frequency", "detune", "harmonicity"]);
};

_Tone.default.extend(_Tone.default.FMOscillator, _Tone.default.Source);
/**
 *  default values
 *  @static
 *  @type {Object}
 *  @const
 */


_Tone.default.FMOscillator.defaults = {
  "frequency": 440,
  "detune": 0,
  "phase": 0,
  "type": "sine",
  "modulationIndex": 2,
  "modulationType": "square",
  "harmonicity": 1
};
/**
 *  start the oscillator
 *  @param  {Time} [time=now]
 *  @private
 */

_Tone.default.FMOscillator.prototype._start = function (time) {
  this._modulator.start(time);

  this._carrier.start(time);
};
/**
 *  stop the oscillator
 *  @param  {Time} time (optional) timing parameter
 *  @private
 */


_Tone.default.FMOscillator.prototype._stop = function (time) {
  this._modulator.stop(time);

  this._carrier.stop(time);
};
/**
 *  stop the oscillator
 *  @param  {Time} time (optional) timing parameter
 *  @private
 */


_Tone.default.FMOscillator.prototype.restart = function (time) {
  this._modulator.restart(time);

  this._carrier.restart(time);
};
/**
 * The type of the carrier oscillator
 * @memberOf Tone.FMOscillator#
 * @type {string}
 * @name type
 */


Object.defineProperty(_Tone.default.FMOscillator.prototype, "type", {
  get: function () {
    return this._carrier.type;
  },
  set: function (type) {
    this._carrier.type = type;
  }
});
/**
 * The oscillator type without the partialsCount appended to the end
 * @memberOf Tone.FMOscillator#
 * @type {string}
 * @name baseType
 * @example
 * osc.type = 'sine2'
 * osc.baseType //'sine'
 * osc.partialCount = 2
 */

Object.defineProperty(_Tone.default.FMOscillator.prototype, "baseType", {
  get: function () {
    return this._carrier.baseType;
  },
  set: function (baseType) {
    this._carrier.baseType = baseType;
  }
});
/**
 * 'partialCount' offers an alternative way to set the number of used partials. 
 * When partialCount is 0, the maximum number of partials are used when representing
 * the waveform using the periodicWave. When 'partials' is set, this value is 
 * not settable, but equals the length of the partials array.
 * @memberOf Tone.FMOscillator#
 * @type {Number}
 * @name partialCount
 */

Object.defineProperty(_Tone.default.FMOscillator.prototype, "partialCount", {
  get: function () {
    return this._carrier.partialCount;
  },
  set: function (partialCount) {
    this._carrier.partialCount = partialCount;
  }
});
/**
 * The type of the modulator oscillator
 * @memberOf Tone.FMOscillator#
 * @type {String}
 * @name modulationType
 */

Object.defineProperty(_Tone.default.FMOscillator.prototype, "modulationType", {
  get: function () {
    return this._modulator.type;
  },
  set: function (type) {
    this._modulator.type = type;
  }
});
/**
 * The phase of the oscillator in degrees.
 * @memberOf Tone.FMOscillator#
 * @type {number}
 * @name phase
 */

Object.defineProperty(_Tone.default.FMOscillator.prototype, "phase", {
  get: function () {
    return this._carrier.phase;
  },
  set: function (phase) {
    this._carrier.phase = phase;
    this._modulator.phase = phase;
  }
});
/**
 * The partials of the carrier waveform. A partial represents
 * the amplitude at a harmonic. The first harmonic is the
 * fundamental frequency, the second is the octave and so on
 * following the harmonic series.
 * Setting this value will automatically set the type to "custom".
 * The value is an empty array when the type is not "custom".
 * @memberOf Tone.FMOscillator#
 * @type {Array}
 * @name partials
 * @example
 * osc.partials = [1, 0.2, 0.01];
 */

Object.defineProperty(_Tone.default.FMOscillator.prototype, "partials", {
  get: function () {
    return this._carrier.partials;
  },
  set: function (partials) {
    this._carrier.partials = partials;
  }
});
/**
 *  Clean up.
 *  @return {Tone.FMOscillator} this
 */

_Tone.default.FMOscillator.prototype.dispose = function () {
  _Tone.default.Source.prototype.dispose.call(this);

  this._writable(["modulationIndex", "frequency", "detune", "harmonicity"]);

  this.frequency.dispose();
  this.frequency = null;
  this.detune = null;
  this.harmonicity.dispose();
  this.harmonicity = null;

  this._carrier.dispose();

  this._carrier = null;

  this._modulator.dispose();

  this._modulator = null;

  this._modulationNode.dispose();

  this._modulationNode = null;
  this.modulationIndex.dispose();
  this.modulationIndex = null;
  return this;
};

var _default = _Tone.default.FMOscillator;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../source/Source":"../node_modules/tone/tone/source/Source.js","../source/Oscillator":"../node_modules/tone/tone/source/Oscillator.js","../signal/Multiply":"../node_modules/tone/tone/signal/Multiply.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js"}],"../node_modules/tone/tone/source/AMOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../source/Source");

require("../source/Oscillator");

require("../signal/Multiply");

require("../core/Gain");

require("../signal/AudioToGain");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.AMOscillator
 *
 *  @extends {Tone.Oscillator}
 *  @constructor
 *  @param {Frequency} frequency The starting frequency of the oscillator.
 *  @param {String} type The type of the carrier oscillator.
 *  @param {String} modulationType The type of the modulator oscillator.
 *  @example
 * //a sine oscillator frequency-modulated by a square wave
 * var fmOsc = new Tone.AMOscillator("Ab3", "sine", "square").toMaster().start();
 */
_Tone.default.AMOscillator = function () {
  var options = _Tone.default.defaults(arguments, ["frequency", "type", "modulationType"], _Tone.default.AMOscillator);

  _Tone.default.Source.call(this, options);
  /**
   *  The carrier oscillator
   *  @type {Tone.Oscillator}
   *  @private
   */


  this._carrier = new _Tone.default.Oscillator(options.frequency, options.type);
  /**
   *  The oscillator's frequency
   *  @type {Frequency}
   *  @signal
   */

  this.frequency = this._carrier.frequency;
  /**
   *  The detune control signal.
   *  @type {Cents}
   *  @signal
   */

  this.detune = this._carrier.detune;
  this.detune.value = options.detune;
  /**
   *  The modulating oscillator
   *  @type  {Tone.Oscillator}
   *  @private
   */

  this._modulator = new _Tone.default.Oscillator(options.frequency, options.modulationType);
  /**
   *  convert the -1,1 output to 0,1
   *  @type {Tone.AudioToGain}
   *  @private
   */

  this._modulationScale = new _Tone.default.AudioToGain();
  /**
   *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.
   *  A harmonicity of 1 gives both oscillators the same frequency.
   *  Harmonicity = 2 means a change of an octave.
   *  @type {Positive}
   *  @signal
   *  @example
   * //pitch the modulator an octave below carrier
   * synth.harmonicity.value = 0.5;
   */

  this.harmonicity = new _Tone.default.Multiply(options.harmonicity);
  this.harmonicity.units = _Tone.default.Type.Positive;
  /**
   *  the node where the modulation happens
   *  @type {Tone.Gain}
   *  @private
   */

  this._modulationNode = new _Tone.default.Gain(0); //connections

  this.frequency.chain(this.harmonicity, this._modulator.frequency);
  this.detune.connect(this._modulator.detune);

  this._modulator.chain(this._modulationScale, this._modulationNode.gain);

  this._carrier.chain(this._modulationNode, this.output);

  this.phase = options.phase;

  this._readOnly(["frequency", "detune", "harmonicity"]);
};

_Tone.default.extend(_Tone.default.AMOscillator, _Tone.default.Oscillator);
/**
 *  default values
 *  @static
 *  @type {Object}
 *  @const
 */


_Tone.default.AMOscillator.defaults = {
  "frequency": 440,
  "detune": 0,
  "phase": 0,
  "type": "sine",
  "modulationType": "square",
  "harmonicity": 1
};
/**
 *  start the oscillator
 *  @param  {Time} [time=now]
 *  @private
 */

_Tone.default.AMOscillator.prototype._start = function (time) {
  this._modulator.start(time);

  this._carrier.start(time);
};
/**
 *  stop the oscillator
 *  @param  {Time} time (optional) timing parameter
 *  @private
 */


_Tone.default.AMOscillator.prototype._stop = function (time) {
  this._modulator.stop(time);

  this._carrier.stop(time);
};
/**
 *  restart the oscillator
 *  @param  {Time} time (optional) timing parameter
 *  @private
 */


_Tone.default.AMOscillator.prototype.restart = function (time) {
  this._modulator.restart(time);

  this._carrier.restart(time);
};
/**
 * The type of the carrier oscillator
 * @memberOf Tone.AMOscillator#
 * @type {string}
 * @name type
 */


Object.defineProperty(_Tone.default.AMOscillator.prototype, "type", {
  get: function () {
    return this._carrier.type;
  },
  set: function (type) {
    this._carrier.type = type;
  }
});
/**
 * The oscillator type without the partialsCount appended to the end
 * @memberOf Tone.AMOscillator#
 * @type {string}
 * @name baseType
 * @example
 * osc.type = 'sine2'
 * osc.baseType //'sine'
 * osc.partialCount = 2
 */

Object.defineProperty(_Tone.default.AMOscillator.prototype, "baseType", {
  get: function () {
    return this._carrier.baseType;
  },
  set: function (baseType) {
    this._carrier.baseType = baseType;
  }
});
/**
 * 'partialCount' offers an alternative way to set the number of used partials. 
 * When partialCount is 0, the maximum number of partials are used when representing
 * the waveform using the periodicWave. When 'partials' is set, this value is 
 * not settable, but equals the length of the partials array.
 * @memberOf Tone.AMOscillator#
 * @type {Number}
 * @name partialCount
 */

Object.defineProperty(_Tone.default.AMOscillator.prototype, "partialCount", {
  get: function () {
    return this._carrier.partialCount;
  },
  set: function (partialCount) {
    this._carrier.partialCount = partialCount;
  }
});
/**
 * The type of the modulator oscillator
 * @memberOf Tone.AMOscillator#
 * @type {string}
 * @name modulationType
 */

Object.defineProperty(_Tone.default.AMOscillator.prototype, "modulationType", {
  get: function () {
    return this._modulator.type;
  },
  set: function (type) {
    this._modulator.type = type;
  }
});
/**
 * The phase of the oscillator in degrees.
 * @memberOf Tone.AMOscillator#
 * @type {number}
 * @name phase
 */

Object.defineProperty(_Tone.default.AMOscillator.prototype, "phase", {
  get: function () {
    return this._carrier.phase;
  },
  set: function (phase) {
    this._carrier.phase = phase;
    this._modulator.phase = phase;
  }
});
/**
 * The partials of the carrier waveform. A partial represents
 * the amplitude at a harmonic. The first harmonic is the
 * fundamental frequency, the second is the octave and so on
 * following the harmonic series.
 * Setting this value will automatically set the type to "custom".
 * The value is an empty array when the type is not "custom".
 * @memberOf Tone.AMOscillator#
 * @type {Array}
 * @name partials
 * @example
 * osc.partials = [1, 0.2, 0.01];
 */

Object.defineProperty(_Tone.default.AMOscillator.prototype, "partials", {
  get: function () {
    return this._carrier.partials;
  },
  set: function (partials) {
    this._carrier.partials = partials;
  }
});
/**
 *  Clean up.
 *  @return {Tone.AMOscillator} this
 */

_Tone.default.AMOscillator.prototype.dispose = function () {
  _Tone.default.Source.prototype.dispose.call(this);

  this._writable(["frequency", "detune", "harmonicity"]);

  this.frequency = null;
  this.detune = null;
  this.harmonicity.dispose();
  this.harmonicity = null;

  this._carrier.dispose();

  this._carrier = null;

  this._modulator.dispose();

  this._modulator = null;

  this._modulationNode.dispose();

  this._modulationNode = null;

  this._modulationScale.dispose();

  this._modulationScale = null;
  return this;
};

var _default = _Tone.default.AMOscillator;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../source/Source":"../node_modules/tone/tone/source/Source.js","../source/Oscillator":"../node_modules/tone/tone/source/Oscillator.js","../signal/Multiply":"../node_modules/tone/tone/signal/Multiply.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js","../signal/AudioToGain":"../node_modules/tone/tone/signal/AudioToGain.js"}],"../node_modules/tone/tone/source/FatOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../source/Source");

require("../source/Oscillator");

require("../signal/Multiply");

require("../core/Gain");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.FatOscillator is an array of oscillators with detune spread between the oscillators
 *
 *  @extends {Tone.Source}
 *  @constructor
 *  @param {Frequency} frequency The oscillator's frequency.
 *  @param {String} type The type of the oscillator.
 *  @param {Cents} spread The detune spread between the oscillators.
 *  @example
 * var fatOsc = new Tone.FatOscillator("Ab3", "sine", 40).toMaster().start();
 */
_Tone.default.FatOscillator = function () {
  var options = _Tone.default.defaults(arguments, ["frequency", "type", "spread"], _Tone.default.FatOscillator);

  _Tone.default.Source.call(this, options);
  /**
   *  The oscillator's frequency
   *  @type {Frequency}
   *  @signal
   */


  this.frequency = new _Tone.default.Signal(options.frequency, _Tone.default.Type.Frequency);
  /**
   *  The detune control signal.
   *  @type {Cents}
   *  @signal
   */

  this.detune = new _Tone.default.Signal(options.detune, _Tone.default.Type.Cents);
  /**
   *  The array of oscillators
   *  @type {Array}
   *  @private
   */

  this._oscillators = [];
  /**
   *  The total spread of the oscillators
   *  @type  {Cents}
   *  @private
   */

  this._spread = options.spread;
  /**
   *  The type of the oscillator
   *  @type {String}
   *  @private
   */

  this._type = options.type;
  /**
   *  The phase of the oscillators
   *  @type {Degrees}
   *  @private
   */

  this._phase = options.phase;
  /**
   *  The partials array
   *  @type {Array}
   *  @private
   */

  this._partials = options.partials;
  /**
   *  The number of partials to use
   *  @type {Number}
   *  @private
   */

  this._partialCount = options.partialCount; //set the count initially

  this.count = options.count;

  this._readOnly(["frequency", "detune"]);
};

_Tone.default.extend(_Tone.default.FatOscillator, _Tone.default.Source);
/**
 *  default values
 *  @static
 *  @type {Object}
 *  @const
 */


_Tone.default.FatOscillator.defaults = {
  "frequency": 440,
  "detune": 0,
  "phase": 0,
  "spread": 20,
  "count": 3,
  "type": "sawtooth",
  "partials": [],
  "partialCount": 0
};
/**
 *  start the oscillator
 *  @param  {Time} [time=now]
 *  @private
 */

_Tone.default.FatOscillator.prototype._start = function (time) {
  time = this.toSeconds(time);

  this._forEach(function (osc) {
    osc.start(time);
  });
};
/**
 *  stop the oscillator
 *  @param  {Time} [time=now]
 *  @private
 */


_Tone.default.FatOscillator.prototype._stop = function (time) {
  time = this.toSeconds(time);

  this._forEach(function (osc) {
    osc.stop(time);
  });
};
/**
 *  restart the oscillator
 *  @param  {Time} time (optional) timing parameter
 *  @private
 */


_Tone.default.FatOscillator.prototype.restart = function (time) {
  time = this.toSeconds(time);

  this._forEach(function (osc) {
    osc.restart(time);
  });
};
/**
 *  Iterate over all of the oscillators
 *  @param  {Function}  iterator  The iterator function
 *  @private
 */


_Tone.default.FatOscillator.prototype._forEach = function (iterator) {
  for (var i = 0; i < this._oscillators.length; i++) {
    iterator.call(this, this._oscillators[i], i);
  }
};
/**
 * The type of the carrier oscillator
 * @memberOf Tone.FatOscillator#
 * @type {string}
 * @name type
 */


Object.defineProperty(_Tone.default.FatOscillator.prototype, "type", {
  get: function () {
    return this._type;
  },
  set: function (type) {
    this._type = type;

    this._forEach(function (osc) {
      osc.type = type;
    });
  }
});
/**
 * The detune spread between the oscillators. If "count" is
 * set to 3 oscillators and the "spread" is set to 40,
 * the three oscillators would be detuned like this: [-20, 0, 20]
 * for a total detune spread of 40 cents.
 * @memberOf Tone.FatOscillator#
 * @type {Cents}
 * @name spread
 */

Object.defineProperty(_Tone.default.FatOscillator.prototype, "spread", {
  get: function () {
    return this._spread;
  },
  set: function (spread) {
    this._spread = spread;

    if (this._oscillators.length > 1) {
      var start = -spread / 2;
      var step = spread / (this._oscillators.length - 1);

      this._forEach(function (osc, i) {
        osc.detune.value = start + step * i;
      });
    }
  }
});
/**
 * The number of detuned oscillators
 * @memberOf Tone.FatOscillator#
 * @type {Number}
 * @name count
 */

Object.defineProperty(_Tone.default.FatOscillator.prototype, "count", {
  get: function () {
    return this._oscillators.length;
  },
  set: function (count) {
    count = Math.max(count, 1);

    if (this._oscillators.length !== count) {
      //dispose the previous oscillators
      this._forEach(function (osc) {
        osc.dispose();
      });

      this._oscillators = [];

      for (var i = 0; i < count; i++) {
        var osc = new _Tone.default.Oscillator();

        if (this.type === _Tone.default.Oscillator.Type.Custom) {
          osc.partials = this._partials;
        } else {
          osc.type = this._type;
        }

        osc.partialCount = this._partialCount;
        osc.phase = this._phase + i / count * 360;
        osc.volume.value = -6 - count * 1.1;
        this.frequency.connect(osc.frequency);
        this.detune.connect(osc.detune);
        osc.connect(this.output);
        this._oscillators[i] = osc;
      } //set the spread


      this.spread = this._spread;

      if (this.state === _Tone.default.State.Started) {
        this._forEach(function (osc) {
          osc.start();
        });
      }
    }
  }
});
/**
 * The phase of the oscillator in degrees.
 * @memberOf Tone.FatOscillator#
 * @type {Number}
 * @name phase
 */

Object.defineProperty(_Tone.default.FatOscillator.prototype, "phase", {
  get: function () {
    return this._phase;
  },
  set: function (phase) {
    this._phase = phase;

    this._forEach(function (osc) {
      osc.phase = phase;
    });
  }
});
/**
 * The oscillator type without the partialsCount appended to the end
 * @memberOf Tone.FatOscillator#
 * @type {string}
 * @name baseType
 * @example
 * osc.type = 'sine2'
 * osc.baseType //'sine'
 * osc.partialCount = 2
 */

Object.defineProperty(_Tone.default.FatOscillator.prototype, "baseType", {
  get: function () {
    return this._oscillators[0].baseType;
  },
  set: function (baseType) {
    this._forEach(function (osc) {
      osc.baseType = baseType;
    });

    this._type = this._oscillators[0].type;
  }
});
/**
 * The partials of the carrier waveform. A partial represents
 * the amplitude at a harmonic. The first harmonic is the
 * fundamental frequency, the second is the octave and so on
 * following the harmonic series.
 * Setting this value will automatically set the type to "custom".
 * The value is an empty array when the type is not "custom".
 * @memberOf Tone.FatOscillator#
 * @type {Array}
 * @name partials
 * @example
 * osc.partials = [1, 0.2, 0.01];
 */

Object.defineProperty(_Tone.default.FatOscillator.prototype, "partials", {
  get: function () {
    return this._oscillators[0].partials;
  },
  set: function (partials) {
    this._partials = partials;
    this._type = _Tone.default.Oscillator.Type.Custom;

    this._forEach(function (osc) {
      osc.partials = partials;
    });
  }
});
/**
 * 'partialCount' offers an alternative way to set the number of used partials. 
 * When partialCount is 0, the maximum number of partials are used when representing
 * the waveform using the periodicWave. When 'partials' is set, this value is 
 * not settable, but equals the length of the partials array.
 * @memberOf Tone.FatOscillator#
 * @type {Number}
 * @name partialCount
 */

Object.defineProperty(_Tone.default.FatOscillator.prototype, "partialCount", {
  get: function () {
    return this._oscillators[0].partialCount;
  },
  set: function (partialCount) {
    this._partialCount = partialCount;

    this._forEach(function (osc) {
      osc.partialCount = partialCount;
    });

    this._type = this._oscillators[0].type;
  }
});
/**
 *  Clean up.
 *  @return {Tone.FatOscillator} this
 */

_Tone.default.FatOscillator.prototype.dispose = function () {
  _Tone.default.Source.prototype.dispose.call(this);

  this._writable(["frequency", "detune"]);

  this.frequency.dispose();
  this.frequency = null;
  this.detune.dispose();
  this.detune = null;

  this._forEach(function (osc) {
    osc.dispose();
  });

  this._oscillators = null;
  this._partials = null;
  return this;
};

var _default = _Tone.default.FatOscillator;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../source/Source":"../node_modules/tone/tone/source/Source.js","../source/Oscillator":"../node_modules/tone/tone/source/Oscillator.js","../signal/Multiply":"../node_modules/tone/tone/signal/Multiply.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js"}],"../node_modules/tone/tone/source/OmniOscillator.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../source/Source");

require("../source/Oscillator");

require("../source/PulseOscillator");

require("../source/PWMOscillator");

require("../source/FMOscillator");

require("../source/AMOscillator");

require("../source/FatOscillator");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.OmniOscillator aggregates Tone.Oscillator, Tone.PulseOscillator,
 *         Tone.PWMOscillator, Tone.FMOscillator, Tone.AMOscillator, and Tone.FatOscillator
 *         into one class. The oscillator class can be changed by setting the `type`.
 *         `omniOsc.type = "pwm"` will set it to the Tone.PWMOscillator. Prefixing
 *         any of the basic types ("sine", "square4", etc.) with "fm", "am", or "fat"
 *         will use the FMOscillator, AMOscillator or FatOscillator respectively.
 *         For example: `omniOsc.type = "fatsawtooth"` will create set the oscillator
 *         to a FatOscillator of type "sawtooth".
 *
 *  @extends {Tone.Source}
 *  @constructor
 *  @param {Frequency} frequency The initial frequency of the oscillator.
 *  @param {String} type The type of the oscillator.
 *  @example
 *  var omniOsc = new Tone.OmniOscillator("C#4", "pwm");
 */
_Tone.default.OmniOscillator = function () {
  var options = _Tone.default.defaults(arguments, ["frequency", "type"], _Tone.default.OmniOscillator);

  _Tone.default.Source.call(this, options);
  /**
   *  The frequency control.
   *  @type {Frequency}
   *  @signal
   */


  this.frequency = new _Tone.default.Signal(options.frequency, _Tone.default.Type.Frequency);
  /**
   *  The detune control
   *  @type {Cents}
   *  @signal
   */

  this.detune = new _Tone.default.Signal(options.detune, _Tone.default.Type.Cents);
  /**
   *  the type of the oscillator source
   *  @type {String}
   *  @private
   */

  this._sourceType = undefined;
  /**
   *  the oscillator
   *  @type {Tone.Oscillator}
   *  @private
   */

  this._oscillator = null; //set the oscillator

  this.type = options.type;

  this._readOnly(["frequency", "detune"]); //set the options


  this.set(options);
};

_Tone.default.extend(_Tone.default.OmniOscillator, _Tone.default.Source);
/**
 *  default values
 *  @static
 *  @type {Object}
 *  @const
 */


_Tone.default.OmniOscillator.defaults = {
  "frequency": 440,
  "detune": 0,
  "type": "sine",
  "phase": 0
};
/**
 *  @enum {String}
 *  @private
 */

var OmniOscType = {
  Pulse: "PulseOscillator",
  PWM: "PWMOscillator",
  Osc: "Oscillator",
  FM: "FMOscillator",
  AM: "AMOscillator",
  Fat: "FatOscillator"
};
/**
 *  start the oscillator
 *  @param {Time} [time=now] the time to start the oscillator
 *  @private
 */

_Tone.default.OmniOscillator.prototype._start = function (time) {
  this._oscillator.start(time);
};
/**
 *  start the oscillator
 *  @param {Time} [time=now] the time to start the oscillator
 *  @private
 */


_Tone.default.OmniOscillator.prototype._stop = function (time) {
  this._oscillator.stop(time);
};

_Tone.default.OmniOscillator.prototype.restart = function (time) {
  this._oscillator.restart(time);
};
/**
 * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or
 * prefix the basic types with "fm", "am", or "fat" to use the FMOscillator, AMOscillator or FatOscillator
 * types. The oscillator could also be set to "pwm" or "pulse". All of the parameters of the
 * oscillator's class are accessible when the oscillator is set to that type, but throws an error
 * when it's not.
 *
 * @memberOf Tone.OmniOscillator#
 * @type {String}
 * @name type
 * @example
 * omniOsc.type = "pwm";
 * //modulationFrequency is parameter which is available
 * //only when the type is "pwm".
 * omniOsc.modulationFrequency.value = 0.5;
 * @example
 * //an square wave frequency modulated by a sawtooth
 * omniOsc.type = "fmsquare";
 * omniOsc.modulationType = "sawtooth";
 */


Object.defineProperty(_Tone.default.OmniOscillator.prototype, "type", {
  get: function () {
    var prefix = "";

    if (this._sourceType === OmniOscType.FM) {
      prefix = "fm";
    } else if (this._sourceType === OmniOscType.AM) {
      prefix = "am";
    } else if (this._sourceType === OmniOscType.Fat) {
      prefix = "fat";
    }

    return prefix + this._oscillator.type;
  },
  set: function (type) {
    if (type.substr(0, 2) === "fm") {
      this._createNewOscillator(OmniOscType.FM);

      this._oscillator.type = type.substr(2);
    } else if (type.substr(0, 2) === "am") {
      this._createNewOscillator(OmniOscType.AM);

      this._oscillator.type = type.substr(2);
    } else if (type.substr(0, 3) === "fat") {
      this._createNewOscillator(OmniOscType.Fat);

      this._oscillator.type = type.substr(3);
    } else if (type === "pwm") {
      this._createNewOscillator(OmniOscType.PWM);
    } else if (type === "pulse") {
      this._createNewOscillator(OmniOscType.Pulse);
    } else {
      this._createNewOscillator(OmniOscType.Osc);

      this._oscillator.type = type;
    }
  }
});
/**
 * The partials of the waveform. A partial represents
 * the amplitude at a harmonic. The first harmonic is the
 * fundamental frequency, the second is the octave and so on
 * following the harmonic series.
 * Setting this value will automatically set the type to "custom".
 * The value is an empty array when the type is not "custom".
 * This is not available on "pwm" and "pulse" oscillator types.
 * @memberOf Tone.OmniOscillator#
 * @type {Array}
 * @name partials
 * @example
 * osc.partials = [1, 0.2, 0.01];
 */

Object.defineProperty(_Tone.default.OmniOscillator.prototype, "partials", {
  get: function () {
    return this._oscillator.partials;
  },
  set: function (partials) {
    this._oscillator.partials = partials;
  }
});
/**
 * The partial count of the oscillator. This is not available on "pwm" and "pulse" oscillator types.
 * @memberOf Tone.OmniOscillator#
 * @type {Number}
 * @name partialCount
 * @example
 * //set the maximum number of partials
 * osc.partialCount = 0;
 */

Object.defineProperty(_Tone.default.OmniOscillator.prototype, "partialCount", {
  get: function () {
    return this._oscillator.partialCount;
  },
  set: function (partialCount) {
    this._oscillator.partialCount = partialCount;
  }
});
/**
 *  Set a member/attribute of the oscillator.
 *  @param {Object|String} params
 *  @param {number=} value
 *  @param {Time=} rampTime
 *  @returns {Tone.OmniOscillator} this
 */

_Tone.default.OmniOscillator.prototype.set = function (params, value) {
  //make sure the type is set first
  if (params === "type") {
    this.type = value;
  } else if (_Tone.default.isObject(params) && params.hasOwnProperty("type")) {
    this.type = params.type;
  } //then set the rest


  _Tone.default.prototype.set.apply(this, arguments);

  return this;
};
/**
 *  Get the object's attributes. Given no arguments get
 *  will return all available object properties and their corresponding
 *  values. Pass in a single attribute to retrieve or an array
 *  of attributes. The attribute strings can also include a "."
 *  to access deeper properties.
 *  @param {Array=|string|undefined} params the parameters to get, otherwise will return
 *  					                  all available.
 *  @returns {Object}
 */


_Tone.default.OmniOscillator.prototype.get = function (params) {
  var options = this._oscillator.get(params);

  options.type = this.type;
  return options;
};
/**
 *  connect the oscillator to the frequency and detune signals
 *  @private
 */


_Tone.default.OmniOscillator.prototype._createNewOscillator = function (oscType) {
  if (oscType !== this._sourceType) {
    this._sourceType = oscType;
    var OscillatorConstructor = _Tone.default[oscType]; //short delay to avoid clicks on the change

    var now = this.now();

    if (this._oscillator !== null) {
      var oldOsc = this._oscillator;
      oldOsc.stop(now); //dispose the old one

      this.context.setTimeout(function () {
        oldOsc.dispose();
        oldOsc = null;
      }, this.blockTime);
    }

    this._oscillator = new OscillatorConstructor();
    this.frequency.connect(this._oscillator.frequency);
    this.detune.connect(this._oscillator.detune);

    this._oscillator.connect(this.output);

    if (this.state === _Tone.default.State.Started) {
      this._oscillator.start(now);
    }
  }
};
/**
 * The phase of the oscillator in degrees.
 * @memberOf Tone.OmniOscillator#
 * @type {Degrees}
 * @name phase
 */


Object.defineProperty(_Tone.default.OmniOscillator.prototype, "phase", {
  get: function () {
    return this._oscillator.phase;
  },
  set: function (phase) {
    this._oscillator.phase = phase;
  }
});
/**
 * The source type names
 * @private
 * @type {Object}
 */

var SourceTypeNames = {
  PulseOscillator: "pulse",
  PWMOscillator: "pwm",
  Oscillator: "oscillator",
  FMOscillator: "fm",
  AMOscillator: "am",
  FatOscillator: "fat"
};
/**
 * The source type of the oscillator. 
 * @memberOf Tone.OmniOscillator#
 * @type {String}
 * @name sourceType
 * @example
 * var omniOsc = new Tone.OmniOscillator(440, "fmsquare");
 * omniOsc.sourceType // 'fm'
 */

Object.defineProperty(_Tone.default.OmniOscillator.prototype, "sourceType", {
  get: function () {
    return SourceTypeNames[this._sourceType];
  },
  set: function (sType) {
    //the basetype defaults to sine
    var baseType = "sine";

    if (this._oscillator.type !== "pwm" && this._oscillator.type !== "pulse") {
      baseType = this._oscillator.type;
    } //set the type


    if (sType === SourceTypeNames.FMOscillator) {
      this.type = "fm" + baseType;
    } else if (sType === SourceTypeNames.AMOscillator) {
      this.type = "am" + baseType;
    } else if (sType === SourceTypeNames.FatOscillator) {
      this.type = "fat" + baseType;
    } else if (sType === SourceTypeNames.Oscillator) {
      this.type = baseType;
    } else if (sType === SourceTypeNames.PulseOscillator) {
      this.type = "pulse";
    } else if (sType === SourceTypeNames.PWMOscillator) {
      this.type = "pwm";
    }
  }
});
/**
 * The base type of the oscillator.
 * @memberOf Tone.OmniOscillator#
 * @type {String}
 * @name baseType
 * @example
 * var omniOsc = new Tone.OmniOscillator(440, "fmsquare4");
 * omniOsc.sourceType // 'fm'
 * omniOsc.baseType //'square'
 * omniOsc.partialCount //4
 */

Object.defineProperty(_Tone.default.OmniOscillator.prototype, "baseType", {
  get: function () {
    return this._oscillator.baseType;
  },
  set: function (baseType) {
    if (this.sourceType !== SourceTypeNames.PulseOscillator && this.sourceType !== SourceTypeNames.PWMOscillator) {
      this._oscillator.baseType = baseType;
    }
  }
});
/**
 * The width of the oscillator (only if the oscillator is set to "pulse")
 * @memberOf Tone.OmniOscillator#
 * @type {NormalRange}
 * @signal
 * @name width
 * @example
 * var omniOsc = new Tone.OmniOscillator(440, "pulse");
 * //can access the width attribute only if type === "pulse"
 * omniOsc.width.value = 0.2;
 */

Object.defineProperty(_Tone.default.OmniOscillator.prototype, "width", {
  get: function () {
    if (this._sourceType === OmniOscType.Pulse) {
      return this._oscillator.width;
    } else {
      return undefined;
    }
  }
});
/**
 * The number of detuned oscillators
 * @memberOf Tone.OmniOscillator#
 * @type {Number}
 * @name count
 */

Object.defineProperty(_Tone.default.OmniOscillator.prototype, "count", {
  get: function () {
    if (this._sourceType === OmniOscType.Fat) {
      return this._oscillator.count;
    } else {
      return undefined;
    }
  },
  set: function (count) {
    if (this._sourceType === OmniOscType.Fat) {
      this._oscillator.count = count;
    }
  }
});
/**
 * The detune spread between the oscillators. If "count" is
 * set to 3 oscillators and the "spread" is set to 40,
 * the three oscillators would be detuned like this: [-20, 0, 20]
 * for a total detune spread of 40 cents. See Tone.FatOscillator
 * for more info.
 * @memberOf Tone.OmniOscillator#
 * @type {Cents}
 * @name spread
 */

Object.defineProperty(_Tone.default.OmniOscillator.prototype, "spread", {
  get: function () {
    if (this._sourceType === OmniOscType.Fat) {
      return this._oscillator.spread;
    } else {
      return undefined;
    }
  },
  set: function (spread) {
    if (this._sourceType === OmniOscType.Fat) {
      this._oscillator.spread = spread;
    }
  }
});
/**
 * The type of the modulator oscillator. Only if the oscillator
 * is set to "am" or "fm" types. see. Tone.AMOscillator or Tone.FMOscillator
 * for more info.
 * @memberOf Tone.OmniOscillator#
 * @type {String}
 * @name modulationType
 */

Object.defineProperty(_Tone.default.OmniOscillator.prototype, "modulationType", {
  get: function () {
    if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {
      return this._oscillator.modulationType;
    } else {
      return undefined;
    }
  },
  set: function (mType) {
    if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {
      this._oscillator.modulationType = mType;
    }
  }
});
/**
 * The modulation index which is in essence the depth or amount of the modulation. In other terms it is the
 * ratio of the frequency of the modulating signal (mf) to the amplitude of the
 * modulating signal (ma) -- as in ma/mf.
 * See Tone.FMOscillator for more info.
 * @type {Positive}
 * @signal
 * @name modulationIndex
 * @memberof Tone.OmniOscillator#
 */

Object.defineProperty(_Tone.default.OmniOscillator.prototype, "modulationIndex", {
  get: function () {
    if (this._sourceType === OmniOscType.FM) {
      return this._oscillator.modulationIndex;
    } else {
      return undefined;
    }
  }
});
/**
 *  Harmonicity is the frequency ratio between the carrier and the modulator oscillators.
 *  A harmonicity of 1 gives both oscillators the same frequency.
 *  Harmonicity = 2 means a change of an octave. See Tone.AMOscillator or Tone.FMOscillator
 *  for more info.
 *  @memberOf Tone.OmniOscillator#
 *  @signal
 *  @type {Positive}
 *  @name harmonicity
 */

Object.defineProperty(_Tone.default.OmniOscillator.prototype, "harmonicity", {
  get: function () {
    if (this._sourceType === OmniOscType.FM || this._sourceType === OmniOscType.AM) {
      return this._oscillator.harmonicity;
    } else {
      return undefined;
    }
  }
});
/**
 * The modulationFrequency Signal of the oscillator
 * (only if the oscillator type is set to pwm). See
 * Tone.PWMOscillator for more info.
 * @memberOf Tone.OmniOscillator#
 * @type {Frequency}
 * @signal
 * @name modulationFrequency
 * @example
 * var omniOsc = new Tone.OmniOscillator(440, "pwm");
 * //can access the modulationFrequency attribute only if type === "pwm"
 * omniOsc.modulationFrequency.value = 0.2;
 */

Object.defineProperty(_Tone.default.OmniOscillator.prototype, "modulationFrequency", {
  get: function () {
    if (this._sourceType === OmniOscType.PWM) {
      return this._oscillator.modulationFrequency;
    } else {
      return undefined;
    }
  }
});
/**
 *  Clean up.
 *  @return {Tone.OmniOscillator} this
 */

_Tone.default.OmniOscillator.prototype.dispose = function () {
  _Tone.default.Source.prototype.dispose.call(this);

  this._writable(["frequency", "detune"]);

  this.detune.dispose();
  this.detune = null;
  this.frequency.dispose();
  this.frequency = null;

  this._oscillator.dispose();

  this._oscillator = null;
  this._sourceType = null;
  return this;
};

var _default = _Tone.default.OmniOscillator;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../source/Source":"../node_modules/tone/tone/source/Source.js","../source/Oscillator":"../node_modules/tone/tone/source/Oscillator.js","../source/PulseOscillator":"../node_modules/tone/tone/source/PulseOscillator.js","../source/PWMOscillator":"../node_modules/tone/tone/source/PWMOscillator.js","../source/FMOscillator":"../node_modules/tone/tone/source/FMOscillator.js","../source/AMOscillator":"../node_modules/tone/tone/source/AMOscillator.js","../source/FatOscillator":"../node_modules/tone/tone/source/FatOscillator.js"}],"../node_modules/tone/tone/instrument/Instrument.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../type/Type");

require("../core/Master");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Base-class for all instruments
 *
 *  @constructor
 *  @extends {Tone.AudioNode}
 */
_Tone.default.Instrument = function (options) {
  //get the defaults
  options = _Tone.default.defaultArg(options, _Tone.default.Instrument.defaults);

  _Tone.default.AudioNode.call(this);
  /**
   *  The output and volume triming node
   *  @type  {Tone.Volume}
   *  @private
   */


  this._volume = this.output = new _Tone.default.Volume(options.volume);
  /**
   * The volume of the output in decibels.
   * @type {Decibels}
   * @signal
   * @example
   * source.volume.value = -6;
   */

  this.volume = this._volume.volume;

  this._readOnly("volume");
  /**
   * Keep track of all events scheduled to the transport
   * when the instrument is 'synced'
   * @type {Array<Number>}
   * @private
   */


  this._scheduledEvents = [];
};

_Tone.default.extend(_Tone.default.Instrument, _Tone.default.AudioNode);
/**
 *  the default attributes
 *  @type {object}
 */


_Tone.default.Instrument.defaults = {
  /** the volume of the output in decibels */
  "volume": 0
};
/**
 *  @abstract
 *  @param {string|number} note the note to trigger
 *  @param {Time} [time=now] the time to trigger the ntoe
 *  @param {number} [velocity=1] the velocity to trigger the note
 */

_Tone.default.Instrument.prototype.triggerAttack = _Tone.default.noOp;
/**
 *  @abstract
 *  @param {Time} [time=now] when to trigger the release
 */

_Tone.default.Instrument.prototype.triggerRelease = _Tone.default.noOp;
/**
 * Sync the instrument to the Transport. All subsequent calls of
 * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)
 * will be scheduled along the transport.
 * @example
 * instrument.sync()
 * //schedule 3 notes when the transport first starts
 * instrument.triggerAttackRelease('C4', '8n', 0)
 * instrument.triggerAttackRelease('E4', '8n', '8n')
 * instrument.triggerAttackRelease('G4', '8n', '4n')
 * //start the transport to hear the notes
 * Transport.start()
 * @returns {Tone.Instrument} this
 */

_Tone.default.Instrument.prototype.sync = function () {
  this._syncMethod("triggerAttack", 1);

  this._syncMethod("triggerRelease", 0);

  return this;
};
/**
 * Wrap the given method so that it can be synchronized
 * @param {String} method Which method to wrap and sync
 * @param  {Number} timePosition What position the time argument appears in
 * @private
 */


_Tone.default.Instrument.prototype._syncMethod = function (method, timePosition) {
  var originalMethod = this["_original_" + method] = this[method];

  this[method] = function () {
    var args = Array.prototype.slice.call(arguments);
    var time = args[timePosition];

    var id = _Tone.default.Transport.schedule(function (t) {
      args[timePosition] = t;
      originalMethod.apply(this, args);
    }.bind(this), time);

    this._scheduledEvents.push(id);
  }.bind(this);
};
/**
 * Unsync the instrument from the Transport
 * @returns {Tone.Instrument} this
 */


_Tone.default.Instrument.prototype.unsync = function () {
  this._scheduledEvents.forEach(function (id) {
    _Tone.default.Transport.clear(id);
  });

  this._scheduledEvents = [];

  if (this._original_triggerAttack) {
    this.triggerAttack = this._original_triggerAttack;
    this.triggerRelease = this._original_triggerRelease;
  }

  return this;
};
/**
 *  Trigger the attack and then the release after the duration.
 *  @param  {Frequency} note     The note to trigger.
 *  @param  {Time} duration How long the note should be held for before
 *                          triggering the release. This value must be greater than 0.
 *  @param {Time} [time=now]  When the note should be triggered.
 *  @param  {NormalRange} [velocity=1] The velocity the note should be triggered at.
 *  @returns {Tone.Instrument} this
 *  @example
 * //trigger "C4" for the duration of an 8th note
 * synth.triggerAttackRelease("C4", "8n");
 */


_Tone.default.Instrument.prototype.triggerAttackRelease = function (note, duration, time, velocity) {
  time = this.toSeconds(time);
  duration = this.toSeconds(duration);
  this.triggerAttack(note, time, velocity);
  this.triggerRelease(time + duration);
  return this;
};
/**
 *  clean up
 *  @returns {Tone.Instrument} this
 */


_Tone.default.Instrument.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._volume.dispose();

  this._volume = null;

  this._writable(["volume"]);

  this.volume = null;
  this.unsync();
  this._scheduledEvents = null;
  return this;
};

var _default = _Tone.default.Instrument;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../type/Type":"../node_modules/tone/tone/type/Type.js","../core/Master":"../node_modules/tone/tone/core/Master.js"}],"../node_modules/tone/tone/instrument/Monophonic.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../instrument/Instrument");

require("../signal/Signal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  This is an abstract base class for other monophonic instruments to 
 *          extend. IMPORTANT: It does not make any sound on its own and
 *          shouldn't be directly instantiated.
 *
 *  @constructor
 *  @abstract
 *  @extends {Tone.Instrument}
 */
_Tone.default.Monophonic = function (options) {
  //get the defaults
  options = _Tone.default.defaultArg(options, _Tone.default.Monophonic.defaults);

  _Tone.default.Instrument.call(this, options);
  /**
   *  The glide time between notes. 
   *  @type {Time}
   */


  this.portamento = options.portamento;
};

_Tone.default.extend(_Tone.default.Monophonic, _Tone.default.Instrument);
/**
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.Monophonic.defaults = {
  "portamento": 0
};
/**
 *  Trigger the attack of the note optionally with a given velocity. 
 *  
 *  
 *  @param  {Frequency} note     The note to trigger.
 *  @param  {Time} [time=now]     When the note should start.
 *  @param  {number} [velocity=1] velocity The velocity scaler 
 *                                determines how "loud" the note 
 *                                will be triggered.
 *  @returns {Tone.Monophonic} this
 *  @example
 * synth.triggerAttack("C4");
 *  @example
 * //trigger the note a half second from now at half velocity
 * synth.triggerAttack("C4", "+0.5", 0.5);
 */

_Tone.default.Monophonic.prototype.triggerAttack = function (note, time, velocity) {
  this.log("triggerAttack", note, time, velocity);
  time = this.toSeconds(time);

  this._triggerEnvelopeAttack(time, velocity);

  this.setNote(note, time);
  return this;
};
/**
 *  Trigger the release portion of the envelope
 *  @param  {Time} [time=now] If no time is given, the release happens immediatly
 *  @returns {Tone.Monophonic} this
 *  @example
 * synth.triggerRelease();
 */


_Tone.default.Monophonic.prototype.triggerRelease = function (time) {
  this.log("triggerRelease", time);
  time = this.toSeconds(time);

  this._triggerEnvelopeRelease(time);

  return this;
};
/**
 *  override this method with the actual method
 *  @abstract
 *  @private
 */


_Tone.default.Monophonic.prototype._triggerEnvelopeAttack = function () {};
/**
 *  override this method with the actual method
 *  @abstract
 *  @private
 */


_Tone.default.Monophonic.prototype._triggerEnvelopeRelease = function () {};
/**
 *  Get the level of the output at the given time. Measures
 *  the envelope(s) value at the time. 
 *  @param {Time} time The time to query the envelope value
 *  @return {NormalRange} The output level between 0-1
 */


_Tone.default.Monophonic.prototype.getLevelAtTime = function (time) {
  time = this.toSeconds(time);
  return this.envelope.getValueAtTime(time);
};
/**
 *  Set the note at the given time. If no time is given, the note
 *  will set immediately. 
 *  @param {Frequency} note The note to change to.
 *  @param  {Time} [time=now] The time when the note should be set. 
 *  @returns {Tone.Monophonic} this
 * @example
 * //change to F#6 in one quarter note from now.
 * synth.setNote("F#6", "+4n");
 * @example
 * //change to Bb4 right now
 * synth.setNote("Bb4");
 */


_Tone.default.Monophonic.prototype.setNote = function (note, time) {
  time = this.toSeconds(time);

  if (this.portamento > 0 && this.getLevelAtTime(time) > 0.05) {
    var portTime = this.toSeconds(this.portamento);
    this.frequency.exponentialRampTo(note, portTime, time);
  } else {
    this.frequency.setValueAtTime(note, time);
  }

  return this;
};

var _default = _Tone.default.Monophonic;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../instrument/Instrument":"../node_modules/tone/tone/instrument/Instrument.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js"}],"../node_modules/tone/tone/instrument/Synth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/AmplitudeEnvelope");

require("../source/OmniOscillator");

require("../instrument/Monophonic");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.Synth is composed simply of a Tone.OmniOscillator
 *          routed through a Tone.AmplitudeEnvelope.
 *          <img src="https://docs.google.com/drawings/d/1-1_0YW2Z1J2EPI36P8fNCMcZG7N1w1GZluPs4og4evo/pub?w=1163&h=231">
 *
 *  @constructor
 *  @extends {Tone.Monophonic}
 *  @param {Object} [options] the options available for the synth
 *                          see defaults below
 *  @example
 * var synth = new Tone.Synth().toMaster();
 * synth.triggerAttackRelease("C4", "8n");
 */
_Tone.default.Synth = function (options) {
  //get the defaults
  options = _Tone.default.defaultArg(options, _Tone.default.Synth.defaults);

  _Tone.default.Monophonic.call(this, options);
  /**
   *  The oscillator.
   *  @type {Tone.OmniOscillator}
   */


  this.oscillator = new _Tone.default.OmniOscillator(options.oscillator);
  /**
   *  The frequency control.
   *  @type {Frequency}
   *  @signal
   */

  this.frequency = this.oscillator.frequency;
  /**
   *  The detune control.
   *  @type {Cents}
   *  @signal
   */

  this.detune = this.oscillator.detune;
  /**
   *  The amplitude envelope.
   *  @type {Tone.AmplitudeEnvelope}
   */

  this.envelope = new _Tone.default.AmplitudeEnvelope(options.envelope); //connect the oscillators to the output

  this.oscillator.chain(this.envelope, this.output);

  this._readOnly(["oscillator", "frequency", "detune", "envelope"]);
};

_Tone.default.extend(_Tone.default.Synth, _Tone.default.Monophonic);
/**
 *  @const
 *  @static
 *  @type {Object}
 */


_Tone.default.Synth.defaults = {
  "oscillator": {
    "type": "triangle"
  },
  "envelope": {
    "attack": 0.005,
    "decay": 0.1,
    "sustain": 0.3,
    "release": 1
  }
};
/**
 *  start the attack portion of the envelope
 *  @param {Time} [time=now] the time the attack should start
 *  @param {number} [velocity=1] the velocity of the note (0-1)
 *  @returns {Tone.Synth} this
 *  @private
 */

_Tone.default.Synth.prototype._triggerEnvelopeAttack = function (time, velocity) {
  //the envelopes
  this.envelope.triggerAttack(time, velocity);
  this.oscillator.start(time); //if there is no release portion, stop the oscillator

  if (this.envelope.sustain === 0) {
    this.oscillator.stop(time + this.toSeconds(this.envelope.attack) + this.toSeconds(this.envelope.decay));
  }

  return this;
};
/**
 *  start the release portion of the envelope
 *  @param {Time} [time=now] the time the release should start
 *  @returns {Tone.Synth} this
 *  @private
 */


_Tone.default.Synth.prototype._triggerEnvelopeRelease = function (time) {
  time = this.toSeconds(time);
  this.envelope.triggerRelease(time);
  this.oscillator.stop(time + this.toSeconds(this.envelope.release));
  return this;
};
/**
 *  clean up
 *  @returns {Tone.Synth} this
 */


_Tone.default.Synth.prototype.dispose = function () {
  _Tone.default.Monophonic.prototype.dispose.call(this);

  this._writable(["oscillator", "frequency", "detune", "envelope"]);

  this.oscillator.dispose();
  this.oscillator = null;
  this.envelope.dispose();
  this.envelope = null;
  this.frequency = null;
  this.detune = null;
  return this;
};

var _default = _Tone.default.Synth;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/AmplitudeEnvelope":"../node_modules/tone/tone/component/AmplitudeEnvelope.js","../source/OmniOscillator":"../node_modules/tone/tone/source/OmniOscillator.js","../instrument/Monophonic":"../node_modules/tone/tone/instrument/Monophonic.js"}],"../node_modules/tone/tone/instrument/AMSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../instrument/Synth");

require("../signal/Signal");

require("../signal/Multiply");

require("../instrument/Monophonic");

require("../signal/AudioToGain");

require("../core/Gain");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  AMSynth uses the output of one Tone.Synth to modulate the
 *          amplitude of another Tone.Synth. The harmonicity (the ratio between
 *          the two signals) affects the timbre of the output signal greatly.
 *          Read more about Amplitude Modulation Synthesis on
 *          [SoundOnSound](https://web.archive.org/web/20160404103653/http://www.soundonsound.com:80/sos/mar00/articles/synthsecrets.htm).
 *          <img src="https://docs.google.com/drawings/d/1TQu8Ed4iFr1YTLKpB3U1_hur-UwBrh5gdBXc8BxfGKw/pub?w=1009&h=457">
 *
 *  @constructor
 *  @extends {Tone.Monophonic}
 *  @param {Object} [options] the options available for the synth
 *                            see defaults below
 *  @example
 * var synth = new Tone.AMSynth().toMaster();
 * synth.triggerAttackRelease("C4", "4n");
 */
_Tone.default.AMSynth = function (options) {
  options = _Tone.default.defaultArg(options, _Tone.default.AMSynth.defaults);

  _Tone.default.Monophonic.call(this, options);
  /**
   *  The carrier voice.
   *  @type {Tone.Synth}
   *  @private
   */


  this._carrier = new _Tone.default.Synth();
  this._carrier.volume.value = -10;
  /**
   *  The carrier's oscillator
   *  @type {Tone.Oscillator}
   */

  this.oscillator = this._carrier.oscillator.set(options.oscillator);
  /**
   *  The carrier's envelope
   *  @type {Tone.AmplitudeEnvelope}
   */

  this.envelope = this._carrier.envelope.set(options.envelope);
  /**
   *  The modulator voice.
   *  @type {Tone.Synth}
   *  @private
   */

  this._modulator = new _Tone.default.Synth();
  this._modulator.volume.value = -10;
  /**
   *  The modulator's oscillator which is applied
   *  to the amplitude of the oscillator
   *  @type {Tone.Oscillator}
   */

  this.modulation = this._modulator.oscillator.set(options.modulation);
  /**
   *  The modulator's envelope
   *  @type {Tone.AmplitudeEnvelope}
   */

  this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);
  /**
   *  The frequency.
   *  @type {Frequency}
   *  @signal
   */

  this.frequency = new _Tone.default.Signal(440, _Tone.default.Type.Frequency);
  /**
   *  The detune in cents
   *  @type {Cents}
   *  @signal
   */

  this.detune = new _Tone.default.Signal(options.detune, _Tone.default.Type.Cents);
  /**
   *  Harmonicity is the ratio between the two voices. A harmonicity of
   *  1 is no change. Harmonicity = 2 means a change of an octave.
   *  @type {Positive}
   *  @signal
   *  @example
   * //pitch voice1 an octave below voice0
   * synth.harmonicity.value = 0.5;
   */

  this.harmonicity = new _Tone.default.Multiply(options.harmonicity);
  this.harmonicity.units = _Tone.default.Type.Positive;
  /**
   *  convert the -1,1 output to 0,1
   *  @type {Tone.AudioToGain}
   *  @private
   */

  this._modulationScale = new _Tone.default.AudioToGain();
  /**
   *  the node where the modulation happens
   *  @type {Tone.Gain}
   *  @private
   */

  this._modulationNode = new _Tone.default.Gain(); //control the two voices frequency

  this.frequency.connect(this._carrier.frequency);
  this.frequency.chain(this.harmonicity, this._modulator.frequency);
  this.detune.fan(this._carrier.detune, this._modulator.detune);

  this._modulator.chain(this._modulationScale, this._modulationNode.gain);

  this._carrier.chain(this._modulationNode, this.output);

  this._readOnly(["frequency", "harmonicity", "oscillator", "envelope", "modulation", "modulationEnvelope", "detune"]);
};

_Tone.default.extend(_Tone.default.AMSynth, _Tone.default.Monophonic);
/**
 *  @static
 *  @type {Object}
 */


_Tone.default.AMSynth.defaults = {
  "harmonicity": 3,
  "detune": 0,
  "oscillator": {
    "type": "sine"
  },
  "envelope": {
    "attack": 0.01,
    "decay": 0.01,
    "sustain": 1,
    "release": 0.5
  },
  "modulation": {
    "type": "square"
  },
  "modulationEnvelope": {
    "attack": 0.5,
    "decay": 0.0,
    "sustain": 1,
    "release": 0.5
  }
};
/**
 *  trigger the attack portion of the note
 *
 *  @param  {Time} [time=now] the time the note will occur
 *  @param {NormalRange} [velocity=1] the velocity of the note
 *  @private
 *  @returns {Tone.AMSynth} this
 */

_Tone.default.AMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
  //the port glide
  time = this.toSeconds(time); //the envelopes

  this._carrier._triggerEnvelopeAttack(time, velocity);

  this._modulator._triggerEnvelopeAttack(time);

  return this;
};
/**
 *  trigger the release portion of the note
 *
 *  @param  {Time} [time=now] the time the note will release
 *  @private
 *  @returns {Tone.AMSynth} this
 */


_Tone.default.AMSynth.prototype._triggerEnvelopeRelease = function (time) {
  this._carrier._triggerEnvelopeRelease(time);

  this._modulator._triggerEnvelopeRelease(time);

  return this;
};
/**
 *  clean up
 *  @returns {Tone.AMSynth} this
 */


_Tone.default.AMSynth.prototype.dispose = function () {
  _Tone.default.Monophonic.prototype.dispose.call(this);

  this._writable(["frequency", "harmonicity", "oscillator", "envelope", "modulation", "modulationEnvelope", "detune"]);

  this._carrier.dispose();

  this._carrier = null;

  this._modulator.dispose();

  this._modulator = null;
  this.frequency.dispose();
  this.frequency = null;
  this.detune.dispose();
  this.detune = null;
  this.harmonicity.dispose();
  this.harmonicity = null;

  this._modulationScale.dispose();

  this._modulationScale = null;

  this._modulationNode.dispose();

  this._modulationNode = null;
  this.oscillator = null;
  this.envelope = null;
  this.modulationEnvelope = null;
  this.modulation = null;
  return this;
};

var _default = _Tone.default.AMSynth;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../instrument/Synth":"../node_modules/tone/tone/instrument/Synth.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../signal/Multiply":"../node_modules/tone/tone/signal/Multiply.js","../instrument/Monophonic":"../node_modules/tone/tone/instrument/Monophonic.js","../signal/AudioToGain":"../node_modules/tone/tone/signal/AudioToGain.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js"}],"../node_modules/tone/tone/instrument/MonoSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/AmplitudeEnvelope");

require("../component/FrequencyEnvelope");

require("../source/OmniOscillator");

require("../signal/Signal");

require("../component/Filter");

require("../instrument/Monophonic");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.MonoSynth is composed of one oscillator, one filter, and two envelopes.
 *          The amplitude of the Tone.Oscillator and the cutoff frequency of the
 *          Tone.Filter are controlled by Tone.Envelopes.
 *          <img src="https://docs.google.com/drawings/d/1gaY1DF9_Hzkodqf8JI1Cg2VZfwSElpFQfI94IQwad38/pub?w=924&h=240">
 *
 *  @constructor
 *  @extends {Tone.Monophonic}
 *  @param {Object} [options] the options available for the synth
 *                          see defaults below
 *  @example
 * var synth = new Tone.MonoSynth({
 * 	"oscillator" : {
 * 		"type" : "square"
 *  },
 *  "envelope" : {
 *  	"attack" : 0.1
 *  }
 * }).toMaster();
 * synth.triggerAttackRelease("C4", "8n");
 */
_Tone.default.MonoSynth = function (options) {
  //get the defaults
  options = _Tone.default.defaultArg(options, _Tone.default.MonoSynth.defaults);

  _Tone.default.Monophonic.call(this, options);
  /**
   *  The oscillator.
   *  @type {Tone.OmniOscillator}
   */


  this.oscillator = new _Tone.default.OmniOscillator(options.oscillator);
  /**
   *  The frequency control.
   *  @type {Frequency}
   *  @signal
   */

  this.frequency = this.oscillator.frequency;
  /**
   *  The detune control.
   *  @type {Cents}
   *  @signal
   */

  this.detune = this.oscillator.detune;
  /**
   *  The filter.
   *  @type {Tone.Filter}
   */

  this.filter = new _Tone.default.Filter(options.filter);
  this.filter.frequency.value = 5000;
  /**
   *  The filter envelope.
   *  @type {Tone.FrequencyEnvelope}
   */

  this.filterEnvelope = new _Tone.default.FrequencyEnvelope(options.filterEnvelope);
  /**
   *  The amplitude envelope.
   *  @type {Tone.AmplitudeEnvelope}
   */

  this.envelope = new _Tone.default.AmplitudeEnvelope(options.envelope); //connect the oscillators to the output

  this.oscillator.chain(this.filter, this.envelope, this.output); //connect the filter envelope

  this.filterEnvelope.connect(this.filter.frequency);

  this._readOnly(["oscillator", "frequency", "detune", "filter", "filterEnvelope", "envelope"]);
};

_Tone.default.extend(_Tone.default.MonoSynth, _Tone.default.Monophonic);
/**
 *  @const
 *  @static
 *  @type {Object}
 */


_Tone.default.MonoSynth.defaults = {
  "frequency": "C4",
  "detune": 0,
  "oscillator": {
    "type": "square"
  },
  "filter": {
    "Q": 6,
    "type": "lowpass",
    "rolloff": -24
  },
  "envelope": {
    "attack": 0.005,
    "decay": 0.1,
    "sustain": 0.9,
    "release": 1
  },
  "filterEnvelope": {
    "attack": 0.06,
    "decay": 0.2,
    "sustain": 0.5,
    "release": 2,
    "baseFrequency": 200,
    "octaves": 7,
    "exponent": 2
  }
};
/**
 *  start the attack portion of the envelope
 *  @param {Time} [time=now] the time the attack should start
 *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)
 *  @returns {Tone.MonoSynth} this
 *  @private
 */

_Tone.default.MonoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
  time = this.toSeconds(time); //the envelopes

  this.envelope.triggerAttack(time, velocity);
  this.filterEnvelope.triggerAttack(time);
  this.oscillator.start(time);

  if (this.envelope.sustain === 0) {
    this.oscillator.stop(time + this.envelope.attack + this.envelope.decay);
  }

  return this;
};
/**
 *  start the release portion of the envelope
 *  @param {Time} [time=now] the time the release should start
 *  @returns {Tone.MonoSynth} this
 *  @private
 */


_Tone.default.MonoSynth.prototype._triggerEnvelopeRelease = function (time) {
  this.envelope.triggerRelease(time);
  this.filterEnvelope.triggerRelease(time);
  this.oscillator.stop(time + this.envelope.release);
  return this;
};
/**
 *  clean up
 *  @returns {Tone.MonoSynth} this
 */


_Tone.default.MonoSynth.prototype.dispose = function () {
  _Tone.default.Monophonic.prototype.dispose.call(this);

  this._writable(["oscillator", "frequency", "detune", "filter", "filterEnvelope", "envelope"]);

  this.oscillator.dispose();
  this.oscillator = null;
  this.envelope.dispose();
  this.envelope = null;
  this.filterEnvelope.dispose();
  this.filterEnvelope = null;
  this.filter.dispose();
  this.filter = null;
  this.frequency = null;
  this.detune = null;
  return this;
};

var _default = _Tone.default.MonoSynth;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/AmplitudeEnvelope":"../node_modules/tone/tone/component/AmplitudeEnvelope.js","../component/FrequencyEnvelope":"../node_modules/tone/tone/component/FrequencyEnvelope.js","../source/OmniOscillator":"../node_modules/tone/tone/source/OmniOscillator.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../component/Filter":"../node_modules/tone/tone/component/Filter.js","../instrument/Monophonic":"../node_modules/tone/tone/instrument/Monophonic.js"}],"../node_modules/tone/tone/instrument/DuoSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../instrument/MonoSynth");

require("../component/LFO");

require("../signal/Signal");

require("../signal/Multiply");

require("../instrument/Monophonic");

require("../core/Param");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.DuoSynth is a monophonic synth composed of two
 *          MonoSynths run in parallel with control over the
 *          frequency ratio between the two voices and vibrato effect.
 *          <img src="https://docs.google.com/drawings/d/1bL4GXvfRMMlqS7XyBm9CjL9KJPSUKbcdBNpqOlkFLxk/pub?w=1012&h=448">
 *
 *  @constructor
 *  @extends {Tone.Monophonic}
 *  @param {Object} [options] the options available for the synth
 *                          see defaults below
 *  @example
 * var duoSynth = new Tone.DuoSynth().toMaster();
 * duoSynth.triggerAttackRelease("C4", "2n");
 */
_Tone.default.DuoSynth = function (options) {
  options = _Tone.default.defaultArg(options, _Tone.default.DuoSynth.defaults);

  _Tone.default.Monophonic.call(this, options);
  /**
   *  the first voice
   *  @type {Tone.MonoSynth}
   */


  this.voice0 = new _Tone.default.MonoSynth(options.voice0);
  this.voice0.volume.value = -10;
  /**
   *  the second voice
   *  @type {Tone.MonoSynth}
   */

  this.voice1 = new _Tone.default.MonoSynth(options.voice1);
  this.voice1.volume.value = -10;
  /**
   *  The vibrato LFO.
   *  @type {Tone.LFO}
   *  @private
   */

  this._vibrato = new _Tone.default.LFO(options.vibratoRate, -50, 50);

  this._vibrato.start();
  /**
   * the vibrato frequency
   * @type {Frequency}
   * @signal
   */


  this.vibratoRate = this._vibrato.frequency;
  /**
   *  the vibrato gain
   *  @type {Tone.Gain}
   *  @private
   */

  this._vibratoGain = new _Tone.default.Gain(options.vibratoAmount, _Tone.default.Type.Positive);
  /**
   * The amount of vibrato
   * @type {Positive}
   * @signal
   */

  this.vibratoAmount = this._vibratoGain.gain;
  /**
   *  the frequency control
   *  @type {Frequency}
   *  @signal
   */

  this.frequency = new _Tone.default.Signal(440, _Tone.default.Type.Frequency);
  /**
   *  Harmonicity is the ratio between the two voices. A harmonicity of
   *  1 is no change. Harmonicity = 2 means a change of an octave.
   *  @type {Positive}
   *  @signal
   *  @example
   * //pitch voice1 an octave below voice0
   * duoSynth.harmonicity.value = 0.5;
   */

  this.harmonicity = new _Tone.default.Multiply(options.harmonicity);
  this.harmonicity.units = _Tone.default.Type.Positive; //control the two voices frequency

  this.frequency.connect(this.voice0.frequency);
  this.frequency.chain(this.harmonicity, this.voice1.frequency);

  this._vibrato.connect(this._vibratoGain);

  this._vibratoGain.fan(this.voice0.detune, this.voice1.detune);

  this.voice0.connect(this.output);
  this.voice1.connect(this.output);

  this._readOnly(["voice0", "voice1", "frequency", "vibratoAmount", "vibratoRate"]);
};

_Tone.default.extend(_Tone.default.DuoSynth, _Tone.default.Monophonic);
/**
 *  @static
 *  @type {Object}
 */


_Tone.default.DuoSynth.defaults = {
  "vibratoAmount": 0.5,
  "vibratoRate": 5,
  "harmonicity": 1.5,
  "voice0": {
    "volume": -10,
    "portamento": 0,
    "oscillator": {
      "type": "sine"
    },
    "filterEnvelope": {
      "attack": 0.01,
      "decay": 0.0,
      "sustain": 1,
      "release": 0.5
    },
    "envelope": {
      "attack": 0.01,
      "decay": 0.0,
      "sustain": 1,
      "release": 0.5
    }
  },
  "voice1": {
    "volume": -10,
    "portamento": 0,
    "oscillator": {
      "type": "sine"
    },
    "filterEnvelope": {
      "attack": 0.01,
      "decay": 0.0,
      "sustain": 1,
      "release": 0.5
    },
    "envelope": {
      "attack": 0.01,
      "decay": 0.0,
      "sustain": 1,
      "release": 0.5
    }
  }
};
/**
 *  start the attack portion of the envelopes
 *
 *  @param {Time} [time=now] the time the attack should start
 *  @param {NormalRange} [velocity=1] the velocity of the note (0-1)
 *  @returns {Tone.DuoSynth} this
 *  @private
 */

_Tone.default.DuoSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
  time = this.toSeconds(time);

  this.voice0._triggerEnvelopeAttack(time, velocity);

  this.voice1._triggerEnvelopeAttack(time, velocity);

  return this;
};
/**
 *  start the release portion of the envelopes
 *
 *  @param {Time} [time=now] the time the release should start
 *  @returns {Tone.DuoSynth} this
 *  @private
 */


_Tone.default.DuoSynth.prototype._triggerEnvelopeRelease = function (time) {
  this.voice0._triggerEnvelopeRelease(time);

  this.voice1._triggerEnvelopeRelease(time);

  return this;
};
/**
 *  Get the level of the output at the given time. Measures
 *  the envelope(s) value at the time. 
 *  @param {Time} time The time to query the envelope value
 *  @return {NormalRange} The output level between 0-1
 */


_Tone.default.DuoSynth.prototype.getLevelAtTime = function (time) {
  return (this.voice0.getLevelAtTime(time) + this.voice1.getLevelAtTime(time)) / 2;
};
/**
 *  clean up
 *  @returns {Tone.DuoSynth} this
 */


_Tone.default.DuoSynth.prototype.dispose = function () {
  _Tone.default.Monophonic.prototype.dispose.call(this);

  this._writable(["voice0", "voice1", "frequency", "vibratoAmount", "vibratoRate"]);

  this.voice0.dispose();
  this.voice0 = null;
  this.voice1.dispose();
  this.voice1 = null;
  this.frequency.dispose();
  this.frequency = null;

  this._vibratoGain.dispose();

  this._vibratoGain = null;
  this._vibrato = null;
  this.harmonicity.dispose();
  this.harmonicity = null;
  this.vibratoAmount.dispose();
  this.vibratoAmount = null;
  this.vibratoRate = null;
  return this;
};

var _default = _Tone.default.DuoSynth;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../instrument/MonoSynth":"../node_modules/tone/tone/instrument/MonoSynth.js","../component/LFO":"../node_modules/tone/tone/component/LFO.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../signal/Multiply":"../node_modules/tone/tone/signal/Multiply.js","../instrument/Monophonic":"../node_modules/tone/tone/instrument/Monophonic.js","../core/Param":"../node_modules/tone/tone/core/Param.js"}],"../node_modules/tone/tone/instrument/FMSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../instrument/Synth");

require("../signal/Signal");

require("../signal/Multiply");

require("../instrument/Monophonic");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  FMSynth is composed of two Tone.Synths where one Tone.Synth modulates
 *          the frequency of a second Tone.Synth. A lot of spectral content
 *          can be explored using the modulationIndex parameter. Read more about
 *          frequency modulation synthesis on Sound On Sound: [Part 1](https://web.archive.org/web/20160403123704/http://www.soundonsound.com/sos/apr00/articles/synthsecrets.htm), [Part 2](https://web.archive.org/web/20160403115835/http://www.soundonsound.com/sos/may00/articles/synth.htm).
 *          <img src="https://docs.google.com/drawings/d/1h0PUDZXPgi4Ikx6bVT6oncrYPLluFKy7lj53puxj-DM/pub?w=902&h=462">
 *
 *  @constructor
 *  @extends {Tone.Monophonic}
 *  @param {Object} [options] the options available for the synth
 *                          see defaults below
 *  @example
 * var fmSynth = new Tone.FMSynth().toMaster();
 * fmSynth.triggerAttackRelease("C5", "4n");
 */
_Tone.default.FMSynth = function (options) {
  options = _Tone.default.defaultArg(options, _Tone.default.FMSynth.defaults);

  _Tone.default.Monophonic.call(this, options);
  /**
   *  The carrier voice.
   *  @type {Tone.Synth}
   *  @private
   */


  this._carrier = new _Tone.default.Synth(options.carrier);
  this._carrier.volume.value = -10;
  /**
   *  The carrier's oscillator
   *  @type {Tone.Oscillator}
   */

  this.oscillator = this._carrier.oscillator;
  /**
   *  The carrier's envelope
   *  @type {Tone.Oscillator}
   */

  this.envelope = this._carrier.envelope.set(options.envelope);
  /**
   *  The modulator voice.
   *  @type {Tone.Synth}
   *  @private
   */

  this._modulator = new _Tone.default.Synth(options.modulator);
  this._modulator.volume.value = -10;
  /**
   *  The modulator's oscillator which is applied
   *  to the amplitude of the oscillator
   *  @type {Tone.Oscillator}
   */

  this.modulation = this._modulator.oscillator.set(options.modulation);
  /**
   *  The modulator's envelope
   *  @type {Tone.Oscillator}
   */

  this.modulationEnvelope = this._modulator.envelope.set(options.modulationEnvelope);
  /**
   *  The frequency control.
   *  @type {Frequency}
   *  @signal
   */

  this.frequency = new _Tone.default.Signal(440, _Tone.default.Type.Frequency);
  /**
   *  The detune in cents
   *  @type {Cents}
   *  @signal
   */

  this.detune = new _Tone.default.Signal(options.detune, _Tone.default.Type.Cents);
  /**
   *  Harmonicity is the ratio between the two voices. A harmonicity of
   *  1 is no change. Harmonicity = 2 means a change of an octave.
   *  @type {Positive}
   *  @signal
   *  @example
   * //pitch voice1 an octave below voice0
   * synth.harmonicity.value = 0.5;
   */

  this.harmonicity = new _Tone.default.Multiply(options.harmonicity);
  this.harmonicity.units = _Tone.default.Type.Positive;
  /**
   *  The modulation index which essentially the depth or amount of the modulation. It is the
   *  ratio of the frequency of the modulating signal (mf) to the amplitude of the
   *  modulating signal (ma) -- as in ma/mf.
   *	@type {Positive}
   *	@signal
   */

  this.modulationIndex = new _Tone.default.Multiply(options.modulationIndex);
  this.modulationIndex.units = _Tone.default.Type.Positive;
  /**
   *  the node where the modulation happens
   *  @type {GainNode}
   *  @private
   */

  this._modulationNode = new _Tone.default.Gain(0); //control the two voices frequency

  this.frequency.connect(this._carrier.frequency);
  this.frequency.chain(this.harmonicity, this._modulator.frequency);
  this.frequency.chain(this.modulationIndex, this._modulationNode);
  this.detune.fan(this._carrier.detune, this._modulator.detune);

  this._modulator.connect(this._modulationNode.gain);

  this._modulationNode.connect(this._carrier.frequency);

  this._carrier.connect(this.output);

  this._readOnly(["frequency", "harmonicity", "modulationIndex", "oscillator", "envelope", "modulation", "modulationEnvelope", "detune"]);
};

_Tone.default.extend(_Tone.default.FMSynth, _Tone.default.Monophonic);
/**
 *  @static
 *  @type {Object}
 */


_Tone.default.FMSynth.defaults = {
  "harmonicity": 3,
  "modulationIndex": 10,
  "detune": 0,
  "oscillator": {
    "type": "sine"
  },
  "envelope": {
    "attack": 0.01,
    "decay": 0.01,
    "sustain": 1,
    "release": 0.5
  },
  "modulation": {
    "type": "square"
  },
  "modulationEnvelope": {
    "attack": 0.5,
    "decay": 0.0,
    "sustain": 1,
    "release": 0.5
  }
};
/**
 * 	trigger the attack portion of the note
 *
 *  @param  {Time} [time=now] the time the note will occur
 *  @param {number} [velocity=1] the velocity of the note
 *  @returns {Tone.FMSynth} this
 *  @private
 */

_Tone.default.FMSynth.prototype._triggerEnvelopeAttack = function (time, velocity) {
  time = this.toSeconds(time); //the envelopes

  this._carrier._triggerEnvelopeAttack(time, velocity);

  this._modulator._triggerEnvelopeAttack(time);

  return this;
};
/**
 *  trigger the release portion of the note
 *
 *  @param  {Time} [time=now] the time the note will release
 *  @returns {Tone.FMSynth} this
 *  @private
 */


_Tone.default.FMSynth.prototype._triggerEnvelopeRelease = function (time) {
  time = this.toSeconds(time);

  this._carrier._triggerEnvelopeRelease(time);

  this._modulator._triggerEnvelopeRelease(time);

  return this;
};
/**
 *  clean up
 *  @returns {Tone.FMSynth} this
 */


_Tone.default.FMSynth.prototype.dispose = function () {
  _Tone.default.Monophonic.prototype.dispose.call(this);

  this._writable(["frequency", "harmonicity", "modulationIndex", "oscillator", "envelope", "modulation", "modulationEnvelope", "detune"]);

  this._carrier.dispose();

  this._carrier = null;

  this._modulator.dispose();

  this._modulator = null;
  this.frequency.dispose();
  this.frequency = null;
  this.detune.dispose();
  this.detune = null;
  this.modulationIndex.dispose();
  this.modulationIndex = null;
  this.harmonicity.dispose();
  this.harmonicity = null;

  this._modulationNode.dispose();

  this._modulationNode = null;
  this.oscillator = null;
  this.envelope = null;
  this.modulationEnvelope = null;
  this.modulation = null;
  return this;
};

var _default = _Tone.default.FMSynth;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../instrument/Synth":"../node_modules/tone/tone/instrument/Synth.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../signal/Multiply":"../node_modules/tone/tone/signal/Multiply.js","../instrument/Monophonic":"../node_modules/tone/tone/instrument/Monophonic.js"}],"../node_modules/tone/tone/instrument/MembraneSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../source/OmniOscillator");

require("../instrument/Instrument");

require("../component/AmplitudeEnvelope");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.MembraneSynth makes kick and tom sounds using a single oscillator
 *          with an amplitude envelope and frequency ramp. A Tone.OmniOscillator
 *          is routed through a Tone.AmplitudeEnvelope to the output. The drum
 *          quality of the sound comes from the frequency envelope applied
 *          during Tone.MembraneSynth.triggerAttack(note). The frequency envelope
 *          starts at <code>note * .octaves</code> and ramps to <code>note</code>
 *          over the duration of <code>.pitchDecay</code>.
 *
 *  @constructor
 *  @extends {Tone.Instrument}
 *  @param {Object} [options] the options available for the synth
 *                          see defaults below
 *  @example
 * var synth = new Tone.MembraneSynth().toMaster();
 * synth.triggerAttackRelease("C2", "8n");
 */
_Tone.default.MembraneSynth = function (options) {
  options = _Tone.default.defaultArg(options, _Tone.default.MembraneSynth.defaults);

  _Tone.default.Instrument.call(this, options);
  /**
   *  The oscillator.
   *  @type {Tone.OmniOscillator}
   */


  this.oscillator = new _Tone.default.OmniOscillator(options.oscillator);
  /**
   *  The amplitude envelope.
   *  @type {Tone.AmplitudeEnvelope}
   */

  this.envelope = new _Tone.default.AmplitudeEnvelope(options.envelope);
  /**
   *  The number of octaves the pitch envelope ramps.
   *  @type {Positive}
   */

  this.octaves = options.octaves;
  /**
   *  The amount of time the frequency envelope takes.
   *  @type {Time}
   */

  this.pitchDecay = options.pitchDecay;
  this.oscillator.chain(this.envelope, this.output);

  this._readOnly(["oscillator", "envelope"]);
};

_Tone.default.extend(_Tone.default.MembraneSynth, _Tone.default.Instrument);
/**
 *  @static
 *  @type {Object}
 */


_Tone.default.MembraneSynth.defaults = {
  "pitchDecay": 0.05,
  "octaves": 10,
  "oscillator": {
    "type": "sine"
  },
  "envelope": {
    "attack": 0.001,
    "decay": 0.4,
    "sustain": 0.01,
    "release": 1.4,
    "attackCurve": "exponential"
  }
};
/**
 *  Trigger the note at the given time with the given velocity.
 *
 *  @param  {Frequency} note     the note
 *  @param  {Time} [time=now]     the time, if not given is now
 *  @param  {number} [velocity=1] velocity defaults to 1
 *  @returns {Tone.MembraneSynth} this
 *  @example
 *  kick.triggerAttack(60);
 */

_Tone.default.MembraneSynth.prototype.triggerAttack = function (note, time, velocity) {
  time = this.toSeconds(time);
  note = this.toFrequency(note);
  var maxNote = note * this.octaves;
  this.oscillator.frequency.setValueAtTime(maxNote, time);
  this.oscillator.frequency.exponentialRampToValueAtTime(note, time + this.toSeconds(this.pitchDecay));
  this.envelope.triggerAttack(time, velocity);
  this.oscillator.start(time);

  if (this.envelope.sustain === 0) {
    this.oscillator.stop(time + this.envelope.attack + this.envelope.decay);
  }

  return this;
};
/**
 *  Trigger the release portion of the note.
 *
 *  @param  {Time} [time=now] the time the note will release
 *  @returns {Tone.MembraneSynth} this
 */


_Tone.default.MembraneSynth.prototype.triggerRelease = function (time) {
  time = this.toSeconds(time);
  this.envelope.triggerRelease(time);
  this.oscillator.stop(time + this.envelope.release);
  return this;
};
/**
 *  Clean up.
 *  @returns {Tone.MembraneSynth} this
 */


_Tone.default.MembraneSynth.prototype.dispose = function () {
  _Tone.default.Instrument.prototype.dispose.call(this);

  this._writable(["oscillator", "envelope"]);

  this.oscillator.dispose();
  this.oscillator = null;
  this.envelope.dispose();
  this.envelope = null;
  return this;
};

var _default = _Tone.default.MembraneSynth;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../source/OmniOscillator":"../node_modules/tone/tone/source/OmniOscillator.js","../instrument/Instrument":"../node_modules/tone/tone/instrument/Instrument.js","../component/AmplitudeEnvelope":"../node_modules/tone/tone/component/AmplitudeEnvelope.js"}],"../node_modules/tone/tone/instrument/MetalSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../instrument/Instrument");

require("../source/FMOscillator");

require("../component/Filter");

require("../component/FrequencyEnvelope");

require("../component/AmplitudeEnvelope");

require("../core/Gain");

require("../signal/Scale");

require("../signal/Multiply");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  Inharmonic ratio of frequencies based on the Roland TR-808
 *  Taken from https://ccrma.stanford.edu/papers/tr-808-cymbal-physically-informed-circuit-bendable-digital-model
 *  @private
 *  @static
 *  @type {Array}
 */
var inharmRatios = [1.0, 1.483, 1.932, 2.546, 2.630, 3.897];
/**
 *  @class  A highly inharmonic and spectrally complex source with a highpass filter
 *          and amplitude envelope which is good for making metalophone sounds. Based
 *          on CymbalSynth by [@polyrhythmatic](https://github.com/polyrhythmatic).
 *          Inspiration from [Sound on Sound](https://web.archive.org/web/20160610143924/https://www.soundonsound.com/sos/jul02/articles/synthsecrets0702.asp).
 *
 *  @constructor
 *  @extends {Tone.Instrument}
 *  @param {Object} [options] The options availble for the synth
 *                             see defaults below
 */

_Tone.default.MetalSynth = function (options) {
  options = _Tone.default.defaultArg(options, _Tone.default.MetalSynth.defaults);

  _Tone.default.Instrument.call(this, options);
  /**
   *  The frequency of the cymbal
   *  @type  {Frequency}
   *  @signal
   */


  this.frequency = new _Tone.default.Signal(options.frequency, _Tone.default.Type.Frequency);
  /**
   *  The array of FMOscillators
   *  @type  {Array}
   *  @private
   */

  this._oscillators = [];
  /**
   *  The frequency multipliers
   *  @type {Array}
   *  @private
   */

  this._freqMultipliers = [];
  /**
   *  The amplitude for the body
   *  @type {Tone.Gain}
   *  @private
   */

  this._amplitue = new _Tone.default.Gain(0).connect(this.output);
  /**
   *  highpass the output
   *  @type {Tone.Filter}
   *  @private
   */

  this._highpass = new _Tone.default.Filter({
    "type": "highpass",
    "Q": -3.0102999566398125
  }).connect(this._amplitue);
  /**
   *  The number of octaves the highpass
   *  filter frequency ramps
   *  @type {Number}
   *  @private
   */

  this._octaves = options.octaves;
  /**
   *  Scale the body envelope
   *  for the bandpass
   *  @type {Tone.Scale}
   *  @private
   */

  this._filterFreqScaler = new _Tone.default.Scale(options.resonance, 7000);
  /**
   *  The envelope which is connected both to the
   *  amplitude and highpass filter's cutoff frequency
   *  @type  {Tone.Envelope}
   */

  this.envelope = new _Tone.default.Envelope({
    "attack": options.envelope.attack,
    "attackCurve": "linear",
    "decay": options.envelope.decay,
    "sustain": 0,
    "release": options.envelope.release
  }).chain(this._filterFreqScaler, this._highpass.frequency);
  this.envelope.connect(this._amplitue.gain);

  for (var i = 0; i < inharmRatios.length; i++) {
    var osc = new _Tone.default.FMOscillator({
      "type": "square",
      "modulationType": "square",
      "harmonicity": options.harmonicity,
      "modulationIndex": options.modulationIndex
    });
    osc.connect(this._highpass);
    this._oscillators[i] = osc;
    var mult = new _Tone.default.Multiply(inharmRatios[i]);
    this._freqMultipliers[i] = mult;
    this.frequency.chain(mult, osc.frequency);
  } //set the octaves


  this.octaves = options.octaves;
};

_Tone.default.extend(_Tone.default.MetalSynth, _Tone.default.Instrument);
/**
 *  default values
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.MetalSynth.defaults = {
  "frequency": 200,
  "envelope": {
    "attack": 0.001,
    "decay": 1.4,
    "release": 0.2
  },
  "harmonicity": 5.1,
  "modulationIndex": 32,
  "resonance": 4000,
  "octaves": 1.5
};
/**
 *  Trigger the attack.
 *  @param  {Time}  time      When the attack should be triggered.
 *  @param  {NormalRange}  [velocity=1]  The velocity that the envelope should be triggered at.
 *  @return  {Tone.MetalSynth}  this
 */

_Tone.default.MetalSynth.prototype.triggerAttack = function (time, vel) {
  time = this.toSeconds(time);
  vel = _Tone.default.defaultArg(vel, 1);
  this.envelope.triggerAttack(time, vel);

  this._oscillators.forEach(function (osc) {
    osc.start(time);
  }); //if the sustain is 0, stop the oscillator as well


  if (this.envelope.sustain === 0) {
    this._oscillators.forEach(function (osc) {
      osc.stop(time + this.envelope.attack + this.envelope.decay);
    }.bind(this));
  }

  return this;
};
/**
 *  Trigger the release of the envelope.
 *  @param  {Time}  time      When the release should be triggered.
 *  @return  {Tone.MetalSynth}  this
 */


_Tone.default.MetalSynth.prototype.triggerRelease = function (time) {
  time = this.toSeconds(time);
  this.envelope.triggerRelease(time);

  this._oscillators.forEach(function (osc) {
    osc.stop(time + this.envelope.release);
  }.bind(this));

  return this;
};
/**
 * Sync the instrument to the Transport. All subsequent calls of
 * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)
 * will be scheduled along the transport.
 * @example
 * synth.sync()
 * //schedule 3 notes when the transport first starts
 * synth.triggerAttackRelease('8n', 0)
 * synth.triggerAttackRelease('8n', '8n')
 * synth.triggerAttackRelease('8n', '4n')
 * //start the transport to hear the notes
 * Transport.start()
 * @returns {Tone.Instrument} this
 */


_Tone.default.MetalSynth.prototype.sync = function () {
  this._syncMethod("triggerAttack", 0);

  this._syncMethod("triggerRelease", 0);

  return this;
};
/**
 *  Trigger the attack and release of the envelope after the given
 *  duration.
 *  @param  {Time}  duration  The duration before triggering the release
 *  @param  {Time}  time      When the attack should be triggered.
 *  @param  {NormalRange}  [velocity=1]  The velocity that the envelope should be triggered at.
 *  @return  {Tone.MetalSynth}  this
 */


_Tone.default.MetalSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {
  time = this.toSeconds(time);
  duration = this.toSeconds(duration);
  this.triggerAttack(time, velocity);
  this.triggerRelease(time + duration);
  return this;
};
/**
 *  The modulationIndex of the oscillators which make up the source.
 *  see Tone.FMOscillator.modulationIndex
 *  @memberOf Tone.MetalSynth#
 *  @type {Positive}
 *  @name  modulationIndex
 */


Object.defineProperty(_Tone.default.MetalSynth.prototype, "modulationIndex", {
  get: function () {
    return this._oscillators[0].modulationIndex.value;
  },
  set: function (val) {
    for (var i = 0; i < this._oscillators.length; i++) {
      this._oscillators[i].modulationIndex.value = val;
    }
  }
});
/**
 *  The harmonicity of the oscillators which make up the source.
 *  see Tone.FMOscillator.harmonicity
 *  @memberOf Tone.MetalSynth#
 *  @type {Positive}
 *  @name  harmonicity
 */

Object.defineProperty(_Tone.default.MetalSynth.prototype, "harmonicity", {
  get: function () {
    return this._oscillators[0].harmonicity.value;
  },
  set: function (val) {
    for (var i = 0; i < this._oscillators.length; i++) {
      this._oscillators[i].harmonicity.value = val;
    }
  }
});
/**
 *  The frequency of the highpass filter attached to the envelope
 *  @memberOf Tone.MetalSynth#
 *  @type {Frequency}
 *  @name  resonance
 */

Object.defineProperty(_Tone.default.MetalSynth.prototype, "resonance", {
  get: function () {
    return this._filterFreqScaler.min;
  },
  set: function (val) {
    this._filterFreqScaler.min = val;
    this.octaves = this._octaves;
  }
});
/**
 *  The number of octaves above the "resonance" frequency
 *  that the filter ramps during the attack/decay envelope
 *  @memberOf Tone.MetalSynth#
 *  @type {Number}
 *  @name  octaves
 */

Object.defineProperty(_Tone.default.MetalSynth.prototype, "octaves", {
  get: function () {
    return this._octaves;
  },
  set: function (octs) {
    this._octaves = octs;
    this._filterFreqScaler.max = this._filterFreqScaler.min * Math.pow(2, octs);
  }
});
/**
 *  Clean up
 *  @returns {Tone.MetalSynth} this
 */

_Tone.default.MetalSynth.prototype.dispose = function () {
  _Tone.default.Instrument.prototype.dispose.call(this);

  for (var i = 0; i < this._oscillators.length; i++) {
    this._oscillators[i].dispose();

    this._freqMultipliers[i].dispose();
  }

  this._oscillators = null;
  this._freqMultipliers = null;
  this.frequency.dispose();
  this.frequency = null;

  this._filterFreqScaler.dispose();

  this._filterFreqScaler = null;

  this._amplitue.dispose();

  this._amplitue = null;
  this.envelope.dispose();
  this.envelope = null;

  this._highpass.dispose();

  this._highpass = null;
};

var _default = _Tone.default.MetalSynth;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../instrument/Instrument":"../node_modules/tone/tone/instrument/Instrument.js","../source/FMOscillator":"../node_modules/tone/tone/source/FMOscillator.js","../component/Filter":"../node_modules/tone/tone/component/Filter.js","../component/FrequencyEnvelope":"../node_modules/tone/tone/component/FrequencyEnvelope.js","../component/AmplitudeEnvelope":"../node_modules/tone/tone/component/AmplitudeEnvelope.js","../core/Gain":"../node_modules/tone/tone/core/Gain.js","../signal/Scale":"../node_modules/tone/tone/signal/Scale.js","../signal/Multiply":"../node_modules/tone/tone/signal/Multiply.js"}],"../node_modules/tone/tone/instrument/NoiseSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/AmplitudeEnvelope");

require("../component/FrequencyEnvelope");

require("../source/Noise");

require("../signal/Signal");

require("../component/Filter");

require("../instrument/Instrument");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.NoiseSynth is composed of a noise generator (Tone.Noise), one filter (Tone.Filter),
 *          and two envelopes (Tone.Envelop). One envelope controls the amplitude
 *          of the noise and the other is controls the cutoff frequency of the filter.
 *          <img src="https://docs.google.com/drawings/d/1rqzuX9rBlhT50MRvD2TKml9bnZhcZmzXF1rf_o7vdnE/pub?w=918&h=242">
 *
 *  @constructor
 *  @extends {Tone.Instrument}
 *  @param {Object} [options] the options available for the synth
 *                          see defaults below
 * @example
 * var noiseSynth = new Tone.NoiseSynth().toMaster();
 * noiseSynth.triggerAttackRelease("8n");
 */
_Tone.default.NoiseSynth = function (options) {
  //get the defaults
  options = _Tone.default.defaultArg(options, _Tone.default.NoiseSynth.defaults);

  _Tone.default.Instrument.call(this, options);
  /**
   *  The noise source.
   *  @type {Tone.Noise}
   *  @example
   * noiseSynth.set("noise.type", "brown");
   */


  this.noise = new _Tone.default.Noise(options.noise);
  /**
   *  The amplitude envelope.
   *  @type {Tone.AmplitudeEnvelope}
   */

  this.envelope = new _Tone.default.AmplitudeEnvelope(options.envelope); //connect the noise to the output

  this.noise.chain(this.envelope, this.output);

  this._readOnly(["noise", "envelope"]);
};

_Tone.default.extend(_Tone.default.NoiseSynth, _Tone.default.Instrument);
/**
 *  @const
 *  @static
 *  @type {Object}
 */


_Tone.default.NoiseSynth.defaults = {
  "noise": {
    "type": "white"
  },
  "envelope": {
    "attack": 0.005,
    "decay": 0.1,
    "sustain": 0.0
  }
};
/**
 *  Start the attack portion of the envelopes. Unlike other
 *  instruments, Tone.NoiseSynth doesn't have a note.
 *  @param {Time} [time=now] the time the attack should start
 *  @param {number} [velocity=1] the velocity of the note (0-1)
 *  @returns {Tone.NoiseSynth} this
 *  @example
 * noiseSynth.triggerAttack();
 */

_Tone.default.NoiseSynth.prototype.triggerAttack = function (time, velocity) {
  time = this.toSeconds(time); //the envelopes

  this.envelope.triggerAttack(time, velocity); //start the noise

  this.noise.start(time);

  if (this.envelope.sustain === 0) {
    this.noise.stop(time + this.envelope.attack + this.envelope.decay);
  }

  return this;
};
/**
 *  Start the release portion of the envelopes.
 *  @param {Time} [time=now] the time the release should start
 *  @returns {Tone.NoiseSynth} this
 */


_Tone.default.NoiseSynth.prototype.triggerRelease = function (time) {
  time = this.toSeconds(time);
  this.envelope.triggerRelease(time);
  this.noise.stop(time + this.envelope.release);
  return this;
};
/**
 * Sync the instrument to the Transport. All subsequent calls of
 * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)
 * will be scheduled along the transport.
 * @example
 * synth.sync()
 * //schedule 3 notes when the transport first starts
 * synth.triggerAttackRelease('8n', 0)
 * synth.triggerAttackRelease('8n', '8n')
 * synth.triggerAttackRelease('8n', '4n')
 * //start the transport to hear the notes
 * Transport.start()
 * @returns {Tone.Instrument} this
 */


_Tone.default.NoiseSynth.prototype.sync = function () {
  this._syncMethod("triggerAttack", 0);

  this._syncMethod("triggerRelease", 0);

  return this;
};
/**
 *  Trigger the attack and then the release.
 *  @param  {Time} duration the duration of the note
 *  @param  {Time} [time=now]     the time of the attack
 *  @param  {number} [velocity=1] the velocity
 *  @returns {Tone.NoiseSynth} this
 */


_Tone.default.NoiseSynth.prototype.triggerAttackRelease = function (duration, time, velocity) {
  time = this.toSeconds(time);
  duration = this.toSeconds(duration);
  this.triggerAttack(time, velocity);
  this.triggerRelease(time + duration);
  return this;
};
/**
 *  Clean up.
 *  @returns {Tone.NoiseSynth} this
 */


_Tone.default.NoiseSynth.prototype.dispose = function () {
  _Tone.default.Instrument.prototype.dispose.call(this);

  this._writable(["noise", "envelope"]);

  this.noise.dispose();
  this.noise = null;
  this.envelope.dispose();
  this.envelope = null;
  return this;
};

var _default = _Tone.default.NoiseSynth;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/AmplitudeEnvelope":"../node_modules/tone/tone/component/AmplitudeEnvelope.js","../component/FrequencyEnvelope":"../node_modules/tone/tone/component/FrequencyEnvelope.js","../source/Noise":"../node_modules/tone/tone/source/Noise.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../component/Filter":"../node_modules/tone/tone/component/Filter.js","../instrument/Instrument":"../node_modules/tone/tone/instrument/Instrument.js"}],"../node_modules/tone/tone/instrument/PluckSynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../instrument/Instrument");

require("../source/Noise");

require("../component/LowpassCombFilter");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Karplus-String string synthesis. Often out of tune.
 *         Will change when the AudioWorkerNode is available across
 *         browsers.
 *
 *  @constructor
 *  @extends {Tone.Instrument}
 *  @param {Object} [options] see the defaults
 *  @example
 * var plucky = new Tone.PluckSynth().toMaster();
 * plucky.triggerAttack("C4");
 */
_Tone.default.PluckSynth = function (options) {
  options = _Tone.default.defaultArg(options, _Tone.default.PluckSynth.defaults);

  _Tone.default.Instrument.call(this, options);
  /**
   *  @type {Tone.Noise}
   *  @private
   */


  this._noise = new _Tone.default.Noise("pink");
  /**
   *  The amount of noise at the attack.
   *  Nominal range of [0.1, 20]
   *  @type {number}
   */

  this.attackNoise = options.attackNoise;
  /**
   *  the LFCF
   *  @type {Tone.LowpassCombFilter}
   *  @private
   */

  this._lfcf = new _Tone.default.LowpassCombFilter({
    "resonance": options.resonance,
    "dampening": options.dampening
  });
  /**
   *  The resonance control.
   *  @type {NormalRange}
   *  @signal
   */

  this.resonance = this._lfcf.resonance;
  /**
   *  The dampening control. i.e. the lowpass filter frequency of the comb filter
   *  @type {Frequency}
   *  @signal
   */

  this.dampening = this._lfcf.dampening; //connections

  this._noise.connect(this._lfcf);

  this._lfcf.connect(this.output);

  this._readOnly(["resonance", "dampening"]);
};

_Tone.default.extend(_Tone.default.PluckSynth, _Tone.default.Instrument);
/**
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.PluckSynth.defaults = {
  "attackNoise": 1,
  "dampening": 4000,
  "resonance": 0.7
};
/**
 *  Trigger the note.
 *  @param {Frequency} note The note to trigger.
 *  @param {Time} [time=now] When the note should be triggered.
 *  @returns {Tone.PluckSynth} this
 */

_Tone.default.PluckSynth.prototype.triggerAttack = function (note, time) {
  note = this.toFrequency(note);
  time = this.toSeconds(time);
  var delayAmount = 1 / note;

  this._lfcf.delayTime.setValueAtTime(delayAmount, time);

  this._noise.start(time);

  this._noise.stop(time + delayAmount * this.attackNoise);

  return this;
};
/**
 *	Make this method which belongs to the parent class private since
 *	PluckSynth does not have any 'release' method.
 * 	@memberOf Tone.PluckSynth#
 *  @function
 *  @private
 *  @name triggerAttackRelease
 */

/**
 *  Clean up.
 *  @returns {Tone.PluckSynth} this
 */


_Tone.default.PluckSynth.prototype.dispose = function () {
  _Tone.default.Instrument.prototype.dispose.call(this);

  this._noise.dispose();

  this._lfcf.dispose();

  this._noise = null;
  this._lfcf = null;

  this._writable(["resonance", "dampening"]);

  this.dampening = null;
  this.resonance = null;
  return this;
};

var _default = _Tone.default.PluckSynth;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../instrument/Instrument":"../node_modules/tone/tone/instrument/Instrument.js","../source/Noise":"../node_modules/tone/tone/source/Noise.js","../component/LowpassCombFilter":"../node_modules/tone/tone/component/LowpassCombFilter.js"}],"../node_modules/tone/tone/instrument/PolySynth.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../instrument/Synth");

require("../source/Source");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.PolySynth handles voice creation and allocation for any
 *          instruments passed in as the second paramter. PolySynth is
 *          not a synthesizer by itself, it merely manages voices of
 *          one of the other types of synths, allowing any of the
 *          monophonic synthesizers to be polyphonic.
 *
 *  @constructor
 *  @extends {Tone.Instrument}
 *  @param {number|Object} [polyphony=4] The number of voices to create
 *  @param {function} [voice=Tone.Synth] The constructor of the voices
 *                                            uses Tone.Synth by default.
 *  @param {...*}	voiceArgs	All additional arguments will be passed into the class constructor.
 *  @example
 * //a polysynth composed of 6 Voices of Synth
 * var synth = new Tone.PolySynth(6, Tone.Synth, {
 *   oscillator : {
 * 		type : "square"
 * 	}
 * }).toMaster();
 * //set the attributes using the set interface
 * synth.set("detune", -1200);
 * //play a chord
 * synth.triggerAttackRelease(["C4", "E4", "A4"], "4n");
 */
_Tone.default.PolySynth = function () {
  var options = _Tone.default.defaults(arguments, ["polyphony", "voice"], _Tone.default.PolySynth);

  _Tone.default.Instrument.call(this, options);

  options = _Tone.default.defaultArg(options, _Tone.default.Instrument.defaults); //max polyphony

  options.polyphony = Math.min(_Tone.default.PolySynth.MAX_POLYPHONY, options.polyphony);
  /**
   *  the array of voices
   *  @type {Array}
   */

  this.voices = new Array(options.polyphony);
  this.assert(options.polyphony > 0, "polyphony must be greater than 0");
  /**
   *  The detune in cents
   *  @type {Cents}
   *  @signal
   */

  this.detune = new _Tone.default.Signal(options.detune, _Tone.default.Type.Cents);

  this._readOnly("detune"); //create the voices


  for (var i = 0; i < options.polyphony; i++) {
    var v = new options.voice(arguments[2], arguments[3]);

    if (!(v instanceof _Tone.default.Monophonic)) {
      throw new Error("Synth constructor must be instance of Tone.Monophonic");
    }

    this.voices[i] = v;
    v.index = i;
    v.connect(this.output);

    if (v.hasOwnProperty("detune")) {
      this.detune.connect(v.detune);
    }
  }
};

_Tone.default.extend(_Tone.default.PolySynth, _Tone.default.Instrument);
/**
 *  the defaults
 *  @const
 *  @static
 *  @type {Object}
 */


_Tone.default.PolySynth.defaults = {
  "polyphony": 4,
  "volume": 0,
  "detune": 0,
  "voice": _Tone.default.Synth
};
/**
 *  Get the closest available voice, that is the
 *  one that is either the closest to the note,
 *  or has the lowest envelope value.
 *  @param {Time} time return the voice that has the lowest energy at this time.
 *  @param  {Note}  note  if there is a voice with this note, that should be returned
 *  @return  {Tone.Monophonic}  A synth voice.
 *  @private
 */

_Tone.default.PolySynth.prototype._getClosestVoice = function (time, note) {
  //play the note which has the same frequency, if that exists
  var sameNote = this.voices.find(function (voice) {
    //break if it's within a small epsion of the voice's frequency
    if (Math.abs(voice.frequency.getValueAtTime(time) - _Tone.default.Frequency(note)) < 1e-4 && //and that note is currently active
    voice.getLevelAtTime(time) > 1e-5) {
      return voice;
    }
  });

  if (sameNote) {
    return sameNote;
  }

  var sortedVoices = this.voices.slice().sort(function (a, b) {
    //check that it's not scheduled in the future
    var aLevel = a.getLevelAtTime(time + this.blockTime);
    var bLevel = b.getLevelAtTime(time + this.blockTime);
    var silenceThresh = 1e-5;

    if (aLevel < silenceThresh) {
      aLevel = 0;
    }

    if (bLevel < silenceThresh) {
      bLevel = 0;
    }

    return aLevel - bLevel;
  }.bind(this));
  return sortedVoices[0];
};
/**
 *  Trigger the attack portion of the note
 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
 *                                  Frequency or an array of frequencies.
 *  @param  {Time} [time=now]  The start time of the note.
 *  @param {number} [velocity=1] The velocity of the note.
 *  @returns {Tone.PolySynth} this
 *  @example
 * //trigger a chord immediately with a velocity of 0.2
 * poly.triggerAttack(["Ab3", "C4", "F5"], undefined, 0.2);
 */


_Tone.default.PolySynth.prototype.triggerAttack = function (notes, time, velocity) {
  if (!Array.isArray(notes)) {
    notes = [notes];
  }

  time = this.toSeconds(time);
  notes.forEach(function (note) {
    var voice = this._getClosestVoice(time, note);

    voice.triggerAttack(note, time, velocity);
    this.log("triggerAttack", voice.index, note);
  }.bind(this));
  return this;
};
/**
 *  Trigger the release of the note. Unlike monophonic instruments,
 *  a note (or array of notes) needs to be passed in as the first argument.
 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
 *                                  Frequency or an array of frequencies.
 *  @param  {Time} [time=now]  When the release will be triggered.
 *  @returns {Tone.PolySynth} this
 *  @example
 * poly.triggerRelease(["Ab3", "C4", "F5"], "+2n");
 */


_Tone.default.PolySynth.prototype.triggerRelease = function (notes, time) {
  if (!Array.isArray(notes)) {
    notes = [notes];
  }

  time = this.toSeconds(time);
  notes.forEach(function (note) {
    var voice = this._getClosestVoice(time, note);

    this.log("triggerRelease", voice.index, note);
    voice.triggerRelease(time);
  }.bind(this));
  return this;
};
/**
 *  Trigger the attack and release after the specified duration
 *
 *  @param  {Frequency|Array} notes The notes to play. Accepts a single
 *                                  Frequency or an array of frequencies.
 *  @param  {Time} duration the duration of the note
 *  @param  {Time} [time=now]     if no time is given, defaults to now
 *  @param  {number} [velocity=1] the velocity of the attack (0-1)
 *  @returns {Tone.PolySynth} this
 *  @example
 * //trigger a chord for a duration of a half note
 * poly.triggerAttackRelease(["Eb3", "G4", "C5"], "2n");
 *  @example
 * //can pass in an array of durations as well
 * poly.triggerAttackRelease(["Eb3", "G4", "C5"], ["2n", "4n", "4n"]);
 */


_Tone.default.PolySynth.prototype.triggerAttackRelease = function (notes, duration, time, velocity) {
  time = this.toSeconds(time);
  this.triggerAttack(notes, time, velocity);

  if (_Tone.default.isArray(duration) && _Tone.default.isArray(notes)) {
    for (var i = 0; i < notes.length; i++) {
      var d = duration[Math.min(i, duration.length - 1)];
      this.triggerRelease(notes[i], time + this.toSeconds(d));
    }
  } else {
    this.triggerRelease(notes, time + this.toSeconds(duration));
  }

  return this;
};
/**
 * Sync the instrument to the Transport. All subsequent calls of
 * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)
 * will be scheduled along the transport.
 * @example
 * synth.sync()
 * //schedule 3 notes when the transport first starts
 * synth.triggerAttackRelease('8n', 0)
 * synth.triggerAttackRelease('8n', '8n')
 * synth.triggerAttackRelease('8n', '4n')
 * //start the transport to hear the notes
 * Transport.start()
 * @returns {Tone.Instrument} this
 */


_Tone.default.PolySynth.prototype.sync = function () {
  this._syncMethod("triggerAttack", 1);

  this._syncMethod("triggerRelease", 1);

  return this;
};
/**
 *  Set a member/attribute of the voices.
 *  @param {Object|string} params
 *  @param {number=} value
 *  @param {Time=} rampTime
 *  @returns {Tone.PolySynth} this
 *  @example
 * poly.set({
 * 	"filter" : {
 * 		"type" : "highpass"
 * 	},
 * 	"envelope" : {
 * 		"attack" : 0.25
 * 	}
 * });
 */


_Tone.default.PolySynth.prototype.set = function (params, value, rampTime) {
  for (var i = 0; i < this.voices.length; i++) {
    this.voices[i].set(params, value, rampTime);
  }

  return this;
};
/**
 *  Get the synth's attributes. Given no arguments get
 *  will return all available object properties and their corresponding
 *  values. Pass in a single attribute to retrieve or an array
 *  of attributes. The attribute strings can also include a "."
 *  to access deeper properties.
 *  @param {Array=} params the parameters to get, otherwise will return
 *  					   all available.
 */


_Tone.default.PolySynth.prototype.get = function (params) {
  return this.voices[0].get(params);
};
/**
 *  Trigger the release portion of all the currently active voices.
 *  @param {Time} [time=now] When the notes should be released.
 *  @return {Tone.PolySynth} this
 */


_Tone.default.PolySynth.prototype.releaseAll = function (time) {
  time = this.toSeconds(time);
  this.voices.forEach(function (voice) {
    voice.triggerRelease(time);
  });
  return this;
};
/**
 *  Clean up.
 *  @returns {Tone.PolySynth} this
 */


_Tone.default.PolySynth.prototype.dispose = function () {
  _Tone.default.Instrument.prototype.dispose.call(this);

  this.voices.forEach(function (voice) {
    voice.dispose();
  });

  this._writable("detune");

  this.detune.dispose();
  this.detune = null;
  this.voices = null;
  return this;
};
/**
 *  The maximum number of notes that can be allocated
 *  to a polysynth.
 *  @type  {Number}
 *  @static
 */


_Tone.default.PolySynth.MAX_POLYPHONY = 20;
var _default = _Tone.default.PolySynth;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../instrument/Synth":"../node_modules/tone/tone/instrument/Synth.js","../source/Source":"../node_modules/tone/tone/source/Source.js"}],"../node_modules/tone/tone/instrument/Sampler.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../instrument/Instrument");

require("../core/Buffers");

require("../source/BufferSource");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class Automatically interpolates between a set of pitched samples. Pass in an object which maps the note's pitch or midi value to the url, then you can trigger the attack and release of that note like other instruments. By automatically repitching the samples, it is possible to play pitches which were not explicitly included which can save loading time.
 *        For sample or buffer playback where repitching is not necessary, use [Tone.Player](https://tonejs.github.io/docs/Player).
 * @param {Object} samples An object of samples mapping either Midi
 *                         Note Numbers or Scientific Pitch Notation
 *                         to the url of that sample.
 * @param {Function=} onload The callback to invoke when all of the samples are loaded.
 * @param {String=} baseUrl The root URL of all of the samples, which is prepended to all the URLs.
 * @example
 * var sampler = new Tone.Sampler({
 * 	"C3" : "path/to/C3.mp3",
 * 	"D#3" : "path/to/Dsharp3.mp3",
 * 	"F#3" : "path/to/Fsharp3.mp3",
 * 	"A3" : "path/to/A3.mp3",
 * }, function(){
 * 	//sampler will repitch the closest sample
 * 	sampler.triggerAttack("D3")
 * })
 * @extends {Tone.Instrument}
 */
_Tone.default.Sampler = function (urls) {
  // shift arguments over one. Those are the remainder of the options
  var args = Array.prototype.slice.call(arguments);
  args.shift();

  var options = _Tone.default.defaults(args, ["onload", "baseUrl"], _Tone.default.Sampler);

  _Tone.default.Instrument.call(this, options);

  var urlMap = {};

  for (var note in urls) {
    if (_Tone.default.isNote(note)) {
      //convert the note name to MIDI
      var mid = _Tone.default.Frequency(note).toMidi();

      urlMap[mid] = urls[note];
    } else if (!isNaN(parseFloat(note))) {
      //otherwise if it's numbers assume it's midi
      urlMap[note] = urls[note];
    } else {
      throw new Error("Tone.Sampler: url keys must be the note's pitch");
    }
  }
  /**
   * The stored and loaded buffers
   * @type {Tone.Buffers}
   * @private
   */


  this._buffers = new _Tone.default.Buffers(urlMap, options.onload, options.baseUrl);
  /**
   * The object of all currently playing BufferSources
   * @type {Object}
   * @private
   */

  this._activeSources = {};
  /**
   * The envelope applied to the beginning of the sample.
   * @type {Time}
   */

  this.attack = options.attack;
  /**
   * The envelope applied to the end of the envelope.
   * @type {Time}
   */

  this.release = options.release;
  /**
   *  The shape of the attack/release curve.
   *  Either "linear" or "exponential"
   *  @type {String}
   */

  this.curve = options.curve;
};

_Tone.default.extend(_Tone.default.Sampler, _Tone.default.Instrument);
/**
 * The defaults
 * @const
 * @type {Object}
 */


_Tone.default.Sampler.defaults = {
  "attack": 0,
  "release": 0.1,
  "onload": _Tone.default.noOp,
  "baseUrl": "",
  "curve": "exponential"
};
/**
 * Returns the difference in steps between the given midi note at the closets sample.
 * @param  {Midi} midi
 * @return {Interval}
 * @private
 */

_Tone.default.Sampler.prototype._findClosest = function (midi) {
  //searches within 8 octaves of the given midi note
  var MAX_INTERVAL = 96;
  var interval = 0;

  while (interval < MAX_INTERVAL) {
    // check above and below
    if (this._buffers.has(midi + interval)) {
      return -interval;
    } else if (this._buffers.has(midi - interval)) {
      return interval;
    }

    interval++;
  }

  throw new Error("No available buffers for note: " + midi);
};
/**
 * @param  {(Frequency|Frequency[])} notes	The note to play, or an array of notes.
 * @param  {Time=} time     When to play the note
 * @param  {NormalRange=} velocity The velocity to play the sample back.
 * @return {Tone.Sampler}          this
 */


_Tone.default.Sampler.prototype.triggerAttack = function (notes, time, velocity) {
  this.log("triggerAttack", notes, time, velocity);

  if (!Array.isArray(notes)) {
    notes = [notes];
  }

  for (var i = 0; i < notes.length; i++) {
    var midi = _Tone.default.Frequency(notes[i]).toMidi(); // find the closest note pitch


    var difference = this._findClosest(midi);

    var closestNote = midi - difference;

    var buffer = this._buffers.get(closestNote);

    var playbackRate = _Tone.default.intervalToFrequencyRatio(difference); // play that note


    var source = new _Tone.default.BufferSource({
      "buffer": buffer,
      "playbackRate": playbackRate,
      "fadeIn": this.attack,
      "fadeOut": this.release,
      "curve": this.curve
    }).connect(this.output);
    source.start(time, 0, buffer.duration / playbackRate, velocity); // add it to the active sources

    if (!_Tone.default.isArray(this._activeSources[midi])) {
      this._activeSources[midi] = [];
    }

    this._activeSources[midi].push(source); //remove it when it's done


    source.onended = function () {
      if (this._activeSources && this._activeSources[midi]) {
        var index = this._activeSources[midi].indexOf(source);

        if (index !== -1) {
          this._activeSources[midi].splice(index, 1);
        }
      }
    }.bind(this);
  }

  return this;
};
/**
 * @param  {(Frequency|Frequency[])} notes	The note to release, or an array of notes.
 * @param  {Time=} time     	When to release the note.
 * @return {Tone.Sampler}	this
 */


_Tone.default.Sampler.prototype.triggerRelease = function (notes, time) {
  this.log("triggerRelease", notes, time);

  if (!Array.isArray(notes)) {
    notes = [notes];
  }

  for (var i = 0; i < notes.length; i++) {
    var midi = _Tone.default.Frequency(notes[i]).toMidi(); // find the note


    if (this._activeSources[midi] && this._activeSources[midi].length) {
      time = this.toSeconds(time); //stop all the sources on that midi note

      this._activeSources[midi].forEach(function (source) {
        source.stop(time);
      });

      this._activeSources[midi] = [];
    }
  }

  return this;
};
/**
 * Release all currently active notes.
 * @param  {Time=} time     	When to release the notes.
 * @return {Tone.Sampler}	this
 */


_Tone.default.Sampler.prototype.releaseAll = function (time) {
  time = this.toSeconds(time);

  for (var note in this._activeSources) {
    var sources = this._activeSources[note];

    while (sources.length) {
      var source = sources.shift();
      source.stop(time);
    }
  }

  return this;
};
/**
 * Sync the instrument to the Transport. All subsequent calls of
 * [triggerAttack](#triggerattack) and [triggerRelease](#triggerrelease)
 * will be scheduled along the transport.
 * @example
 * synth.sync()
 * //schedule 3 notes when the transport first starts
 * synth.triggerAttackRelease('8n', 0)
 * synth.triggerAttackRelease('8n', '8n')
 * synth.triggerAttackRelease('8n', '4n')
 * //start the transport to hear the notes
 * Transport.start()
 * @returns {Tone.Instrument} this
 */


_Tone.default.Sampler.prototype.sync = function () {
  this._syncMethod("triggerAttack", 1);

  this._syncMethod("triggerRelease", 1);

  return this;
};
/**
 * Invoke the attack phase, then after the duration, invoke the release.
 * @param  {(Frequency|Frequency[])} notes	The note to play and release, or an array of notes.
 * @param  {(Time|Time[])} duration The time the note should be held
 * @param  {Time=} time     When to start the attack
 * @param  {NormalRange} [velocity=1] The velocity of the attack
 * @return {Tone.Sampler}          this
 */


_Tone.default.Sampler.prototype.triggerAttackRelease = function (notes, duration, time, velocity) {
  time = this.toSeconds(time);
  this.triggerAttack(notes, time, velocity);

  if (_Tone.default.isArray(duration) && _Tone.default.isArray(notes)) {
    for (var i = 0; i < notes.length; i++) {
      var d = duration[Math.min(i, duration.length - 1)];
      this.triggerRelease(notes[i], time + this.toSeconds(d));
    }
  } else {
    this.triggerRelease(notes, time + this.toSeconds(duration));
  }

  return this;
};
/**
 *  Add a note to the sampler.
 *  @param  {Note|Midi}   note      The buffer's pitch.
 *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,
 *                                                 or a buffer which will be added
 *                                                 with the given name.
 *  @param  {Function=}  callback  The callback to invoke
 *                                 when the url is loaded.
 */


_Tone.default.Sampler.prototype.add = function (note, url, callback) {
  if (_Tone.default.isNote(note)) {
    //convert the note name to MIDI
    var mid = _Tone.default.Frequency(note).toMidi();

    this._buffers.add(mid, url, callback);
  } else if (!isNaN(parseFloat(note))) {
    //otherwise if it's numbers assume it's midi
    this._buffers.add(note, url, callback);
  } else {
    throw new Error("Tone.Sampler: note must be the note's pitch. Instead got " + note);
  }
};
/**
 * If the buffers are loaded or not
 * @memberOf Tone.Sampler#
 * @type {Boolean}
 * @name loaded
 * @readOnly
 */


Object.defineProperty(_Tone.default.Sampler.prototype, "loaded", {
  "get": function () {
    return this._buffers.loaded;
  }
});
/**
 * Clean up
 * @return {Tone.Sampler} this
 */

_Tone.default.Sampler.prototype.dispose = function () {
  _Tone.default.Instrument.prototype.dispose.call(this);

  this._buffers.dispose();

  this._buffers = null;

  for (var midi in this._activeSources) {
    this._activeSources[midi].forEach(function (source) {
      source.dispose();
    });
  }

  this._activeSources = null;
  return this;
};

var _default = _Tone.default.Sampler;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../instrument/Instrument":"../node_modules/tone/tone/instrument/Instrument.js","../core/Buffers":"../node_modules/tone/tone/core/Buffers.js","../source/BufferSource":"../node_modules/tone/tone/source/BufferSource.js"}],"../node_modules/tone/tone/signal/GainToAudio.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/WaveShaper");

require("../signal/Signal");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Maps a NormalRange [0, 1] to an AudioRange [-1, 1]. 
 *         See also Tone.AudioToGain. 
 *
 *  @extends {Tone.SignalBase}
 *  @constructor
 *  @example
 * var g2a = new Tone.GainToAudio();
 */
_Tone.default.GainToAudio = function () {
  _Tone.default.SignalBase.call(this);
  /**
   *  @type {WaveShaperNode}
   *  @private
   */


  this._norm = this.input = this.output = new _Tone.default.WaveShaper(function (x) {
    return Math.abs(x) * 2 - 1;
  });
};

_Tone.default.extend(_Tone.default.GainToAudio, _Tone.default.SignalBase);
/**
 *  clean up
 *  @returns {Tone.GainToAudio} this
 */


_Tone.default.GainToAudio.prototype.dispose = function () {
  _Tone.default.SignalBase.prototype.dispose.call(this);

  this._norm.dispose();

  this._norm = null;
  return this;
};

var _default = _Tone.default.GainToAudio;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/WaveShaper":"../node_modules/tone/tone/signal/WaveShaper.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js"}],"../node_modules/tone/tone/signal/Normalize.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../signal/Add");

require("../signal/Multiply");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Normalize takes an input min and max and maps it linearly to NormalRange [0,1]
 *
 *  @extends {Tone.SignalBase}
 *  @constructor
 *  @param {number} inputMin the min input value
 *  @param {number} inputMax the max input value
 *  @example
 * var norm = new Tone.Normalize(2, 4);
 * var sig = new Tone.Signal(3).connect(norm);
 * //output of norm is 0.5. 
 */
_Tone.default.Normalize = function (inputMin, inputMax) {
  _Tone.default.SignalBase.call(this);
  /**
   *  the min input value
   *  @type {number}
   *  @private
   */


  this._inputMin = _Tone.default.defaultArg(inputMin, 0);
  /**
   *  the max input value
   *  @type {number}
   *  @private
   */

  this._inputMax = _Tone.default.defaultArg(inputMax, 1);
  /**
   *  subtract the min from the input
   *  @type {Tone.Add}
   *  @private
   */

  this._sub = this.input = new _Tone.default.Add(0);
  /**
   *  divide by the difference between the input and output
   *  @type {Tone.Multiply}
   *  @private
   */

  this._div = this.output = new _Tone.default.Multiply(1);

  this._sub.connect(this._div);

  this._setRange();
};

_Tone.default.extend(_Tone.default.Normalize, _Tone.default.SignalBase);
/**
 * The minimum value the input signal will reach.
 * @memberOf Tone.Normalize#
 * @type {number}
 * @name min
 */


Object.defineProperty(_Tone.default.Normalize.prototype, "min", {
  get: function () {
    return this._inputMin;
  },
  set: function (min) {
    this._inputMin = min;

    this._setRange();
  }
});
/**
 * The maximum value the input signal will reach.
 * @memberOf Tone.Normalize#
 * @type {number}
 * @name max
 */

Object.defineProperty(_Tone.default.Normalize.prototype, "max", {
  get: function () {
    return this._inputMax;
  },
  set: function (max) {
    this._inputMax = max;

    this._setRange();
  }
});
/**
 *  set the values
 *  @private
 */

_Tone.default.Normalize.prototype._setRange = function () {
  this._sub.value = -this._inputMin;
  this._div.value = 1 / (this._inputMax - this._inputMin);
};
/**
 *  clean up
 *  @returns {Tone.Normalize} this
 */


_Tone.default.Normalize.prototype.dispose = function () {
  _Tone.default.SignalBase.prototype.dispose.call(this);

  this._sub.dispose();

  this._sub = null;

  this._div.dispose();

  this._div = null;
  return this;
};

var _default = _Tone.default.Normalize;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../signal/Add":"../node_modules/tone/tone/signal/Add.js","../signal/Multiply":"../node_modules/tone/tone/signal/Multiply.js"}],"../node_modules/tone/tone/signal/TransportTimelineSignal.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Transport");

require("../signal/Signal");

require("../type/TransportTime");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class Tone.TransportTimelineSignal extends Tone.Signal, but adds the ability to synchronize the signal to the signal to the Tone.Transport
 * @extends {Tone.Signal}
 */
_Tone.default.TransportTimelineSignal = function () {
  _Tone.default.Signal.apply(this, arguments);
  /**
   * The real signal output
   * @type {Tone.Signal}
   * @private
   */


  this.output = this._outputSig = new _Tone.default.Signal(this._initialValue);
  /**
   * Keep track of the last value. (small optimization)
   * @private
   * @type {Number}
   */

  this._lastVal = this.value;
  /**
   * The event id of the tick update loop
   * @private
   * @type {Number}
   */

  this._synced = _Tone.default.Transport.scheduleRepeat(this._onTick.bind(this), "1i");
  /**
   * A bound version of the anchor value methods
   * @type {Function}
   * @private
   */

  this._bindAnchorValue = this._anchorValue.bind(this);

  _Tone.default.Transport.on("start stop pause", this._bindAnchorValue);

  this._events.memory = Infinity;
};

_Tone.default.extend(_Tone.default.TransportTimelineSignal, _Tone.default.Signal);
/**
 * Callback which is invoked every tick.
 * @private
 * @param  {Number} time
 * @return {Tone.TransportTimelineSignal}      this
 */


_Tone.default.TransportTimelineSignal.prototype._onTick = function (time) {
  var val = this.getValueAtTime(_Tone.default.Transport.seconds);

  if (this._lastVal !== val) {
    this._lastVal = val; //approximate ramp curves with linear ramps

    this._outputSig.linearRampToValueAtTime(val, time);
  }
};
/**
 * Anchor the value at the start and stop of the Transport
 * @param  {Number} time The time of the event
 * @return {Tone.TransportTimelineSignal}      this
 * @private
 */


_Tone.default.TransportTimelineSignal.prototype._anchorValue = function (time) {
  var val = this.getValueAtTime(_Tone.default.Transport.seconds);
  this._lastVal = val;

  this._outputSig.cancelScheduledValues(time);

  this._outputSig.setValueAtTime(val, time);

  return this;
};
/**
 *  Get the scheduled value at the given time. This will
 *  return the unconverted (raw) value.
 *  @param  {TransportTime}  time  The time in seconds.
 *  @return  {Number}  The scheduled value at the given time.
 */


_Tone.default.TransportTimelineSignal.prototype.getValueAtTime = function (time) {
  time = _Tone.default.TransportTime(time);
  return _Tone.default.Signal.prototype.getValueAtTime.call(this, time);
};
/**
 * Set the output of the signal at the given time
 * @param  {Number} value The value to change to at the given time
 * @param  {TransportTime} time  The time to change the signal
 * @return {Tone.TransportTimelineSignal}       this
 */


_Tone.default.TransportTimelineSignal.prototype.setValueAtTime = function (value, time) {
  time = _Tone.default.TransportTime(time);

  _Tone.default.Signal.prototype.setValueAtTime.call(this, value, time);

  return this;
};
/**
 * Linear ramp to the given value from the previous scheduled point to the given value
 * @param  {Number} value The value to change to at the given time
 * @param  {TransportTime} time  The time to change the signal
 * @return {Tone.TransportTimelineSignal}       this
 */


_Tone.default.TransportTimelineSignal.prototype.linearRampToValueAtTime = function (value, time) {
  time = _Tone.default.TransportTime(time);

  _Tone.default.Signal.prototype.linearRampToValueAtTime.call(this, value, time);

  return this;
};
/**
 * Exponential ramp to the given value from the previous scheduled point to the given value
 * @param  {Number} value The value to change to at the given time
 * @param  {TransportTime} time  The time to change the signal
 * @return {Tone.TransportTimelineSignal}       this
 */


_Tone.default.TransportTimelineSignal.prototype.exponentialRampToValueAtTime = function (value, time) {
  time = _Tone.default.TransportTime(time);

  _Tone.default.Signal.prototype.exponentialRampToValueAtTime.call(this, value, time);

  return this;
};
/**
 *  Start exponentially approaching the target value at the given time with
 *  a rate having the given time constant.
 *  @param {number} value
 *  @param {TransportTime} startTime
 *  @param {number} timeConstant
 * @return {Tone.TransportTimelineSignal}       this
 */


_Tone.default.TransportTimelineSignal.prototype.setTargetAtTime = function (value, startTime, timeConstant) {
  startTime = _Tone.default.TransportTime(startTime);

  _Tone.default.Signal.prototype.setTargetAtTime.call(this, value, startTime, timeConstant);

  return this;
};
/**
 *  Cancels all scheduled parameter changes with times greater than or
 *  equal to startTime.
 *  @param  {TransportTime} startTime
 *  @returns {Tone.Param} this
 */


_Tone.default.TransportTimelineSignal.prototype.cancelScheduledValues = function (startTime) {
  startTime = _Tone.default.TransportTime(startTime);

  _Tone.default.Signal.prototype.cancelScheduledValues.call(this, startTime);

  return this;
};
/**
 *  Set an array of arbitrary values starting at the given time for the given duration.
 *  @param {Float32Array} values
 *  @param {Time} startTime
 *  @param {Time} duration
 *  @param {NormalRange} [scaling=1] If the values in the curve should be scaled by some value
 *  @returns {Tone.Signal} this
 */


_Tone.default.TransportTimelineSignal.prototype.setValueCurveAtTime = function (values, startTime, duration, scaling) {
  startTime = _Tone.default.TransportTime(startTime);
  duration = _Tone.default.TransportTime(duration);

  _Tone.default.Signal.prototype.setValueCurveAtTime.call(this, values, startTime, duration, scaling);

  return this;
};
/**
 *  This is similar to [cancelScheduledValues](#cancelScheduledValues) except
 *  it holds the automated value at time until the next automated event.
 *  @param  {Time} time
 *  @returns {Tone.TransportTimelineSignal} this
 */


_Tone.default.TransportTimelineSignal.prototype.cancelAndHoldAtTime = function (time) {
  return _Tone.default.Signal.prototype.cancelAndHoldAtTime.call(this, _Tone.default.TransportTime(time));
};
/**
 * Dispose and disconnect
 * @return {Tone.TransportTimelineSignal} this
 */


_Tone.default.TransportTimelineSignal.prototype.dispose = function () {
  _Tone.default.Transport.clear(this._synced);

  _Tone.default.Transport.off("start stop pause", this._syncedCallback);

  this._events.cancel(0);

  _Tone.default.Signal.prototype.dispose.call(this);

  this._outputSig.dispose();

  this._outputSig = null;
};

var _default = _Tone.default.TransportTimelineSignal;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Transport":"../node_modules/tone/tone/core/Transport.js","../signal/Signal":"../node_modules/tone/tone/signal/Signal.js","../type/TransportTime":"../node_modules/tone/tone/type/TransportTime.js"}],"../node_modules/tone/tone/source/GrainPlayer.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../source/Source");

require("../core/Buffer");

require("../source/BufferSource");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * @class Tone.GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).
 *        Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the
 *        amount of time each small chunk of audio is played for and the overlap is the
 *        amount of crossfading transition time between successive grains.
 * @extends {Tone.Source}
 * @param {String|Tone.Buffer} url	The url to load, or the Tone.Buffer to play.
 * @param {Function=} callback The callback to invoke after the url is loaded.
 */
_Tone.default.GrainPlayer = function () {
  var options = _Tone.default.defaults(arguments, ["url", "onload"], _Tone.default.GrainPlayer);

  _Tone.default.Source.call(this, options);
  /**
   *  The audio buffer belonging to the player.
   *  @type  {Tone.Buffer}
   */


  this.buffer = new _Tone.default.Buffer(options.url, options.onload.bind(undefined, this));
  /**
   *  Create a repeating tick to schedule
   *  the grains.
   *  @type  {Tone.Clock}
   *  @private
   */

  this._clock = new _Tone.default.Clock(this._tick.bind(this), options.grainSize);
  /**
   *  @type  {Number}
   *  @private
   */

  this._loopStart = 0;
  /**
   *  @type  {Number}
   *  @private
   */

  this._loopEnd = 0;
  /**
   * All of the currently playing BufferSources
   * @type {Array}
   * @private
   */

  this._activeSources = [];
  /**
   *  @type  {Number}
   *  @private
   */

  this._playbackRate = options.playbackRate;
  /**
   *  @type  {Number}
   *  @private
   */

  this._grainSize = options.grainSize;
  /**
   *  @private
   *  @type {Number}
   */

  this._overlap = options.overlap;
  /**
   *  Adjust the pitch independently of the playbackRate.
   *  @type  {Cents}
   */

  this.detune = options.detune; //setup

  this.overlap = options.overlap;
  this.loop = options.loop;
  this.playbackRate = options.playbackRate;
  this.grainSize = options.grainSize;
  this.loopStart = options.loopStart;
  this.loopEnd = options.loopEnd;
  this.reverse = options.reverse;

  this._clock.on("stop", this._onstop.bind(this));
};

_Tone.default.extend(_Tone.default.GrainPlayer, _Tone.default.Source);
/**
 *  the default parameters
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.GrainPlayer.defaults = {
  "onload": _Tone.default.noOp,
  "overlap": 0.1,
  "grainSize": 0.2,
  "playbackRate": 1,
  "detune": 0,
  "loop": false,
  "loopStart": 0,
  "loopEnd": 0,
  "reverse": false
};
/**
 *  Play the buffer at the given startTime. Optionally add an offset
 *  and/or duration which will play the buffer from a position
 *  within the buffer for the given duration.
 *
 *  @param  {Time} [startTime=now] When the player should start.
 *  @param  {Time} [offset=0] The offset from the beginning of the sample
 *                                 to start at.
 *  @param  {Time=} duration How long the sample should play. If no duration
 *                                is given, it will default to the full length
 *                                of the sample (minus any offset)
 *  @returns {Tone.GrainPlayer} this
 *  @memberOf Tone.GrainPlayer#
 *  @method start
 *  @name start
 */

/**
 *  Internal start method
 *  @param {Time} time
 *  @param {Time} offset
 *  @private
 */

_Tone.default.GrainPlayer.prototype._start = function (time, offset, duration) {
  offset = _Tone.default.defaultArg(offset, 0);
  offset = this.toSeconds(offset);
  time = this.toSeconds(time);
  this._offset = offset;

  this._clock.start(time);

  if (duration) {
    this.stop(time + this.toSeconds(duration));
  }
};
/**
 *  Internal start method
 *  @param {Time} time
 *  @private
 */


_Tone.default.GrainPlayer.prototype._stop = function (time) {
  this._clock.stop(time);
};
/**
 * Invoked when the clock is stopped
 * @param  {Number} time
 * @private
 */


_Tone.default.GrainPlayer.prototype._onstop = function (time) {
  //stop the players
  this._activeSources.forEach(function (source) {
    source.fadeOut = 0;
    source.stop(time);
  });
};
/**
 *  Invoked on each clock tick. scheduled a new
 *  grain at this time.
 *  @param  {Time}  time
 *  @private
 */


_Tone.default.GrainPlayer.prototype._tick = function (time) {
  //check if it should stop looping
  if (!this.loop && this._offset > this.buffer.duration) {
    this.stop(time);
    return;
  } //at the beginning of the file, the fade in should be 0


  var fadeIn = this._offset < this._overlap ? 0 : this._overlap; //create a buffer source

  var source = new _Tone.default.BufferSource({
    "buffer": this.buffer,
    "fadeIn": fadeIn,
    "fadeOut": this._overlap,
    "loop": this.loop,
    "loopStart": this._loopStart,
    "loopEnd": this._loopEnd,
    //compute the playbackRate based on the detune
    "playbackRate": _Tone.default.intervalToFrequencyRatio(this.detune / 100)
  }).connect(this.output);
  source.start(time, this._offset);
  this._offset += this.grainSize;
  source.stop(time + this.grainSize / this.playbackRate); //add it to the active sources

  this._activeSources.push(source); //remove it when it's done


  source.onended = function () {
    var index = this._activeSources.indexOf(source);

    if (index !== -1) {
      this._activeSources.splice(index, 1);
    }
  }.bind(this);
};
/**
 * The playback rate of the sample
 * @memberOf Tone.GrainPlayer#
 * @type {Positive}
 * @name playbackRate
 */


Object.defineProperty(_Tone.default.GrainPlayer.prototype, "playbackRate", {
  get: function () {
    return this._playbackRate;
  },
  set: function (rate) {
    this._playbackRate = rate;
    this.grainSize = this._grainSize;
  }
});
/**
 * The loop start time.
 * @memberOf Tone.GrainPlayer#
 * @type {Time}
 * @name loopStart
 */

Object.defineProperty(_Tone.default.GrainPlayer.prototype, "loopStart", {
  get: function () {
    return this._loopStart;
  },
  set: function (time) {
    this._loopStart = this.toSeconds(time);
  }
});
/**
 * The loop end time.
 * @memberOf Tone.GrainPlayer#
 * @type {Time}
 * @name loopEnd
 */

Object.defineProperty(_Tone.default.GrainPlayer.prototype, "loopEnd", {
  get: function () {
    return this._loopEnd;
  },
  set: function (time) {
    this._loopEnd = this.toSeconds(time);
  }
});
/**
 * The direction the buffer should play in
 * @memberOf Tone.GrainPlayer#
 * @type {boolean}
 * @name reverse
 */

Object.defineProperty(_Tone.default.GrainPlayer.prototype, "reverse", {
  get: function () {
    return this.buffer.reverse;
  },
  set: function (rev) {
    this.buffer.reverse = rev;
  }
});
/**
 * The size of each chunk of audio that the
 * buffer is chopped into and played back at.
 * @memberOf Tone.GrainPlayer#
 * @type {Time}
 * @name grainSize
 */

Object.defineProperty(_Tone.default.GrainPlayer.prototype, "grainSize", {
  get: function () {
    return this._grainSize;
  },
  set: function (size) {
    this._grainSize = this.toSeconds(size);
    this._clock.frequency.value = this._playbackRate / this._grainSize;
  }
});
/**
 * This is the duration of the cross-fade between
 * sucessive grains.
 * @memberOf Tone.GrainPlayer#
 * @type {Time}
 * @name overlap
 */

Object.defineProperty(_Tone.default.GrainPlayer.prototype, "overlap", {
  get: function () {
    return this._overlap;
  },
  set: function (time) {
    this._overlap = this.toSeconds(time);
  }
});
/**
 * If all the buffer is loaded
 * @memberOf Tone.GrainPlayer#
 * @type {Boolean}
 * @name loaded
 * @readOnly
 */

Object.defineProperty(_Tone.default.GrainPlayer.prototype, "loaded", {
  get: function () {
    return this.buffer.loaded;
  }
});
/**
 * Clean up
 * @return {Tone.GrainPlayer} this
 */

_Tone.default.GrainPlayer.prototype.dispose = function () {
  _Tone.default.Source.prototype.dispose.call(this);

  this.buffer.dispose();
  this.buffer = null;

  this._clock.dispose();

  this._clock = null;

  this._activeSources.forEach(function (source) {
    source.dispose();
  });

  this._activeSources = null;
  return this;
};

var _default = _Tone.default.GrainPlayer;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../source/Source":"../node_modules/tone/tone/source/Source.js","../core/Buffer":"../node_modules/tone/tone/core/Buffer.js","../source/BufferSource":"../node_modules/tone/tone/source/BufferSource.js"}],"../node_modules/tone/tone/source/Player.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../core/Buffer");

require("../source/Source");

require("../source/TickSource");

require("../source/BufferSource");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.Player is an audio file player with start, loop, and stop functions.
 *
 *  @constructor
 *  @extends {Tone.Source}
 *  @param {string|AudioBuffer} url Either the AudioBuffer or the url from
 *                                  which to load the AudioBuffer
 *  @param {Function=} onload The function to invoke when the buffer is loaded.
 *                            Recommended to use Tone.Buffer.on('load') instead.
 *  @example
 * var player = new Tone.Player("./path/to/sample.mp3").toMaster();
 * //play as soon as the buffer is loaded
 * player.autostart = true;
 */
_Tone.default.Player = function (url) {
  var options;

  if (url instanceof _Tone.default.Buffer && url.loaded) {
    url = url.get();
    options = _Tone.default.Player.defaults;
  } else {
    options = _Tone.default.defaults(arguments, ["url", "onload"], _Tone.default.Player);
  }

  _Tone.default.Source.call(this, options);
  /**
   *  If the file should play as soon
   *  as the buffer is loaded.
   *  @type {Boolean}
   *  @example
   * //will play as soon as it's loaded
   * var player = new Tone.Player({
   * 	"url" : "./path/to/sample.mp3",
   * 	"autostart" : true,
   * }).toMaster();
   */


  this.autostart = options.autostart;
  /**
   *  the buffer
   *  @private
   *  @type {Tone.Buffer}
   */

  this._buffer = new _Tone.default.Buffer({
    "url": options.url,
    "onload": this._onload.bind(this, options.onload),
    "reverse": options.reverse
  });

  if (url instanceof AudioBuffer) {
    this._buffer.set(url);
  }
  /**
   *  if the buffer should loop once it's over
   *  @type {Boolean}
   *  @private
   */


  this._loop = options.loop;
  /**
   *  if 'loop' is true, the loop will start at this position
   *  @type {Time}
   *  @private
   */

  this._loopStart = options.loopStart;
  /**
   *  if 'loop' is true, the loop will end at this position
   *  @type {Time}
   *  @private
   */

  this._loopEnd = options.loopEnd;
  /**
   *  the playback rate
   *  @private
   *  @type {Number}
   */

  this._playbackRate = options.playbackRate;
  /**
   *  All of the active buffer source nodes
   *  @type {Array<Tone.BufferSource>}
   *  @private
   */

  this._activeSources = [];
  /**
   *  The fadeIn time of the amplitude envelope.
   *  @type {Time}
   */

  this.fadeIn = options.fadeIn;
  /**
   *  The fadeOut time of the amplitude envelope.
   *  @type {Time}
   */

  this.fadeOut = options.fadeOut;
};

_Tone.default.extend(_Tone.default.Player, _Tone.default.Source);
/**
 *  the default parameters
 *  @static
 *  @const
 *  @type {Object}
 */


_Tone.default.Player.defaults = {
  "onload": _Tone.default.noOp,
  "playbackRate": 1,
  "loop": false,
  "autostart": false,
  "loopStart": 0,
  "loopEnd": 0,
  "reverse": false,
  "fadeIn": 0,
  "fadeOut": 0
};
/**
 *  Load the audio file as an audio buffer.
 *  Decodes the audio asynchronously and invokes
 *  the callback once the audio buffer loads.
 *  Note: this does not need to be called if a url
 *  was passed in to the constructor. Only use this
 *  if you want to manually load a new url.
 * @param {string} url The url of the buffer to load.
 *                     Filetype support depends on the
 *                     browser.
 *  @param  {Function=} callback The function to invoke once
 *                               the sample is loaded.
 *  @returns {Promise}
 */

_Tone.default.Player.prototype.load = function (url, callback) {
  return this._buffer.load(url, this._onload.bind(this, callback));
};
/**
 * Internal callback when the buffer is loaded.
 * @private
 */


_Tone.default.Player.prototype._onload = function (callback) {
  callback = _Tone.default.defaultArg(callback, _Tone.default.noOp);
  callback(this);

  if (this.autostart) {
    this.start();
  }
};
/**
 * Internal callback when the buffer is done playing.
 * @private
 */


_Tone.default.Player.prototype._onSourceEnd = function (source) {
  var index = this._activeSources.indexOf(source);

  this._activeSources.splice(index, 1);

  if (this._activeSources.length === 0 && !this._synced) {
    this._state.setStateAtTime(_Tone.default.State.Stopped, _Tone.default.now());
  }
};
/**
 *  Play the buffer at the given startTime. Optionally add an offset
 *  and/or duration which will play the buffer from a position
 *  within the buffer for the given duration.
 *
 *  @param  {Time} [startTime=now] When the player should start.
 *  @param  {Time} [offset=0] The offset from the beginning of the sample
 *                                 to start at.
 *  @param  {Time=} duration How long the sample should play. If no duration
 *                                is given, it will default to the full length
 *                                of the sample (minus any offset)
 *  @returns {Tone.Player} this
 *  @memberOf Tone.Player#
 *  @method start
 *  @name start
 */

/**
 *  Internal start method
 *  @private
 */


_Tone.default.Player.prototype._start = function (startTime, offset, duration) {
  //if it's a loop the default offset is the loopstart point
  if (this._loop) {
    offset = _Tone.default.defaultArg(offset, this._loopStart);
  } else {
    //otherwise the default offset is 0
    offset = _Tone.default.defaultArg(offset, 0);
  } //compute the values in seconds


  offset = this.toSeconds(offset); //if it's synced, it should factor in the playback rate for computing the offset

  if (this._synced) {
    offset *= this._playbackRate;
  } //compute the duration which is either the passed in duration of the buffer.duration - offset


  var computedDuration = _Tone.default.defaultArg(duration, Math.max(this._buffer.duration - offset, 0));

  computedDuration = this.toSeconds(computedDuration); //scale it by the playback rate

  computedDuration = computedDuration / this._playbackRate; //get the start time

  startTime = this.toSeconds(startTime); //make the source

  var source = new _Tone.default.BufferSource({
    "buffer": this._buffer,
    "loop": this._loop,
    "loopStart": this._loopStart,
    "loopEnd": this._loopEnd,
    "onended": this._onSourceEnd.bind(this),
    "playbackRate": this._playbackRate,
    "fadeIn": this.fadeIn,
    "fadeOut": this.fadeOut
  }).connect(this.output); //set the looping properties

  if (!this._loop && !this._synced) {
    //if it's not looping, set the state change at the end of the sample
    this._state.setStateAtTime(_Tone.default.State.Stopped, startTime + computedDuration);
  } //add it to the array of active sources


  this._activeSources.push(source); //start it


  if (this._loop && _Tone.default.isUndef(duration)) {
    source.start(startTime, offset);
  } else {
    //subtract the fade out time
    source.start(startTime, offset, computedDuration - this.toSeconds(this.fadeOut));
  }

  return this;
};
/**
 *  Stop playback.
 *  @private
 *  @param  {Time} [time=now]
 *  @returns {Tone.Player} this
 */


_Tone.default.Player.prototype._stop = function (time) {
  time = this.toSeconds(time);

  this._activeSources.forEach(function (source) {
    source.stop(time);
  });

  return this;
};
/**
 * Stop and then restart the player from the beginning (or offset)
 *  @param  {Time} [startTime=now] When the player should start.
 *  @param  {Time} [offset=0] The offset from the beginning of the sample
 *                                 to start at.
 *  @param  {Time=} duration How long the sample should play. If no duration
 *                                is given, it will default to the full length
 *                                of the sample (minus any offset)
 *  @returns {Tone.Player} this
 */


_Tone.default.Player.prototype.restart = function (time, offset, duration) {
  this._stop(time);

  this._start(time, offset, duration);

  return this;
};
/**
 *  Seek to a specific time in the player's buffer. If the
 *  source is no longer playing at that time, it will stop.
 *  If you seek to a time that
 *  @param {Time} offset The time to seek to.
 *  @param {Time=} time The time for the seek event to occur.
 *  @return {Tone.Player} this
 *  @example
 * source.start(0.2);
 * source.stop(0.4);
 */


_Tone.default.Player.prototype.seek = function (offset, time) {
  time = this.toSeconds(time);

  if (this._state.getValueAtTime(time) === _Tone.default.State.Started) {
    offset = this.toSeconds(offset); // if it's currently playing, stop it

    this._stop(time); //restart it at the given time


    this._start(time, offset);
  }

  return this;
};
/**
 *  Set the loop start and end. Will only loop if loop is
 *  set to true.
 *  @param {Time} loopStart The loop end time
 *  @param {Time} loopEnd The loop end time
 *  @returns {Tone.Player} this
 *  @example
 * //loop 0.1 seconds of the file.
 * player.setLoopPoints(0.2, 0.3);
 * player.loop = true;
 */


_Tone.default.Player.prototype.setLoopPoints = function (loopStart, loopEnd) {
  this.loopStart = loopStart;
  this.loopEnd = loopEnd;
  return this;
};
/**
 * If loop is true, the loop will start at this position.
 * @memberOf Tone.Player#
 * @type {Time}
 * @name loopStart
 */


Object.defineProperty(_Tone.default.Player.prototype, "loopStart", {
  get: function () {
    return this._loopStart;
  },
  set: function (loopStart) {
    this._loopStart = loopStart; //get the current source

    this._activeSources.forEach(function (source) {
      source.loopStart = loopStart;
    });
  }
});
/**
 * If loop is true, the loop will end at this position.
 * @memberOf Tone.Player#
 * @type {Time}
 * @name loopEnd
 */

Object.defineProperty(_Tone.default.Player.prototype, "loopEnd", {
  get: function () {
    return this._loopEnd;
  },
  set: function (loopEnd) {
    this._loopEnd = loopEnd; //get the current source

    this._activeSources.forEach(function (source) {
      source.loopEnd = loopEnd;
    });
  }
});
/**
 * The audio buffer belonging to the player.
 * @memberOf Tone.Player#
 * @type {Tone.Buffer}
 * @name buffer
 */

Object.defineProperty(_Tone.default.Player.prototype, "buffer", {
  get: function () {
    return this._buffer;
  },
  set: function (buffer) {
    this._buffer.set(buffer);
  }
});
/**
 * If the buffer should loop once it's over.
 * @memberOf Tone.Player#
 * @type {Boolean}
 * @name loop
 */

Object.defineProperty(_Tone.default.Player.prototype, "loop", {
  get: function () {
    return this._loop;
  },
  set: function (loop) {
    //if no change, do nothing
    if (this._loop === loop) {
      return;
    }

    this._loop = loop; //set the loop of all of the sources

    this._activeSources.forEach(function (source) {
      source.loop = loop;
    });

    if (loop) {
      //remove the next stopEvent
      var stopEvent = this._state.getNextState(_Tone.default.State.Stopped, this.now());

      if (stopEvent) {
        this._state.cancel(stopEvent.time);
      }
    }
  }
});
/**
 * The playback speed. 1 is normal speed. This is not a signal because
 * Safari and iOS currently don't support playbackRate as a signal.
 * @memberOf Tone.Player#
 * @type {Number}
 * @name playbackRate
 */

Object.defineProperty(_Tone.default.Player.prototype, "playbackRate", {
  get: function () {
    return this._playbackRate;
  },
  set: function (rate) {
    this._playbackRate = rate;
    var now = this.now(); //cancel the stop event since it's at a different time now

    var stopEvent = this._state.getNextState(_Tone.default.State.Stopped, now);

    if (stopEvent) {
      this._state.cancel(stopEvent.time);
    } //set all the sources


    this._activeSources.forEach(function (source) {
      source.cancelStop();
      source.playbackRate.setValueAtTime(rate, now);
    });
  }
});
/**
 * The direction the buffer should play in
 * @memberOf Tone.Player#
 * @type {Boolean}
 * @name reverse
 */

Object.defineProperty(_Tone.default.Player.prototype, "reverse", {
  get: function () {
    return this._buffer.reverse;
  },
  set: function (rev) {
    this._buffer.reverse = rev;
  }
});
/**
 * If all the buffer is loaded
 * @memberOf Tone.Player#
 * @type {Boolean}
 * @name loaded
 * @readOnly
 */

Object.defineProperty(_Tone.default.Player.prototype, "loaded", {
  get: function () {
    return this._buffer.loaded;
  }
});
/**
 *  Dispose and disconnect.
 *  @return {Tone.Player} this
 */

_Tone.default.Player.prototype.dispose = function () {
  //disconnect all of the players
  this._activeSources.forEach(function (source) {
    source.dispose();
  });

  this._activeSources = null;

  _Tone.default.Source.prototype.dispose.call(this);

  this._buffer.dispose();

  this._buffer = null;
  return this;
};

var _default = _Tone.default.Player;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../core/Buffer":"../node_modules/tone/tone/core/Buffer.js","../source/Source":"../node_modules/tone/tone/source/Source.js","../source/TickSource":"../node_modules/tone/tone/source/TickSource.js","../source/BufferSource":"../node_modules/tone/tone/source/BufferSource.js"}],"../node_modules/tone/tone/source/Players.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../source/Player");

require("../component/Volume");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.Players combines multiple [Tone.Player](Player) objects.
 *
 *  @constructor
 *  @extends {Tone.AudioNode}
 *  @param {Object} urls An object mapping a name to a url.
 *  @param {function=} onload The function to invoke when all buffers are loaded.
 */
_Tone.default.Players = function (urls) {
  var args = Array.prototype.slice.call(arguments);
  args.shift();

  var options = _Tone.default.defaults(args, ["onload"], _Tone.default.Players);

  _Tone.default.AudioNode.call(this, options);
  /**
   *  The output volume node
   *  @type  {Tone.Volume}
   *  @private
   */


  this._volume = this.output = new _Tone.default.Volume(options.volume);
  /**
   * The volume of the output in decibels.
   * @type {Decibels}
   * @signal
   * @example
   * source.volume.value = -6;
   */

  this.volume = this._volume.volume;

  this._readOnly("volume"); //make the output explicitly stereo


  this._volume.output.output.channelCount = 2;
  this._volume.output.output.channelCountMode = "explicit"; //mute initially

  this.mute = options.mute;
  /**
   * The container of all of the players
   * @type {Object}
   * @private
   */

  this._players = {};
  /**
   * The loading count
   * @type {Number}
   * @private
   */

  this._loadingCount = 0;
  /**
   * private holder of the fadeIn time
   * @type {Time}
   * @private
   */

  this._fadeIn = options.fadeIn;
  /**
   * private holder of the fadeOut time
   * @type {Time}
   * @private
   */

  this._fadeOut = options.fadeOut; //add all of the players

  for (var name in urls) {
    this._loadingCount++;
    this.add(name, urls[name], this._bufferLoaded.bind(this, options.onload));
  }
};

_Tone.default.extend(_Tone.default.Players, _Tone.default.AudioNode);
/**
 * The default values
 * @type {Object}
 */


_Tone.default.Players.defaults = {
  "volume": 0,
  "mute": false,
  "onload": _Tone.default.noOp,
  "fadeIn": 0,
  "fadeOut": 0
};
/**
 *  A buffer was loaded. decrement the counter.
 *  @param  {Function}  callback
 *  @private
 */

_Tone.default.Players.prototype._bufferLoaded = function (callback) {
  this._loadingCount--;

  if (this._loadingCount === 0 && callback) {
    callback(this);
  }
};
/**
 * Mute the output.
 * @memberOf Tone.Source#
 * @type {boolean}
 * @name mute
 * @example
 * //mute the output
 * source.mute = true;
 */


Object.defineProperty(_Tone.default.Players.prototype, "mute", {
  get: function () {
    return this._volume.mute;
  },
  set: function (mute) {
    this._volume.mute = mute;
  }
});
/**
 * The fadeIn time of the amplitude envelope.
 * @memberOf Tone.Source#
 * @type {Time}
 * @name fadeIn
 */

Object.defineProperty(_Tone.default.Players.prototype, "fadeIn", {
  get: function () {
    return this._fadeIn;
  },
  set: function (fadeIn) {
    this._fadeIn = fadeIn;

    this._forEach(function (player) {
      player.fadeIn = fadeIn;
    });
  }
});
/**
 * The fadeOut time of the amplitude envelope.
 * @memberOf Tone.Source#
 * @type {Time}
 * @name fadeOut
 */

Object.defineProperty(_Tone.default.Players.prototype, "fadeOut", {
  get: function () {
    return this._fadeOut;
  },
  set: function (fadeOut) {
    this._fadeOut = fadeOut;

    this._forEach(function (player) {
      player.fadeOut = fadeOut;
    });
  }
});
/**
 * The state of the players object. Returns "started" if any of the players are playing.
 * @memberOf Tone.Players#
 * @type {String}
 * @name state
 * @readOnly
 */

Object.defineProperty(_Tone.default.Players.prototype, "state", {
  get: function () {
    var playing = false;

    this._forEach(function (player) {
      playing = playing || player.state === _Tone.default.State.Started;
    });

    return playing ? _Tone.default.State.Started : _Tone.default.State.Stopped;
  }
});
/**
 *  True if the buffers object has a buffer by that name.
 *  @param  {String|Number}  name  The key or index of the
 *                                 buffer.
 *  @return  {Boolean}
 */

_Tone.default.Players.prototype.has = function (name) {
  return this._players.hasOwnProperty(name);
};
/**
 *  Get a player by name.
 *  @param  {String}  name  The players name as defined in
 *                          the constructor object or `add` method.
 *  @return  {Tone.Player}
 */


_Tone.default.Players.prototype.get = function (name) {
  if (this.has(name)) {
    return this._players[name];
  } else {
    throw new Error("Tone.Players: no player named " + name);
  }
};
/**
 * Iterate over all of the players
 * @param  {Function} callback
 * @return {Tone.Players}            this
 * @private
 */


_Tone.default.Players.prototype._forEach = function (callback) {
  for (var playerName in this._players) {
    callback(this._players[playerName], playerName);
  }

  return this;
};
/**
 * If all the buffers are loaded or not
 * @memberOf Tone.Players#
 * @type {Boolean}
 * @name loaded
 * @readOnly
 */


Object.defineProperty(_Tone.default.Players.prototype, "loaded", {
  get: function () {
    var isLoaded = true;

    this._forEach(function (player) {
      isLoaded = isLoaded && player.loaded;
    });

    return isLoaded;
  }
});
/**
 *  Add a player by name and url to the Players
 *  @param  {String}    name      A unique name to give the player
 *  @param  {String|Tone.Buffer|Audiobuffer}  url  Either the url of the bufer,
 *                                                 or a buffer which will be added
 *                                                 with the given name.
 *  @param  {Function=}  callback  The callback to invoke
 *                                 when the url is loaded.
 */

_Tone.default.Players.prototype.add = function (name, url, callback) {
  this._players[name] = new _Tone.default.Player(url, callback).connect(this.output);
  this._players[name].fadeIn = this._fadeIn;
  this._players[name].fadeOut = this._fadeOut;
  return this;
};
/**
 * Stop all of the players at the given time
 * @param {Time} time The time to stop all of the players.
 * @return {Tone.Players} this
 */


_Tone.default.Players.prototype.stopAll = function (time) {
  this._forEach(function (player) {
    player.stop(time);
  });
};
/**
 *  Dispose and disconnect.
 *  @return {Tone.Players} this
 */


_Tone.default.Players.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this._volume.dispose();

  this._volume = null;

  this._writable("volume");

  this.volume = null;
  this.output = null;

  this._forEach(function (player) {
    player.dispose();
  });

  this._players = null;
  return this;
};

var _default = _Tone.default.Players;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../source/Player":"../node_modules/tone/tone/source/Player.js","../component/Volume":"../node_modules/tone/tone/component/Volume.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/source/UserMedia.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../component/Volume");

require("../core/AudioNode");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class  Tone.UserMedia uses MediaDevices.getUserMedia to open up
 *          and external microphone or audio input. Check
 *          [MediaDevices API Support](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia)
 *          to see which browsers are supported. Access to an external input
 *          is limited to secure (HTTPS) connections.
 *
 *  @constructor
 *  @extends {Tone.AudioNode}
 *  @param {Decibels=} volume The level of the input
 *  @example
 * //list the inputs and open the third one
 * var motu = new Tone.UserMedia();
 *
 * //opening the input asks the user to activate their mic
 * motu.open().then(function(){
 * 	//promise resolves when input is available
 * });
 */
_Tone.default.UserMedia = function () {
  var options = _Tone.default.defaults(arguments, ["volume"], _Tone.default.UserMedia);

  _Tone.default.AudioNode.call(this);
  /**
   *  The MediaStreamNode
   *  @type {MediaStreamAudioSourceNode}
   *  @private
   */


  this._mediaStream = null;
  /**
   *  The media stream created by getUserMedia.
   *  @type {LocalMediaStream}
   *  @private
   */

  this._stream = null;
  /**
   *  The open device
   *  @type  {MediaDeviceInfo}
   *  @private
   */

  this._device = null;
  /**
   *  The output volume node
   *  @type  {Tone.Volume}
   *  @private
   */

  this._volume = this.output = new _Tone.default.Volume(options.volume);
  /**
   * The volume of the output in decibels.
   * @type {Decibels}
   * @signal
   * @example
   * input.volume.value = -6;
   */

  this.volume = this._volume.volume;

  this._readOnly("volume");

  this.mute = options.mute;
};

_Tone.default.extend(_Tone.default.UserMedia, _Tone.default.AudioNode);
/**
 * the default parameters
 * @type {Object}
 */


_Tone.default.UserMedia.defaults = {
  "volume": 0,
  "mute": false
};
/**
 *  Open the media stream. If a string is passed in, it is assumed
 *  to be the label or id of the stream, if a number is passed in,
 *  it is the input number of the stream.
 *  @param  {String|Number} [labelOrId="default"] The label or id of the audio input media device.
 *                                                With no argument, the default stream is opened.
 *  @return {Promise} The promise is resolved when the stream is open.
 */

_Tone.default.UserMedia.prototype.open = function (labelOrId) {
  //close the previous stream
  if (this.state === _Tone.default.State.Started) {
    this.close();
  }

  return _Tone.default.UserMedia.enumerateDevices().then(function (devices) {
    var device;

    if (_Tone.default.isNumber(labelOrId)) {
      device = devices[labelOrId];
    } else {
      device = devices.find(function (device) {
        return device.label === labelOrId || device.deviceId === labelOrId;
      }); //didn't find a matching device

      if (!device && devices.length > 0) {
        device = devices[0];
      } else if (!device && _Tone.default.isDefined(labelOrId)) {
        throw new Error("Tone.UserMedia: no matching device: " + labelOrId);
      }
    }

    this._device = device; //do getUserMedia

    var constraints = {
      audio: {
        "echoCancellation": false,
        "sampleRate": this.context.sampleRate,
        "noiseSuppression": false,
        "mozNoiseSuppression": false
      }
    };

    if (device) {
      constraints.audio.deviceId = device.deviceId;
    }

    return navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {
      //start a new source only if the previous one is closed
      if (!this._stream) {
        this._stream = stream; //Wrap a MediaStreamSourceNode around the live input stream.

        this._mediaStream = this.context.createMediaStreamSource(stream); //Connect the MediaStreamSourceNode to a gate gain node

        _Tone.default.connect(this._mediaStream, this.output);
      }

      return this;
    }.bind(this));
  }.bind(this));
};
/**
 *  Close the media stream
 *  @return {Tone.UserMedia} this
 */


_Tone.default.UserMedia.prototype.close = function () {
  if (this._stream) {
    this._stream.getAudioTracks().forEach(function (track) {
      track.stop();
    });

    this._stream = null; //remove the old media stream

    this._mediaStream.disconnect();

    this._mediaStream = null;
  }

  this._device = null;
  return this;
};
/**
 *  Returns a promise which resolves with the list of audio input devices available.
 *  @return {Promise} The promise that is resolved with the devices
 *  @static
 *  @example
 * Tone.UserMedia.enumerateDevices().then(function(devices){
 * 	console.log(devices)
 * })
 */


_Tone.default.UserMedia.enumerateDevices = function () {
  return navigator.mediaDevices.enumerateDevices().then(function (devices) {
    return devices.filter(function (device) {
      return device.kind === "audioinput";
    });
  });
};
/**
 *  Returns the playback state of the source, "started" when the microphone is open
 *  and "stopped" when the mic is closed.
 *  @type {Tone.State}
 *  @readOnly
 *  @memberOf Tone.UserMedia#
 *  @name state
 */


Object.defineProperty(_Tone.default.UserMedia.prototype, "state", {
  get: function () {
    return this._stream && this._stream.active ? _Tone.default.State.Started : _Tone.default.State.Stopped;
  }
});
/**
 * 	Returns an identifier for the represented device that is
 * 	persisted across sessions. It is un-guessable by other applications and
 * 	unique to the origin of the calling application. It is reset when the
 * 	user clears cookies (for Private Browsing, a different identifier is
 * 	used that is not persisted across sessions). Returns undefined when the
 * 	device is not open.
 *  @type {String}
 *  @readOnly
 *  @memberOf Tone.UserMedia#
 *  @name deviceId
 */

Object.defineProperty(_Tone.default.UserMedia.prototype, "deviceId", {
  get: function () {
    if (this._device) {
      return this._device.deviceId;
    } else {
      return null;
    }
  }
});
/**
 * 	Returns a group identifier. Two devices have the
 * 	same group identifier if they belong to the same physical device.
 * 	Returns undefined when the device is not open.
 *  @type {String}
 *  @readOnly
 *  @memberOf Tone.UserMedia#
 *  @name groupId
 */

Object.defineProperty(_Tone.default.UserMedia.prototype, "groupId", {
  get: function () {
    if (this._device) {
      return this._device.groupId;
    } else {
      return null;
    }
  }
});
/**
 * 	Returns a label describing this device (for example "Built-in Microphone").
 * 	Returns undefined when the device is not open or label is not available
 * 	because of permissions.
 *  @type {String}
 *  @readOnly
 *  @memberOf Tone.UserMedia#
 *  @name groupId
 */

Object.defineProperty(_Tone.default.UserMedia.prototype, "label", {
  get: function () {
    if (this._device) {
      return this._device.label;
    } else {
      return null;
    }
  }
});
/**
 * Mute the output.
 * @memberOf Tone.UserMedia#
 * @type {boolean}
 * @name mute
 * @example
 * //mute the output
 * userMedia.mute = true;
 */

Object.defineProperty(_Tone.default.UserMedia.prototype, "mute", {
  get: function () {
    return this._volume.mute;
  },
  set: function (mute) {
    this._volume.mute = mute;
  }
});
/**
 * Clean up.
 * @return {Tone.UserMedia} this
 */

_Tone.default.UserMedia.prototype.dispose = function () {
  _Tone.default.AudioNode.prototype.dispose.call(this);

  this.close();

  this._writable("volume");

  this._volume.dispose();

  this._volume = null;
  this.volume = null;
  return this;
};
/**
 *  If getUserMedia is supported by the browser.
 *  @type  {Boolean}
 *  @memberOf Tone.UserMedia#
 *  @name supported
 *  @static
 *  @readOnly
 */


Object.defineProperty(_Tone.default.UserMedia, "supported", {
  get: function () {
    return _Tone.default.isDefined(navigator.mediaDevices) && _Tone.default.isFunction(navigator.mediaDevices.getUserMedia);
  }
});
var _default = _Tone.default.UserMedia;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../component/Volume":"../node_modules/tone/tone/component/Volume.js","../core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js"}],"../node_modules/tone/tone/type/Midi.js":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Tone = _interopRequireDefault(require("../core/Tone"));

require("../type/Frequency");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 *  @class Tone.Midi is a primitive type for encoding Time values.
 *         Tone.Midi can be constructed with or without the `new` keyword. Tone.Midi can be passed
 *         into the parameter of any method which takes time as an argument.
 *  @constructor
 *  @extends {Tone.Frequency}
 *  @param  {String|Number}  val    The time value.
 *  @param  {String=}  units  The units of the value.
 *  @example
 * var t = Tone.Midi("4n");//a quarter note
 */
_Tone.default.Midi = function (val, units) {
  if (this instanceof _Tone.default.Midi) {
    _Tone.default.Frequency.call(this, val, units);
  } else {
    return new _Tone.default.Midi(val, units);
  }
};

_Tone.default.extend(_Tone.default.Midi, _Tone.default.Frequency);
/**
 *  The default units if none are given.
 *  @type {String}
 *  @private
 */


_Tone.default.Midi.prototype._defaultUnits = "midi";
/**
 *  Returns the value of a frequency in the current units
 *  @param {Frequency} freq
 *  @return  {Number}
 *  @private
 */

_Tone.default.Midi.prototype._frequencyToUnits = function (freq) {
  return _Tone.default.Frequency.ftom(_Tone.default.Frequency.prototype._frequencyToUnits.call(this, freq));
};
/**
 *  Returns the value of a tick in the current time units
 *  @param {Ticks} ticks
 *  @return  {Number}
 *  @private
 */


_Tone.default.Midi.prototype._ticksToUnits = function (ticks) {
  return _Tone.default.Frequency.ftom(_Tone.default.Frequency.prototype._ticksToUnits.call(this, ticks));
};
/**
 *  Return the value of the beats in the current units
 *  @param {Number} beats
 *  @return  {Number}
 *  @private
 */


_Tone.default.Midi.prototype._beatsToUnits = function (beats) {
  return _Tone.default.Frequency.ftom(_Tone.default.Frequency.prototype._beatsToUnits.call(this, beats));
};
/**
 *  Returns the value of a second in the current units
 *  @param {Seconds} seconds
 *  @return  {Number}
 *  @private
 */


_Tone.default.Midi.prototype._secondsToUnits = function (seconds) {
  return _Tone.default.Frequency.ftom(_Tone.default.Frequency.prototype._secondsToUnits.call(this, seconds));
};
/**
 *  Return the value of the frequency as a MIDI note
 *  @return  {MIDI}
 *  @example
 * Tone.Midi(60).toMidi(); //60
 */


_Tone.default.Midi.prototype.toMidi = function () {
  return this.valueOf();
};
/**
 *  Return the value of the frequency as a MIDI note
 *  @return  {MIDI}
 *  @example
 * Tone.Midi(60).toFrequency(); //261.6255653005986
 */


_Tone.default.Midi.prototype.toFrequency = function () {
  return _Tone.default.Frequency.mtof(this.toMidi());
};
/**
 *  Transposes the frequency by the given number of semitones.
 *  @param  {Interval}  interval
 *  @return  {Tone.Frequency} A new transposed frequency
 *  @example
 * Tone.Midi("A4").transpose(3); //"C5"
 */


_Tone.default.Midi.prototype.transpose = function (interval) {
  return new this.constructor(this.toMidi() + interval);
};

var _default = _Tone.default.Midi;
exports.default = _default;
},{"../core/Tone":"../node_modules/tone/tone/core/Tone.js","../type/Frequency":"../node_modules/tone/tone/type/Frequency.js"}],"../node_modules/tone/tone/index.js":[function(require,module,exports) {
require("./component/AmplitudeEnvelope");
require("./component/Analyser");
require("./component/Channel");
require("./component/Compressor");
require("./component/CrossFade");
require("./component/Envelope");
require("./component/EQ3");
require("./component/FeedbackCombFilter");
require("./component/FFT");
require("./component/Filter");
require("./component/Follower");
require("./component/FrequencyEnvelope");
require("./component/Gate");
require("./component/LFO");
require("./component/Limiter");
require("./component/LowpassCombFilter");
require("./component/Merge");
require("./component/Meter");
require("./component/MidSideCompressor");
require("./component/MidSideMerge");
require("./component/MidSideSplit");
require("./component/Mono");
require("./component/MultibandCompressor");
require("./component/MultibandSplit");
require("./component/Panner");
require("./component/Panner3D");
require("./component/PanVol");
require("./component/ScaledEnvelope");
require("./component/Solo");
require("./component/Split");
require("./component/Volume");
require("./component/Waveform");
require("./control/CtrlInterpolate");
require("./control/CtrlMarkov");
require("./control/CtrlPattern");
require("./control/CtrlRandom");
require("./core/AudioNode");
require("./core/Buffer");
require("./core/Buffers");
require("./core/Bus");
require("./core/Clock");
require("./core/Context");
require("./core/Delay");
require("./core/Draw");
require("./core/Emitter");
require("./core/Gain");
require("./core/IntervalTimeline");
require("./core/Listener");
require("./core/Master");
require("./core/Offline");
require("./core/OfflineContext");
require("./core/Param");
require("./core/Timeline");
require("./core/TimelineState");
require("./core/Transport");
require("./core/TransportEvent");
require("./core/TransportRepeatEvent");
require("./effect/AutoFilter");
require("./effect/AutoPanner");
require("./effect/AutoWah");
require("./effect/BitCrusher");
require("./effect/Chebyshev");
require("./effect/Chorus");
require("./effect/Convolver");
require("./effect/Distortion");
require("./effect/Effect");
require("./effect/FeedbackDelay");
require("./effect/FeedbackEffect");
require("./effect/Freeverb");
require("./effect/JCReverb");
require("./effect/MidSideEffect");
require("./effect/Phaser");
require("./effect/PingPongDelay");
require("./effect/PitchShift");
require("./effect/Reverb");
require("./effect/StereoEffect");
require("./effect/StereoFeedbackEffect");
require("./effect/StereoWidener");
require("./effect/StereoXFeedbackEffect");
require("./effect/Tremolo");
require("./effect/Vibrato");
require("./event/Event");
require("./event/Loop");
require("./event/Part");
require("./event/Pattern");
require("./event/Sequence");
require("./instrument/AMSynth");
require("./instrument/DuoSynth");
require("./instrument/FMSynth");
require("./instrument/Instrument");
require("./instrument/MembraneSynth");
require("./instrument/MetalSynth");
require("./instrument/Monophonic");
require("./instrument/MonoSynth");
require("./instrument/NoiseSynth");
require("./instrument/PluckSynth");
require("./instrument/PolySynth");
require("./instrument/Sampler");
require("./instrument/Synth");
require("./signal/Abs");
require("./signal/Add");
require("./signal/AudioToGain");
require("./signal/EqualPowerGain");
require("./signal/GainToAudio");
require("./signal/GreaterThan");
require("./signal/GreaterThanZero");
require("./signal/Modulo");
require("./signal/Multiply");
require("./signal/Negate");
require("./signal/Normalize");
require("./signal/Pow");
require("./signal/Scale");
require("./signal/ScaleExp");
require("./signal/Signal");
require("./signal/SignalBase");
require("./signal/Subtract");
require("./signal/TickSignal");
require("./signal/TransportTimelineSignal");
require("./signal/WaveShaper");
require("./signal/Zero");
require("./source/AMOscillator");
require("./source/BufferSource");
require("./source/FatOscillator");
require("./source/FMOscillator");
require("./source/GrainPlayer");
require("./source/Noise");
require("./source/OmniOscillator");
require("./source/Oscillator");
require("./source/OscillatorNode");
require("./source/Player");
require("./source/Players");
require("./source/PulseOscillator");
require("./source/PWMOscillator");
require("./source/Source");
require("./source/TickSource");
require("./source/UserMedia");
require("./type/Frequency");
require("./type/Midi");
require("./type/Ticks");
require("./type/Time");
require("./type/TimeBase");
require("./type/TransportTime");
require("./type/Type");
module.exports = require("./core/Tone").default;

},{"./component/AmplitudeEnvelope":"../node_modules/tone/tone/component/AmplitudeEnvelope.js","./component/Analyser":"../node_modules/tone/tone/component/Analyser.js","./component/Channel":"../node_modules/tone/tone/component/Channel.js","./component/Compressor":"../node_modules/tone/tone/component/Compressor.js","./component/CrossFade":"../node_modules/tone/tone/component/CrossFade.js","./component/Envelope":"../node_modules/tone/tone/component/Envelope.js","./component/EQ3":"../node_modules/tone/tone/component/EQ3.js","./component/FeedbackCombFilter":"../node_modules/tone/tone/component/FeedbackCombFilter.js","./component/FFT":"../node_modules/tone/tone/component/FFT.js","./component/Filter":"../node_modules/tone/tone/component/Filter.js","./component/Follower":"../node_modules/tone/tone/component/Follower.js","./component/FrequencyEnvelope":"../node_modules/tone/tone/component/FrequencyEnvelope.js","./component/Gate":"../node_modules/tone/tone/component/Gate.js","./component/LFO":"../node_modules/tone/tone/component/LFO.js","./component/Limiter":"../node_modules/tone/tone/component/Limiter.js","./component/LowpassCombFilter":"../node_modules/tone/tone/component/LowpassCombFilter.js","./component/Merge":"../node_modules/tone/tone/component/Merge.js","./component/Meter":"../node_modules/tone/tone/component/Meter.js","./component/MidSideCompressor":"../node_modules/tone/tone/component/MidSideCompressor.js","./component/MidSideMerge":"../node_modules/tone/tone/component/MidSideMerge.js","./component/MidSideSplit":"../node_modules/tone/tone/component/MidSideSplit.js","./component/Mono":"../node_modules/tone/tone/component/Mono.js","./component/MultibandCompressor":"../node_modules/tone/tone/component/MultibandCompressor.js","./component/MultibandSplit":"../node_modules/tone/tone/component/MultibandSplit.js","./component/Panner":"../node_modules/tone/tone/component/Panner.js","./component/Panner3D":"../node_modules/tone/tone/component/Panner3D.js","./component/PanVol":"../node_modules/tone/tone/component/PanVol.js","./component/ScaledEnvelope":"../node_modules/tone/tone/component/ScaledEnvelope.js","./component/Solo":"../node_modules/tone/tone/component/Solo.js","./component/Split":"../node_modules/tone/tone/component/Split.js","./component/Volume":"../node_modules/tone/tone/component/Volume.js","./component/Waveform":"../node_modules/tone/tone/component/Waveform.js","./control/CtrlInterpolate":"../node_modules/tone/tone/control/CtrlInterpolate.js","./control/CtrlMarkov":"../node_modules/tone/tone/control/CtrlMarkov.js","./control/CtrlPattern":"../node_modules/tone/tone/control/CtrlPattern.js","./control/CtrlRandom":"../node_modules/tone/tone/control/CtrlRandom.js","./core/AudioNode":"../node_modules/tone/tone/core/AudioNode.js","./core/Buffer":"../node_modules/tone/tone/core/Buffer.js","./core/Buffers":"../node_modules/tone/tone/core/Buffers.js","./core/Bus":"../node_modules/tone/tone/core/Bus.js","./core/Clock":"../node_modules/tone/tone/core/Clock.js","./core/Context":"../node_modules/tone/tone/core/Context.js","./core/Delay":"../node_modules/tone/tone/core/Delay.js","./core/Draw":"../node_modules/tone/tone/core/Draw.js","./core/Emitter":"../node_modules/tone/tone/core/Emitter.js","./core/Gain":"../node_modules/tone/tone/core/Gain.js","./core/IntervalTimeline":"../node_modules/tone/tone/core/IntervalTimeline.js","./core/Listener":"../node_modules/tone/tone/core/Listener.js","./core/Master":"../node_modules/tone/tone/core/Master.js","./core/Offline":"../node_modules/tone/tone/core/Offline.js","./core/OfflineContext":"../node_modules/tone/tone/core/OfflineContext.js","./core/Param":"../node_modules/tone/tone/core/Param.js","./core/Timeline":"../node_modules/tone/tone/core/Timeline.js","./core/TimelineState":"../node_modules/tone/tone/core/TimelineState.js","./core/Transport":"../node_modules/tone/tone/core/Transport.js","./core/TransportEvent":"../node_modules/tone/tone/core/TransportEvent.js","./core/TransportRepeatEvent":"../node_modules/tone/tone/core/TransportRepeatEvent.js","./effect/AutoFilter":"../node_modules/tone/tone/effect/AutoFilter.js","./effect/AutoPanner":"../node_modules/tone/tone/effect/AutoPanner.js","./effect/AutoWah":"../node_modules/tone/tone/effect/AutoWah.js","./effect/BitCrusher":"../node_modules/tone/tone/effect/BitCrusher.js","./effect/Chebyshev":"../node_modules/tone/tone/effect/Chebyshev.js","./effect/Chorus":"../node_modules/tone/tone/effect/Chorus.js","./effect/Convolver":"../node_modules/tone/tone/effect/Convolver.js","./effect/Distortion":"../node_modules/tone/tone/effect/Distortion.js","./effect/Effect":"../node_modules/tone/tone/effect/Effect.js","./effect/FeedbackDelay":"../node_modules/tone/tone/effect/FeedbackDelay.js","./effect/FeedbackEffect":"../node_modules/tone/tone/effect/FeedbackEffect.js","./effect/Freeverb":"../node_modules/tone/tone/effect/Freeverb.js","./effect/JCReverb":"../node_modules/tone/tone/effect/JCReverb.js","./effect/MidSideEffect":"../node_modules/tone/tone/effect/MidSideEffect.js","./effect/Phaser":"../node_modules/tone/tone/effect/Phaser.js","./effect/PingPongDelay":"../node_modules/tone/tone/effect/PingPongDelay.js","./effect/PitchShift":"../node_modules/tone/tone/effect/PitchShift.js","./effect/Reverb":"../node_modules/tone/tone/effect/Reverb.js","./effect/StereoEffect":"../node_modules/tone/tone/effect/StereoEffect.js","./effect/StereoFeedbackEffect":"../node_modules/tone/tone/effect/StereoFeedbackEffect.js","./effect/StereoWidener":"../node_modules/tone/tone/effect/StereoWidener.js","./effect/StereoXFeedbackEffect":"../node_modules/tone/tone/effect/StereoXFeedbackEffect.js","./effect/Tremolo":"../node_modules/tone/tone/effect/Tremolo.js","./effect/Vibrato":"../node_modules/tone/tone/effect/Vibrato.js","./event/Event":"../node_modules/tone/tone/event/Event.js","./event/Loop":"../node_modules/tone/tone/event/Loop.js","./event/Part":"../node_modules/tone/tone/event/Part.js","./event/Pattern":"../node_modules/tone/tone/event/Pattern.js","./event/Sequence":"../node_modules/tone/tone/event/Sequence.js","./instrument/AMSynth":"../node_modules/tone/tone/instrument/AMSynth.js","./instrument/DuoSynth":"../node_modules/tone/tone/instrument/DuoSynth.js","./instrument/FMSynth":"../node_modules/tone/tone/instrument/FMSynth.js","./instrument/Instrument":"../node_modules/tone/tone/instrument/Instrument.js","./instrument/MembraneSynth":"../node_modules/tone/tone/instrument/MembraneSynth.js","./instrument/MetalSynth":"../node_modules/tone/tone/instrument/MetalSynth.js","./instrument/Monophonic":"../node_modules/tone/tone/instrument/Monophonic.js","./instrument/MonoSynth":"../node_modules/tone/tone/instrument/MonoSynth.js","./instrument/NoiseSynth":"../node_modules/tone/tone/instrument/NoiseSynth.js","./instrument/PluckSynth":"../node_modules/tone/tone/instrument/PluckSynth.js","./instrument/PolySynth":"../node_modules/tone/tone/instrument/PolySynth.js","./instrument/Sampler":"../node_modules/tone/tone/instrument/Sampler.js","./instrument/Synth":"../node_modules/tone/tone/instrument/Synth.js","./signal/Abs":"../node_modules/tone/tone/signal/Abs.js","./signal/Add":"../node_modules/tone/tone/signal/Add.js","./signal/AudioToGain":"../node_modules/tone/tone/signal/AudioToGain.js","./signal/EqualPowerGain":"../node_modules/tone/tone/signal/EqualPowerGain.js","./signal/GainToAudio":"../node_modules/tone/tone/signal/GainToAudio.js","./signal/GreaterThan":"../node_modules/tone/tone/signal/GreaterThan.js","./signal/GreaterThanZero":"../node_modules/tone/tone/signal/GreaterThanZero.js","./signal/Modulo":"../node_modules/tone/tone/signal/Modulo.js","./signal/Multiply":"../node_modules/tone/tone/signal/Multiply.js","./signal/Negate":"../node_modules/tone/tone/signal/Negate.js","./signal/Normalize":"../node_modules/tone/tone/signal/Normalize.js","./signal/Pow":"../node_modules/tone/tone/signal/Pow.js","./signal/Scale":"../node_modules/tone/tone/signal/Scale.js","./signal/ScaleExp":"../node_modules/tone/tone/signal/ScaleExp.js","./signal/Signal":"../node_modules/tone/tone/signal/Signal.js","./signal/SignalBase":"../node_modules/tone/tone/signal/SignalBase.js","./signal/Subtract":"../node_modules/tone/tone/signal/Subtract.js","./signal/TickSignal":"../node_modules/tone/tone/signal/TickSignal.js","./signal/TransportTimelineSignal":"../node_modules/tone/tone/signal/TransportTimelineSignal.js","./signal/WaveShaper":"../node_modules/tone/tone/signal/WaveShaper.js","./signal/Zero":"../node_modules/tone/tone/signal/Zero.js","./source/AMOscillator":"../node_modules/tone/tone/source/AMOscillator.js","./source/BufferSource":"../node_modules/tone/tone/source/BufferSource.js","./source/FatOscillator":"../node_modules/tone/tone/source/FatOscillator.js","./source/FMOscillator":"../node_modules/tone/tone/source/FMOscillator.js","./source/GrainPlayer":"../node_modules/tone/tone/source/GrainPlayer.js","./source/Noise":"../node_modules/tone/tone/source/Noise.js","./source/OmniOscillator":"../node_modules/tone/tone/source/OmniOscillator.js","./source/Oscillator":"../node_modules/tone/tone/source/Oscillator.js","./source/OscillatorNode":"../node_modules/tone/tone/source/OscillatorNode.js","./source/Player":"../node_modules/tone/tone/source/Player.js","./source/Players":"../node_modules/tone/tone/source/Players.js","./source/PulseOscillator":"../node_modules/tone/tone/source/PulseOscillator.js","./source/PWMOscillator":"../node_modules/tone/tone/source/PWMOscillator.js","./source/Source":"../node_modules/tone/tone/source/Source.js","./source/TickSource":"../node_modules/tone/tone/source/TickSource.js","./source/UserMedia":"../node_modules/tone/tone/source/UserMedia.js","./type/Frequency":"../node_modules/tone/tone/type/Frequency.js","./type/Midi":"../node_modules/tone/tone/type/Midi.js","./type/Ticks":"../node_modules/tone/tone/type/Ticks.js","./type/Time":"../node_modules/tone/tone/type/Time.js","./type/TimeBase":"../node_modules/tone/tone/type/TimeBase.js","./type/TransportTime":"../node_modules/tone/tone/type/TransportTime.js","./type/Type":"../node_modules/tone/tone/type/Type.js","./core/Tone":"../node_modules/tone/tone/core/Tone.js"}],"ts/audio/*.mp3":[function(require,module,exports) {
module.exports = {};
},{}],"ts/sound/PianoSampler.ts":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tone_1 = require("tone/tone");

require("../audio/*.mp3");

var PianoSampler =
/** @class */
function () {
  function PianoSampler(baseUrl, lowest, highest) {
    var _this = this;

    if (baseUrl === void 0) {
      baseUrl = "";
    }

    if (lowest === void 0) {
      lowest = 0;
    }

    if (highest === void 0) {
      highest = 12 * 8;
    }

    this._lowest = lowest;
    this._highest = highest;
    this._baseUrl = baseUrl;
    this._sampler = null;
    this._loaded = false; // If audio files are loaded
    // Call the load function to load audio
    // @ts-ignore

    tone_1.Buffer.on("load", function () {
      console.log("All buffers are loaded");
      _this._loaded = true; // The audio is loaded
    }); // Urls of the audio files

    this._urls = {
      "A0": "A0.[mp3|ogg]",
      "C1": "C1.[mp3|ogg]",
      "D#1": "Ds1.[mp3|ogg]",
      "F#1": "Fs1.[mp3|ogg]",
      "A1": "A1.[mp3|ogg]",
      "C2": "C2.[mp3|ogg]",
      "D#2": "Ds2.[mp3|ogg]",
      "F#2": "Fs2.[mp3|ogg]",
      "A2": "A2.[mp3|ogg]",
      "C3": "C3.[mp3|ogg]",
      "D#3": "Ds3.[mp3|ogg]",
      "F#3": "Fs3.[mp3|ogg]",
      "A3": "A3.[mp3|ogg]",
      "C4": "C4.[mp3|ogg]",
      "D#4": "Ds4.[mp3|ogg]",
      "F#4": "Fs4.[mp3|ogg]",
      "A4": "A4.[mp3|ogg]",
      "C5": "C5.[mp3|ogg]",
      "D#5": "Ds5.[mp3|ogg]",
      "F#5": "Fs5.[mp3|ogg]",
      "A5": "A5.[mp3|ogg]",
      "C6": "C6.[mp3|ogg]",
      "D#6": "Ds6.[mp3|ogg]",
      "F#6": "Fs6.[mp3|ogg]",
      "A6": "A6.[mp3|ogg]",
      "C7": "C7.[mp3|ogg]",
      "D#7": "Ds7.[mp3|ogg]",
      "F#7": "Fs7.[mp3|ogg]",
      "A7": "A7.[mp3|ogg]",
      "C8": "C8.[mp3|ogg]"
    };
  }
  /**
   * Load the audio files
   * @return {Promise<>}
   */


  PianoSampler.prototype.load = function () {
    var _this = this;

    return new Promise(function (done) {
      // Initialize the sampler with piano audio files
      console.log("Loading the audio");
      _this._sampler = new tone_1.Sampler(_this._urls, done, _this._baseUrl).toMaster();
    });
  };
  /**
   * Trigger a chord
   * @param notes notes in the chord
   */


  PianoSampler.prototype.keyDown = function (notes) {
    if (this._loaded) {
      //@ts-ignore
      this._sampler.triggerAttack(notes);
    }
  };
  /**
   * Release the chord
   * @param time
   */


  PianoSampler.prototype.keyUp = function (notes, time) {
    if (this._loaded) {
      //@ts-ignore
      this._sampler.triggerRelease(notes, time);
    }
  };
  /**
   * Play and release a chord
   * @param notes An array of notes in the chord
   * @param duration The time the note should be held
   * @param time When to start the attack
   */


  PianoSampler.prototype.keyDownUp = function (notes, duration, time) {
    if (this._loaded) {
      //@ts-ignore
      this._sampler.triggerAttackRelease(notes, duration, time);
    }
  };

  return PianoSampler;
}();

exports.PianoSampler = PianoSampler;
},{"tone/tone":"../node_modules/tone/tone/index.js","../audio/*.mp3":"ts/audio/*.mp3"}],"ts/sound/PianoSound.ts":[function(require,module,exports) {
"use strict";

var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) {
    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
  }
  result["default"] = mod;
  return result;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var PianoSampler_1 = require("./PianoSampler");

var Tone = __importStar(require("tone/tone"));

var PianoSound =
/** @class */
function () {
  /**
   * A class to play the sound of the piano
   * @param lowest: the lowest keyNum
   * @param highest: the highest keyNum
   */
  function PianoSound(lowest, highest) {
    this._lowest = lowest;
    this._highest = highest; // make the samples loaded a range of audios

    this._piano = new PianoSampler_1.PianoSampler("./audio/", this._lowest, this._highest);
  }
  /**
   * Load the piano audio
   * @return {Promise<[]>}
   */


  PianoSound.prototype.load = function () {
    // return promise after resolving loading the sampler
    return Promise.all([this._piano.load()]);
  };
  /**
   * Play a chord
   * @param notes Notes in the chord
   */


  PianoSound.prototype.keyDown = function (notes) {
    this._piano.keyDown(notes);
  };
  /**
   * Stop plyaing a chord
   * @param notes Notes in the chord
   * @param time The lag between releasing the key and stopping playing the chord
   */


  PianoSound.prototype.keyUp = function (notes, time) {
    if (time === void 0) {
      time = Tone.now();
    }

    time += .5;

    this._piano.keyUp(notes, time);
  };
  /**
   * Play a chord and stop
   * @param notes
   * @param duration
   * @param time
   */


  PianoSound.prototype.keyDownUp = function (notes, duration, time) {
    if (duration === void 0) {
      duration = "2n";
    }

    if (time === void 0) {
      time = Tone.now();
    }

    this._piano.keyDownUp(notes, duration, time);
  };

  return PianoSound;
}();

exports.PianoSound = PianoSound;
},{"./PianoSampler":"ts/sound/PianoSampler.ts","tone/tone":"../node_modules/tone/tone/index.js"}],"ts/interface/Loader.ts":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var tone_1 = require("tone/tone");

var Loader =
/** @class */
function () {
  function Loader() {
    var _this = this;

    var mask = document.querySelector("#mask"); // Mask to hide all other elements

    var progBar = document.querySelector("#progressBar");
    var prog = document.querySelector("#progress");
    this.loaded = false;
    /**
     * Remove the progress bar, mask and enable scroll after loaded
     */
    //@ts-ignore

    tone_1.Buffer.on("load", function () {
      _this.loaded = true;
      mask.remove();
      prog.remove();
      document.body.classList.remove("no-scroll");
    });
    /**
     * Update the progress bar
     */
    //@ts-ignore

    tone_1.Buffer.on("progress", function (prog) {
      progBar.innerText = (prog * 100).toFixed(2) + "%";
      progBar.style.width = (prog * 100).toFixed(2) + "%";
    });
  }

  return Loader;
}();

exports.Loader = Loader;
},{"tone/tone":"../node_modules/tone/tone/index.js"}],"ts/setting-toolbar/ChordTypeBtn.ts":[function(require,module,exports) {
"use strict";

var __importDefault = this && this.__importDefault || function (mod) {
  return mod && mod.__esModule ? mod : {
    "default": mod
  };
};

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Chord_1 = require("../music-theory/Chord");

var jquery_1 = __importDefault(require("jquery"));

var ChordTypeBtn =
/** @class */
function () {
  function ChordTypeBtn() {
    var menuContainer = document.getElementById("chordTypeDropdownMenu");

    this._renderDropdownMenu(menuContainer); // @ts-ignore


    jquery_1.default('[data-submenu]').submenupicker();

    this.onSetChordType = function () {};
  }
  /**
   * Render the btn-group view in the container
   * @param container
   * @private
   */


  ChordTypeBtn.prototype._renderDropdownMenu = function (container) {
    var _this = this; // nest dropdown in the button group
    // ref: https://getbootstrap.com/docs/4.3/components/button-group/


    for (var family in Chord_1.Chord.chordFamilies) {
      var submenu = document.createElement("div");
      submenu.classList.add("dropdown", "dropright", "dropdown-submenu");
      var familyBtn = document.createElement("button");
      familyBtn.classList.add("dropdown-item", "dropdown-toggle");
      familyBtn.setAttribute("type", "button");
      familyBtn.setAttribute("data-toggle", "dropdown");
      familyBtn.dataset.family = family;
      familyBtn.innerText = family;
      submenu.appendChild(familyBtn);
      var typesMenu = document.createElement("div");
      typesMenu.classList.add("dropdown-menu");

      for (var type in Chord_1.Chord.chordFamilies[family]) {
        var typeBtn = document.createElement("button");
        typeBtn.classList.add("dropdown-item");
        typeBtn.setAttribute("type", "button");
        typeBtn.innerText = type;
        typeBtn.dataset.family = family;
        typeBtn.dataset.type = type;
        typeBtn.addEventListener("pointerup", function (e) {
          var btn = e.target;
          var type = btn.dataset.type;
          var family = btn.dataset.family;

          _this.setChordType(type, family);
        });
        typesMenu.appendChild(typeBtn);
      }

      submenu.appendChild(typesMenu);
      container.appendChild(submenu);
    }
  };

  ChordTypeBtn.prototype.setChordType = function (type, family) {
    // Change the text of the chord type
    this.setTypeText(type);
    this.onSetChordType(type, family);
  };

  ChordTypeBtn.prototype.setTypeText = function (type) {
    var btn = document.getElementById("chordTypeBtn");
    btn.innerText = type;
  };

  return ChordTypeBtn;
}();

exports.ChordTypeBtn = ChordTypeBtn;
},{"../music-theory/Chord":"ts/music-theory/Chord.ts","jquery":"../node_modules/jquery/dist/jquery.js"}],"ts/setting-toolbar/InversionBtn.ts":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Chord_1 = require("../music-theory/Chord");

var InversionBtn =
/** @class */
function () {
  function InversionBtn() {
    this._setInversionMenu(2); // renders the inversion dropdown


    this.onSetInversion = function () {};
  }
  /**
   * Reset inversion btn to None, and menu items based on the chord length
   */


  InversionBtn.prototype.reset = function (chordLen) {
    this._setInverionBtn("None");

    this._setInversionMenu(chordLen - 1);
  };
  /**
   * Populate the items in the inversion menu from none to maxInversion
   * @param maxInversion
   */


  InversionBtn.prototype._setInversionMenu = function (maxInversion) {
    var _this = this;

    var menu = document.getElementById("chordInversionDropdownMenu");
    menu.innerHTML = ""; // Remove all items

    for (var i = 0; i <= maxInversion; i++) {
      var item = document.createElement("a");
      item.classList.add("dropdown-item");
      item.dataset.inversion = i.toString();
      item.innerText = InversionBtn.inversionTypes[i];
      item.addEventListener("pointerup", function (e) {
        var btn = e.target;
        var inversionName = btn.innerText;
        var inversionNum = parseInt(btn.dataset.inversion);

        _this._setInversion(inversionName, inversionNum);
      });
      menu.appendChild(item);
    }
  };
  /**
   * Set the inversion, and call the callback event
   * @param inversionName
   * @param inversionNum
   * @private
   */


  InversionBtn.prototype._setInversion = function (inversionName, inversionNum) {
    this._setInverionBtn(inversionName);

    this.onSetInversion(inversionNum);
  };
  /**
   * Set the text on the inversion button
   * @param chord
   */


  InversionBtn.prototype.setInversionText = function (chord) {
    var inversionName = InversionBtn.inversionTypes[chord.inversionNum];

    this._setInverionBtn(inversionName);

    var chordLen = Chord_1.Chord.getLen(chord.family, chord.type);

    this._setInversionMenu(chordLen - 1);
  };
  /**
   * Set the text in the inversion button
   * @param inversionName
   */


  InversionBtn.prototype._setInverionBtn = function (inversionName) {
    var btn = document.getElementById("chordInversionBtn");
    btn.innerText = inversionName;
  };

  InversionBtn.inversionTypes = {
    0: "None",
    1: "First",
    2: "Second",
    3: "Third",
    4: "Fourth",
    5: "Fifth",
    6: "Sixth"
  };
  return InversionBtn;
}();

exports.InversionBtn = InversionBtn;
},{"../music-theory/Chord":"ts/music-theory/Chord.ts"}],"../node_modules/tone/build/Tone.js":[function(require,module,exports) {
var define;
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Tone=e():t.Tone=e()}("undefined"!=typeof self?self:this,function(){return function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}return i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{configurable:!1,enumerable:!0,get:s})},i.r=function(t){Object.defineProperty(t,"__esModule",{value:!0})},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=148)}([function(t,e,i){"use strict";i.r(e),function(t){var s=i(93),n=function(){if(!(this instanceof n))throw new Error("constructor needs to be called with the 'new' keyword")};
/**
 *  Tone.js
 *  @author Yotam Mann
 *  @license http://opensource.org/licenses/MIT MIT License
 *  @copyright 2014-2019 Yotam Mann
 */n.prototype.toString=function(){for(var t in n){var e=t[0].match(/^[A-Z]$/),i=n[t]===this.constructor;if(n.isFunction(n[t])&&e&&i)return t}return"Tone"},n.prototype.dispose=function(){return this},n.prototype.set=function(t,e){if(n.isString(t)){var i={};i[t]=e,t=i}t:for(var s in t){e=t[s];var o=this;if(-1!==s.indexOf(".")){for(var a=s.split("."),r=0;r<a.length-1;r++)if((o=o[a[r]])instanceof n){a.splice(0,r+1);var l=a.join(".");o.set(l,e);continue t}s=a[a.length-1]}var u=o[s];n.isUndef(u)||(n.Signal&&u instanceof n.Signal||n.Param&&u instanceof n.Param?u.value!==e&&(u.value=e):u instanceof AudioParam?u.value!==e&&(u.value=e):n.TimeBase&&u instanceof n.TimeBase?o[s]=e:u instanceof n?u.set(e):u!==e&&(o[s]=e))}return this},n.prototype.get=function(t){n.isUndef(t)?t=this._collectDefaults(this.constructor):n.isString(t)&&(t=[t]);for(var e={},i=0;i<t.length;i++){var s=t[i],o=this,a=e;if(-1!==s.indexOf(".")){for(var r=s.split("."),l=0;l<r.length-1;l++){var u=r[l];a[u]=a[u]||{},a=a[u],o=o[u]}s=r[r.length-1]}var d=o[s];n.isObject(t[s])?a[s]=d.get():n.Signal&&d instanceof n.Signal?a[s]=d.value:n.Param&&d instanceof n.Param?a[s]=d.value:d instanceof AudioParam?a[s]=d.value:d instanceof n?a[s]=d.get():!n.isFunction(d)&&n.isDefined(d)&&(a[s]=d)}return e},n.prototype._collectDefaults=function(t){var e=[];if(n.isDefined(t.defaults)&&(e=Object.keys(t.defaults)),n.isDefined(t._super))for(var i=this._collectDefaults(t._super),s=0;s<i.length;s++)-1===e.indexOf(i[s])&&e.push(i[s]);return e},n.defaults=function(t,e,i){var s={};if(1===t.length&&n.isObject(t[0]))s=t[0];else for(var o=0;o<e.length;o++)s[e[o]]=t[o];return n.isDefined(i.defaults)?n.defaultArg(s,i.defaults):n.isObject(i)?n.defaultArg(s,i):s},n.defaultArg=function(t,e){if(n.isObject(t)&&n.isObject(e)){var i={};for(var s in t)i[s]=n.defaultArg(e[s],t[s]);for(var o in e)i[o]=n.defaultArg(t[o],e[o]);return i}return n.isUndef(t)?e:t},n.prototype.log=function(){if(this.debug||this.toString()===n.global.TONE_DEBUG_CLASS){var t=Array.from(arguments);t.unshift(this.toString()+":"),console.log.apply(void 0,t)}},n.prototype.assert=function(t,e){if(!t)throw new Error(e)},n.connectSeries=function(){for(var t=arguments[0],e=1;e<arguments.length;e++){var i=arguments[e];n.connect(t,i),t=i}return n},n.connect=function(t,e,i,s){for(;n.isDefined(e.input);)n.isArray(e.input)?(s=n.defaultArg(s,0),e=e.input[s],s=0):e.input&&(e=e.input);return e instanceof AudioParam?t.connect(e,i):e instanceof AudioNode&&t.connect(e,i,s),n},n.disconnect=function(t,e,i,s){if(e){for(var o=!1;!o;)n.isArray(e.input)?(n.isDefined(s)?n.disconnect(t,e.input[s],i):e.input.forEach(function(e){try{n.disconnect(t,e,i)}catch(t){}}),o=!0):e.input?e=e.input:o=!0;e instanceof AudioParam?t.disconnect(e,i):e instanceof AudioNode&&t.disconnect(e,i,s)}else t.disconnect();return n},n.isUndef=function(t){return void 0===t},n.isDefined=function(t){return!n.isUndef(t)},n.isFunction=function(t){return"function"==typeof t},n.isNumber=function(t){return"number"==typeof t},n.isObject=function(t){return"[object Object]"===Object.prototype.toString.call(t)&&t.constructor===Object},n.isBoolean=function(t){return"boolean"==typeof t},n.isArray=function(t){return Array.isArray(t)},n.isString=function(t){return"string"==typeof t},n.isNote=function(t){return n.isString(t)&&/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(t)},n.noOp=function(){},n.prototype._readOnly=function(t){if(Array.isArray(t))for(var e=0;e<t.length;e++)this._readOnly(t[e]);else Object.defineProperty(this,t,{writable:!1,enumerable:!0})},n.prototype._writable=function(t){if(Array.isArray(t))for(var e=0;e<t.length;e++)this._writable(t[e]);else Object.defineProperty(this,t,{writable:!0})},n.State={Started:"started",Stopped:"stopped",Paused:"paused"},n.global=n.isUndef(t)?window:t,n.equalPowerScale=function(t){var e=.5*Math.PI;return Math.sin(t*e)},n.dbToGain=function(t){return Math.pow(10,t/20)},n.gainToDb=function(t){return Math.log(t)/Math.LN10*20},n.intervalToFrequencyRatio=function(t){return Math.pow(2,t/12)},n.prototype.now=function(){return n.context.now()},n.now=function(){return n.context.now()},n.prototype.immediate=function(){return n.context.currentTime},n.immediate=function(){return n.context.currentTime},n.extend=function(t,e){function i(){}n.isUndef(e)&&(e=n),i.prototype=e.prototype,t.prototype=new i,t.prototype.constructor=t,t._super=e},n._audioContext=null,n.start=function(){return n.context.resume()},Object.defineProperty(n,"context",{get:function(){return n._audioContext},set:function(t){t.isContext?n._audioContext=t:n._audioContext=new n.Context(t),n.Context.emit("init",n._audioContext)}}),Object.defineProperty(n.prototype,"context",{get:function(){return n.context}}),n.setContext=function(t){n.context=t},Object.defineProperty(n.prototype,"blockTime",{get:function(){return 128/this.context.sampleRate}}),Object.defineProperty(n.prototype,"sampleTime",{get:function(){return 1/this.context.sampleRate}}),Object.defineProperty(n,"supported",{get:function(){var t=n.global.hasOwnProperty("AudioContext")||n.global.hasOwnProperty("webkitAudioContext"),e=n.global.hasOwnProperty("Promise");return t&&e}}),Object.defineProperty(n,"initialized",{get:function(){return Boolean(n.context)}}),n.getContext=function(t){if(n.initialized)t(n.context);else{var e=function(){t(n.context),n.Context.off("init",e)};n.Context.on("init",e)}return n},n.version=s.a,e.default=n}.call(this,i(147))},function(t,e,i){"use strict";i.r(e);var s=i(0);i(20);if(s.default.supported){var n=new OfflineAudioContext(2,1,44100),o=n.createGain(),a=n.createGain();if(o.connect(a)!==a){var r=AudioNode.prototype.connect;AudioNode.prototype.connect=function(){return r.apply(this,arguments),arguments[0]}}}s.default.AudioNode=function(){s.default.call(this);var t=s.default.defaults(arguments,["context"],{context:s.default.context});this._context=t.context},s.default.extend(s.default.AudioNode),Object.defineProperty(s.default.AudioNode.prototype,"context",{get:function(){return this._context}}),s.default.AudioNode.prototype.createInsOuts=function(t,e){1===t?this.input=this.context.createGain():t>1&&(this.input=new Array(t)),1===e?this.output=this.context.createGain():e>1&&(this.output=new Array(e))},Object.defineProperty(s.default.AudioNode.prototype,"channelCount",{get:function(){return this.output.channelCount},set:function(t){return this.output.channelCount=t}}),Object.defineProperty(s.default.AudioNode.prototype,"channelCountMode",{get:function(){return this.output.channelCountMode},set:function(t){return this.output.channelCountMode=t}}),Object.defineProperty(s.default.AudioNode.prototype,"channelInterpretation",{get:function(){return this.output.channelInterpretation},set:function(t){return this.output.channelInterpretation=t}}),Object.defineProperty(s.default.AudioNode.prototype,"numberOfInputs",{get:function(){return this.input?s.default.isArray(this.input)?this.input.length:1:0}}),Object.defineProperty(s.default.AudioNode.prototype,"numberOfOutputs",{get:function(){return this.output?s.default.isArray(this.output)?this.output.length:1:0}}),s.default.AudioNode.prototype.connect=function(t,e,i){return s.default.isArray(this.output)?(e=s.default.defaultArg(e,0),this.output[e].connect(t,0,i)):s.default.connect(this.output,t,e,i),this},s.default.AudioNode.prototype.disconnect=function(t,e,i){return s.default.isArray(this.output)?(e=s.default.defaultArg(e,0),this.output[e].disconnect(t,0,i)):s.default.disconnect(this.output,t,e,i),this},s.default.AudioNode.prototype.chain=function(){var t=Array.from(arguments);return t.unshift(this),s.default.connectSeries.apply(void 0,t),this},s.default.AudioNode.prototype.fan=function(){for(var t=0;t<arguments.length;t++)this.connect(arguments[t]);return this},s.default.AudioNode.prototype.dispose=function(){return s.default.isDefined(this.input)&&(this.input instanceof AudioNode&&this.input.disconnect(),this.input=null),s.default.isDefined(this.output)&&(this.output instanceof AudioNode&&this.output.disconnect(),this.output=null),this._context=null,this};e.default=s.default.AudioNode},function(t,e,i){"use strict";i.r(e);var s=i(0);i(4),i(14),i(30),i(44),i(20),i(3);if(s.default.supported&&!s.default.global.AudioContext.prototype.createConstantSource){var n=function(t){this.context=t;for(var e=t.createBuffer(1,128,t.sampleRate),i=e.getChannelData(0),s=0;s<i.length;s++)i[s]=1;this._bufferSource=t.createBufferSource(),this._bufferSource.channelCount=1,this._bufferSource.channelCountMode="explicit",this._bufferSource.buffer=e,this._bufferSource.loop=!0;var n=this._output=t.createGain();this.offset=n.gain,this._bufferSource.connect(n)};n.prototype.start=function(t){return this._bufferSource.start(t),this},n.prototype.stop=function(t){return this._bufferSource.stop(t),this},n.prototype.connect=function(){return this._output.connect.apply(this._output,arguments),this},n.prototype.disconnect=function(){return this._output.disconnect.apply(this._output,arguments),this},AudioContext.prototype.createConstantSource=function(){return new n(this)},s.default.Context.prototype.createConstantSource=function(){return new n(this)}}s.default.Signal=function(){var t=s.default.defaults(arguments,["value","units"],s.default.Signal);s.default.Param.call(this,t),this._constantSource=this.context.createConstantSource(),this._constantSource.start(0),this._param=this._constantSource.offset,this.value=t.value,this.output=this._constantSource,this.input=this._param=this.output.offset},s.default.extend(s.default.Signal,s.default.Param),s.default.Signal.defaults={value:0,units:s.default.Type.Default,convert:!0},s.default.Signal.prototype.connect=s.default.SignalBase.prototype.connect,s.default.Signal.prototype.disconnect=s.default.SignalBase.prototype.disconnect,s.default.Signal.prototype.getValueAtTime=function(t){return this._param.getValueAtTime?this._param.getValueAtTime(t):s.default.Param.prototype.getValueAtTime.call(this,t)},s.default.Signal.prototype.dispose=function(){return s.default.Param.prototype.dispose.call(this),this._constantSource.stop(),this._constantSource.disconnect(),this._constantSource=null,this};e.default=s.default.Signal},function(t,e,i){"use strict";i.r(e);var s=i(0);i(14),i(4),i(1);s.default.Gain=function(){var t=s.default.defaults(arguments,["gain","units"],s.default.Gain);s.default.AudioNode.call(this,t),this.input=this.output=this._gainNode=this.context.createGain(),this.gain=new s.default.Param({param:this._gainNode.gain,units:t.units,value:t.gain,convert:t.convert}),this._readOnly("gain")},s.default.extend(s.default.Gain,s.default.AudioNode),s.default.Gain.defaults={gain:1,convert:!0},s.default.Gain.prototype.dispose=function(){s.default.AudioNode.prototype.dispose.call(this),this._gainNode.disconnect(),this._gainNode=null,this._writable("gain"),this.gain.dispose(),this.gain=null},e.default=s.default.Gain},function(t,e,i){"use strict";i.r(e);var s=i(0);i(63),i(46),i(45),i(20);s.default.Type={Default:"number",Time:"time",Frequency:"frequency",TransportTime:"transportTime",Ticks:"ticks",NormalRange:"normalRange",AudioRange:"audioRange",Decibels:"db",Interval:"interval",BPM:"bpm",Positive:"positive",Gain:"gain",Cents:"cents",Degrees:"degrees",MIDI:"midi",BarsBeatsSixteenths:"barsBeatsSixteenths",Samples:"samples",Hertz:"hertz",Note:"note",Milliseconds:"milliseconds",Seconds:"seconds",Notation:"notation"},s.default.prototype.toSeconds=function(t){return s.default.isNumber(t)?t:s.default.isUndef(t)?this.now():s.default.isString(t)||s.default.isObject(t)?new s.default.Time(t).toSeconds():t instanceof s.default.TimeBase?t.toSeconds():void 0},s.default.prototype.toFrequency=function(t){return s.default.isNumber(t)?t:s.default.isString(t)||s.default.isUndef(t)||s.default.isObject(t)?new s.default.Frequency(t).valueOf():t instanceof s.default.TimeBase?t.toFrequency():void 0},s.default.prototype.toTicks=function(t){return s.default.isNumber(t)||s.default.isString(t)||s.default.isObject(t)?new s.default.TransportTime(t).toTicks():s.default.isUndef(t)?s.default.Transport.ticks:t instanceof s.default.TimeBase?t.toTicks():void 0},e.default=s.default},function(t,e,i){"use strict";i.r(e);var s=i(0);i(14),i(3),i(30);s.default.Multiply=function(t){s.default.Signal.call(this),this.createInsOuts(2,0),this._mult=this.input[0]=this.output=new s.default.Gain,this._param=this.input[1]=this.output.gain,this.value=s.default.defaultArg(t,0)},s.default.extend(s.default.Multiply,s.default.Signal),s.default.Multiply.prototype.dispose=function(){return s.default.Signal.prototype.dispose.call(this),this._mult.dispose(),this._mult=null,this._param=null,this},e.default=s.default.Multiply},function(t,e,i){"use strict";i.r(e);var s=i(0);i(16),i(27),i(40),i(4),i(34),i(2),i(1);s.default.Source=function(t){t=s.default.defaultArg(t,s.default.Source.defaults),s.default.AudioNode.call(this),this._volume=this.output=new s.default.Volume(t.volume),this.volume=this._volume.volume,this._readOnly("volume"),this._state=new s.default.TimelineState(s.default.State.Stopped),this._state.memory=100,this._synced=!1,this._scheduled=[],this._volume.output.output.channelCount=2,this._volume.output.output.channelCountMode="explicit",this.mute=t.mute},s.default.extend(s.default.Source,s.default.AudioNode),s.default.Source.defaults={volume:0,mute:!1},Object.defineProperty(s.default.Source.prototype,"state",{get:function(){return this._synced?s.default.Transport.state===s.default.State.Started?this._state.getValueAtTime(s.default.Transport.seconds):s.default.State.Stopped:this._state.getValueAtTime(this.now())}}),Object.defineProperty(s.default.Source.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t}}),s.default.Source.prototype._start=s.default.noOp,s.default.Source.prototype.restart=s.default.noOp,s.default.Source.prototype._stop=s.default.noOp,s.default.Source.prototype.start=function(t,e,i){if(s.default.isUndef(t)&&this._synced?t=s.default.Transport.seconds:(t=this.toSeconds(t),t=Math.max(t,this.context.currentTime)),this._state.getValueAtTime(t)===s.default.State.Started)this._state.cancel(t),this._state.setStateAtTime(s.default.State.Started,t),this.restart(t,e,i);else if(this._state.setStateAtTime(s.default.State.Started,t),this._synced){var n=this._state.get(t);n.offset=s.default.defaultArg(e,0),n.duration=i;var o=s.default.Transport.schedule(function(t){this._start(t,e,i)}.bind(this),t);this._scheduled.push(o),s.default.Transport.state===s.default.State.Started&&this._syncedStart(this.now(),s.default.Transport.seconds)}else this._start.apply(this,arguments);return this},s.default.Source.prototype.stop=function(t){if(s.default.isUndef(t)&&this._synced?t=s.default.Transport.seconds:(t=this.toSeconds(t),t=Math.max(t,this.context.currentTime)),this._synced){var e=s.default.Transport.schedule(this._stop.bind(this),t);this._scheduled.push(e)}else this._stop.apply(this,arguments);return this._state.cancel(t),this._state.setStateAtTime(s.default.State.Stopped,t),this},s.default.Source.prototype.sync=function(){return this._synced=!0,this._syncedStart=function(t,e){if(e>0){var i=this._state.get(e);if(i&&i.state===s.default.State.Started&&i.time!==e){var n,o=e-this.toSeconds(i.time);i.duration&&(n=this.toSeconds(i.duration)-o),this._start(t,this.toSeconds(i.offset)+o,n)}}}.bind(this),this._syncedStop=function(t){var e=s.default.Transport.getSecondsAtTime(Math.max(t-this.sampleTime,0));this._state.getValueAtTime(e)===s.default.State.Started&&this._stop(t)}.bind(this),s.default.Transport.on("start loopStart",this._syncedStart),s.default.Transport.on("stop pause loopEnd",this._syncedStop),this},s.default.Source.prototype.unsync=function(){this._synced&&(s.default.Transport.off("stop pause loopEnd",this._syncedStop),s.default.Transport.off("start loopStart",this._syncedStart)),this._synced=!1;for(var t=0;t<this._scheduled.length;t++){var e=this._scheduled[t];s.default.Transport.clear(e)}return this._scheduled=[],this._state.cancel(0),this},s.default.Source.prototype.dispose=function(){s.default.AudioNode.prototype.dispose.call(this),this.unsync(),this._scheduled=null,this._writable("volume"),this._volume.dispose(),this._volume=null,this.volume=null,this._state.dispose(),this._state=null},e.default=s.default.Source},function(t,e,i){"use strict";i.r(e);var s=i(0);i(30),i(44);if(s.default.supported&&!s.default.global.AudioContext.prototype._native_createWaveShaper){var n=navigator.userAgent.toLowerCase();if(n.includes("safari")&&!n.includes("chrome")){var o=function(t){for(var e in this._internalNode=this.input=this.output=t._native_createWaveShaper(),this._curve=null,this._internalNode)this._defineProperty(this._internalNode,e)};Object.defineProperty(o.prototype,"curve",{get:function(){return this._curve},set:function(t){this._curve=t;var e=new Float32Array(t.length+1);e.set(t,1),e[0]=t[0],this._internalNode.curve=e}}),o.prototype._defineProperty=function(t,e){s.default.isUndef(this[e])&&Object.defineProperty(this,e,{get:function(){return"function"==typeof t[e]?t[e].bind(t):t[e]},set:function(i){t[e]=i}})},s.default.global.AudioContext.prototype._native_createWaveShaper=s.default.global.AudioContext.prototype.createWaveShaper,s.default.global.AudioContext.prototype.createWaveShaper=function(){return new o(this)}}}s.default.WaveShaper=function(t,e){s.default.SignalBase.call(this),this._shaper=this.input=this.output=this.context.createWaveShaper(),this._curve=null,Array.isArray(t)?this.curve=t:isFinite(t)||s.default.isUndef(t)?this._curve=new Float32Array(s.default.defaultArg(t,1024)):s.default.isFunction(t)&&(this._curve=new Float32Array(s.default.defaultArg(e,1024)),this.setMap(t))},s.default.extend(s.default.WaveShaper,s.default.SignalBase),s.default.WaveShaper.prototype.setMap=function(t){for(var e=new Array(this._curve.length),i=0,s=this._curve.length;i<s;i++){var n=i/(s-1)*2-1;e[i]=t(n,i)}return this.curve=e,this},Object.defineProperty(s.default.WaveShaper.prototype,"curve",{get:function(){return this._shaper.curve},set:function(t){this._curve=new Float32Array(t),this._shaper.curve=this._curve}}),Object.defineProperty(s.default.WaveShaper.prototype,"oversample",{get:function(){return this._shaper.oversample},set:function(t){if(!["none","2x","4x"].includes(t))throw new RangeError("Tone.WaveShaper: oversampling must be either 'none', '2x', or '4x'");this._shaper.oversample=t}}),s.default.WaveShaper.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._shaper.disconnect(),this._shaper=null,this._curve=null,this};e.default=s.default.WaveShaper},function(t,e,i){"use strict";i.r(e);var s=i(0);i(23),i(1);s.default.Effect=function(){var t=s.default.defaults(arguments,["wet"],s.default.Effect);s.default.AudioNode.call(this),this.createInsOuts(1,1),this._dryWet=new s.default.CrossFade(t.wet),this.wet=this._dryWet.fade,this.effectSend=new s.default.Gain,this.effectReturn=new s.default.Gain,s.default.connect(this.input,this._dryWet.a),s.default.connect(this.input,this.effectSend),this.effectReturn.connect(this._dryWet.b),this._dryWet.connect(this.output),this._readOnly(["wet"])},s.default.extend(s.default.Effect,s.default.AudioNode),s.default.Effect.defaults={wet:1},s.default.Effect.prototype.connectEffect=function(t){return this.effectSend.chain(t,this.effectReturn),this},s.default.Effect.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._dryWet.dispose(),this._dryWet=null,this.effectSend.dispose(),this.effectSend=null,this.effectReturn.dispose(),this.effectReturn=null,this._writable(["wet"]),this.wet=null,this},e.default=s.default.Effect},function(t,e,i){"use strict";i.r(e);var s=i(0);i(2),i(1);s.default.Filter=function(){var t=s.default.defaults(arguments,["frequency","type","rolloff"],s.default.Filter);s.default.AudioNode.call(this),this.createInsOuts(1,1),this._filters=[],this.frequency=new s.default.Signal(t.frequency,s.default.Type.Frequency),this.detune=new s.default.Signal(0,s.default.Type.Cents),this.gain=new s.default.Signal({value:t.gain,convert:!0,type:s.default.Type.Decibels}),this.Q=new s.default.Signal(t.Q),this._type=t.type,this._rolloff=t.rolloff,this.rolloff=t.rolloff,this._readOnly(["detune","frequency","gain","Q"])},s.default.extend(s.default.Filter,s.default.AudioNode),s.default.Filter.defaults={type:"lowpass",frequency:350,rolloff:-12,Q:1,gain:0},Object.defineProperty(s.default.Filter.prototype,"type",{get:function(){return this._type},set:function(t){if(-1===["lowpass","highpass","bandpass","lowshelf","highshelf","notch","allpass","peaking"].indexOf(t))throw new TypeError("Tone.Filter: invalid type "+t);this._type=t;for(var e=0;e<this._filters.length;e++)this._filters[e].type=t}}),Object.defineProperty(s.default.Filter.prototype,"rolloff",{get:function(){return this._rolloff},set:function(t){t=parseInt(t,10);var e=[-12,-24,-48,-96].indexOf(t);if(-1===e)throw new RangeError("Tone.Filter: rolloff can only be -12, -24, -48 or -96");e+=1,this._rolloff=t,this.input.disconnect();for(var i=0;i<this._filters.length;i++)this._filters[i].disconnect(),this._filters[i]=null;this._filters=new Array(e);for(var n=0;n<e;n++){var o=this.context.createBiquadFilter();o.type=this._type,this.frequency.connect(o.frequency),this.detune.connect(o.detune),this.Q.connect(o.Q),this.gain.connect(o.gain),this._filters[n]=o}var a=[this.input].concat(this._filters).concat([this.output]);s.default.connectSeries.apply(s.default,a)}}),s.default.Filter.prototype.getFrequencyResponse=function(t){t=s.default.defaultArg(t,128);for(var e=new Float32Array(t).map(function(){return 1}),i=new Float32Array(t),n=0;n<t;n++){var o=19980*Math.pow(n/t,2)+20;i[n]=o}var a=new Float32Array(t),r=new Float32Array(t);return this._filters.forEach(function(){var t=this.context.createBiquadFilter();t.type=this._type,t.Q.value=this.Q.value,t.frequency.value=this.frequency.value,t.gain.value=this.gain.value,t.getFrequencyResponse(i,a,r),a.forEach(function(t,i){e[i]*=t})}.bind(this)),e},s.default.Filter.prototype.dispose=function(){s.default.AudioNode.prototype.dispose.call(this);for(var t=0;t<this._filters.length;t++)this._filters[t].disconnect(),this._filters[t]=null;return this._filters=null,this._writable(["detune","frequency","gain","Q"]),this.frequency.dispose(),this.Q.dispose(),this.frequency=null,this.Q=null,this.detune.dispose(),this.detune=null,this.gain.dispose(),this.gain=null,this},e.default=s.default.Filter},function(t,e,i){"use strict";i.r(e);var s=i(0);i(1);s.default.Merge=function(t){t=s.default.defaultArg(t,2),s.default.AudioNode.call(this),this.createInsOuts(t,0),this._merger=this.output=this.context.createChannelMerger(t);for(var e=0;e<t;e++)this.input[e]=new s.default.Gain,this.input[e].connect(this._merger,0,e),this.input[e].channelCount=1,this.input[e].channelCountMode="explicit";this.left=this.input[0],this.right=this.input[1]},s.default.extend(s.default.Merge,s.default.AudioNode),s.default.Merge.prototype.dispose=function(){return this.input.forEach(function(t){t.dispose()}),s.default.AudioNode.prototype.dispose.call(this),this.left=null,this.right=null,this._merger.disconnect(),this._merger=null,this},e.default=s.default.Merge},function(t,e,i){"use strict";i.r(e);var s=i(0);i(35),i(4);s.default.supported&&(AudioBuffer.prototype.copyToChannel||(AudioBuffer.prototype.copyToChannel=function(t,e,i){var s=this.getChannelData(e);i=i||0;for(var n=0;n<s.length;n++)s[n+i]=t[n]},AudioBuffer.prototype.copyFromChannel=function(t,e,i){var s=this.getChannelData(e);i=i||0;for(var n=0;n<t.length;n++)t[n]=s[n+i]})),s.default.Buffer=function(){var t=s.default.defaults(arguments,["url","onload","onerror"],s.default.Buffer);s.default.call(this),this._buffer=null,this._reversed=t.reverse,this._xhr=null,this.onload=s.default.noOp,t.url instanceof AudioBuffer||t.url instanceof s.default.Buffer?(this.set(t.url),this.loaded||(this.onload=t.onload)):s.default.isString(t.url)&&this.load(t.url).then(t.onload).catch(t.onerror)},s.default.extend(s.default.Buffer),s.default.Buffer.defaults={url:void 0,reverse:!1,onload:s.default.noOp,onerror:s.default.noOp},s.default.Buffer.prototype.set=function(t){return t instanceof s.default.Buffer?t.loaded?this._buffer=t.get():t.onload=function(){this.set(t),this.onload(this)}.bind(this):this._buffer=t,this._reversed&&this._reverse(),this},s.default.Buffer.prototype.get=function(){return this._buffer},s.default.Buffer.prototype.load=function(t,e,i){return new Promise(function(n,o){this._xhr=s.default.Buffer.load(t,function(t){this._xhr=null,this.set(t),n(this),this.onload(this),e&&e(this)}.bind(this),function(t){this._xhr=null,o(t),i&&i(t)}.bind(this))}.bind(this))},s.default.Buffer.prototype.dispose=function(){return s.default.prototype.dispose.call(this),this._buffer=null,this._xhr&&(s.default.Buffer._removeFromDownloadQueue(this._xhr),this._xhr.abort(),this._xhr=null),this},Object.defineProperty(s.default.Buffer.prototype,"loaded",{get:function(){return this.length>0}}),Object.defineProperty(s.default.Buffer.prototype,"duration",{get:function(){return this._buffer?this._buffer.duration:0}}),Object.defineProperty(s.default.Buffer.prototype,"length",{get:function(){return this._buffer?this._buffer.length:0}}),Object.defineProperty(s.default.Buffer.prototype,"numberOfChannels",{get:function(){return this._buffer?this._buffer.numberOfChannels:0}}),s.default.Buffer.prototype.fromArray=function(t){var e=t[0].length>0,i=e?t.length:1,s=e?t[0].length:t.length,n=this.context.createBuffer(i,s,this.context.sampleRate);e||1!==i||(t=[t]);for(var o=0;o<i;o++)n.copyToChannel(t[o],o);return this._buffer=n,this},s.default.Buffer.prototype.toMono=function(t){if(s.default.isNumber(t))this.fromArray(this.toArray(t));else{for(var e=new Float32Array(this.length),i=this.numberOfChannels,n=0;n<i;n++)for(var o=this.toArray(n),a=0;a<o.length;a++)e[a]+=o[a];e=e.map(function(t){return t/i}),this.fromArray(e)}return this},s.default.Buffer.prototype.toArray=function(t){if(s.default.isNumber(t))return this.getChannelData(t);if(1===this.numberOfChannels)return this.toArray(0);for(var e=[],i=0;i<this.numberOfChannels;i++)e[i]=this.getChannelData(i);return e},s.default.Buffer.prototype.getChannelData=function(t){return this._buffer.getChannelData(t)},s.default.Buffer.prototype.slice=function(t,e){e=s.default.defaultArg(e,this.duration);for(var i=Math.floor(this.context.sampleRate*this.toSeconds(t)),n=Math.floor(this.context.sampleRate*this.toSeconds(e)),o=[],a=0;a<this.numberOfChannels;a++)o[a]=this.toArray(a).slice(i,n);return(new s.default.Buffer).fromArray(o)},s.default.Buffer.prototype._reverse=function(){if(this.loaded)for(var t=0;t<this.numberOfChannels;t++)Array.prototype.reverse.call(this.getChannelData(t));return this},Object.defineProperty(s.default.Buffer.prototype,"reverse",{get:function(){return this._reversed},set:function(t){this._reversed!==t&&(this._reversed=t,this._reverse())}}),s.default.Emitter.mixin(s.default.Buffer),s.default.Buffer._downloadQueue=[],s.default.Buffer.baseUrl="",s.default.Buffer.fromArray=function(t){return(new s.default.Buffer).fromArray(t)},s.default.Buffer.fromUrl=function(t){var e=new s.default.Buffer;return e.load(t).then(function(){return e})},s.default.Buffer._removeFromDownloadQueue=function(t){var e=s.default.Buffer._downloadQueue.indexOf(t);-1!==e&&s.default.Buffer._downloadQueue.splice(e,1)},s.default.Buffer.load=function(t,e,i){e=s.default.defaultArg(e,s.default.noOp);var n=t.match(/\[(.+\|?)+\]$/);if(n){for(var o=n[1].split("|"),a=o[0],r=0;r<o.length;r++)if(s.default.Buffer.supportsType(o[r])){a=o[r];break}t=t.replace(n[0],a)}function l(t){if(s.default.Buffer._removeFromDownloadQueue(d),s.default.Buffer.emit("error",t),!i)throw t;i(t)}function u(){for(var t=0,e=0;e<s.default.Buffer._downloadQueue.length;e++)t+=s.default.Buffer._downloadQueue[e].progress;s.default.Buffer.emit("progress",t/s.default.Buffer._downloadQueue.length)}var d=new XMLHttpRequest;return d.open("GET",s.default.Buffer.baseUrl+t,!0),d.responseType="arraybuffer",d.progress=0,s.default.Buffer._downloadQueue.push(d),d.addEventListener("load",function(){200===d.status?s.default.context.decodeAudioData(d.response).then(function(t){d.progress=1,u(),e(t),s.default.Buffer._removeFromDownloadQueue(d),0===s.default.Buffer._downloadQueue.length&&s.default.Buffer.emit("load")}).catch(function(){s.default.Buffer._removeFromDownloadQueue(d),l("Tone.Buffer: could not decode audio data: "+t)}):l("Tone.Buffer: could not locate file: "+t)}),d.addEventListener("error",l),d.addEventListener("progress",function(t){t.lengthComputable&&(d.progress=t.loaded/t.total*.95,u())}),d.send(),d},s.default.Buffer.cancelDownloads=function(){return s.default.Buffer._downloadQueue.slice().forEach(function(t){s.default.Buffer._removeFromDownloadQueue(t),t.abort()}),s.default.Buffer},s.default.Buffer.supportsType=function(t){var e=t.split(".");return e=e[e.length-1],""!==document.createElement("audio").canPlayType("audio/"+e)},s.default.loaded=function(){var t,e;function i(){s.default.Buffer.off("load",t),s.default.Buffer.off("error",e)}return new Promise(function(i,n){t=function(){i()},e=function(){n()},s.default.Buffer.on("load",t),s.default.Buffer.on("error",e)}).then(i).catch(function(t){throw i(),new Error(t)})};e.default=s.default.Buffer},function(t,e,i){"use strict";i.r(e);var s=i(0);i(17),i(26),i(1),i(2),i(22),i(4),i(28);s.default.LFO=function(){var t=s.default.defaults(arguments,["frequency","min","max"],s.default.LFO);s.default.AudioNode.call(this),this._oscillator=new s.default.Oscillator({frequency:t.frequency,type:t.type}),this.frequency=this._oscillator.frequency,this.amplitude=this._oscillator.volume,this.amplitude.units=s.default.Type.NormalRange,this.amplitude.value=t.amplitude,this._stoppedSignal=new s.default.Signal(0,s.default.Type.AudioRange),this._zeros=new s.default.Zero,this._stoppedValue=0,this._a2g=new s.default.AudioToGain,this._scaler=this.output=new s.default.Scale(t.min,t.max),this._units=s.default.Type.Default,this.units=t.units,this._oscillator.chain(this._a2g,this._scaler),this._zeros.connect(this._a2g),this._stoppedSignal.connect(this._a2g),this._readOnly(["amplitude","frequency"]),this.phase=t.phase},s.default.extend(s.default.LFO,s.default.AudioNode),s.default.LFO.defaults={type:"sine",min:0,max:1,phase:0,frequency:"4n",amplitude:1,units:s.default.Type.Default},s.default.LFO.prototype.start=function(t){return t=this.toSeconds(t),this._stoppedSignal.setValueAtTime(0,t),this._oscillator.start(t),this},s.default.LFO.prototype.stop=function(t){return t=this.toSeconds(t),this._stoppedSignal.setValueAtTime(this._stoppedValue,t),this._oscillator.stop(t),this},s.default.LFO.prototype.sync=function(){return this._oscillator.sync(),this._oscillator.syncFrequency(),this},s.default.LFO.prototype.unsync=function(){return this._oscillator.unsync(),this._oscillator.unsyncFrequency(),this},Object.defineProperty(s.default.LFO.prototype,"min",{get:function(){return this._toUnits(this._scaler.min)},set:function(t){t=this._fromUnits(t),this._scaler.min=t}}),Object.defineProperty(s.default.LFO.prototype,"max",{get:function(){return this._toUnits(this._scaler.max)},set:function(t){t=this._fromUnits(t),this._scaler.max=t}}),Object.defineProperty(s.default.LFO.prototype,"type",{get:function(){return this._oscillator.type},set:function(t){this._oscillator.type=t,this._stoppedValue=this._oscillator._getInitialValue(),this._stoppedSignal.value=this._stoppedValue}}),Object.defineProperty(s.default.LFO.prototype,"phase",{get:function(){return this._oscillator.phase},set:function(t){this._oscillator.phase=t,this._stoppedValue=this._oscillator._getInitialValue(),this._stoppedSignal.value=this._stoppedValue}}),Object.defineProperty(s.default.LFO.prototype,"units",{get:function(){return this._units},set:function(t){var e=this.min,i=this.max;this._units=t,this.min=e,this.max=i}}),Object.defineProperty(s.default.LFO.prototype,"state",{get:function(){return this._oscillator.state}}),s.default.LFO.prototype.connect=function(t){return t.constructor!==s.default.Signal&&t.constructor!==s.default.Param||(this.convert=t.convert,this.units=t.units),s.default.SignalBase.prototype.connect.apply(this,arguments),this},s.default.LFO.prototype._fromUnits=s.default.Param.prototype._fromUnits,s.default.LFO.prototype._toUnits=s.default.Param.prototype._toUnits,s.default.LFO.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["amplitude","frequency"]),this._oscillator.dispose(),this._oscillator=null,this._stoppedSignal.dispose(),this._stoppedSignal=null,this._zeros.dispose(),this._zeros=null,this._scaler.dispose(),this._scaler=null,this._a2g.dispose(),this._a2g=null,this.frequency=null,this.amplitude=null,this},e.default=s.default.LFO},function(t,e,i){"use strict";i.r(e);var s=i(0);i(29),i(90),i(2),i(3);s.default.Subtract=function(t){s.default.Signal.call(this),this.createInsOuts(2,0),this._sum=this.input[0]=this.output=new s.default.Gain,this._neg=new s.default.Negate,this._param=this.input[1]=new s.default.Signal(t),this._param.chain(this._neg,this._sum)},s.default.extend(s.default.Subtract,s.default.Signal),s.default.Subtract.prototype.dispose=function(){return s.default.Signal.prototype.dispose.call(this),this._neg.dispose(),this._neg=null,this._sum.disconnect(),this._sum=null,this},e.default=s.default.Subtract},function(t,e,i){"use strict";i.r(e);var s=i(0);i(4),i(1),i(24);s.default.Param=function(){var t=s.default.defaults(arguments,["param","units","convert"],s.default.Param);s.default.AudioNode.call(this,t),this._param=this.input=t.param,this.units=t.units,this.convert=t.convert,this.overridden=!1,this._events=new s.default.Timeline(1e3),s.default.isDefined(t.value)&&this._param&&this.setValueAtTime(t.value,0)},s.default.extend(s.default.Param,s.default.AudioNode),s.default.Param.defaults={units:s.default.Type.Default,convert:!0,param:void 0},Object.defineProperty(s.default.Param.prototype,"value",{get:function(){var t=this.now();return this._toUnits(this.getValueAtTime(t))},set:function(t){this._initialValue=this._fromUnits(t),this.cancelScheduledValues(this.now()),this.setValueAtTime(t,this.now())}}),Object.defineProperty(s.default.Param.prototype,"minValue",{get:function(){return this.units===s.default.Type.Time||this.units===s.default.Type.Frequency||this.units===s.default.Type.NormalRange||this.units===s.default.Type.Positive||this.units===s.default.Type.BPM?0:this.units===s.default.Type.AudioRange?-1:this.units===s.default.Type.Decibels?-1/0:this._param.minValue}}),Object.defineProperty(s.default.Param.prototype,"maxValue",{get:function(){return this.units===s.default.Type.NormalRange||this.units===s.default.Type.AudioRange?1:this._param.maxValue}}),s.default.Param.prototype._fromUnits=function(t){if(!this.convert&&!s.default.isUndef(this.convert)||this.overridden)return t;switch(this.units){case s.default.Type.Time:return this.toSeconds(t);case s.default.Type.Frequency:return this.toFrequency(t);case s.default.Type.Decibels:return s.default.dbToGain(t);case s.default.Type.NormalRange:return Math.min(Math.max(t,0),1);case s.default.Type.AudioRange:return Math.min(Math.max(t,-1),1);case s.default.Type.Positive:return Math.max(t,0);default:return t}},s.default.Param.prototype._toUnits=function(t){if(!this.convert&&!s.default.isUndef(this.convert))return t;switch(this.units){case s.default.Type.Decibels:return s.default.gainToDb(t);default:return t}},s.default.Param.prototype._minOutput=1e-5,s.default.Param.AutomationType={Linear:"linearRampToValueAtTime",Exponential:"exponentialRampToValueAtTime",Target:"setTargetAtTime",SetValue:"setValueAtTime",Cancel:"cancelScheduledValues"},s.default.Param.prototype.setValueAtTime=function(t,e){return e=this.toSeconds(e),t=this._fromUnits(t),this._events.add({type:s.default.Param.AutomationType.SetValue,value:t,time:e}),this.log(s.default.Param.AutomationType.SetValue,t,e),this._param.setValueAtTime(t,e),this},s.default.Param.prototype.getValueAtTime=function(t){t=this.toSeconds(t);var e=this._events.getAfter(t),i=this._events.get(t),n=s.default.defaultArg(this._initialValue,this._param.defaultValue),o=n;if(null===i)o=n;else if(i.type===s.default.Param.AutomationType.Target){var a,r=this._events.getBefore(i.time);a=null===r?n:r.value,o=this._exponentialApproach(i.time,a,i.value,i.constant,t)}else o=null===e?i.value:e.type===s.default.Param.AutomationType.Linear?this._linearInterpolate(i.time,i.value,e.time,e.value,t):e.type===s.default.Param.AutomationType.Exponential?this._exponentialInterpolate(i.time,i.value,e.time,e.value,t):i.value;return o},s.default.Param.prototype.setRampPoint=function(t){t=this.toSeconds(t);var e=this.getValueAtTime(t);return this.cancelAndHoldAtTime(t),0===e&&(e=this._minOutput),this.setValueAtTime(this._toUnits(e),t),this},s.default.Param.prototype.linearRampToValueAtTime=function(t,e){return t=this._fromUnits(t),e=this.toSeconds(e),this._events.add({type:s.default.Param.AutomationType.Linear,value:t,time:e}),this.log(s.default.Param.AutomationType.Linear,t,e),this._param.linearRampToValueAtTime(t,e),this},s.default.Param.prototype.exponentialRampToValueAtTime=function(t,e){return t=this._fromUnits(t),t=Math.max(this._minOutput,t),e=this.toSeconds(e),this._events.add({type:s.default.Param.AutomationType.Exponential,time:e,value:t}),this.log(s.default.Param.AutomationType.Exponential,t,e),this._param.exponentialRampToValueAtTime(t,e),this},s.default.Param.prototype.exponentialRampTo=function(t,e,i){return i=this.toSeconds(i),this.setRampPoint(i),this.exponentialRampToValueAtTime(t,i+this.toSeconds(e)),this},s.default.Param.prototype.linearRampTo=function(t,e,i){return i=this.toSeconds(i),this.setRampPoint(i),this.linearRampToValueAtTime(t,i+this.toSeconds(e)),this},s.default.Param.prototype.targetRampTo=function(t,e,i){return i=this.toSeconds(i),this.setRampPoint(i),this.exponentialApproachValueAtTime(t,i,e),this},s.default.Param.prototype.exponentialApproachValueAtTime=function(t,e,i){var s=Math.log(this.toSeconds(i)+1)/Math.log(200);return e=this.toSeconds(e),this.setTargetAtTime(t,e,s),this.cancelAndHoldAtTime(e+.9*i),this.linearRampToValueAtTime(t,e+i),this},s.default.Param.prototype.setTargetAtTime=function(t,e,i){if(t=this._fromUnits(t),i<=0)throw new Error("timeConstant must be greater than 0");return e=this.toSeconds(e),this._events.add({type:s.default.Param.AutomationType.Target,value:t,time:e,constant:i}),this.log(s.default.Param.AutomationType.Target,t,e,i),this._param.setTargetAtTime(t,e,i),this},s.default.Param.prototype.setValueCurveAtTime=function(t,e,i,n){n=s.default.defaultArg(n,1),i=this.toSeconds(i),e=this.toSeconds(e),this.setValueAtTime(t[0]*n,e);for(var o=i/(t.length-1),a=1;a<t.length;a++)this.linearRampToValueAtTime(t[a]*n,e+a*o);return this},s.default.Param.prototype.cancelScheduledValues=function(t){return t=this.toSeconds(t),this._events.cancel(t),this._param.cancelScheduledValues(t),this.log(s.default.Param.AutomationType.Cancel,t),this},s.default.Param.prototype.cancelAndHoldAtTime=function(t){t=this.toSeconds(t);var e=this.getValueAtTime(t);this.log("cancelAndHoldAtTime",t,"value="+e),this._param.cancelScheduledValues(t);var i=this._events.get(t),n=this._events.getAfter(t);return i&&i.time===t?n?this._events.cancel(n.time):this._events.cancel(t+this.sampleTime):n&&(this._events.cancel(n.time),n.type===s.default.Param.AutomationType.Linear?this.linearRampToValueAtTime(e,t):n.type===s.default.Param.AutomationType.Exponential&&this.exponentialRampToValueAtTime(e,t)),this._events.add({type:s.default.Param.AutomationType.SetValue,value:e,time:t}),this._param.setValueAtTime(e,t),this},s.default.Param.prototype.rampTo=function(t,e,i){return e=s.default.defaultArg(e,.1),this.units===s.default.Type.Frequency||this.units===s.default.Type.BPM||this.units===s.default.Type.Decibels?this.exponentialRampTo(t,e,i):this.linearRampTo(t,e,i),this},s.default.Param.prototype._exponentialApproach=function(t,e,i,s,n){return i+(e-i)*Math.exp(-(n-t)/s)},s.default.Param.prototype._linearInterpolate=function(t,e,i,s,n){return e+(n-t)/(i-t)*(s-e)},s.default.Param.prototype._exponentialInterpolate=function(t,e,i,s,n){return e*Math.pow(s/e,(n-t)/(i-t))},s.default.Param.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._param=null,this._events=null,this},e.default=s.default.Param},function(t,e,i){"use strict";i.r(e);var s=i(0);i(8),i(19),i(10),i(23);s.default.StereoEffect=function(){s.default.AudioNode.call(this);var t=s.default.defaults(arguments,["wet"],s.default.Effect);this.createInsOuts(1,1),this._dryWet=new s.default.CrossFade(t.wet),this.wet=this._dryWet.fade,this._split=new s.default.Split,this.effectSendL=this._split.left,this.effectSendR=this._split.right,this._merge=new s.default.Merge,this.effectReturnL=this._merge.left,this.effectReturnR=this._merge.right,s.default.connect(this.input,this._split),s.default.connect(this.input,this._dryWet,0,0),this._merge.connect(this._dryWet,0,1),this._dryWet.connect(this.output),this._readOnly(["wet"])},s.default.extend(s.default.StereoEffect,s.default.Effect),s.default.StereoEffect.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._dryWet.dispose(),this._dryWet=null,this._split.dispose(),this._split=null,this._merge.dispose(),this._merge=null,this.effectSendL=null,this.effectSendR=null,this.effectReturnL=null,this.effectReturnR=null,this._writable(["wet"]),this.wet=null,this},e.default=s.default.StereoEffect},function(t,e,i){"use strict";i.r(e);var s=i(0);i(83),i(4),i(24),i(35),i(3),i(81),i(80),i(56);s.default.Transport=function(){s.default.Emitter.call(this),s.default.getContext(function(){this.loop=!1,this._loopStart=0,this._loopEnd=0,this._ppq=n.defaults.PPQ,this._clock=new s.default.Clock({callback:this._processTick.bind(this),frequency:0}),this._bindClockEvents(),this.bpm=this._clock.frequency,this.bpm._toUnits=this._toUnits.bind(this),this.bpm._fromUnits=this._fromUnits.bind(this),this.bpm.units=s.default.Type.BPM,this.bpm.value=n.defaults.bpm,this._readOnly("bpm"),this._timeSignature=n.defaults.timeSignature,this._scheduledEvents={},this._timeline=new s.default.Timeline,this._repeatedEvents=new s.default.IntervalTimeline,this._syncedSignals=[],this._swingTicks=n.defaults.PPQ/2,this._swingAmount=0,this.context.transport=this}.bind(this))},s.default.extend(s.default.Transport,s.default.Emitter),s.default.Transport.defaults={bpm:120,swing:0,swingSubdivision:"8n",timeSignature:4,loopStart:0,loopEnd:"4m",PPQ:192},s.default.Transport.prototype.isTransport=!0,s.default.Transport.prototype._processTick=function(t,e){if(this._swingAmount>0&&e%this._ppq!=0&&e%(2*this._swingTicks)!=0){var i=e%(2*this._swingTicks)/(2*this._swingTicks),n=Math.sin(i*Math.PI)*this._swingAmount;t+=s.default.Ticks(2*this._swingTicks/3).toSeconds()*n}this.loop&&e>=this._loopEnd&&(this.emit("loopEnd",t),this._clock.setTicksAtTime(this._loopStart,t),e=this._loopStart,this.emit("loopStart",t,this._clock.getSecondsAtTime(t)),this.emit("loop",t)),this._timeline.forEachAtTime(e,function(e){e.invoke(t)})},s.default.Transport.prototype.schedule=function(t,e){var i=new s.default.TransportEvent(this,{time:s.default.TransportTime(e),callback:t});return this._addEvent(i,this._timeline)},s.default.Transport.prototype.scheduleRepeat=function(t,e,i,n){var o=new s.default.TransportRepeatEvent(this,{callback:t,interval:s.default.Time(e),time:s.default.TransportTime(i),duration:s.default.Time(s.default.defaultArg(n,1/0))});return this._addEvent(o,this._repeatedEvents)},s.default.Transport.prototype.scheduleOnce=function(t,e){var i=new s.default.TransportEvent(this,{time:s.default.TransportTime(e),callback:t,once:!0});return this._addEvent(i,this._timeline)},s.default.Transport.prototype.clear=function(t){if(this._scheduledEvents.hasOwnProperty(t)){var e=this._scheduledEvents[t.toString()];e.timeline.remove(e.event),e.event.dispose(),delete this._scheduledEvents[t.toString()]}return this},s.default.Transport.prototype._addEvent=function(t,e){return this._scheduledEvents[t.id.toString()]={event:t,timeline:e},e.add(t),t.id},s.default.Transport.prototype.cancel=function(t){return t=s.default.defaultArg(t,0),t=this.toTicks(t),this._timeline.forEachFrom(t,function(t){this.clear(t.id)}.bind(this)),this._repeatedEvents.forEachFrom(t,function(t){this.clear(t.id)}.bind(this)),this},s.default.Transport.prototype._bindClockEvents=function(){this._clock.on("start",function(t,e){e=s.default.Ticks(e).toSeconds(),this.emit("start",t,e)}.bind(this)),this._clock.on("stop",function(t){this.emit("stop",t)}.bind(this)),this._clock.on("pause",function(t){this.emit("pause",t)}.bind(this))},Object.defineProperty(s.default.Transport.prototype,"state",{get:function(){return this._clock.getStateAtTime(this.now())}}),s.default.Transport.prototype.start=function(t,e){return s.default.isDefined(e)&&(e=this.toTicks(e)),this._clock.start(t,e),this},s.default.Transport.prototype.stop=function(t){return this._clock.stop(t),this},s.default.Transport.prototype.pause=function(t){return this._clock.pause(t),this},s.default.Transport.prototype.toggle=function(t){return t=this.toSeconds(t),this._clock.getStateAtTime(t)!==s.default.State.Started?this.start(t):this.stop(t),this},Object.defineProperty(s.default.Transport.prototype,"timeSignature",{get:function(){return this._timeSignature},set:function(t){s.default.isArray(t)&&(t=t[0]/t[1]*4),this._timeSignature=t}}),Object.defineProperty(s.default.Transport.prototype,"loopStart",{get:function(){return s.default.Ticks(this._loopStart).toSeconds()},set:function(t){this._loopStart=this.toTicks(t)}}),Object.defineProperty(s.default.Transport.prototype,"loopEnd",{get:function(){return s.default.Ticks(this._loopEnd).toSeconds()},set:function(t){this._loopEnd=this.toTicks(t)}}),s.default.Transport.prototype.setLoopPoints=function(t,e){return this.loopStart=t,this.loopEnd=e,this},Object.defineProperty(s.default.Transport.prototype,"swing",{get:function(){return this._swingAmount},set:function(t){this._swingAmount=t}}),Object.defineProperty(s.default.Transport.prototype,"swingSubdivision",{get:function(){return s.default.Ticks(this._swingTicks).toNotation()},set:function(t){this._swingTicks=this.toTicks(t)}}),Object.defineProperty(s.default.Transport.prototype,"position",{get:function(){var t=this.now(),e=this._clock.getTicksAtTime(t);return s.default.Ticks(e).toBarsBeatsSixteenths()},set:function(t){var e=this.toTicks(t);this.ticks=e}}),Object.defineProperty(s.default.Transport.prototype,"seconds",{get:function(){return this._clock.seconds},set:function(t){var e=this.now(),i=this.bpm.timeToTicks(t,e);this.ticks=i}}),Object.defineProperty(s.default.Transport.prototype,"progress",{get:function(){if(this.loop){var t=this.now();return(this._clock.getTicksAtTime(t)-this._loopStart)/(this._loopEnd-this._loopStart)}return 0}}),Object.defineProperty(s.default.Transport.prototype,"ticks",{get:function(){return this._clock.ticks},set:function(t){if(this._clock.ticks!==t){var e=this.now();this.state===s.default.State.Started?(this.emit("stop",e),this._clock.setTicksAtTime(t,e),this.emit("start",e,this.seconds)):this._clock.setTicksAtTime(t,e)}}}),s.default.Transport.prototype.getTicksAtTime=function(t){return Math.round(this._clock.getTicksAtTime(t))},s.default.Transport.prototype.getSecondsAtTime=function(t){return this._clock.getSecondsAtTime(t)},Object.defineProperty(s.default.Transport.prototype,"PPQ",{get:function(){return this._ppq},set:function(t){var e=this.bpm.value;this._ppq=t,this.bpm.value=e}}),s.default.Transport.prototype._fromUnits=function(t){return 1/(60/t/this.PPQ)},s.default.Transport.prototype._toUnits=function(t){return t/this.PPQ*60},s.default.Transport.prototype.nextSubdivision=function(t){if(t=this.toTicks(t),this.state!==s.default.State.Started)return 0;var e=this.now(),i=t-this.getTicksAtTime(e)%t;return this._clock.nextTickTime(i,e)},s.default.Transport.prototype.syncSignal=function(t,e){if(!e){var i=this.now();e=0!==t.getValueAtTime(i)?t.getValueAtTime(i)/this.bpm.getValueAtTime(i):0}var n=new s.default.Gain(e);return this.bpm.chain(n,t._param),this._syncedSignals.push({ratio:n,signal:t,initial:t.value}),t.value=0,this},s.default.Transport.prototype.unsyncSignal=function(t){for(var e=this._syncedSignals.length-1;e>=0;e--){var i=this._syncedSignals[e];i.signal===t&&(i.ratio.dispose(),i.signal.value=i.initial,this._syncedSignals.splice(e,1))}return this},s.default.Transport.prototype.dispose=function(){return s.default.Emitter.prototype.dispose.call(this),this._clock.dispose(),this._clock=null,this._writable("bpm"),this.bpm=null,this._timeline.dispose(),this._timeline=null,this._repeatedEvents.dispose(),this._repeatedEvents=null,this};var n=s.default.Transport;s.default.Transport=new n,s.default.Context.on("init",function(t){t.transport&&t.transport.isTransport?s.default.Transport=t.transport:s.default.Transport=new n}),s.default.Context.on("close",function(t){t.transport&&t.transport.isTransport&&t.transport.dispose()}),e.default=s.default.Transport},function(t,e,i){"use strict";i.r(e);var s=i(0);i(2),i(6),i(16),i(64);s.default.Oscillator=function(){var t=s.default.defaults(arguments,["frequency","type"],s.default.Oscillator);s.default.Source.call(this,t),this._oscillator=null,this.frequency=new s.default.Signal(t.frequency,s.default.Type.Frequency),this.detune=new s.default.Signal(t.detune,s.default.Type.Cents),this._wave=null,this._partials=t.partials,this._partialCount=t.partialCount,this._phase=t.phase,this._type=t.type,t.partialCount&&t.type!==s.default.Oscillator.Type.Custom&&(this._type=this.baseType+t.partialCount.toString()),this.phase=this._phase,this._readOnly(["frequency","detune"])},s.default.extend(s.default.Oscillator,s.default.Source),s.default.Oscillator.defaults={type:"sine",frequency:440,detune:0,phase:0,partials:[],partialCount:0},s.default.Oscillator.Type={Sine:"sine",Triangle:"triangle",Sawtooth:"sawtooth",Square:"square",Custom:"custom"},s.default.Oscillator.prototype._start=function(t){this.log("start",t);var e=new s.default.OscillatorNode;this._oscillator=e,this._wave?this._oscillator.setPeriodicWave(this._wave):this._oscillator.type=this._type,this._oscillator.connect(this.output),this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),t=this.toSeconds(t),this._oscillator.start(t)},s.default.Oscillator.prototype._stop=function(t){return this.log("stop",t),this._oscillator&&(t=this.toSeconds(t),this._oscillator.stop(t)),this},s.default.Oscillator.prototype.restart=function(t){return this._oscillator&&this._oscillator.cancelStop(),this._state.cancel(this.toSeconds(t)),this},s.default.Oscillator.prototype.syncFrequency=function(){return s.default.Transport.syncSignal(this.frequency),this},s.default.Oscillator.prototype.unsyncFrequency=function(){return s.default.Transport.unsyncSignal(this.frequency),this},Object.defineProperty(s.default.Oscillator.prototype,"type",{get:function(){return this._type},set:function(t){var e=[s.default.Oscillator.Type.Sine,s.default.Oscillator.Type.Square,s.default.Oscillator.Type.Triangle,s.default.Oscillator.Type.Sawtooth].includes(t);if(0===this._phase&&e)this._wave=null,this._partialCount=0,null!==this._oscillator&&(this._oscillator.type=t);else{var i=this._getRealImaginary(t,this._phase),n=this.context.createPeriodicWave(i[0],i[1]);this._wave=n,null!==this._oscillator&&this._oscillator.setPeriodicWave(this._wave)}this._type=t}}),Object.defineProperty(s.default.Oscillator.prototype,"baseType",{get:function(){return this._type.replace(this.partialCount,"")},set:function(t){this.partialCount&&this._type!==s.default.Oscillator.Type.Custom&&t!==s.default.Oscillator.Type.Custom?this.type=t+this.partialCount:this.type=t}}),Object.defineProperty(s.default.Oscillator.prototype,"partialCount",{get:function(){return this._partialCount},set:function(t){var e=this._type,i=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(this._type);i&&(e=i[1]),this._type!==s.default.Oscillator.Type.Custom&&(this.type=0===t?e:e+t.toString())}}),s.default.Oscillator.prototype.get=function(){var t=s.default.prototype.get.apply(this,arguments);return t.type!==s.default.Oscillator.Type.Custom&&delete t.partials,t},s.default.Oscillator.prototype._getRealImaginary=function(t,e){var i=2048,n=new Float32Array(i),o=new Float32Array(i),a=1;if(t===s.default.Oscillator.Type.Custom)a=this._partials.length+1,this._partialCount=this._partials.length,i=a;else{var r=/^(sine|triangle|square|sawtooth)(\d+)$/.exec(t);r?(a=parseInt(r[2])+1,this._partialCount=parseInt(r[2]),t=r[1],i=a=Math.max(a,2)):this._partialCount=0,this._partials=[]}for(var l=1;l<i;++l){var u,d=2/(l*Math.PI);switch(t){case s.default.Oscillator.Type.Sine:u=l<=a?1:0,this._partials[l-1]=u;break;case s.default.Oscillator.Type.Square:u=1&l?2*d:0,this._partials[l-1]=u;break;case s.default.Oscillator.Type.Sawtooth:u=d*(1&l?1:-1),this._partials[l-1]=u;break;case s.default.Oscillator.Type.Triangle:u=1&l?d*d*2*(l-1>>1&1?-1:1):0,this._partials[l-1]=u;break;case s.default.Oscillator.Type.Custom:u=this._partials[l-1];break;default:throw new TypeError("Tone.Oscillator: invalid type: "+t)}0!==u?(n[l]=-u*Math.sin(e*l),o[l]=u*Math.cos(e*l)):(n[l]=0,o[l]=0)}return[n,o]},s.default.Oscillator.prototype._inverseFFT=function(t,e,i){for(var s=0,n=t.length,o=0;o<n;o++)s+=t[o]*Math.cos(o*i)+e[o]*Math.sin(o*i);return s},s.default.Oscillator.prototype._getInitialValue=function(){for(var t=this._getRealImaginary(this._type,0),e=t[0],i=t[1],s=0,n=2*Math.PI,o=0;o<8;o++)s=Math.max(this._inverseFFT(e,i,o/8*n),s);return-this._inverseFFT(e,i,this._phase)/s},Object.defineProperty(s.default.Oscillator.prototype,"partials",{get:function(){return this._partials},set:function(t){this._partials=t,this.type=s.default.Oscillator.Type.Custom}}),Object.defineProperty(s.default.Oscillator.prototype,"phase",{get:function(){return this._phase*(180/Math.PI)},set:function(t){this._phase=t*Math.PI/180,this.type=this._type}}),s.default.Oscillator.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),null!==this._oscillator&&(this._oscillator.dispose(),this._oscillator=null),this._wave=null,this._writable(["frequency","detune"]),this.frequency.dispose(),this.frequency=null,this.detune.dispose(),this.detune=null,this._partials=null,this},e.default=s.default.Oscillator},function(t,e,i){"use strict";i.r(e);var s=i(0);i(14),i(1);s.default.Delay=function(){var t=s.default.defaults(arguments,["delayTime","maxDelay"],s.default.Delay);s.default.AudioNode.call(this,t),this._maxDelay=Math.max(this.toSeconds(t.maxDelay),this.toSeconds(t.delayTime)),this._delayNode=this.input=this.output=this.context.createDelay(this._maxDelay),this.delayTime=new s.default.Param({param:this._delayNode.delayTime,units:s.default.Type.Time,value:t.delayTime}),this._readOnly("delayTime")},s.default.extend(s.default.Delay,s.default.AudioNode),s.default.Delay.defaults={maxDelay:1,delayTime:0},Object.defineProperty(s.default.Delay.prototype,"maxDelay",{get:function(){return this._maxDelay}}),s.default.Delay.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._delayNode.disconnect(),this._delayNode=null,this._writable("delayTime"),this.delayTime=null,this},e.default=s.default.Delay},function(t,e,i){"use strict";i.r(e);var s=i(0);i(3),i(1);s.default.Split=function(t){t=s.default.defaultArg(t,2),s.default.AudioNode.call(this),this.createInsOuts(0,t),this._splitter=this.input=this.context.createChannelSplitter(t);for(var e=0;e<t;e++)this.output[e]=new s.default.Gain,s.default.connect(this._splitter,this.output[e],e,0),this.output[e].channelCount=1,this.output[e].channelCountMode="explicit";this.left=this.output[0],this.right=this.output[1]},s.default.extend(s.default.Split,s.default.AudioNode),s.default.Split.prototype.dispose=function(){return this.output.forEach(function(t){t.dispose()}),s.default.AudioNode.prototype.dispose.call(this),this._splitter.disconnect(),this.left=null,this.right=null,this._splitter=null,this},e.default=s.default.Split},function(t,e,i){"use strict";i.r(e);var s=i(0),n=(i(35),i(24),i(44),["baseLatency","destination","currentTime","sampleRate","listener","state"]),o=["suspend","close","resume","getOutputTimestamp","createMediaElementSource","createMediaStreamSource","createMediaStreamDestination","createBuffer","decodeAudioData","createBufferSource","createConstantSource","createGain","createDelay","createBiquadFilter","createIIRFilter","createWaveShaper","createPanner","createConvolver","createDynamicsCompressor","createAnalyser","createScriptProcessor","createStereoPanner","createOscillator","createPeriodicWave","createChannelSplitter","createChannelMerger","audioWorklet"];s.default.Context=function(){s.default.Emitter.call(this);var t=s.default.defaults(arguments,["context"],s.default.Context);if(!t.context&&(t.context=new s.default.global.AudioContext,!t.context))throw new Error("could not create AudioContext. Possibly too many AudioContexts running already.");for(this._context=t.context;this._context.rawContext;)this._context=this._context.rawContext;n.forEach(function(t){this._defineProperty(this._context,t)}.bind(this)),o.forEach(function(t){this._defineMethod(this._context,t)}.bind(this)),this._latencyHint=t.latencyHint,this._constants={},this.lookAhead=t.lookAhead,this._computedUpdateInterval=0,this._ticker=new a(this.emit.bind(this,"tick"),t.clockSource,t.updateInterval),this._timeouts=new s.default.Timeline,this._timeoutIds=0,this.on("tick",this._timeoutLoop.bind(this)),this._context.onstatechange=function(t){this.emit("statechange",t)}.bind(this)},s.default.extend(s.default.Context,s.default.Emitter),s.default.Emitter.mixin(s.default.Context),s.default.Context.defaults={clockSource:"worker",latencyHint:"interactive",lookAhead:.1,updateInterval:.03},s.default.Context.prototype.isContext=!0,s.default.Context.prototype._defineProperty=function(t,e){s.default.isUndef(this[e])&&Object.defineProperty(this,e,{get:function(){return t[e]},set:function(i){t[e]=i}})},s.default.Context.prototype._defineMethod=function(t,e){s.default.isUndef(this[e])&&Object.defineProperty(this,e,{get:function(){return t[e].bind(t)}})},s.default.Context.prototype.now=function(){return this._context.currentTime+this.lookAhead},Object.defineProperty(s.default.Context.prototype,"destination",{get:function(){return this.master?this.master:this._context.destination}}),s.default.Context.prototype.resume=function(){return"suspended"===this._context.state&&this._context instanceof AudioContext?this._context.resume():Promise.resolve()},s.default.Context.prototype.close=function(){var t=Promise.resolve();return this!==s.default.global.TONE_AUDIO_CONTEXT&&(t=this.rawContext.close()),t.then(function(){s.default.Context.emit("close",this)}.bind(this))},s.default.Context.prototype.getConstant=function(t){if(this._constants[t])return this._constants[t];for(var e=this._context.createBuffer(1,128,this._context.sampleRate),i=e.getChannelData(0),s=0;s<i.length;s++)i[s]=t;var n=this._context.createBufferSource();return n.channelCount=1,n.channelCountMode="explicit",n.buffer=e,n.loop=!0,n.start(0),this._constants[t]=n,n},s.default.Context.prototype._timeoutLoop=function(){for(var t=this.now();this._timeouts&&this._timeouts.length&&this._timeouts.peek().time<=t;)this._timeouts.shift().callback()},s.default.Context.prototype.setTimeout=function(t,e){this._timeoutIds++;var i=this.now();return this._timeouts.add({callback:t,time:i+e,id:this._timeoutIds}),this._timeoutIds},s.default.Context.prototype.clearTimeout=function(t){return this._timeouts.forEach(function(e){e.id===t&&this.remove(e)}),this},Object.defineProperty(s.default.Context.prototype,"updateInterval",{get:function(){return this._ticker.updateInterval},set:function(t){this._ticker.updateInterval=t}}),Object.defineProperty(s.default.Context.prototype,"rawContext",{get:function(){return this._context}}),Object.defineProperty(s.default.Context.prototype,"clockSource",{get:function(){return this._ticker.type},set:function(t){this._ticker.type=t}}),Object.defineProperty(s.default.Context.prototype,"latencyHint",{get:function(){return this._latencyHint},set:function(t){var e=t;if(this._latencyHint=t,s.default.isString(t))switch(t){case"interactive":e=.1,this._context.latencyHint=t;break;case"playback":e=.8,this._context.latencyHint=t;break;case"balanced":e=.25,this._context.latencyHint=t;break;case"fastest":this._context.latencyHint="interactive",e=.01}this.lookAhead=e,this.updateInterval=e/3}}),s.default.Context.prototype.dispose=function(){return this.close().then(function(){for(var t in s.default.Emitter.prototype.dispose.call(this),this._ticker.dispose(),this._ticker=null,this._timeouts.dispose(),this._timeouts=null,this._constants)this._constants[t].disconnect();this._constants=null}.bind(this))};var a=function(t,e,i){this._type=e,this._updateInterval=i,this._callback=s.default.defaultArg(t,s.default.noOp),this._createClock()};if(a.Type={Worker:"worker",Timeout:"timeout",Offline:"offline"},a.prototype._createWorker=function(){s.default.global.URL=s.default.global.URL||s.default.global.webkitURL;var t=new Blob(["var timeoutTime = "+(1e3*this._updateInterval).toFixed(1)+";self.onmessage = function(msg){\ttimeoutTime = parseInt(msg.data);};function tick(){\tsetTimeout(tick, timeoutTime);\tself.postMessage('tick');}tick();"]),e=URL.createObjectURL(t),i=new Worker(e);i.onmessage=this._callback.bind(this),this._worker=i},a.prototype._createTimeout=function(){this._timeout=setTimeout(function(){this._createTimeout(),this._callback()}.bind(this),1e3*this._updateInterval)},a.prototype._createClock=function(){if(this._type===a.Type.Worker)try{this._createWorker()}catch(t){this._type=a.Type.Timeout,this._createClock()}else this._type===a.Type.Timeout&&this._createTimeout()},Object.defineProperty(a.prototype,"updateInterval",{get:function(){return this._updateInterval},set:function(t){this._updateInterval=Math.max(t,128/44100),this._type===a.Type.Worker&&this._worker.postMessage(Math.max(1e3*t,1))}}),Object.defineProperty(a.prototype,"type",{get:function(){return this._type},set:function(t){this._disposeClock(),this._type=t,this._createClock()}}),a.prototype._disposeClock=function(){this._timeout&&(clearTimeout(this._timeout),this._timeout=null),this._worker&&(this._worker.terminate(),this._worker.onmessage=null,this._worker=null)},a.prototype.dispose=function(){this._disposeClock(),this._callback=null},s.default.supported&&!s.default.initialized){if(s.default.global.TONE_AUDIO_CONTEXT||(s.default.global.TONE_AUDIO_CONTEXT=new s.default.Context),s.default.context=s.default.global.TONE_AUDIO_CONTEXT,!s.default.global.TONE_SILENCE_LOGGING){var r="v";"dev"===s.default.version&&(r="");var l=" * Tone.js "+r+s.default.version+" * ";console.log("%c"+l,"background: #000; color: #fff")}}else s.default.supported||s.default.global.TONE_SILENCE_LOGGING||console.warn("This browser does not support Tone.js");e.default=s.default.Context},function(t,e,i){"use strict";i.r(e);var s=i(0);i(4),i(40);s.default.Instrument=function(t){t=s.default.defaultArg(t,s.default.Instrument.defaults),s.default.AudioNode.call(this),this._volume=this.output=new s.default.Volume(t.volume),this.volume=this._volume.volume,this._readOnly("volume"),this._scheduledEvents=[]},s.default.extend(s.default.Instrument,s.default.AudioNode),s.default.Instrument.defaults={volume:0},s.default.Instrument.prototype.triggerAttack=s.default.noOp,s.default.Instrument.prototype.triggerRelease=s.default.noOp,s.default.Instrument.prototype.sync=function(){return this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",0),this},s.default.Instrument.prototype._syncMethod=function(t,e){var i=this["_original_"+t]=this[t];this[t]=function(){var t=Array.prototype.slice.call(arguments),n=t[e],o=s.default.Transport.schedule(function(s){t[e]=s,i.apply(this,t)}.bind(this),n);this._scheduledEvents.push(o)}.bind(this)},s.default.Instrument.prototype.unsync=function(){return this._scheduledEvents.forEach(function(t){s.default.Transport.clear(t)}),this._scheduledEvents=[],this._original_triggerAttack&&(this.triggerAttack=this._original_triggerAttack,this.triggerRelease=this._original_triggerRelease),this},s.default.Instrument.prototype.triggerAttackRelease=function(t,e,i,s){return i=this.toSeconds(i),e=this.toSeconds(e),this.triggerAttack(t,i,s),this.triggerRelease(i+e),this},s.default.Instrument.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._volume.dispose(),this._volume=null,this._writable(["volume"]),this.volume=null,this.unsync(),this._scheduledEvents=null,this},e.default=s.default.Instrument},function(t,e,i){"use strict";i.r(e);var s=i(0);i(7),i(2);s.default.AudioToGain=function(){s.default.SignalBase.call(this),this._norm=this.input=this.output=new s.default.WaveShaper(function(t){return(t+1)/2})},s.default.extend(s.default.AudioToGain,s.default.SignalBase),s.default.AudioToGain.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._norm.dispose(),this._norm=null,this},e.default=s.default.AudioToGain},function(t,e,i){"use strict";i.r(e);var s=i(0);i(2),i(13),i(89),i(3),i(1);s.default.CrossFade=function(t){s.default.AudioNode.call(this),this.createInsOuts(2,1),this.a=this.input[0]=new s.default.Gain,this.b=this.input[1]=new s.default.Gain,this.fade=new s.default.Signal(s.default.defaultArg(t,.5),s.default.Type.NormalRange),this._equalPowerA=new s.default.EqualPowerGain,this._equalPowerB=new s.default.EqualPowerGain,this._one=this.context.getConstant(1),this._invert=new s.default.Subtract,this.a.connect(this.output),this.b.connect(this.output),this.fade.chain(this._equalPowerB,this.b.gain),s.default.connect(this._one,this._invert,0,0),this.fade.connect(this._invert,0,1),this._invert.chain(this._equalPowerA,this.a.gain),this._readOnly("fade")},s.default.extend(s.default.CrossFade,s.default.AudioNode),s.default.CrossFade.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable("fade"),this._equalPowerA.dispose(),this._equalPowerA=null,this._equalPowerB.dispose(),this._equalPowerB=null,this.fade.dispose(),this.fade=null,this._invert.dispose(),this._invert=null,this._one=null,this.a.dispose(),this.a=null,this.b.dispose(),this.b=null,this},e.default=s.default.CrossFade},function(t,e,i){"use strict";i.r(e);var s=i(0);s.default.Timeline=function(){var t=s.default.defaults(arguments,["memory"],s.default.Timeline);s.default.call(this),this._timeline=[],this.memory=t.memory},s.default.extend(s.default.Timeline),s.default.Timeline.defaults={memory:1/0},Object.defineProperty(s.default.Timeline.prototype,"length",{get:function(){return this._timeline.length}}),s.default.Timeline.prototype.add=function(t){if(s.default.isUndef(t.time))throw new Error("Tone.Timeline: events must have a time attribute");t.time=t.time.valueOf();var e=this._search(t.time);if(this._timeline.splice(e+1,0,t),this.length>this.memory){var i=this.length-this.memory;this._timeline.splice(0,i)}return this},s.default.Timeline.prototype.remove=function(t){var e=this._timeline.indexOf(t);return-1!==e&&this._timeline.splice(e,1),this},s.default.Timeline.prototype.get=function(t,e){e=s.default.defaultArg(e,"time");var i=this._search(t,e);return-1!==i?this._timeline[i]:null},s.default.Timeline.prototype.peek=function(){return this._timeline[0]},s.default.Timeline.prototype.shift=function(){return this._timeline.shift()},s.default.Timeline.prototype.getAfter=function(t,e){e=s.default.defaultArg(e,"time");var i=this._search(t,e);return i+1<this._timeline.length?this._timeline[i+1]:null},s.default.Timeline.prototype.getBefore=function(t,e){e=s.default.defaultArg(e,"time");var i=this._timeline.length;if(i>0&&this._timeline[i-1][e]<t)return this._timeline[i-1];var n=this._search(t,e);return n-1>=0?this._timeline[n-1]:null},s.default.Timeline.prototype.cancel=function(t){if(this._timeline.length>1){var e=this._search(t);if(e>=0)if(this._timeline[e].time===t){for(var i=e;i>=0&&this._timeline[i].time===t;i--)e=i;this._timeline=this._timeline.slice(0,e)}else this._timeline=this._timeline.slice(0,e+1);else this._timeline=[]}else 1===this._timeline.length&&this._timeline[0].time>=t&&(this._timeline=[]);return this},s.default.Timeline.prototype.cancelBefore=function(t){var e=this._search(t);return e>=0&&(this._timeline=this._timeline.slice(e+1)),this},s.default.Timeline.prototype.previousEvent=function(t){var e=this._timeline.indexOf(t);return e>0?this._timeline[e-1]:null},s.default.Timeline.prototype._search=function(t,e){if(0===this._timeline.length)return-1;e=s.default.defaultArg(e,"time");var i=0,n=this._timeline.length,o=n;if(n>0&&this._timeline[n-1][e]<=t)return n-1;for(;i<o;){var a=Math.floor(i+(o-i)/2),r=this._timeline[a],l=this._timeline[a+1];if(r[e]===t){for(var u=a;u<this._timeline.length;u++){this._timeline[u][e]===t&&(a=u)}return a}if(r[e]<t&&l[e]>t)return a;r[e]>t?o=a:i=a+1}return-1},s.default.Timeline.prototype._iterate=function(t,e,i){e=s.default.defaultArg(e,0),i=s.default.defaultArg(i,this._timeline.length-1),this._timeline.slice(e,i+1).forEach(function(e){t.call(this,e)}.bind(this))},s.default.Timeline.prototype.forEach=function(t){return this._iterate(t),this},s.default.Timeline.prototype.forEachBefore=function(t,e){var i=this._search(t);return-1!==i&&this._iterate(e,0,i),this},s.default.Timeline.prototype.forEachAfter=function(t,e){var i=this._search(t);return this._iterate(e,i+1),this},s.default.Timeline.prototype.forEachBetween=function(t,e,i){var s=this._search(t),n=this._search(e);return-1!==s&&-1!==n?(this._timeline[s].time!==t&&(s+=1),this._timeline[n].time===e&&(n-=1),this._iterate(i,s,n)):-1===s&&this._iterate(i,0,n),this},s.default.Timeline.prototype.forEachFrom=function(t,e){for(var i=this._search(t);i>=0&&this._timeline[i].time>=t;)i--;return this._iterate(e,i+1),this},s.default.Timeline.prototype.forEachAtTime=function(t,e){var i=this._search(t);return-1!==i&&this._iterate(function(i){i.time===t&&e.call(this,i)},0,i),this},s.default.Timeline.prototype.dispose=function(){return s.default.prototype.dispose.call(this),this._timeline=null,this},e.default=s.default.Timeline},function(t,e,i){"use strict";i.r(e);var s=i(0);i(21),i(2);s.default.Monophonic=function(t){t=s.default.defaultArg(t,s.default.Monophonic.defaults),s.default.Instrument.call(this,t),this.portamento=t.portamento},s.default.extend(s.default.Monophonic,s.default.Instrument),s.default.Monophonic.defaults={portamento:0},s.default.Monophonic.prototype.triggerAttack=function(t,e,i){return this.log("triggerAttack",t,e,i),e=this.toSeconds(e),this._triggerEnvelopeAttack(e,i),this.setNote(t,e),this},s.default.Monophonic.prototype.triggerRelease=function(t){return this.log("triggerRelease",t),t=this.toSeconds(t),this._triggerEnvelopeRelease(t),this},s.default.Monophonic.prototype._triggerEnvelopeAttack=function(){},s.default.Monophonic.prototype._triggerEnvelopeRelease=function(){},s.default.Monophonic.prototype.getLevelAtTime=function(t){return t=this.toSeconds(t),this.envelope.getValueAtTime(t)},s.default.Monophonic.prototype.setNote=function(t,e){if(e=this.toSeconds(e),this.portamento>0&&this.getLevelAtTime(e)>.05){var i=this.toSeconds(this.portamento);this.frequency.exponentialRampTo(t,i,e)}else this.frequency.setValueAtTime(t,e);return this},e.default=s.default.Monophonic},function(t,e,i){"use strict";i.r(e);var s=i(0);i(29),i(5),i(2);s.default.Scale=function(t,e){s.default.SignalBase.call(this),this._outputMin=s.default.defaultArg(t,0),this._outputMax=s.default.defaultArg(e,1),this._scale=this.input=new s.default.Multiply(1),this._add=this.output=new s.default.Add(0),this._scale.connect(this._add),this._setRange()},s.default.extend(s.default.Scale,s.default.SignalBase),Object.defineProperty(s.default.Scale.prototype,"min",{get:function(){return this._outputMin},set:function(t){this._outputMin=t,this._setRange()}}),Object.defineProperty(s.default.Scale.prototype,"max",{get:function(){return this._outputMax},set:function(t){this._outputMax=t,this._setRange()}}),s.default.Scale.prototype._setRange=function(){this._add.value=this._outputMin,this._scale.value=this._outputMax-this._outputMin},s.default.Scale.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._add.dispose(),this._add=null,this._scale.dispose(),this._scale=null,this},e.default=s.default.Scale},function(t,e,i){"use strict";i.r(e);var s=i(0);i(2),i(3),i(1);s.default.Volume=function(){var t=s.default.defaults(arguments,["volume"],s.default.Volume);s.default.AudioNode.call(this,t),this.output=this.input=new s.default.Gain(t.volume,s.default.Type.Decibels),this._unmutedVolume=t.volume,this.volume=this.output.gain,this._readOnly("volume"),this.mute=t.mute},s.default.extend(s.default.Volume,s.default.AudioNode),s.default.Volume.defaults={volume:0,mute:!1},Object.defineProperty(s.default.Volume.prototype,"mute",{get:function(){return this.volume.value===-1/0},set:function(t){!this.mute&&t?(this._unmutedVolume=this.volume.value,this.volume.value=-1/0):this.mute&&!t&&(this.volume.value=this._unmutedVolume)}}),s.default.Volume.prototype.dispose=function(){return this.input.dispose(),s.default.AudioNode.prototype.dispose.call(this),this._writable("volume"),this.volume.dispose(),this.volume=null,this},e.default=s.default.Volume},function(t,e,i){"use strict";i.r(e);var s=i(0);i(3),i(30);s.default.Zero=function(){s.default.SignalBase.call(this),this._gain=this.input=this.output=new s.default.Gain,s.default.connect(this.context.getConstant(0),this._gain)},s.default.extend(s.default.Zero,s.default.SignalBase),s.default.Zero.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._gain.dispose(),this._gain=null,this},e.default=s.default.Zero},function(t,e,i){"use strict";i.r(e);var s=i(0);i(2),i(3);s.default.Add=function(t){s.default.Signal.call(this),this.createInsOuts(2,0),this._sum=this.input[0]=this.input[1]=this.output=new s.default.Gain,this._param=this.input[1]=new s.default.Signal(t),this._param.connect(this._sum)},s.default.extend(s.default.Add,s.default.Signal),s.default.Add.prototype.dispose=function(){return s.default.Signal.prototype.dispose.call(this),this._sum.dispose(),this._sum=null,this},e.default=s.default.Add},function(t,e,i){"use strict";i.r(e);var s=i(0);i(1);s.default.SignalBase=function(){s.default.AudioNode.call(this)},s.default.extend(s.default.SignalBase,s.default.AudioNode),s.default.SignalBase.prototype.connect=function(t,e,i){return s.default.Signal&&s.default.Signal===t.constructor||s.default.Param&&s.default.Param===t.constructor?(t._param.cancelScheduledValues(0),t._param.setValueAtTime(0,0),t.overridden=!0):t instanceof AudioParam&&(t.cancelScheduledValues(0),t.setValueAtTime(0,0)),s.default.AudioNode.prototype.connect.call(this,t,e,i),this},e.default=s.default.SignalBase},function(t,e,i){"use strict";i.r(e);var s=i(0);i(47),i(3);s.default.AmplitudeEnvelope=function(){s.default.Envelope.apply(this,arguments),this.input=this.output=new s.default.Gain,this._sig.connect(this.output.gain)},s.default.extend(s.default.AmplitudeEnvelope,s.default.Envelope),s.default.AmplitudeEnvelope.prototype.dispose=function(){return s.default.Envelope.prototype.dispose.call(this),this},e.default=s.default.AmplitudeEnvelope},function(t,e,i){"use strict";i.r(e);var s=i(0);i(11),i(6),i(3),i(1);s.default.BufferSource=function(){var t=s.default.defaults(arguments,["buffer","onload"],s.default.BufferSource);s.default.AudioNode.call(this,t),this.onended=t.onended,this._startTime=-1,this._sourceStarted=!1,this._sourceStopped=!1,this._stopTime=-1,this._gainNode=this.output=new s.default.Gain(0),this._source=this.context.createBufferSource(),s.default.connect(this._source,this._gainNode),this._source.onended=this._onended.bind(this),this._buffer=new s.default.Buffer(t.buffer,t.onload),this.playbackRate=new s.default.Param({param:this._source.playbackRate,units:s.default.Type.Positive,value:t.playbackRate}),this.fadeIn=t.fadeIn,this.fadeOut=t.fadeOut,this.curve=t.curve,this._onendedTimeout=-1,this.loop=t.loop,this.loopStart=t.loopStart,this.loopEnd=t.loopEnd},s.default.extend(s.default.BufferSource,s.default.AudioNode),s.default.BufferSource.defaults={onended:s.default.noOp,onload:s.default.noOp,loop:!1,loopStart:0,loopEnd:0,fadeIn:0,fadeOut:0,curve:"linear",playbackRate:1},Object.defineProperty(s.default.BufferSource.prototype,"state",{get:function(){return this.getStateAtTime(this.now())}}),s.default.BufferSource.prototype.getStateAtTime=function(t){return t=this.toSeconds(t),-1!==this._startTime&&this._startTime<=t&&(-1===this._stopTime||t<this._stopTime)&&!this._sourceStopped?s.default.State.Started:s.default.State.Stopped},s.default.BufferSource.prototype.start=function(t,e,i,n){this.log("start",t,e,i,n),this.assert(-1===this._startTime,"can only be started once"),this.assert(this.buffer.loaded,"buffer is either not set or not loaded"),this.assert(!this._sourceStopped,"source is already stopped"),t=this.toSeconds(t),e=this.loop?s.default.defaultArg(e,this.loopStart):s.default.defaultArg(e,0),e=this.toSeconds(e),e=Math.max(e,0),n=s.default.defaultArg(n,1);var o=this.toSeconds(this.fadeIn);if(o>0?(this._gainNode.gain.setValueAtTime(0,t),"linear"===this.curve?this._gainNode.gain.linearRampToValueAtTime(n,t+o):this._gainNode.gain.exponentialApproachValueAtTime(n,t,o)):this._gainNode.gain.setValueAtTime(n,t),this._startTime=t,s.default.isDefined(i)){var a=this.toSeconds(i);a=Math.max(a,0),this.stop(t+a)}if(this.loop){var r=this.loopEnd||this.buffer.duration,l=this.loopStart;e>=r&&(e=(e-l)%(r-l)+l)}return this._source.buffer=this.buffer.get(),this._source.loopEnd=this.loopEnd||this.buffer.duration,e<this.buffer.duration&&(this._sourceStarted=!0,this._source.start(t,e)),this},s.default.BufferSource.prototype.stop=function(t){this.log("stop",t),this.assert(this.buffer.loaded,"buffer is either not set or not loaded"),this.assert(!this._sourceStopped,"source is already stopped"),t=this.toSeconds(t),-1!==this._stopTime&&this.cancelStop();var e=this.toSeconds(this.fadeOut);return this._stopTime=t+e,e>0?"linear"===this.curve?this._gainNode.gain.linearRampTo(0,e,t):this._gainNode.gain.targetRampTo(0,e,t):(this._gainNode.gain.cancelAndHoldAtTime(t),this._gainNode.gain.setValueAtTime(0,t)),s.default.context.clearTimeout(this._onendedTimeout),this._onendedTimeout=s.default.context.setTimeout(this._onended.bind(this),this._stopTime-this.now()),this},s.default.BufferSource.prototype.cancelStop=function(){if(-1!==this._startTime&&!this._sourceStopped){var t=this.toSeconds(this.fadeIn);this._gainNode.gain.cancelScheduledValues(this._startTime+t+this.sampleTime),this.context.clearTimeout(this._onendedTimeout),this._stopTime=-1}return this},s.default.BufferSource.prototype._onended=function(){if(!this._sourceStopped){this._sourceStopped=!0;var t="exponential"===this.curve?2*this.fadeOut:0;this._sourceStarted&&-1!==this._stopTime&&this._source.stop(this._stopTime+t),this.onended(this),setTimeout(function(){this._source&&(this._source.disconnect(),this._gainNode.disconnect())}.bind(this),1e3*t+100)}},Object.defineProperty(s.default.BufferSource.prototype,"loopStart",{get:function(){return this._source.loopStart},set:function(t){this._source.loopStart=this.toSeconds(t)}}),Object.defineProperty(s.default.BufferSource.prototype,"loopEnd",{get:function(){return this._source.loopEnd},set:function(t){this._source.loopEnd=this.toSeconds(t)}}),Object.defineProperty(s.default.BufferSource.prototype,"buffer",{get:function(){return this._buffer},set:function(t){this._buffer.set(t)}}),Object.defineProperty(s.default.BufferSource.prototype,"loop",{get:function(){return this._source.loop},set:function(t){this._source.loop=t,this.cancelStop()}}),s.default.BufferSource.prototype.dispose=function(){return this._wasDisposed||(this._wasDisposed=!0,s.default.AudioNode.prototype.dispose.call(this),this.onended=null,this._source.onended=null,this._source.disconnect(),this._source=null,this._gainNode.dispose(),this._gainNode=null,this._buffer.dispose(),this._buffer=null,this._startTime=-1,this.playbackRate=null,s.default.context.clearTimeout(this._onendedTimeout)),this},e.default=s.default.BufferSource},function(t,e,i){"use strict";i.r(e);var s=i(0);i(8),i(2),i(5),i(3);s.default.FeedbackEffect=function(){var t=s.default.defaults(arguments,["feedback"],s.default.FeedbackEffect);s.default.Effect.call(this,t),this._feedbackGain=new s.default.Gain(t.feedback,s.default.Type.NormalRange),this.feedback=this._feedbackGain.gain,this.effectReturn.chain(this._feedbackGain,this.effectSend),this._readOnly(["feedback"])},s.default.extend(s.default.FeedbackEffect,s.default.Effect),s.default.FeedbackEffect.defaults={feedback:.125},s.default.FeedbackEffect.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._writable(["feedback"]),this._feedbackGain.dispose(),this._feedbackGain=null,this.feedback=null,this},e.default=s.default.FeedbackEffect},function(t,e,i){"use strict";i.r(e);var s=i(0);i(24),i(4);s.default.TimelineState=function(t){s.default.Timeline.call(this),this._initial=t},s.default.extend(s.default.TimelineState,s.default.Timeline),s.default.TimelineState.prototype.getValueAtTime=function(t){var e=this.get(t);return null!==e?e.state:this._initial},s.default.TimelineState.prototype.setStateAtTime=function(t,e){return this.add({state:t,time:e}),this},s.default.TimelineState.prototype.getLastState=function(t,e){e=this.toSeconds(e);for(var i=this._search(e);i>=0;i--){var s=this._timeline[i];if(s.state===t)return s}},s.default.TimelineState.prototype.getNextState=function(t,e){e=this.toSeconds(e);var i=this._search(e);if(-1!==i)for(var s=i;s<this._timeline.length;s++){var n=this._timeline[s];if(n.state===t)return n}},e.default=s.default.TimelineState},function(t,e,i){"use strict";i.r(e);var s=i(0);s.default.Emitter=function(){s.default.call(this),this._events={}},s.default.extend(s.default.Emitter),s.default.Emitter.prototype.on=function(t,e){for(var i=t.split(/\W+/),s=0;s<i.length;s++){var n=i[s];this._events.hasOwnProperty(n)||(this._events[n]=[]),this._events[n].push(e)}return this},s.default.Emitter.prototype.once=function(t,e){var i=function(){e.apply(this,arguments),this.off(t,i)}.bind(this);return this.on(t,i),this},s.default.Emitter.prototype.off=function(t,e){for(var i=t.split(/\W+/),n=0;n<i.length;n++)if(t=i[n],this._events.hasOwnProperty(t))if(s.default.isUndef(e))this._events[t]=[];else for(var o=this._events[t],a=0;a<o.length;a++)o[a]===e&&o.splice(a,1);return this},s.default.Emitter.prototype.emit=function(t){if(this._events){var e=Array.apply(null,arguments).slice(1);if(this._events.hasOwnProperty(t))for(var i=this._events[t].slice(0),s=0,n=i.length;s<n;s++)i[s].apply(this,e)}return this},s.default.Emitter.mixin=function(t){var e=["on","once","off","emit"];t._events={};for(var i=0;i<e.length;i++){var n=e[i],o=s.default.Emitter.prototype[n];t[n]=o}return s.default.Emitter},s.default.Emitter.prototype.dispose=function(){return s.default.prototype.dispose.call(this),this._events=null,this},e.default=s.default.Emitter},function(t,e,i){"use strict";i.r(e);var s=i(0);i(1),i(44);s.default.supported&&(AnalyserNode.prototype.getFloatTimeDomainData||(AnalyserNode.prototype.getFloatTimeDomainData=function(t){var e=new Uint8Array(t.length);this.getByteTimeDomainData(e);for(var i=0;i<e.length;i++)t[i]=(e[i]-128)/128})),s.default.Analyser=function(){var t=s.default.defaults(arguments,["type","size"],s.default.Analyser);s.default.AudioNode.call(this),this._analyser=this.input=this.output=this.context.createAnalyser(),this._type=t.type,this._buffer=null,this.size=t.size,this.type=t.type},s.default.extend(s.default.Analyser,s.default.AudioNode),s.default.Analyser.defaults={size:1024,type:"fft",smoothing:.8},s.default.Analyser.Type={Waveform:"waveform",FFT:"fft"},s.default.Analyser.prototype.getValue=function(){return this._type===s.default.Analyser.Type.FFT?this._analyser.getFloatFrequencyData(this._buffer):this._type===s.default.Analyser.Type.Waveform&&this._analyser.getFloatTimeDomainData(this._buffer),this._buffer},Object.defineProperty(s.default.Analyser.prototype,"size",{get:function(){return this._analyser.frequencyBinCount},set:function(t){this._analyser.fftSize=2*t,this._buffer=new Float32Array(t)}}),Object.defineProperty(s.default.Analyser.prototype,"type",{get:function(){return this._type},set:function(t){if(t!==s.default.Analyser.Type.Waveform&&t!==s.default.Analyser.Type.FFT)throw new TypeError("Tone.Analyser: invalid type: "+t);this._type=t}}),Object.defineProperty(s.default.Analyser.prototype,"smoothing",{get:function(){return this._analyser.smoothingTimeConstant},set:function(t){this._analyser.smoothingTimeConstant=t}}),s.default.Analyser.prototype.dispose=function(){s.default.AudioNode.prototype.dispose.call(this),this._analyser.disconnect(),this._analyser=null,this._buffer=null};e.default=s.default.Analyser},function(t,e,i){"use strict";i.r(e);var s=i(0);i(6),i(17),i(50),i(69),i(49),i(68),i(67);s.default.OmniOscillator=function(){var t=s.default.defaults(arguments,["frequency","type"],s.default.OmniOscillator);s.default.Source.call(this,t),this.frequency=new s.default.Signal(t.frequency,s.default.Type.Frequency),this.detune=new s.default.Signal(t.detune,s.default.Type.Cents),this._sourceType=void 0,this._oscillator=null,this.type=t.type,this._readOnly(["frequency","detune"]),this.set(t)},s.default.extend(s.default.OmniOscillator,s.default.Source),s.default.OmniOscillator.defaults={frequency:440,detune:0,type:"sine",phase:0};var n="PulseOscillator",o="PWMOscillator",a="Oscillator",r="FMOscillator",l="AMOscillator",u="FatOscillator";s.default.OmniOscillator.prototype._start=function(t){this._oscillator.start(t)},s.default.OmniOscillator.prototype._stop=function(t){this._oscillator.stop(t)},s.default.OmniOscillator.prototype.restart=function(t){this._oscillator.restart(t)},Object.defineProperty(s.default.OmniOscillator.prototype,"type",{get:function(){var t="";return this._sourceType===r?t="fm":this._sourceType===l?t="am":this._sourceType===u&&(t="fat"),t+this._oscillator.type},set:function(t){"fm"===t.substr(0,2)?(this._createNewOscillator(r),this._oscillator.type=t.substr(2)):"am"===t.substr(0,2)?(this._createNewOscillator(l),this._oscillator.type=t.substr(2)):"fat"===t.substr(0,3)?(this._createNewOscillator(u),this._oscillator.type=t.substr(3)):"pwm"===t?this._createNewOscillator(o):"pulse"===t?this._createNewOscillator(n):(this._createNewOscillator(a),this._oscillator.type=t)}}),Object.defineProperty(s.default.OmniOscillator.prototype,"partials",{get:function(){return this._oscillator.partials},set:function(t){this._oscillator.partials=t}}),Object.defineProperty(s.default.OmniOscillator.prototype,"partialCount",{get:function(){return this._oscillator.partialCount},set:function(t){this._oscillator.partialCount=t}}),s.default.OmniOscillator.prototype.set=function(t,e){return"type"===t?this.type=e:s.default.isObject(t)&&t.hasOwnProperty("type")&&(this.type=t.type),s.default.prototype.set.apply(this,arguments),this},s.default.OmniOscillator.prototype.get=function(t){var e=this._oscillator.get(t);return e.type=this.type,e},s.default.OmniOscillator.prototype._createNewOscillator=function(t){if(t!==this._sourceType){this._sourceType=t;var e=s.default[t],i=this.now();if(null!==this._oscillator){var n=this._oscillator;n.stop(i),this.context.setTimeout(function(){n.dispose(),n=null},this.blockTime)}this._oscillator=new e,this.frequency.connect(this._oscillator.frequency),this.detune.connect(this._oscillator.detune),this._oscillator.connect(this.output),this.state===s.default.State.Started&&this._oscillator.start(i)}},Object.defineProperty(s.default.OmniOscillator.prototype,"phase",{get:function(){return this._oscillator.phase},set:function(t){this._oscillator.phase=t}});var d={PulseOscillator:"pulse",PWMOscillator:"pwm",Oscillator:"oscillator",FMOscillator:"fm",AMOscillator:"am",FatOscillator:"fat"};Object.defineProperty(s.default.OmniOscillator.prototype,"sourceType",{get:function(){return d[this._sourceType]},set:function(t){var e="sine";"pwm"!==this._oscillator.type&&"pulse"!==this._oscillator.type&&(e=this._oscillator.type),t===d.FMOscillator?this.type="fm"+e:t===d.AMOscillator?this.type="am"+e:t===d.FatOscillator?this.type="fat"+e:t===d.Oscillator?this.type=e:t===d.PulseOscillator?this.type="pulse":t===d.PWMOscillator&&(this.type="pwm")}}),Object.defineProperty(s.default.OmniOscillator.prototype,"baseType",{get:function(){return this._oscillator.baseType},set:function(t){this.sourceType!==d.PulseOscillator&&this.sourceType!==d.PWMOscillator&&(this._oscillator.baseType=t)}}),Object.defineProperty(s.default.OmniOscillator.prototype,"width",{get:function(){return this._sourceType===n?this._oscillator.width:void 0}}),Object.defineProperty(s.default.OmniOscillator.prototype,"count",{get:function(){return this._sourceType===u?this._oscillator.count:void 0},set:function(t){this._sourceType===u&&(this._oscillator.count=t)}}),Object.defineProperty(s.default.OmniOscillator.prototype,"spread",{get:function(){return this._sourceType===u?this._oscillator.spread:void 0},set:function(t){this._sourceType===u&&(this._oscillator.spread=t)}}),Object.defineProperty(s.default.OmniOscillator.prototype,"modulationType",{get:function(){return this._sourceType===r||this._sourceType===l?this._oscillator.modulationType:void 0},set:function(t){this._sourceType!==r&&this._sourceType!==l||(this._oscillator.modulationType=t)}}),Object.defineProperty(s.default.OmniOscillator.prototype,"modulationIndex",{get:function(){return this._sourceType===r?this._oscillator.modulationIndex:void 0}}),Object.defineProperty(s.default.OmniOscillator.prototype,"harmonicity",{get:function(){return this._sourceType===r||this._sourceType===l?this._oscillator.harmonicity:void 0}}),Object.defineProperty(s.default.OmniOscillator.prototype,"modulationFrequency",{get:function(){return this._sourceType===o?this._oscillator.modulationFrequency:void 0}}),s.default.OmniOscillator.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),this._writable(["frequency","detune"]),this.detune.dispose(),this.detune=null,this.frequency.dispose(),this.frequency=null,this._oscillator.dispose(),this._oscillator=null,this._sourceType=null,this},e.default=s.default.OmniOscillator},function(t,e,i){"use strict";i.r(e);var s=i(0);i(31),i(37),i(25);s.default.Synth=function(t){t=s.default.defaultArg(t,s.default.Synth.defaults),s.default.Monophonic.call(this,t),this.oscillator=new s.default.OmniOscillator(t.oscillator),this.frequency=this.oscillator.frequency,this.detune=this.oscillator.detune,this.envelope=new s.default.AmplitudeEnvelope(t.envelope),this.oscillator.chain(this.envelope,this.output),this._readOnly(["oscillator","frequency","detune","envelope"])},s.default.extend(s.default.Synth,s.default.Monophonic),s.default.Synth.defaults={oscillator:{type:"triangle"},envelope:{attack:.005,decay:.1,sustain:.3,release:1}},s.default.Synth.prototype._triggerEnvelopeAttack=function(t,e){return this.envelope.triggerAttack(t,e),this.oscillator.start(t),0===this.envelope.sustain&&this.oscillator.stop(t+this.toSeconds(this.envelope.attack)+this.toSeconds(this.envelope.decay)),this},s.default.Synth.prototype._triggerEnvelopeRelease=function(t){return t=this.toSeconds(t),this.envelope.triggerRelease(t),this.oscillator.stop(t+this.toSeconds(this.envelope.release)),this},s.default.Synth.prototype.dispose=function(){return s.default.Monophonic.prototype.dispose.call(this),this._writable(["oscillator","frequency","detune","envelope"]),this.oscillator.dispose(),this.oscillator=null,this.envelope.dispose(),this.envelope=null,this.frequency=null,this.detune=null,this},e.default=s.default.Synth},function(t,e,i){"use strict";i.r(e);var s=i(0);i(6),i(11),i(32);s.default.Noise=function(){var t=s.default.defaults(arguments,["type"],s.default.Noise);s.default.Source.call(this,t),this._source=null,this._type=t.type,this._playbackRate=t.playbackRate},s.default.extend(s.default.Noise,s.default.Source),s.default.Noise.defaults={type:"white",playbackRate:1},Object.defineProperty(s.default.Noise.prototype,"type",{get:function(){return this._type},set:function(t){if(this._type!==t){if(!(t in n))throw new TypeError("Tone.Noise: invalid type: "+t);if(this._type=t,this.state===s.default.State.Started){var e=this.now();this._stop(e),this._start(e)}}}}),Object.defineProperty(s.default.Noise.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t,this._source&&(this._source.playbackRate.value=t)}}),s.default.Noise.prototype._start=function(t){var e=n[this._type];this._source=new s.default.BufferSource(e).connect(this.output),this._source.loop=!0,this._source.playbackRate.value=this._playbackRate,this._source.start(this.toSeconds(t),Math.random()*(e.duration-.001))},s.default.Noise.prototype._stop=function(t){this._source&&(this._source.stop(this.toSeconds(t)),this._source=null)},s.default.Noise.prototype.restart=function(t){return this._stop(t),this._start(t),this},s.default.Noise.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),null!==this._source&&(this._source.disconnect(),this._source=null),this._buffer=null,this};var n={},o={};Object.defineProperty(n,"pink",{get:function(){if(!o.pink){for(var t=[],e=0;e<2;e++){var i,n,a,r,l,u,d,f=new Float32Array(220500);t[e]=f,i=n=a=r=l=u=d=0;for(var h=0;h<220500;h++){var c=2*Math.random()-1;i=.99886*i+.0555179*c,n=.99332*n+.0750759*c,a=.969*a+.153852*c,r=.8665*r+.3104856*c,l=.55*l+.5329522*c,u=-.7616*u-.016898*c,f[h]=i+n+a+r+l+u+d+.5362*c,f[h]*=.11,d=.115926*c}}o.pink=(new s.default.Buffer).fromArray(t)}return o.pink}}),Object.defineProperty(n,"brown",{get:function(){if(!o.brown){for(var t=[],e=0;e<2;e++){var i=new Float32Array(220500);t[e]=i;for(var n=0,a=0;a<220500;a++){var r=2*Math.random()-1;i[a]=(n+.02*r)/1.02,n=i[a],i[a]*=3.5}}o.brown=(new s.default.Buffer).fromArray(t)}return o.brown}}),Object.defineProperty(n,"white",{get:function(){if(!o.white){for(var t=[],e=0;e<2;e++){var i=new Float32Array(220500);t[e]=i;for(var n=0;n<220500;n++)i[n]=2*Math.random()-1}o.white=(new s.default.Buffer).fromArray(t)}return o.white}}),e.default=s.default.Noise},function(t,e,i){"use strict";i.r(e);var s=i(0);i(27),i(20),i(1);s.default.Master=function(){s.default.AudioNode.call(this),s.default.getContext(function(){this.createInsOuts(1,0),this._volume=this.output=new s.default.Volume,this.volume=this._volume.volume,this._readOnly("volume"),s.default.connectSeries(this.input,this.output,this.context.destination),this.context.master=this}.bind(this))},s.default.extend(s.default.Master,s.default.AudioNode),s.default.Master.defaults={volume:0,mute:!1},s.default.Master.prototype.isMaster=!0,Object.defineProperty(s.default.Master.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t}}),s.default.Master.prototype.chain=function(){this.input.disconnect();var t=Array.from(arguments);t.unshift(this.input),t.push(this.output),s.default.connectSeries.apply(void 0,t)},s.default.Master.prototype.dispose=function(){s.default.AudioNode.prototype.dispose.call(this),this._writable("volume"),this._volume.dispose(),this._volume=null,this.volume=null},s.default.AudioNode.prototype.toMaster=function(){return this.connect(this.context.master),this};var n=s.default.Master;s.default.Master=new n,s.default.Context.on("init",function(t){t.master&&t.master.isMaster?s.default.Master=t.master:s.default.Master=new n}),s.default.Context.on("close",function(t){t.master&&t.master.isMaster&&t.master.dispose()}),e.default=s.default.Master},function(t,e,i){"use strict";i.r(e);var s=i(0);i(86),i(47);s.default.FrequencyEnvelope=function(){var t=s.default.defaults(arguments,["attack","decay","sustain","release"],s.default.Envelope);t=s.default.defaultArg(t,s.default.FrequencyEnvelope.defaults),s.default.ScaledEnvelope.call(this,t),this._octaves=t.octaves,this.baseFrequency=t.baseFrequency,this.octaves=t.octaves,this.exponent=t.exponent},s.default.extend(s.default.FrequencyEnvelope,s.default.Envelope),s.default.FrequencyEnvelope.defaults={baseFrequency:200,octaves:4,exponent:1},Object.defineProperty(s.default.FrequencyEnvelope.prototype,"baseFrequency",{get:function(){return this._scale.min},set:function(t){this._scale.min=this.toFrequency(t),this.octaves=this._octaves}}),Object.defineProperty(s.default.FrequencyEnvelope.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t,this._scale.max=this.baseFrequency*Math.pow(2,t)}}),Object.defineProperty(s.default.FrequencyEnvelope.prototype,"exponent",{get:function(){return this._exp.value},set:function(t){this._exp.value=t}}),s.default.FrequencyEnvelope.prototype.dispose=function(){return s.default.ScaledEnvelope.prototype.dispose.call(this),this},e.default=s.default.FrequencyEnvelope},function(t,e,i){"use strict";i.r(e);var s=i(0);i(26),i(61);s.default.ScaleExp=function(t,e,i){s.default.SignalBase.call(this),this._scale=this.output=new s.default.Scale(t,e),this._exp=this.input=new s.default.Pow(s.default.defaultArg(i,2)),this._exp.connect(this._scale)},s.default.extend(s.default.ScaleExp,s.default.SignalBase),Object.defineProperty(s.default.ScaleExp.prototype,"exponent",{get:function(){return this._exp.value},set:function(t){this._exp.value=t}}),Object.defineProperty(s.default.ScaleExp.prototype,"min",{get:function(){return this._scale.min},set:function(t){this._scale.min=t}}),Object.defineProperty(s.default.ScaleExp.prototype,"max",{get:function(){return this._scale.max},set:function(t){this._scale.max=t}}),s.default.ScaleExp.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._scale.dispose(),this._scale=null,this._exp.dispose(),this._exp=null,this},e.default=s.default.ScaleExp},function(t,e,i){"use strict";i.r(e);var s=i(0);i(14),i(1);s.default.Compressor=function(){var t=s.default.defaults(arguments,["threshold","ratio"],s.default.Compressor);s.default.AudioNode.call(this),this._compressor=this.input=this.output=this.context.createDynamicsCompressor(),this.threshold=new s.default.Param({param:this._compressor.threshold,units:s.default.Type.Decibels,convert:!1}),this.attack=new s.default.Param(this._compressor.attack,s.default.Type.Time),this.release=new s.default.Param(this._compressor.release,s.default.Type.Time),this.knee=new s.default.Param({param:this._compressor.knee,units:s.default.Type.Decibels,convert:!1}),this.ratio=new s.default.Param({param:this._compressor.ratio,convert:!1}),this._readOnly(["knee","release","attack","ratio","threshold"]),this.set(t)},s.default.extend(s.default.Compressor,s.default.AudioNode),s.default.Compressor.defaults={ratio:12,threshold:-24,release:.25,attack:.003,knee:30},s.default.Compressor.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["knee","release","attack","ratio","threshold"]),this._compressor.disconnect(),this._compressor=null,this.attack.dispose(),this.attack=null,this.release.dispose(),this.release=null,this.threshold.dispose(),this.threshold=null,this.ratio.dispose(),this.ratio=null,this.knee.dispose(),this.knee=null,this},e.default=s.default.Compressor},function(t,e,i){"use strict";var s=i(0);i(92);if(s.default.supported){!s.default.global.hasOwnProperty("AudioContext")&&s.default.global.hasOwnProperty("webkitAudioContext")&&(s.default.global.AudioContext=s.default.global.webkitAudioContext),AudioContext.prototype.close||(AudioContext.prototype.close=function(){return s.default.isFunction(this.suspend)&&this.suspend(),Promise.resolve()}),AudioContext.prototype.resume||(AudioContext.prototype.resume=function(){var t=this.createBuffer(1,1,this.sampleRate),e=this.createBufferSource();return e.buffer=t,e.connect(this.destination),e.start(0),Promise.resolve()}),!AudioContext.prototype.createGain&&AudioContext.prototype.createGainNode&&(AudioContext.prototype.createGain=AudioContext.prototype.createGainNode),!AudioContext.prototype.createDelay&&AudioContext.prototype.createDelayNode&&(AudioContext.prototype.createDelay=AudioContext.prototype.createDelayNode);var n=!1,o=new OfflineAudioContext(1,1,44100),a=new Uint32Array([1179011410,48,1163280727,544501094,16,131073,44100,176400,1048580,1635017060,8,0,0,0,0]).buffer;try{var r=o.decodeAudioData(a);r&&s.default.isFunction(r.then)&&(n=!0)}catch(t){n=!1}n||(AudioContext.prototype._native_decodeAudioData=AudioContext.prototype.decodeAudioData,AudioContext.prototype.decodeAudioData=function(t){return new Promise(function(e,i){this._native_decodeAudioData(t,e,i)}.bind(this))})}},function(t,e,i){"use strict";i.r(e);var s=i(0);i(63);s.default.TransportTime=function(t,e){if(!(this instanceof s.default.TransportTime))return new s.default.TransportTime(t,e);s.default.Time.call(this,t,e)},s.default.extend(s.default.TransportTime,s.default.Time),s.default.TransportTime.prototype._now=function(){return s.default.Transport.seconds},e.default=s.default.TransportTime},function(t,e,i){"use strict";i.r(e);var s=i(0);i(62);s.default.Frequency=function(t,e){if(!(this instanceof s.default.Frequency))return new s.default.Frequency(t,e);s.default.TimeBase.call(this,t,e)},s.default.extend(s.default.Frequency,s.default.TimeBase),s.default.Frequency.prototype._expressions=Object.assign({},s.default.TimeBase.prototype._expressions,{midi:{regexp:/^(\d+(?:\.\d+)?midi)/,method:function(t){return"midi"===this._defaultUnits?t:s.default.Frequency.mtof(t)}},note:{regexp:/^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,method:function(t,e){var i=n[t.toLowerCase()]+12*(parseInt(e)+1);return"midi"===this._defaultUnits?i:s.default.Frequency.mtof(i)}},tr:{regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?/,method:function(t,e,i){var s=1;return t&&"0"!==t&&(s*=this._beatsToUnits(this._getTimeSignature()*parseFloat(t))),e&&"0"!==e&&(s*=this._beatsToUnits(parseFloat(e))),i&&"0"!==i&&(s*=this._beatsToUnits(parseFloat(i)/4)),s}}}),s.default.Frequency.prototype.transpose=function(t){return new this.constructor(this.valueOf()*s.default.intervalToFrequencyRatio(t))},s.default.Frequency.prototype.harmonize=function(t){return t.map(function(t){return this.transpose(t)}.bind(this))},s.default.Frequency.prototype.toMidi=function(){return s.default.Frequency.ftom(this.valueOf())},s.default.Frequency.prototype.toNote=function(){var t=this.toFrequency(),e=Math.log2(t/s.default.Frequency.A4),i=Math.round(12*e)+57,n=Math.floor(i/12);return n<0&&(i+=-12*n),o[i%12]+n.toString()},s.default.Frequency.prototype.toSeconds=function(){return 1/s.default.TimeBase.prototype.toSeconds.call(this)},s.default.Frequency.prototype.toFrequency=function(){return s.default.TimeBase.prototype.toFrequency.call(this)},s.default.Frequency.prototype.toTicks=function(){var t=this._beatsToUnits(1),e=this.valueOf()/t;return Math.floor(e*s.default.Transport.PPQ)},s.default.Frequency.prototype._noArg=function(){return 0},s.default.Frequency.prototype._frequencyToUnits=function(t){return t},s.default.Frequency.prototype._ticksToUnits=function(t){return 1/(60*t/(s.default.Transport.bpm.value*s.default.Transport.PPQ))},s.default.Frequency.prototype._beatsToUnits=function(t){return 1/s.default.TimeBase.prototype._beatsToUnits.call(this,t)},s.default.Frequency.prototype._secondsToUnits=function(t){return 1/t},s.default.Frequency.prototype._defaultUnits="hz";var n={cbb:-2,cb:-1,c:0,"c#":1,cx:2,dbb:0,db:1,d:2,"d#":3,dx:4,ebb:2,eb:3,e:4,"e#":5,ex:6,fbb:3,fb:4,f:5,"f#":6,fx:7,gbb:5,gb:6,g:7,"g#":8,gx:9,abb:7,ab:8,a:9,"a#":10,ax:11,bbb:9,bb:10,b:11,"b#":12,bx:13},o=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"];s.default.Frequency.A4=440,s.default.Frequency.mtof=function(t){return s.default.Frequency.A4*Math.pow(2,(t-69)/12)},s.default.Frequency.ftom=function(t){return 69+Math.round(12*Math.log2(t/s.default.Frequency.A4))},e.default=s.default.Frequency},function(t,e,i){"use strict";i.r(e);var s=i(0);i(2),i(61),i(4),i(1);s.default.Envelope=function(){var t=s.default.defaults(arguments,["attack","decay","sustain","release"],s.default.Envelope);s.default.AudioNode.call(this),this.attack=t.attack,this.decay=t.decay,this.sustain=t.sustain,this.release=t.release,this._attackCurve="linear",this._releaseCurve="exponential",this._sig=this.output=new s.default.Signal(0),this.attackCurve=t.attackCurve,this.releaseCurve=t.releaseCurve,this.decayCurve=t.decayCurve},s.default.extend(s.default.Envelope,s.default.AudioNode),s.default.Envelope.defaults={attack:.01,decay:.1,sustain:.5,release:1,attackCurve:"linear",decayCurve:"exponential",releaseCurve:"exponential"},Object.defineProperty(s.default.Envelope.prototype,"value",{get:function(){return this.getValueAtTime(this.now())}}),s.default.Envelope.prototype._getCurve=function(t,e){if(s.default.isString(t))return t;if(s.default.isArray(t))for(var i in s.default.Envelope.Type)if(s.default.Envelope.Type[i][e]===t)return i},s.default.Envelope.prototype._setCurve=function(t,e,i){if(s.default.Envelope.Type.hasOwnProperty(i)){var n=s.default.Envelope.Type[i];s.default.isObject(n)?this[t]=n[e]:this[t]=n}else{if(!s.default.isArray(i))throw new Error("Tone.Envelope: invalid curve: "+i);this[t]=i}},Object.defineProperty(s.default.Envelope.prototype,"attackCurve",{get:function(){return this._getCurve(this._attackCurve,"In")},set:function(t){this._setCurve("_attackCurve","In",t)}}),Object.defineProperty(s.default.Envelope.prototype,"releaseCurve",{get:function(){return this._getCurve(this._releaseCurve,"Out")},set:function(t){this._setCurve("_releaseCurve","Out",t)}}),Object.defineProperty(s.default.Envelope.prototype,"decayCurve",{get:function(){return this._decayCurve},set:function(t){if(!["linear","exponential"].includes(t))throw new Error("Tone.Envelope: invalid curve: "+t);this._decayCurve=t}}),s.default.Envelope.prototype.triggerAttack=function(t,e){this.log("triggerAttack",t,e),t=this.toSeconds(t);var i=this.toSeconds(this.attack),n=this.toSeconds(this.decay);e=s.default.defaultArg(e,1);var o=this.getValueAtTime(t);o>0&&(i=(1-o)/(1/i));if(0===i)this._sig.setValueAtTime(e,t);else if("linear"===this._attackCurve)this._sig.linearRampTo(e,i,t);else if("exponential"===this._attackCurve)this._sig.targetRampTo(e,i,t);else if(i>0){this._sig.cancelAndHoldAtTime(t);for(var a=this._attackCurve,r=1;r<a.length;r++)if(a[r-1]<=o&&o<=a[r]){(a=this._attackCurve.slice(r))[0]=o;break}this._sig.setValueCurveAtTime(a,t,i,e)}if(n){var l=e*this.sustain,u=t+i;this.log("decay",u),"linear"===this._decayCurve?this._sig.linearRampTo(l,n,u+this.sampleTime):"exponential"===this._decayCurve&&this._sig.exponentialApproachValueAtTime(l,u,n)}return this},s.default.Envelope.prototype.triggerRelease=function(t){this.log("triggerRelease",t),t=this.toSeconds(t);var e=this.getValueAtTime(t);if(e>0){var i=this.toSeconds(this.release);if("linear"===this._releaseCurve)this._sig.linearRampTo(0,i,t);else if("exponential"===this._releaseCurve)this._sig.targetRampTo(0,i,t);else{var n=this._releaseCurve;s.default.isArray(n)&&(this._sig.cancelAndHoldAtTime(t),this._sig.setValueCurveAtTime(n,t,i,e))}}return this},s.default.Envelope.prototype.getValueAtTime=function(t){return this._sig.getValueAtTime(t)},s.default.Envelope.prototype.triggerAttackRelease=function(t,e,i){return e=this.toSeconds(e),this.triggerAttack(e,i),this.triggerRelease(e+this.toSeconds(t)),this},s.default.Envelope.prototype.cancel=function(t){return this._sig.cancelScheduledValues(t),this},s.default.Envelope.prototype.connect=s.default.SignalBase.prototype.connect,function(){var t,e,i=[];for(t=0;t<128;t++)i[t]=Math.sin(t/127*(Math.PI/2));var n=[];for(t=0;t<127;t++){e=t/127;var o=Math.sin(e*(2*Math.PI)*6.4-Math.PI/2)+1;n[t]=o/10+.83*e}n[127]=1;var a=[];for(t=0;t<128;t++)a[t]=Math.ceil(t/127*5)/5;var r=[];for(t=0;t<128;t++)e=t/127,r[t]=.5*(1-Math.cos(Math.PI*e));var l,u=[];for(t=0;t<128;t++){e=t/127;var d=4*Math.pow(e,3)+.2,f=Math.cos(d*Math.PI*2*e);u[t]=Math.abs(f*(1-e))}function h(t){for(var e=new Array(t.length),i=0;i<t.length;i++)e[i]=1-t[i];return e}s.default.Envelope.Type={linear:"linear",exponential:"exponential",bounce:{In:h(u),Out:u},cosine:{In:i,Out:(l=i,l.slice(0).reverse())},step:{In:a,Out:h(a)},ripple:{In:n,Out:h(n)},sine:{In:r,Out:h(r)}}}(),s.default.Envelope.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._sig.dispose(),this._sig=null,this._attackCurve=null,this._releaseCurve=null,this},e.default=s.default.Envelope},function(t,e,i){"use strict";i.r(e);var s=i(0);i(23),i(10),i(19),i(7),i(28),i(3),i(2),i(20);if(s.default.supported&&!s.default.global.AudioContext.prototype.createStereoPanner){var n=function(t){this.context=t,this.pan=new s.default.Signal(0,s.default.Type.AudioRange);var e=new s.default.WaveShaper(function(t){return s.default.equalPowerScale((t+1)/2)},4096),i=new s.default.WaveShaper(function(t){return s.default.equalPowerScale(1-(t+1)/2)},4096),n=new s.default.Gain,o=new s.default.Gain,a=this.input=new s.default.Split;a._splitter.channelCountMode="explicit",(new s.default.Zero).fan(e,i);var r=this.output=new s.default.Merge;a.left.chain(n,r.left),a.right.chain(o,r.right),this.pan.chain(i,n.gain),this.pan.chain(e,o.gain)};n.prototype.disconnect=function(){this.output.disconnect.apply(this.output,arguments)},n.prototype.connect=function(){this.output.connect.apply(this.output,arguments)},AudioContext.prototype.createStereoPanner=function(){return new n(this)},s.default.Context.prototype.createStereoPanner=function(){return new n(this)}}i(22),i(1);s.default.Panner=function(){var t=s.default.defaults(arguments,["pan"],s.default.Panner);s.default.AudioNode.call(this),this._panner=this.input=this.output=this.context.createStereoPanner(),this.pan=this._panner.pan,this.pan.value=t.pan,this._readOnly("pan")},s.default.extend(s.default.Panner,s.default.AudioNode),s.default.Panner.defaults={pan:0},s.default.Panner.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable("pan"),this._panner.disconnect(),this._panner=null,this.pan=null,this};e.default=s.default.Panner},function(t,e,i){"use strict";i.r(e);var s=i(0);i(6),i(17),i(5),i(3);s.default.FMOscillator=function(){var t=s.default.defaults(arguments,["frequency","type","modulationType"],s.default.FMOscillator);s.default.Source.call(this,t),this._carrier=new s.default.Oscillator(t.frequency,t.type),this.frequency=new s.default.Signal(t.frequency,s.default.Type.Frequency),this.detune=this._carrier.detune,this.detune.value=t.detune,this.modulationIndex=new s.default.Multiply(t.modulationIndex),this.modulationIndex.units=s.default.Type.Positive,this._modulator=new s.default.Oscillator(t.frequency,t.modulationType),this.harmonicity=new s.default.Multiply(t.harmonicity),this.harmonicity.units=s.default.Type.Positive,this._modulationNode=new s.default.Gain(0),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.frequency.chain(this.modulationIndex,this._modulationNode),this._modulator.connect(this._modulationNode.gain),this._modulationNode.connect(this._carrier.frequency),this._carrier.connect(this.output),this.detune.connect(this._modulator.detune),this.phase=t.phase,this._readOnly(["modulationIndex","frequency","detune","harmonicity"])},s.default.extend(s.default.FMOscillator,s.default.Source),s.default.FMOscillator.defaults={frequency:440,detune:0,phase:0,type:"sine",modulationIndex:2,modulationType:"square",harmonicity:1},s.default.FMOscillator.prototype._start=function(t){this._modulator.start(t),this._carrier.start(t)},s.default.FMOscillator.prototype._stop=function(t){this._modulator.stop(t),this._carrier.stop(t)},s.default.FMOscillator.prototype.restart=function(t){this._modulator.restart(t),this._carrier.restart(t)},Object.defineProperty(s.default.FMOscillator.prototype,"type",{get:function(){return this._carrier.type},set:function(t){this._carrier.type=t}}),Object.defineProperty(s.default.FMOscillator.prototype,"baseType",{get:function(){return this._carrier.baseType},set:function(t){this._carrier.baseType=t}}),Object.defineProperty(s.default.FMOscillator.prototype,"partialCount",{get:function(){return this._carrier.partialCount},set:function(t){this._carrier.partialCount=t}}),Object.defineProperty(s.default.FMOscillator.prototype,"modulationType",{get:function(){return this._modulator.type},set:function(t){this._modulator.type=t}}),Object.defineProperty(s.default.FMOscillator.prototype,"phase",{get:function(){return this._carrier.phase},set:function(t){this._carrier.phase=t,this._modulator.phase=t}}),Object.defineProperty(s.default.FMOscillator.prototype,"partials",{get:function(){return this._carrier.partials},set:function(t){this._carrier.partials=t}}),s.default.FMOscillator.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),this._writable(["modulationIndex","frequency","detune","harmonicity"]),this.frequency.dispose(),this.frequency=null,this.detune=null,this.harmonicity.dispose(),this.harmonicity=null,this._carrier.dispose(),this._carrier=null,this._modulator.dispose(),this._modulator=null,this._modulationNode.dispose(),this._modulationNode=null,this.modulationIndex.dispose(),this.modulationIndex=null,this},e.default=s.default.FMOscillator},function(t,e,i){"use strict";i.r(e);var s=i(0);i(6),i(17),i(2),i(7),i(3);s.default.PulseOscillator=function(){var t=s.default.defaults(arguments,["frequency","width"],s.default.Oscillator);s.default.Source.call(this,t),this.width=new s.default.Signal(t.width,s.default.Type.NormalRange),this._widthGate=new s.default.Gain(0),this._sawtooth=new s.default.Oscillator({frequency:t.frequency,detune:t.detune,type:"sawtooth",phase:t.phase}),this.frequency=this._sawtooth.frequency,this.detune=this._sawtooth.detune,this._thresh=new s.default.WaveShaper(function(t){return t<0?-1:1}),this._sawtooth.chain(this._thresh,this.output),this.width.chain(this._widthGate,this._thresh),this._readOnly(["width","frequency","detune"])},s.default.extend(s.default.PulseOscillator,s.default.Source),s.default.PulseOscillator.defaults={frequency:440,detune:0,phase:0,width:.2},s.default.PulseOscillator.prototype._start=function(t){t=this.toSeconds(t),this._sawtooth.start(t),this._widthGate.gain.setValueAtTime(1,t)},s.default.PulseOscillator.prototype._stop=function(t){t=this.toSeconds(t),this._sawtooth.stop(t),this._widthGate.gain.setValueAtTime(0,t)},s.default.PulseOscillator.prototype.restart=function(t){this._sawtooth.restart(t),this._widthGate.gain.cancelScheduledValues(t),this._widthGate.gain.setValueAtTime(1,t)},Object.defineProperty(s.default.PulseOscillator.prototype,"phase",{get:function(){return this._sawtooth.phase},set:function(t){this._sawtooth.phase=t}}),Object.defineProperty(s.default.PulseOscillator.prototype,"type",{get:function(){return"pulse"}}),Object.defineProperty(s.default.PulseOscillator.prototype,"baseType",{get:function(){return"pulse"}}),Object.defineProperty(s.default.PulseOscillator.prototype,"partials",{get:function(){return[]}}),s.default.PulseOscillator.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),this._sawtooth.dispose(),this._sawtooth=null,this._writable(["width","frequency","detune"]),this.width.dispose(),this.width=null,this._widthGate.dispose(),this._widthGate=null,this._thresh.dispose(),this._thresh=null,this.frequency=null,this.detune=null,this},e.default=s.default.PulseOscillator},function(t,e,i){"use strict";i.r(e);var s=i(0);i(16),i(4),i(34);s.default.Event=function(){var t=s.default.defaults(arguments,["callback","value"],s.default.Event);s.default.call(this),this._loop=t.loop,this.callback=t.callback,this.value=t.value,this._loopStart=this.toTicks(t.loopStart),this._loopEnd=this.toTicks(t.loopEnd),this._state=new s.default.TimelineState(s.default.State.Stopped),this._playbackRate=1,this._startOffset=0,this._probability=t.probability,this._humanize=t.humanize,this.mute=t.mute,this.playbackRate=t.playbackRate},s.default.extend(s.default.Event),s.default.Event.defaults={callback:s.default.noOp,loop:!1,loopEnd:"1m",loopStart:0,playbackRate:1,value:null,probability:1,mute:!1,humanize:!1},s.default.Event.prototype._rescheduleEvents=function(t){return t=s.default.defaultArg(t,-1),this._state.forEachFrom(t,function(t){var e;if(t.state===s.default.State.Started){s.default.isDefined(t.id)&&s.default.Transport.clear(t.id);var i=t.time+Math.round(this.startOffset/this._playbackRate);if(!0===this._loop||s.default.isNumber(this._loop)&&this._loop>1){e=1/0,s.default.isNumber(this._loop)&&(e=this._loop*this._getLoopDuration());var n=this._state.getAfter(i);null!==n&&(e=Math.min(e,n.time-i)),e!==1/0&&(this._state.setStateAtTime(s.default.State.Stopped,i+e+1),e=s.default.Ticks(e));var o=s.default.Ticks(this._getLoopDuration());t.id=s.default.Transport.scheduleRepeat(this._tick.bind(this),o,s.default.Ticks(i),e)}else t.id=s.default.Transport.schedule(this._tick.bind(this),s.default.Ticks(i))}}.bind(this)),this},Object.defineProperty(s.default.Event.prototype,"state",{get:function(){return this._state.getValueAtTime(s.default.Transport.ticks)}}),Object.defineProperty(s.default.Event.prototype,"startOffset",{get:function(){return this._startOffset},set:function(t){this._startOffset=t}}),Object.defineProperty(s.default.Event.prototype,"probability",{get:function(){return this._probability},set:function(t){this._probability=t}}),Object.defineProperty(s.default.Event.prototype,"humanize",{get:function(){return this._humanize},set:function(t){this._humanize=t}}),s.default.Event.prototype.start=function(t){return t=this.toTicks(t),this._state.getValueAtTime(t)===s.default.State.Stopped&&(this._state.add({state:s.default.State.Started,time:t,id:void 0}),this._rescheduleEvents(t)),this},s.default.Event.prototype.stop=function(t){if(this.cancel(t),t=this.toTicks(t),this._state.getValueAtTime(t)===s.default.State.Started){this._state.setStateAtTime(s.default.State.Stopped,t);var e=this._state.getBefore(t),i=t;null!==e&&(i=e.time),this._rescheduleEvents(i)}return this},s.default.Event.prototype.cancel=function(t){return t=s.default.defaultArg(t,-1/0),t=this.toTicks(t),this._state.forEachFrom(t,function(t){s.default.Transport.clear(t.id)}),this._state.cancel(t),this},s.default.Event.prototype._tick=function(t){var e=s.default.Transport.getTicksAtTime(t);if(!this.mute&&this._state.getValueAtTime(e)===s.default.State.Started){if(this.probability<1&&Math.random()>this.probability)return;if(this.humanize){var i=.02;s.default.isBoolean(this.humanize)||(i=this.toSeconds(this.humanize)),t+=(2*Math.random()-1)*i}this.callback(t,this.value)}},s.default.Event.prototype._getLoopDuration=function(){return Math.round((this._loopEnd-this._loopStart)/this._playbackRate)},Object.defineProperty(s.default.Event.prototype,"loop",{get:function(){return this._loop},set:function(t){this._loop=t,this._rescheduleEvents()}}),Object.defineProperty(s.default.Event.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t,this._rescheduleEvents()}}),Object.defineProperty(s.default.Event.prototype,"loopEnd",{get:function(){return s.default.Ticks(this._loopEnd).toSeconds()},set:function(t){this._loopEnd=this.toTicks(t),this._loop&&this._rescheduleEvents()}}),Object.defineProperty(s.default.Event.prototype,"loopStart",{get:function(){return s.default.Ticks(this._loopStart).toSeconds()},set:function(t){this._loopStart=this.toTicks(t),this._loop&&this._rescheduleEvents()}}),Object.defineProperty(s.default.Event.prototype,"progress",{get:function(){if(this._loop){var t=s.default.Transport.ticks,e=this._state.get(t);if(null!==e&&e.state===s.default.State.Started){var i=this._getLoopDuration();return(t-e.time)%i/i}return 0}return 0}}),s.default.Event.prototype.dispose=function(){this.cancel(),this._state.dispose(),this._state=null,this.callback=null,this.value=null},e.default=s.default.Event},function(t,e,i){"use strict";i.r(e);var s=i(0);i(2),i(13),i(29),i(10),i(3),i(1);s.default.MidSideMerge=function(){s.default.AudioNode.call(this),this.createInsOuts(2,0),this.mid=this.input[0]=new s.default.Gain,this._left=new s.default.Add,this._timesTwoLeft=new s.default.Multiply(Math.SQRT1_2),this.side=this.input[1]=new s.default.Gain,this._right=new s.default.Subtract,this._timesTwoRight=new s.default.Multiply(Math.SQRT1_2),this._merge=this.output=new s.default.Merge,this.mid.connect(this._left,0,0),this.side.connect(this._left,0,1),this.mid.connect(this._right,0,0),this.side.connect(this._right,0,1),this._left.connect(this._timesTwoLeft),this._right.connect(this._timesTwoRight),this._timesTwoLeft.connect(this._merge,0,0),this._timesTwoRight.connect(this._merge,0,1)},s.default.extend(s.default.MidSideMerge,s.default.AudioNode),s.default.MidSideMerge.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this.mid.dispose(),this.mid=null,this.side.dispose(),this.side=null,this._left.dispose(),this._left=null,this._timesTwoLeft.dispose(),this._timesTwoLeft=null,this._right.dispose(),this._right=null,this._timesTwoRight.dispose(),this._timesTwoRight=null,this._merge.dispose(),this._merge=null,this},e.default=s.default.MidSideMerge},function(t,e,i){"use strict";i.r(e);var s=i(0);i(29),i(13),i(2),i(19),i(1);s.default.MidSideSplit=function(){s.default.AudioNode.call(this),this.createInsOuts(0,2),this._split=this.input=new s.default.Split,this._midAdd=new s.default.Add,this.mid=this.output[0]=new s.default.Multiply(Math.SQRT1_2),this._sideSubtract=new s.default.Subtract,this.side=this.output[1]=new s.default.Multiply(Math.SQRT1_2),this._split.connect(this._midAdd,0,0),this._split.connect(this._midAdd,1,1),this._split.connect(this._sideSubtract,0,0),this._split.connect(this._sideSubtract,1,1),this._midAdd.connect(this.mid),this._sideSubtract.connect(this.side)},s.default.extend(s.default.MidSideSplit,s.default.AudioNode),s.default.MidSideSplit.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this.mid.dispose(),this.mid=null,this.side.dispose(),this.side=null,this._midAdd.dispose(),this._midAdd=null,this._sideSubtract.dispose(),this._sideSubtract=null,this._split.dispose(),this._split=null,this},e.default=s.default.MidSideSplit},function(t,e,i){"use strict";i.r(e);var s=i(0);i(2),i(9),i(1),i(59);s.default.LowpassCombFilter=function(){var t=s.default.defaults(arguments,["delayTime","resonance","dampening"],s.default.LowpassCombFilter);s.default.AudioNode.call(this),this._combFilter=this.output=new s.default.FeedbackCombFilter(t.delayTime,t.resonance),this.delayTime=this._combFilter.delayTime,this._lowpass=this.input=new s.default.Filter({frequency:t.dampening,type:"lowpass",Q:0,rolloff:-12}),this.dampening=this._lowpass.frequency,this.resonance=this._combFilter.resonance,this._lowpass.connect(this._combFilter),this._readOnly(["dampening","resonance","delayTime"])},s.default.extend(s.default.LowpassCombFilter,s.default.AudioNode),s.default.LowpassCombFilter.defaults={delayTime:.1,resonance:.5,dampening:3e3},s.default.LowpassCombFilter.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["dampening","resonance","delayTime"]),this._combFilter.dispose(),this._combFilter=null,this.resonance=null,this.delayTime=null,this._lowpass.dispose(),this._lowpass=null,this.dampening=null,this},e.default=s.default.LowpassCombFilter},function(t,e,i){"use strict";i.r(e);var s=i(0);i(45);s.default.Ticks=function(t,e){if(!(this instanceof s.default.Ticks))return new s.default.Ticks(t,e);s.default.TransportTime.call(this,t,e)},s.default.extend(s.default.Ticks,s.default.TransportTime),s.default.Ticks.prototype._defaultUnits="i",s.default.Ticks.prototype._now=function(){return s.default.Transport.ticks},s.default.Ticks.prototype._beatsToUnits=function(t){return this._getPPQ()*t},s.default.Ticks.prototype._secondsToUnits=function(t){return Math.floor(t/(60/this._getBpm())*this._getPPQ())},s.default.Ticks.prototype._ticksToUnits=function(t){return t},s.default.Ticks.prototype.toTicks=function(){return this.valueOf()},s.default.Ticks.prototype.toSeconds=function(){return this.valueOf()/this._getPPQ()*(60/this._getBpm())},e.default=s.default.Ticks},function(t,e,i){"use strict";i.r(e);var s=i(0);i(55);s.default.TransportEvent=function(t,e){e=s.default.defaultArg(e,s.default.TransportEvent.defaults),s.default.call(this),this.Transport=t,this.id=s.default.TransportEvent._eventId++,this.time=s.default.Ticks(e.time),this.callback=e.callback,this._once=e.once},s.default.extend(s.default.TransportEvent),s.default.TransportEvent.defaults={once:!1,callback:s.default.noOp},s.default.TransportEvent._eventId=0,s.default.TransportEvent.prototype.invoke=function(t){this.callback&&(this.callback(t),this._once&&this.Transport&&this.Transport.clear(this.id))},s.default.TransportEvent.prototype.dispose=function(){return s.default.prototype.dispose.call(this),this.Transport=null,this.callback=null,this.time=null,this},e.default=s.default.TransportEvent},function(t,e,i){"use strict";i.r(e);var s=i(0);i(82),i(34),i(24),i(14);s.default.TickSource=function(){var t=s.default.defaults(arguments,["frequency"],s.default.TickSource);this.frequency=new s.default.TickSignal(t.frequency),this._readOnly("frequency"),this._state=new s.default.TimelineState(s.default.State.Stopped),this._state.setStateAtTime(s.default.State.Stopped,0),this._tickOffset=new s.default.Timeline,this.setTicksAtTime(0,0)},s.default.extend(s.default.TickSource),s.default.TickSource.defaults={frequency:1},Object.defineProperty(s.default.TickSource.prototype,"state",{get:function(){return this._state.getValueAtTime(this.now())}}),s.default.TickSource.prototype.start=function(t,e){return t=this.toSeconds(t),this._state.getValueAtTime(t)!==s.default.State.Started&&(this._state.setStateAtTime(s.default.State.Started,t),s.default.isDefined(e)&&this.setTicksAtTime(e,t)),this},s.default.TickSource.prototype.stop=function(t){if(t=this.toSeconds(t),this._state.getValueAtTime(t)===s.default.State.Stopped){var e=this._state.get(t);e.time>0&&(this._tickOffset.cancel(e.time),this._state.cancel(e.time))}return this._state.cancel(t),this._state.setStateAtTime(s.default.State.Stopped,t),this.setTicksAtTime(0,t),this},s.default.TickSource.prototype.pause=function(t){return t=this.toSeconds(t),this._state.getValueAtTime(t)===s.default.State.Started&&this._state.setStateAtTime(s.default.State.Paused,t),this},s.default.TickSource.prototype.cancel=function(t){return t=this.toSeconds(t),this._state.cancel(t),this._tickOffset.cancel(t),this},s.default.TickSource.prototype.getTicksAtTime=function(t){t=this.toSeconds(t);var e=this._state.getLastState(s.default.State.Stopped,t),i={state:s.default.State.Paused,time:t};this._state.add(i);var n=e,o=0;return this._state.forEachBetween(e.time,t+this.sampleTime,function(t){var e=n.time,i=this._tickOffset.get(t.time);i.time>=n.time&&(o=i.ticks,e=i.time),n.state===s.default.State.Started&&t.state!==s.default.State.Started&&(o+=this.frequency.getTicksAtTime(t.time)-this.frequency.getTicksAtTime(e)),n=t}.bind(this)),this._state.remove(i),o},Object.defineProperty(s.default.TickSource.prototype,"ticks",{get:function(){return this.getTicksAtTime(this.now())},set:function(t){this.setTicksAtTime(t,this.now())}}),Object.defineProperty(s.default.TickSource.prototype,"seconds",{get:function(){return this.getSecondsAtTime(this.now())},set:function(t){var e=this.now(),i=this.frequency.timeToTicks(t,e);this.setTicksAtTime(i,e)}}),s.default.TickSource.prototype.getSecondsAtTime=function(t){t=this.toSeconds(t);var e=this._state.getLastState(s.default.State.Stopped,t),i={state:s.default.State.Paused,time:t};this._state.add(i);var n=e,o=0;return this._state.forEachBetween(e.time,t+this.sampleTime,function(t){var e=n.time,i=this._tickOffset.get(t.time);i.time>=n.time&&(o=i.seconds,e=i.time),n.state===s.default.State.Started&&t.state!==s.default.State.Started&&(o+=t.time-e),n=t}.bind(this)),this._state.remove(i),o},s.default.TickSource.prototype.setTicksAtTime=function(t,e){return e=this.toSeconds(e),this._tickOffset.cancel(e),this._tickOffset.add({time:e,ticks:t,seconds:this.frequency.getDurationOfTicks(t,e)}),this},s.default.TickSource.prototype.getStateAtTime=function(t){return t=this.toSeconds(t),this._state.getValueAtTime(t)},s.default.TickSource.prototype.getTimeOfTick=function(t,e){e=s.default.defaultArg(e,this.now());var i=this._tickOffset.get(e),n=this._state.get(e),o=Math.max(i.time,n.time),a=this.frequency.getTicksAtTime(o)+t-i.ticks;return this.frequency.getTimeOfTick(a)},s.default.TickSource.prototype.forEachTickBetween=function(t,e,i){var n=this._state.get(t);if(this._state.forEachBetween(t,e,function(e){n.state===s.default.State.Started&&e.state!==s.default.State.Started&&this.forEachTickBetween(Math.max(n.time,t),e.time-this.sampleTime,i),n=e}.bind(this)),t=Math.max(n.time,t),n.state===s.default.State.Started&&this._state){var o=this.frequency.getTicksAtTime(t),a=(o-this.frequency.getTicksAtTime(n.time))%1;0!==a&&(a=1-a);for(var r=this.frequency.getTimeOfTick(o+a),l=null;r<e&&this._state;){try{i(r,Math.round(this.getTicksAtTime(r)))}catch(t){l=t;break}this._state&&(r+=this.frequency.getDurationOfTicks(1,r))}}if(l)throw l;return this},s.default.TickSource.prototype.dispose=function(){return s.default.Param.prototype.dispose.call(this),this._state.dispose(),this._state=null,this._tickOffset.dispose(),this._tickOffset=null,this._writable("frequency"),this.frequency.dispose(),this.frequency=null,this},e.default=s.default.TickSource},function(t,e,i){"use strict";i.r(e);var s=i(0);i(87),i(13),i(2),i(4),i(18),i(1);s.default.Follower=function(){var t=s.default.defaults(arguments,["smoothing"],s.default.Follower);s.default.AudioNode.call(this),this.createInsOuts(1,1),this._abs=new s.default.Abs,this._filter=this.context.createBiquadFilter(),this._filter.type="lowpass",this._filter.frequency.value=0,this._filter.Q.value=0,this._sub=new s.default.Subtract,this._delay=new s.default.Delay(this.blockTime),this._smoothing=t.smoothing,s.default.connect(this.input,this._delay),s.default.connect(this.input,this._sub,0,1),this._sub.chain(this._abs,this._filter,this.output),this.smoothing=t.smoothing},s.default.extend(s.default.Follower,s.default.AudioNode),s.default.Follower.defaults={smoothing:.05},Object.defineProperty(s.default.Follower.prototype,"smoothing",{get:function(){return this._smoothing},set:function(t){this._smoothing=t,this._filter.frequency.value=.5*s.default.Time(t).toFrequency()}}),s.default.Follower.prototype.connect=s.default.SignalBase.prototype.connect,s.default.Follower.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._filter.disconnect(),this._filter=null,this._delay.dispose(),this._delay=null,this._sub.disconnect(),this._sub=null,this._abs.dispose(),this._abs=null,this},e.default=s.default.Follower},function(t,e,i){"use strict";i.r(e);var s=i(0);i(42),i(2),i(14),i(18),i(3),i(1);s.default.FeedbackCombFilter=function(){var t=s.default.defaults(arguments,["delayTime","resonance"],s.default.FeedbackCombFilter);s.default.AudioNode.call(this),this._delay=this.input=this.output=new s.default.Delay(t.delayTime),this.delayTime=this._delay.delayTime,this._feedback=new s.default.Gain(t.resonance,s.default.Type.NormalRange),this.resonance=this._feedback.gain,this._delay.chain(this._feedback,this._delay),this._readOnly(["resonance","delayTime"])},s.default.extend(s.default.FeedbackCombFilter,s.default.AudioNode),s.default.FeedbackCombFilter.defaults={delayTime:.1,resonance:.5},s.default.FeedbackCombFilter.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["resonance","delayTime"]),this._delay.dispose(),this._delay=null,this.delayTime=null,this._feedback.dispose(),this._feedback=null,this.resonance=null,this},e.default=s.default.FeedbackCombFilter},function(t,e,i){"use strict";i.r(e);var s=i(0);i(9),i(2),i(3),i(1);s.default.MultibandSplit=function(){var t=s.default.defaults(arguments,["lowFrequency","highFrequency"],s.default.MultibandSplit);s.default.AudioNode.call(this),this.input=new s.default.Gain,this.output=new Array(3),this.low=this.output[0]=new s.default.Filter(0,"lowpass"),this._lowMidFilter=new s.default.Filter(0,"highpass"),this.mid=this.output[1]=new s.default.Filter(0,"lowpass"),this.high=this.output[2]=new s.default.Filter(0,"highpass"),this.lowFrequency=new s.default.Signal(t.lowFrequency,s.default.Type.Frequency),this.highFrequency=new s.default.Signal(t.highFrequency,s.default.Type.Frequency),this.Q=new s.default.Signal(t.Q),this.input.fan(this.low,this.high),this.input.chain(this._lowMidFilter,this.mid),this.lowFrequency.connect(this.low.frequency),this.lowFrequency.connect(this._lowMidFilter.frequency),this.highFrequency.connect(this.mid.frequency),this.highFrequency.connect(this.high.frequency),this.Q.connect(this.low.Q),this.Q.connect(this._lowMidFilter.Q),this.Q.connect(this.mid.Q),this.Q.connect(this.high.Q),this._readOnly(["high","mid","low","highFrequency","lowFrequency"])},s.default.extend(s.default.MultibandSplit,s.default.AudioNode),s.default.MultibandSplit.defaults={lowFrequency:400,highFrequency:2500,Q:1},s.default.MultibandSplit.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["high","mid","low","highFrequency","lowFrequency"]),this.low.dispose(),this.low=null,this._lowMidFilter.dispose(),this._lowMidFilter=null,this.mid.dispose(),this.mid=null,this.high.dispose(),this.high=null,this.lowFrequency.dispose(),this.lowFrequency=null,this.highFrequency.dispose(),this.highFrequency=null,this.Q.dispose(),this.Q=null,this},e.default=s.default.MultibandSplit},function(t,e,i){"use strict";i.r(e);var s=i(0);i(7);s.default.Pow=function(t){s.default.SignalBase.call(this),this._exp=s.default.defaultArg(t,1),this._expScaler=this.input=this.output=new s.default.WaveShaper(this._expFunc(this._exp),8192)},s.default.extend(s.default.Pow,s.default.SignalBase),Object.defineProperty(s.default.Pow.prototype,"value",{get:function(){return this._exp},set:function(t){this._exp=t,this._expScaler.setMap(this._expFunc(this._exp))}}),s.default.Pow.prototype._expFunc=function(t){return function(e){return Math.pow(Math.abs(e),t)}},s.default.Pow.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._expScaler.dispose(),this._expScaler=null,this},e.default=s.default.Pow},function(t,e,i){"use strict";i.r(e);var s=i(0);s.default.TimeBase=function(t,e){if(!(this instanceof s.default.TimeBase))return new s.default.TimeBase(t,e);if(this._val=t,this._units=e,s.default.isUndef(this._units)&&s.default.isString(this._val)&&parseFloat(this._val)==this._val&&"+"!==this._val.charAt(0))this._val=parseFloat(this._val),this._units=this._defaultUnits;else if(t&&t.constructor===this.constructor)this._val=t._val,this._units=t._units;else if(t instanceof s.default.TimeBase)switch(this._defaultUnits){case"s":this._val=t.toSeconds();break;case"i":this._val=t.toTicks();break;case"hz":this._val=t.toFrequency();break;case"midi":this._val=t.toMidi();break;default:throw new Error("Unrecognized default units "+this._defaultUnits)}},s.default.extend(s.default.TimeBase),s.default.TimeBase.prototype._expressions={n:{regexp:/^(\d+)n(\.?)$/i,method:function(t,e){t=parseInt(t);var i="."===e?1.5:1;return 1===t?this._beatsToUnits(this._getTimeSignature())*i:this._beatsToUnits(4/t)*i}},t:{regexp:/^(\d+)t$/i,method:function(t){return t=parseInt(t),this._beatsToUnits(8/(3*parseInt(t)))}},m:{regexp:/^(\d+)m$/i,method:function(t){return this._beatsToUnits(parseInt(t)*this._getTimeSignature())}},i:{regexp:/^(\d+)i$/i,method:function(t){return this._ticksToUnits(parseInt(t))}},hz:{regexp:/^(\d+(?:\.\d+)?)hz$/i,method:function(t){return this._frequencyToUnits(parseFloat(t))}},tr:{regexp:/^(\d+(?:\.\d+)?):(\d+(?:\.\d+)?):?(\d+(?:\.\d+)?)?$/,method:function(t,e,i){var s=0;return t&&"0"!==t&&(s+=this._beatsToUnits(this._getTimeSignature()*parseFloat(t))),e&&"0"!==e&&(s+=this._beatsToUnits(parseFloat(e))),i&&"0"!==i&&(s+=this._beatsToUnits(parseFloat(i)/4)),s}},s:{regexp:/^(\d+(?:\.\d+)?)s$/,method:function(t){return this._secondsToUnits(parseFloat(t))}},samples:{regexp:/^(\d+)samples$/,method:function(t){return parseInt(t)/this.context.sampleRate}},default:{regexp:/^(\d+(?:\.\d+)?)$/,method:function(t){return this._expressions[this._defaultUnits].method.call(this,t)}}},s.default.TimeBase.prototype._defaultUnits="s",s.default.TimeBase.prototype._getBpm=function(){return s.default.Transport?s.default.Transport.bpm.value:120},s.default.TimeBase.prototype._getTimeSignature=function(){return s.default.Transport?s.default.Transport.timeSignature:4},s.default.TimeBase.prototype._getPPQ=function(){return s.default.Transport?s.default.Transport.PPQ:192},s.default.TimeBase.prototype._now=function(){return this.now()},s.default.TimeBase.prototype._frequencyToUnits=function(t){return 1/t},s.default.TimeBase.prototype._beatsToUnits=function(t){return 60/this._getBpm()*t},s.default.TimeBase.prototype._secondsToUnits=function(t){return t},s.default.TimeBase.prototype._ticksToUnits=function(t){return t*(this._beatsToUnits(1)/this._getPPQ())},s.default.TimeBase.prototype._noArg=function(){return this._now()},s.default.TimeBase.prototype.valueOf=function(){if(s.default.isUndef(this._val))return this._noArg();if(s.default.isString(this._val)&&s.default.isUndef(this._units)){for(var t in this._expressions)if(this._expressions[t].regexp.test(this._val.trim())){this._units=t;break}}else if(s.default.isObject(this._val)){var e=0;for(var i in this._val){var n=this._val[i];e+=new this.constructor(i).valueOf()*n}return e}if(s.default.isDefined(this._units)){var o=this._expressions[this._units],a=this._val.toString().trim().match(o.regexp);return a?o.method.apply(this,a.slice(1)):o.method.call(this,parseFloat(this._val))}return this._val},s.default.TimeBase.prototype.toSeconds=function(){return this.valueOf()},s.default.TimeBase.prototype.toFrequency=function(){return 1/this.toSeconds()},s.default.TimeBase.prototype.toSamples=function(){return this.toSeconds()*this.context.sampleRate},s.default.TimeBase.prototype.toMilliseconds=function(){return 1e3*this.toSeconds()},s.default.TimeBase.prototype.dispose=function(){this._val=null,this._units=null},e.default=s.default.TimeBase},function(t,e,i){"use strict";i.r(e);var s=i(0);i(62),i(46);s.default.Time=function(t,e){if(!(this instanceof s.default.Time))return new s.default.Time(t,e);s.default.TimeBase.call(this,t,e)},s.default.extend(s.default.Time,s.default.TimeBase),s.default.Time.prototype._expressions=Object.assign({},s.default.TimeBase.prototype._expressions,{quantize:{regexp:/^@(.+)/,method:function(t){if(s.default.Transport){var e=new this.constructor(t);return this._secondsToUnits(s.default.Transport.nextSubdivision(e))}return 0}},now:{regexp:/^\+(.+)/,method:function(t){return this._now()+new this.constructor(t)}}}),s.default.Time.prototype.quantize=function(t,e){e=s.default.defaultArg(e,1);var i=new this.constructor(t),n=this.valueOf();return n+(Math.round(n/i)*i-n)*e},s.default.Time.prototype.toNotation=function(){for(var t=this.toSeconds(),e=["1m"],i=1;i<8;i++){var n=Math.pow(2,i);e.push(n+"n."),e.push(n+"n"),e.push(n+"t")}e.push("0");var o=e[0],a=s.default.Time(e[0]).toSeconds();return e.forEach(function(e){var i=s.default.Time(e).toSeconds();Math.abs(i-t)<Math.abs(a-t)&&(o=e,a=i)}),o},s.default.Time.prototype.toBarsBeatsSixteenths=function(){var t=this._beatsToUnits(1),e=this.valueOf()/t;e=parseFloat(e.toFixed(4));var i=Math.floor(e/this._getTimeSignature()),s=e%1*4;return e=Math.floor(e)%this._getTimeSignature(),(s=s.toString()).length>3&&(s=parseFloat(parseFloat(s).toFixed(3))),[i,e,s].join(":")},s.default.Time.prototype.toTicks=function(){var t=this._beatsToUnits(1),e=this.valueOf()/t;return Math.round(e*this._getPPQ())},s.default.Time.prototype.toSeconds=function(){return this.valueOf()},s.default.Time.prototype.toMidi=function(){return s.default.Frequency.ftom(this.toFrequency())},e.default=s.default.Time},function(t,e,i){"use strict";i.r(e);var s=i(0);i(11),i(6),i(3),i(1);s.default.supported&&(OscillatorNode.prototype.setPeriodicWave||(OscillatorNode.prototype.setPeriodicWave=OscillatorNode.prototype.setWaveTable),AudioContext.prototype.createPeriodicWave||(AudioContext.prototype.createPeriodicWave=AudioContext.prototype.createWaveTable)),s.default.OscillatorNode=function(){var t=s.default.defaults(arguments,["frequency","type"],s.default.OscillatorNode);s.default.AudioNode.call(this,t),this.onended=t.onended,this._startTime=-1,this._stopTime=-1,this._gainNode=this.output=new s.default.Gain(0),this._oscillator=this.context.createOscillator(),s.default.connect(this._oscillator,this._gainNode),this.type=t.type,this.frequency=new s.default.Param({param:this._oscillator.frequency,units:s.default.Type.Frequency,value:t.frequency}),this.detune=new s.default.Param({param:this._oscillator.detune,units:s.default.Type.Cents,value:t.detune}),this._gain=1},s.default.extend(s.default.OscillatorNode,s.default.AudioNode),s.default.OscillatorNode.defaults={frequency:440,detune:0,type:"sine",onended:s.default.noOp},Object.defineProperty(s.default.OscillatorNode.prototype,"state",{get:function(){return this.getStateAtTime(this.now())}}),s.default.OscillatorNode.prototype.getStateAtTime=function(t){return t=this.toSeconds(t),-1!==this._startTime&&t>=this._startTime&&(-1===this._stopTime||t<=this._stopTime)?s.default.State.Started:s.default.State.Stopped},s.default.OscillatorNode.prototype.start=function(t){if(this.log("start",t),-1!==this._startTime)throw new Error("cannot call OscillatorNode.start more than once");return this._startTime=this.toSeconds(t),this._startTime=Math.max(this._startTime,this.context.currentTime),this._oscillator.start(this._startTime),this._gainNode.gain.setValueAtTime(1,this._startTime),this},s.default.OscillatorNode.prototype.setPeriodicWave=function(t){return this._oscillator.setPeriodicWave(t),this},s.default.OscillatorNode.prototype.stop=function(t){return this.log("stop",t),this.assert(-1!==this._startTime,"'start' must be called before 'stop'"),this.cancelStop(),this._stopTime=this.toSeconds(t),this._stopTime=Math.max(this._stopTime,this.context.currentTime),this._stopTime>this._startTime?(this._gainNode.gain.setValueAtTime(0,this._stopTime),this.context.clearTimeout(this._timeout),this._timeout=this.context.setTimeout(function(){this._oscillator.stop(this.now()),this.onended(),setTimeout(function(){this._oscillator&&(this._oscillator.disconnect(),this._gainNode.disconnect())}.bind(this),100)}.bind(this),this._stopTime-this.context.currentTime)):this._gainNode.gain.cancelScheduledValues(this._startTime),this},s.default.OscillatorNode.prototype.cancelStop=function(){return-1!==this._startTime&&(this._gainNode.gain.cancelScheduledValues(this._startTime+this.sampleTime),this.context.clearTimeout(this._timeout),this._stopTime=-1),this},Object.defineProperty(s.default.OscillatorNode.prototype,"type",{get:function(){return this._oscillator.type},set:function(t){this._oscillator.type=t}}),s.default.OscillatorNode.prototype.dispose=function(){return this._wasDisposed||(this._wasDisposed=!0,this.context.clearTimeout(this._timeout),s.default.AudioNode.prototype.dispose.call(this),this.onended=null,this._oscillator.disconnect(),this._oscillator=null,this._gainNode.dispose(),this._gainNode=null,this.frequency.dispose(),this.frequency=null,this.detune.dispose(),this.detune=null),this};e.default=s.default.OscillatorNode},function(t,e,i){"use strict";i.r(e);var s=i(0);i(11),i(6),i(57),i(32);s.default.Player=function(t){var e;t instanceof s.default.Buffer&&t.loaded?(t=t.get(),e=s.default.Player.defaults):e=s.default.defaults(arguments,["url","onload"],s.default.Player),s.default.Source.call(this,e),this.autostart=e.autostart,this._buffer=new s.default.Buffer({url:e.url,onload:this._onload.bind(this,e.onload),reverse:e.reverse}),t instanceof AudioBuffer&&this._buffer.set(t),this._loop=e.loop,this._loopStart=e.loopStart,this._loopEnd=e.loopEnd,this._playbackRate=e.playbackRate,this._activeSources=[],this.fadeIn=e.fadeIn,this.fadeOut=e.fadeOut},s.default.extend(s.default.Player,s.default.Source),s.default.Player.defaults={onload:s.default.noOp,playbackRate:1,loop:!1,autostart:!1,loopStart:0,loopEnd:0,reverse:!1,fadeIn:0,fadeOut:0},s.default.Player.prototype.load=function(t,e){return this._buffer.load(t,this._onload.bind(this,e))},s.default.Player.prototype._onload=function(t){(t=s.default.defaultArg(t,s.default.noOp))(this),this.autostart&&this.start()},s.default.Player.prototype._onSourceEnd=function(t){var e=this._activeSources.indexOf(t);this._activeSources.splice(e,1),0!==this._activeSources.length||this._synced||this._state.setStateAtTime(s.default.State.Stopped,s.default.now())},s.default.Player.prototype._start=function(t,e,i){e=this._loop?s.default.defaultArg(e,this._loopStart):s.default.defaultArg(e,0),e=this.toSeconds(e),this._synced&&(e*=this._playbackRate);var n=s.default.defaultArg(i,Math.max(this._buffer.duration-e,0));n=this.toSeconds(n),n/=this._playbackRate,t=this.toSeconds(t);var o=new s.default.BufferSource({buffer:this._buffer,loop:this._loop,loopStart:this._loopStart,loopEnd:this._loopEnd,onended:this._onSourceEnd.bind(this),playbackRate:this._playbackRate,fadeIn:this.fadeIn,fadeOut:this.fadeOut}).connect(this.output);return this._loop||this._synced||this._state.setStateAtTime(s.default.State.Stopped,t+n),this._activeSources.push(o),this._loop&&s.default.isUndef(i)?o.start(t,e):o.start(t,e,n-this.toSeconds(this.fadeOut)),this},s.default.Player.prototype._stop=function(t){return t=this.toSeconds(t),this._activeSources.forEach(function(e){e.stop(t)}),this},s.default.Player.prototype.restart=function(t,e,i){return this._stop(t),this._start(t,e,i),this},s.default.Player.prototype.seek=function(t,e){return e=this.toSeconds(e),this._state.getValueAtTime(e)===s.default.State.Started&&(t=this.toSeconds(t),this._stop(e),this._start(e,t)),this},s.default.Player.prototype.setLoopPoints=function(t,e){return this.loopStart=t,this.loopEnd=e,this},Object.defineProperty(s.default.Player.prototype,"loopStart",{get:function(){return this._loopStart},set:function(t){this._loopStart=t,this._activeSources.forEach(function(e){e.loopStart=t})}}),Object.defineProperty(s.default.Player.prototype,"loopEnd",{get:function(){return this._loopEnd},set:function(t){this._loopEnd=t,this._activeSources.forEach(function(e){e.loopEnd=t})}}),Object.defineProperty(s.default.Player.prototype,"buffer",{get:function(){return this._buffer},set:function(t){this._buffer.set(t)}}),Object.defineProperty(s.default.Player.prototype,"loop",{get:function(){return this._loop},set:function(t){if(this._loop!==t&&(this._loop=t,this._activeSources.forEach(function(e){e.loop=t}),t)){var e=this._state.getNextState(s.default.State.Stopped,this.now());e&&this._state.cancel(e.time)}}}),Object.defineProperty(s.default.Player.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t;var e=this.now(),i=this._state.getNextState(s.default.State.Stopped,e);i&&this._state.cancel(i.time),this._activeSources.forEach(function(i){i.cancelStop(),i.playbackRate.setValueAtTime(t,e)})}}),Object.defineProperty(s.default.Player.prototype,"reverse",{get:function(){return this._buffer.reverse},set:function(t){this._buffer.reverse=t}}),Object.defineProperty(s.default.Player.prototype,"loaded",{get:function(){return this._buffer.loaded}}),s.default.Player.prototype.dispose=function(){return this._activeSources.forEach(function(t){t.dispose()}),this._activeSources=null,s.default.Source.prototype.dispose.call(this),this._buffer.dispose(),this._buffer=null,this},e.default=s.default.Player},function(t,e,i){"use strict";i.r(e);var s=i(0);i(31),i(41),i(37),i(2),i(9),i(25);s.default.MonoSynth=function(t){t=s.default.defaultArg(t,s.default.MonoSynth.defaults),s.default.Monophonic.call(this,t),this.oscillator=new s.default.OmniOscillator(t.oscillator),this.frequency=this.oscillator.frequency,this.detune=this.oscillator.detune,this.filter=new s.default.Filter(t.filter),this.filter.frequency.value=5e3,this.filterEnvelope=new s.default.FrequencyEnvelope(t.filterEnvelope),this.envelope=new s.default.AmplitudeEnvelope(t.envelope),this.oscillator.chain(this.filter,this.envelope,this.output),this.filterEnvelope.connect(this.filter.frequency),this._readOnly(["oscillator","frequency","detune","filter","filterEnvelope","envelope"])},s.default.extend(s.default.MonoSynth,s.default.Monophonic),s.default.MonoSynth.defaults={frequency:"C4",detune:0,oscillator:{type:"square"},filter:{Q:6,type:"lowpass",rolloff:-24},envelope:{attack:.005,decay:.1,sustain:.9,release:1},filterEnvelope:{attack:.06,decay:.2,sustain:.5,release:2,baseFrequency:200,octaves:7,exponent:2}},s.default.MonoSynth.prototype._triggerEnvelopeAttack=function(t,e){return t=this.toSeconds(t),this.envelope.triggerAttack(t,e),this.filterEnvelope.triggerAttack(t),this.oscillator.start(t),0===this.envelope.sustain&&this.oscillator.stop(t+this.envelope.attack+this.envelope.decay),this},s.default.MonoSynth.prototype._triggerEnvelopeRelease=function(t){return this.envelope.triggerRelease(t),this.filterEnvelope.triggerRelease(t),this.oscillator.stop(t+this.envelope.release),this},s.default.MonoSynth.prototype.dispose=function(){return s.default.Monophonic.prototype.dispose.call(this),this._writable(["oscillator","frequency","detune","filter","filterEnvelope","envelope"]),this.oscillator.dispose(),this.oscillator=null,this.envelope.dispose(),this.envelope=null,this.filterEnvelope.dispose(),this.filterEnvelope=null,this.filter.dispose(),this.filter=null,this.frequency=null,this.detune=null,this},e.default=s.default.MonoSynth},function(t,e,i){"use strict";i.r(e);var s=i(0);i(6),i(17),i(5),i(3);s.default.FatOscillator=function(){var t=s.default.defaults(arguments,["frequency","type","spread"],s.default.FatOscillator);s.default.Source.call(this,t),this.frequency=new s.default.Signal(t.frequency,s.default.Type.Frequency),this.detune=new s.default.Signal(t.detune,s.default.Type.Cents),this._oscillators=[],this._spread=t.spread,this._type=t.type,this._phase=t.phase,this._partials=t.partials,this._partialCount=t.partialCount,this.count=t.count,this._readOnly(["frequency","detune"])},s.default.extend(s.default.FatOscillator,s.default.Source),s.default.FatOscillator.defaults={frequency:440,detune:0,phase:0,spread:20,count:3,type:"sawtooth",partials:[],partialCount:0},s.default.FatOscillator.prototype._start=function(t){t=this.toSeconds(t),this._forEach(function(e){e.start(t)})},s.default.FatOscillator.prototype._stop=function(t){t=this.toSeconds(t),this._forEach(function(e){e.stop(t)})},s.default.FatOscillator.prototype.restart=function(t){t=this.toSeconds(t),this._forEach(function(e){e.restart(t)})},s.default.FatOscillator.prototype._forEach=function(t){for(var e=0;e<this._oscillators.length;e++)t.call(this,this._oscillators[e],e)},Object.defineProperty(s.default.FatOscillator.prototype,"type",{get:function(){return this._type},set:function(t){this._type=t,this._forEach(function(e){e.type=t})}}),Object.defineProperty(s.default.FatOscillator.prototype,"spread",{get:function(){return this._spread},set:function(t){if(this._spread=t,this._oscillators.length>1){var e=-t/2,i=t/(this._oscillators.length-1);this._forEach(function(t,s){t.detune.value=e+i*s})}}}),Object.defineProperty(s.default.FatOscillator.prototype,"count",{get:function(){return this._oscillators.length},set:function(t){if(t=Math.max(t,1),this._oscillators.length!==t){this._forEach(function(t){t.dispose()}),this._oscillators=[];for(var e=0;e<t;e++){var i=new s.default.Oscillator;this.type===s.default.Oscillator.Type.Custom?i.partials=this._partials:i.type=this._type,i.partialCount=this._partialCount,i.phase=this._phase+e/t*360,i.volume.value=-6-1.1*t,this.frequency.connect(i.frequency),this.detune.connect(i.detune),i.connect(this.output),this._oscillators[e]=i}this.spread=this._spread,this.state===s.default.State.Started&&this._forEach(function(t){t.start()})}}}),Object.defineProperty(s.default.FatOscillator.prototype,"phase",{get:function(){return this._phase},set:function(t){this._phase=t,this._forEach(function(e){e.phase=t})}}),Object.defineProperty(s.default.FatOscillator.prototype,"baseType",{get:function(){return this._oscillators[0].baseType},set:function(t){this._forEach(function(e){e.baseType=t}),this._type=this._oscillators[0].type}}),Object.defineProperty(s.default.FatOscillator.prototype,"partials",{get:function(){return this._oscillators[0].partials},set:function(t){this._partials=t,this._type=s.default.Oscillator.Type.Custom,this._forEach(function(e){e.partials=t})}}),Object.defineProperty(s.default.FatOscillator.prototype,"partialCount",{get:function(){return this._oscillators[0].partialCount},set:function(t){this._partialCount=t,this._forEach(function(e){e.partialCount=t}),this._type=this._oscillators[0].type}}),s.default.FatOscillator.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),this._writable(["frequency","detune"]),this.frequency.dispose(),this.frequency=null,this.detune.dispose(),this.detune=null,this._forEach(function(t){t.dispose()}),this._oscillators=null,this._partials=null,this},e.default=s.default.FatOscillator},function(t,e,i){"use strict";i.r(e);var s=i(0);i(6),i(17),i(5),i(3),i(22);s.default.AMOscillator=function(){var t=s.default.defaults(arguments,["frequency","type","modulationType"],s.default.AMOscillator);s.default.Source.call(this,t),this._carrier=new s.default.Oscillator(t.frequency,t.type),this.frequency=this._carrier.frequency,this.detune=this._carrier.detune,this.detune.value=t.detune,this._modulator=new s.default.Oscillator(t.frequency,t.modulationType),this._modulationScale=new s.default.AudioToGain,this.harmonicity=new s.default.Multiply(t.harmonicity),this.harmonicity.units=s.default.Type.Positive,this._modulationNode=new s.default.Gain(0),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.detune.connect(this._modulator.detune),this._modulator.chain(this._modulationScale,this._modulationNode.gain),this._carrier.chain(this._modulationNode,this.output),this.phase=t.phase,this._readOnly(["frequency","detune","harmonicity"])},s.default.extend(s.default.AMOscillator,s.default.Oscillator),s.default.AMOscillator.defaults={frequency:440,detune:0,phase:0,type:"sine",modulationType:"square",harmonicity:1},s.default.AMOscillator.prototype._start=function(t){this._modulator.start(t),this._carrier.start(t)},s.default.AMOscillator.prototype._stop=function(t){this._modulator.stop(t),this._carrier.stop(t)},s.default.AMOscillator.prototype.restart=function(t){this._modulator.restart(t),this._carrier.restart(t)},Object.defineProperty(s.default.AMOscillator.prototype,"type",{get:function(){return this._carrier.type},set:function(t){this._carrier.type=t}}),Object.defineProperty(s.default.AMOscillator.prototype,"baseType",{get:function(){return this._carrier.baseType},set:function(t){this._carrier.baseType=t}}),Object.defineProperty(s.default.AMOscillator.prototype,"partialCount",{get:function(){return this._carrier.partialCount},set:function(t){this._carrier.partialCount=t}}),Object.defineProperty(s.default.AMOscillator.prototype,"modulationType",{get:function(){return this._modulator.type},set:function(t){this._modulator.type=t}}),Object.defineProperty(s.default.AMOscillator.prototype,"phase",{get:function(){return this._carrier.phase},set:function(t){this._carrier.phase=t,this._modulator.phase=t}}),Object.defineProperty(s.default.AMOscillator.prototype,"partials",{get:function(){return this._carrier.partials},set:function(t){this._carrier.partials=t}}),s.default.AMOscillator.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),this._writable(["frequency","detune","harmonicity"]),this.frequency=null,this.detune=null,this.harmonicity.dispose(),this.harmonicity=null,this._carrier.dispose(),this._carrier=null,this._modulator.dispose(),this._modulator=null,this._modulationNode.dispose(),this._modulationNode=null,this._modulationScale.dispose(),this._modulationScale=null,this},e.default=s.default.AMOscillator},function(t,e,i){"use strict";i.r(e);var s=i(0);i(6),i(50),i(17),i(5);s.default.PWMOscillator=function(){var t=s.default.defaults(arguments,["frequency","modulationFrequency"],s.default.PWMOscillator);s.default.Source.call(this,t),this._pulse=new s.default.PulseOscillator(t.modulationFrequency),this._pulse._sawtooth.type="sine",this._modulator=new s.default.Oscillator({frequency:t.frequency,detune:t.detune,phase:t.phase}),this._scale=new s.default.Multiply(2),this.frequency=this._modulator.frequency,this.detune=this._modulator.detune,this.modulationFrequency=this._pulse.frequency,this._modulator.chain(this._scale,this._pulse.width),this._pulse.connect(this.output),this._readOnly(["modulationFrequency","frequency","detune"])},s.default.extend(s.default.PWMOscillator,s.default.Source),s.default.PWMOscillator.defaults={frequency:440,detune:0,phase:0,modulationFrequency:.4},s.default.PWMOscillator.prototype._start=function(t){t=this.toSeconds(t),this._modulator.start(t),this._pulse.start(t)},s.default.PWMOscillator.prototype._stop=function(t){t=this.toSeconds(t),this._modulator.stop(t),this._pulse.stop(t)},s.default.PWMOscillator.prototype.restart=function(t){this._modulator.restart(t),this._pulse.restart(t)},Object.defineProperty(s.default.PWMOscillator.prototype,"type",{get:function(){return"pwm"}}),Object.defineProperty(s.default.PWMOscillator.prototype,"baseType",{get:function(){return"pwm"}}),Object.defineProperty(s.default.PWMOscillator.prototype,"partials",{get:function(){return[]}}),Object.defineProperty(s.default.PWMOscillator.prototype,"phase",{get:function(){return this._modulator.phase},set:function(t){this._modulator.phase=t}}),s.default.PWMOscillator.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),this._pulse.dispose(),this._pulse=null,this._scale.dispose(),this._scale=null,this._modulator.dispose(),this._modulator=null,this._writable(["modulationFrequency","frequency","detune"]),this.frequency=null,this.detune=null,this.modulationFrequency=null,this},e.default=s.default.PWMOscillator},function(t,e,i){"use strict";i.r(e);var s=i(0);i(51),i(4),i(16);s.default.Part=function(){var t=s.default.defaults(arguments,["callback","events"],s.default.Part);s.default.Event.call(this,t),this._events=[];for(var e=0;e<t.events.length;e++)Array.isArray(t.events[e])?this.add(t.events[e][0],t.events[e][1]):this.add(t.events[e])},s.default.extend(s.default.Part,s.default.Event),s.default.Part.defaults={callback:s.default.noOp,loop:!1,loopEnd:"1m",loopStart:0,playbackRate:1,probability:1,humanize:!1,mute:!1,events:[]},s.default.Part.prototype.start=function(t,e){var i=this.toTicks(t);return this._state.getValueAtTime(i)!==s.default.State.Started&&(e=this._loop?s.default.defaultArg(e,this._loopStart):s.default.defaultArg(e,0),e=this.toTicks(e),this._state.add({state:s.default.State.Started,time:i,offset:e}),this._forEach(function(t){this._startNote(t,i,e)})),this},s.default.Part.prototype._startNote=function(t,e,i){e-=i,this._loop?t.startOffset>=this._loopStart&&t.startOffset<this._loopEnd?(t.startOffset<i&&(e+=this._getLoopDuration()),t.start(s.default.Ticks(e))):t.startOffset<this._loopStart&&t.startOffset>=i&&(t.loop=!1,t.start(s.default.Ticks(e))):t.startOffset>=i&&t.start(s.default.Ticks(e))},Object.defineProperty(s.default.Part.prototype,"startOffset",{get:function(){return this._startOffset},set:function(t){this._startOffset=t,this._forEach(function(t){t.startOffset+=this._startOffset})}}),s.default.Part.prototype.stop=function(t){var e=this.toTicks(t);return this._state.cancel(e),this._state.setStateAtTime(s.default.State.Stopped,e),this._forEach(function(e){e.stop(t)}),this},s.default.Part.prototype.at=function(t,e){t=s.default.TransportTime(t);for(var i=s.default.Ticks(1).toSeconds(),n=0;n<this._events.length;n++){var o=this._events[n];if(Math.abs(t.toTicks()-o.startOffset)<i)return s.default.isDefined(e)&&(o.value=e),o}return s.default.isDefined(e)?(this.add(t,e),this._events[this._events.length-1]):null},s.default.Part.prototype.add=function(t,e){var i;return t.hasOwnProperty("time")&&(t=(e=t).time),t=this.toTicks(t),e instanceof s.default.Event?(i=e).callback=this._tick.bind(this):i=new s.default.Event({callback:this._tick.bind(this),value:e}),i.startOffset=t,i.set({loopEnd:this.loopEnd,loopStart:this.loopStart,loop:this.loop,humanize:this.humanize,playbackRate:this.playbackRate,probability:this.probability}),this._events.push(i),this._restartEvent(i),this},s.default.Part.prototype._restartEvent=function(t){this._state.forEach(function(e){e.state===s.default.State.Started?this._startNote(t,e.time,e.offset):t.stop(s.default.Ticks(e.time))}.bind(this))},s.default.Part.prototype.remove=function(t,e){t.hasOwnProperty("time")&&(t=(e=t).time),t=this.toTicks(t);for(var i=this._events.length-1;i>=0;i--){var n=this._events[i];n.startOffset===t&&(s.default.isUndef(e)||s.default.isDefined(e)&&n.value===e)&&(this._events.splice(i,1),n.dispose())}return this},s.default.Part.prototype.removeAll=function(){return this._forEach(function(t){t.dispose()}),this._events=[],this},s.default.Part.prototype.cancel=function(t){return this._forEach(function(e){e.cancel(t)}),this._state.cancel(this.toTicks(t)),this},s.default.Part.prototype._forEach=function(t,e){if(this._events){e=s.default.defaultArg(e,this);for(var i=this._events.length-1;i>=0;i--){var n=this._events[i];n instanceof s.default.Part?n._forEach(t,e):t.call(e,n)}}return this},s.default.Part.prototype._setAll=function(t,e){this._forEach(function(i){i[t]=e})},s.default.Part.prototype._tick=function(t,e){this.mute||this.callback(t,e)},s.default.Part.prototype._testLoopBoundries=function(t){this._loop&&(t.startOffset<this._loopStart||t.startOffset>=this._loopEnd)?t.cancel(0):t.state===s.default.State.Stopped&&this._restartEvent(t)},Object.defineProperty(s.default.Part.prototype,"probability",{get:function(){return this._probability},set:function(t){this._probability=t,this._setAll("probability",t)}}),Object.defineProperty(s.default.Part.prototype,"humanize",{get:function(){return this._humanize},set:function(t){this._humanize=t,this._setAll("humanize",t)}}),Object.defineProperty(s.default.Part.prototype,"loop",{get:function(){return this._loop},set:function(t){this._loop=t,this._forEach(function(e){e._loopStart=this._loopStart,e._loopEnd=this._loopEnd,e.loop=t,this._testLoopBoundries(e)})}}),Object.defineProperty(s.default.Part.prototype,"loopEnd",{get:function(){return s.default.Ticks(this._loopEnd).toSeconds()},set:function(t){this._loopEnd=this.toTicks(t),this._loop&&this._forEach(function(e){e.loopEnd=t,this._testLoopBoundries(e)})}}),Object.defineProperty(s.default.Part.prototype,"loopStart",{get:function(){return s.default.Ticks(this._loopStart).toSeconds()},set:function(t){this._loopStart=this.toTicks(t),this._loop&&this._forEach(function(t){t.loopStart=this.loopStart,this._testLoopBoundries(t)})}}),Object.defineProperty(s.default.Part.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t,this._setAll("playbackRate",t)}}),Object.defineProperty(s.default.Part.prototype,"length",{get:function(){return this._events.length}}),s.default.Part.prototype.dispose=function(){return s.default.Event.prototype.dispose.call(this),this.removeAll(),this.callback=null,this._events=null,this},e.default=s.default.Part},function(t,e,i){"use strict";i.r(e);var s=i(0);i(51);s.default.Loop=function(){var t=s.default.defaults(arguments,["callback","interval"],s.default.Loop);s.default.call(this),this._event=new s.default.Event({callback:this._tick.bind(this),loop:!0,loopEnd:t.interval,playbackRate:t.playbackRate,probability:t.probability}),this.callback=t.callback,this.iterations=t.iterations},s.default.extend(s.default.Loop),s.default.Loop.defaults={interval:"4n",callback:s.default.noOp,playbackRate:1,iterations:1/0,probability:!0,mute:!1},s.default.Loop.prototype.start=function(t){return this._event.start(t),this},s.default.Loop.prototype.stop=function(t){return this._event.stop(t),this},s.default.Loop.prototype.cancel=function(t){return this._event.cancel(t),this},s.default.Loop.prototype._tick=function(t){this.callback(t)},Object.defineProperty(s.default.Loop.prototype,"state",{get:function(){return this._event.state}}),Object.defineProperty(s.default.Loop.prototype,"progress",{get:function(){return this._event.progress}}),Object.defineProperty(s.default.Loop.prototype,"interval",{get:function(){return this._event.loopEnd},set:function(t){this._event.loopEnd=t}}),Object.defineProperty(s.default.Loop.prototype,"playbackRate",{get:function(){return this._event.playbackRate},set:function(t){this._event.playbackRate=t}}),Object.defineProperty(s.default.Loop.prototype,"humanize",{get:function(){return this._event.humanize},set:function(t){this._event.humanize=t}}),Object.defineProperty(s.default.Loop.prototype,"probability",{get:function(){return this._event.probability},set:function(t){this._event.probability=t}}),Object.defineProperty(s.default.Loop.prototype,"mute",{get:function(){return this._event.mute},set:function(t){this._event.mute=t}}),Object.defineProperty(s.default.Loop.prototype,"iterations",{get:function(){return!0===this._event.loop?1/0:this._event.loop},set:function(t){this._event.loop=t===1/0||t}}),s.default.Loop.prototype.dispose=function(){this._event.dispose(),this._event=null,this.callback=null},e.default=s.default.Loop},function(t,e,i){"use strict";i.r(e);var s=i(0);i(15),i(33);s.default.StereoXFeedbackEffect=function(){var t=s.default.defaults(arguments,["feedback"],s.default.FeedbackEffect);s.default.StereoEffect.call(this,t),this.feedback=new s.default.Signal(t.feedback,s.default.Type.NormalRange),this._feedbackLR=new s.default.Gain,this._feedbackRL=new s.default.Gain,this.effectReturnL.chain(this._feedbackLR,this.effectSendR),this.effectReturnR.chain(this._feedbackRL,this.effectSendL),this.feedback.fan(this._feedbackLR.gain,this._feedbackRL.gain),this._readOnly(["feedback"])},s.default.extend(s.default.StereoXFeedbackEffect,s.default.StereoEffect),s.default.StereoXFeedbackEffect.prototype.dispose=function(){return s.default.StereoEffect.prototype.dispose.call(this),this._writable(["feedback"]),this.feedback.dispose(),this.feedback=null,this._feedbackLR.dispose(),this._feedbackLR=null,this._feedbackRL.dispose(),this._feedbackRL=null,this},e.default=s.default.StereoXFeedbackEffect},function(t,e,i){"use strict";i.r(e);var s=i(0);i(8),i(53),i(52);s.default.MidSideEffect=function(){s.default.Effect.apply(this,arguments),this._midSideSplit=new s.default.MidSideSplit,this._midSideMerge=new s.default.MidSideMerge,this.midSend=this._midSideSplit.mid,this.sideSend=this._midSideSplit.side,this.midReturn=this._midSideMerge.mid,this.sideReturn=this._midSideMerge.side,this.effectSend.connect(this._midSideSplit),this._midSideMerge.connect(this.effectReturn)},s.default.extend(s.default.MidSideEffect,s.default.Effect),s.default.MidSideEffect.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._midSideSplit.dispose(),this._midSideSplit=null,this._midSideMerge.dispose(),this._midSideMerge=null,this.midSend=null,this.sideSend=null,this.midReturn=null,this.sideReturn=null,this},e.default=s.default.MidSideEffect},function(t,e,i){"use strict";i.r(e);var s=i(0);i(11),i(8);s.default.Convolver=function(){var t=s.default.defaults(arguments,["url","onload"],s.default.Convolver);s.default.Effect.call(this,t),this._convolver=this.context.createConvolver(),this._buffer=new s.default.Buffer(t.url,function(e){this.buffer=e.get(),t.onload()}.bind(this)),this._buffer.loaded&&(this.buffer=this._buffer),this.normalize=t.normalize,this.connectEffect(this._convolver)},s.default.extend(s.default.Convolver,s.default.Effect),s.default.Convolver.defaults={onload:s.default.noOp,normalize:!0},Object.defineProperty(s.default.Convolver.prototype,"buffer",{get:function(){return this._buffer.length?this._buffer:null},set:function(t){this._buffer.set(t),this._convolver.buffer&&(this.effectSend.disconnect(),this._convolver.disconnect(),this._convolver=this.context.createConvolver(),this.connectEffect(this._convolver)),this._convolver.buffer=this._buffer.get()}}),Object.defineProperty(s.default.Convolver.prototype,"normalize",{get:function(){return this._convolver.normalize},set:function(t){this._convolver.normalize=t}}),s.default.Convolver.prototype.load=function(t,e){return this._buffer.load(t,function(t){this.buffer=t,e&&e()}.bind(this))},s.default.Convolver.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._buffer.dispose(),this._buffer=null,this._convolver.disconnect(),this._convolver=null,this},e.default=s.default.Convolver},function(t,e,i){"use strict";i.r(e);var s=i(0);i(7),i(5),i(13);s.default.Modulo=function(t){s.default.SignalBase.call(this),this.createInsOuts(1,0),this._shaper=new s.default.WaveShaper(Math.pow(2,16)),this._multiply=new s.default.Multiply,this._subtract=this.output=new s.default.Subtract,this._modSignal=new s.default.Signal(t),s.default.connect(this.input,this._shaper),s.default.connect(this.input,this._subtract),this._modSignal.connect(this._multiply,0,0),this._shaper.connect(this._multiply,0,1),this._multiply.connect(this._subtract,0,1),this._setWaveShaper(t)},s.default.extend(s.default.Modulo,s.default.SignalBase),s.default.Modulo.prototype._setWaveShaper=function(t){this._shaper.setMap(function(e){return Math.floor((e+1e-4)/t)})},Object.defineProperty(s.default.Modulo.prototype,"value",{get:function(){return this._modSignal.value},set:function(t){this._modSignal.value=t,this._setWaveShaper(t)}}),s.default.Modulo.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._shaper.dispose(),this._shaper=null,this._multiply.dispose(),this._multiply=null,this._subtract.dispose(),this._subtract=null,this._modSignal.dispose(),this._modSignal=null,this},e.default=s.default.Modulo},function(t,e,i){"use strict";i.r(e);var s=i(0);i(20),i(92);s.default.OfflineContext=function(t,e,i){var n=new OfflineAudioContext(t,e*i,i);s.default.Context.call(this,{context:n,clockSource:"offline",lookAhead:0,updateInterval:128/i}),this._duration=e,this._currentTime=0},s.default.extend(s.default.OfflineContext,s.default.Context),s.default.OfflineContext.prototype.now=function(){return this._currentTime},s.default.OfflineContext.prototype.resume=function(){return Promise.resolve()},s.default.OfflineContext.prototype.render=function(){for(;this._duration-this._currentTime>=0;)this.emit("tick"),this._currentTime+=.005;return this._context.startRendering()},s.default.OfflineContext.prototype.close=function(){return this._context=null,Promise.resolve()},e.default=s.default.OfflineContext},function(t,e,i){"use strict";i.r(e);var s=i(0);i(16),i(11),i(76),i(40);s.default.Offline=function(t,e){var i=s.default.context.sampleRate,n=s.default.context,o=new s.default.OfflineContext(2,e,i);s.default.context=o;var a=t(s.default.Transport),r=null;return r=a&&s.default.isFunction(a.then)?a.then(function(){return o.render()}):o.render(),s.default.context=n,r.then(function(t){return new s.default.Buffer(t)})},e.default=s.default.Offline},function(t,e,i){"use strict";i.r(e);var s=i(0);i(11);s.default.Buffers=function(t){var e=Array.prototype.slice.call(arguments);e.shift();var i=s.default.defaults(e,["onload","baseUrl"],s.default.Buffers);for(var n in s.default.call(this),this._buffers={},this.baseUrl=i.baseUrl,this._loadingCount=0,t)this._loadingCount++,this.add(n,t[n],this._bufferLoaded.bind(this,i.onload))},s.default.extend(s.default.Buffers),s.default.Buffers.defaults={onload:s.default.noOp,baseUrl:""},s.default.Buffers.prototype.has=function(t){return this._buffers.hasOwnProperty(t)},s.default.Buffers.prototype.get=function(t){if(this.has(t))return this._buffers[t];throw new Error("Tone.Buffers: no buffer named "+t)},s.default.Buffers.prototype._bufferLoaded=function(t){this._loadingCount--,0===this._loadingCount&&t&&t(this)},Object.defineProperty(s.default.Buffers.prototype,"loaded",{get:function(){var t=!0;for(var e in this._buffers){var i=this.get(e);t=t&&i.loaded}return t}}),s.default.Buffers.prototype.add=function(t,e,i){return i=s.default.defaultArg(i,s.default.noOp),e instanceof s.default.Buffer?(this._buffers[t]=e,i(this)):e instanceof AudioBuffer?(this._buffers[t]=new s.default.Buffer(e),i(this)):s.default.isString(e)&&(this._buffers[t]=new s.default.Buffer(this.baseUrl+e,i)),this},s.default.Buffers.prototype.dispose=function(){for(var t in s.default.prototype.dispose.call(this),this._buffers)this._buffers[t].dispose();return this._buffers=null,this},e.default=s.default.Buffers},function(t,e,i){"use strict";i.r(e);var s=i(0);s.default.CtrlPattern=function(){var t=s.default.defaults(arguments,["values","type"],s.default.CtrlPattern);s.default.call(this),this.values=t.values,this.index=0,this._type=null,this._shuffled=null,this._direction=null,this.type=t.type},s.default.extend(s.default.CtrlPattern),s.default.CtrlPattern.Type={Up:"up",Down:"down",UpDown:"upDown",DownUp:"downUp",AlternateUp:"alternateUp",AlternateDown:"alternateDown",Random:"random",RandomWalk:"randomWalk",RandomOnce:"randomOnce"},s.default.CtrlPattern.defaults={type:s.default.CtrlPattern.Type.Up,values:[]},Object.defineProperty(s.default.CtrlPattern.prototype,"value",{get:function(){if(0!==this.values.length){if(1===this.values.length)return this.values[0];this.index=Math.min(this.index,this.values.length-1);var t=this.values[this.index];return this.type===s.default.CtrlPattern.Type.RandomOnce&&(this.values.length!==this._shuffled.length&&this._shuffleValues(),t=this.values[this._shuffled[this.index]]),t}}}),Object.defineProperty(s.default.CtrlPattern.prototype,"type",{get:function(){return this._type},set:function(t){this._type=t,this._shuffled=null,this._type===s.default.CtrlPattern.Type.Up||this._type===s.default.CtrlPattern.Type.UpDown||this._type===s.default.CtrlPattern.Type.RandomOnce||this._type===s.default.CtrlPattern.Type.AlternateUp?this.index=0:this._type!==s.default.CtrlPattern.Type.Down&&this._type!==s.default.CtrlPattern.Type.DownUp&&this._type!==s.default.CtrlPattern.Type.AlternateDown||(this.index=this.values.length-1),this._type===s.default.CtrlPattern.Type.UpDown||this._type===s.default.CtrlPattern.Type.AlternateUp?this._direction=s.default.CtrlPattern.Type.Up:this._type!==s.default.CtrlPattern.Type.DownUp&&this._type!==s.default.CtrlPattern.Type.AlternateDown||(this._direction=s.default.CtrlPattern.Type.Down),this._type===s.default.CtrlPattern.Type.RandomOnce?this._shuffleValues():this._type===s.default.CtrlPattern.Type.Random&&(this.index=Math.floor(Math.random()*this.values.length))}}),s.default.CtrlPattern.prototype.next=function(){var t=this.type;return t===s.default.CtrlPattern.Type.Up?(this.index++,this.index>=this.values.length&&(this.index=0)):t===s.default.CtrlPattern.Type.Down?(this.index--,this.index<0&&(this.index=this.values.length-1)):t===s.default.CtrlPattern.Type.UpDown||t===s.default.CtrlPattern.Type.DownUp?(this._direction===s.default.CtrlPattern.Type.Up?this.index++:this.index--,this.index<0?(this.index=1,this._direction=s.default.CtrlPattern.Type.Up):this.index>=this.values.length&&(this.index=this.values.length-2,this._direction=s.default.CtrlPattern.Type.Down)):t===s.default.CtrlPattern.Type.Random?this.index=Math.floor(Math.random()*this.values.length):t===s.default.CtrlPattern.Type.RandomWalk?Math.random()<.5?(this.index--,this.index=Math.max(this.index,0)):(this.index++,this.index=Math.min(this.index,this.values.length-1)):t===s.default.CtrlPattern.Type.RandomOnce?(this.index++,this.index>=this.values.length&&(this.index=0,this._shuffleValues())):t===s.default.CtrlPattern.Type.AlternateUp?(this._direction===s.default.CtrlPattern.Type.Up?(this.index+=2,this._direction=s.default.CtrlPattern.Type.Down):(this.index-=1,this._direction=s.default.CtrlPattern.Type.Up),this.index>=this.values.length&&(this.index=0,this._direction=s.default.CtrlPattern.Type.Up)):t===s.default.CtrlPattern.Type.AlternateDown&&(this._direction===s.default.CtrlPattern.Type.Up?(this.index+=1,this._direction=s.default.CtrlPattern.Type.Down):(this.index-=2,this._direction=s.default.CtrlPattern.Type.Up),this.index<0&&(this.index=this.values.length-1,this._direction=s.default.CtrlPattern.Type.Down)),this.value},s.default.CtrlPattern.prototype._shuffleValues=function(){var t=[];this._shuffled=[];for(var e=0;e<this.values.length;e++)t[e]=e;for(;t.length>0;){var i=t.splice(Math.floor(t.length*Math.random()),1);this._shuffled.push(i[0])}},s.default.CtrlPattern.prototype.dispose=function(){this._shuffled=null,this.values=null},e.default=s.default.CtrlPattern},function(t,e,i){"use strict";i.r(e);var s=i(0);i(56),i(55);s.default.TransportRepeatEvent=function(t,e){s.default.TransportEvent.call(this,t,e),e=s.default.defaultArg(e,s.default.TransportRepeatEvent.defaults),this.duration=s.default.Ticks(e.duration),this._interval=s.default.Ticks(e.interval),this._currentId=-1,this._nextId=-1,this._nextTick=this.time,this._boundRestart=this._restart.bind(this),this.Transport.on("start loopStart",this._boundRestart),this._restart()},s.default.extend(s.default.TransportRepeatEvent,s.default.TransportEvent),s.default.TransportRepeatEvent.defaults={duration:1/0,interval:1},s.default.TransportRepeatEvent.prototype.invoke=function(t){this._createEvents(t),s.default.TransportEvent.prototype.invoke.call(this,t)},s.default.TransportRepeatEvent.prototype._createEvents=function(t){var e=this.Transport.getTicksAtTime(t);e>=this.time&&e>=this._nextTick&&this._nextTick+this._interval<this.time+this.duration&&(this._nextTick+=this._interval,this._currentId=this._nextId,this._nextId=this.Transport.scheduleOnce(this.invoke.bind(this),s.default.Ticks(this._nextTick)))},s.default.TransportRepeatEvent.prototype._restart=function(t){this.Transport.clear(this._currentId),this.Transport.clear(this._nextId),this._nextTick=this.time;var e=this.Transport.getTicksAtTime(t);e>this.time&&(this._nextTick=this.time+Math.ceil((e-this.time)/this._interval)*this._interval),this._currentId=this.Transport.scheduleOnce(this.invoke.bind(this),s.default.Ticks(this._nextTick)),this._nextTick+=this._interval,this._nextId=this.Transport.scheduleOnce(this.invoke.bind(this),s.default.Ticks(this._nextTick))},s.default.TransportRepeatEvent.prototype.dispose=function(){return this.Transport.clear(this._currentId),this.Transport.clear(this._nextId),this.Transport.off("start loopStart",this._boundRestart),this._boundCreateEvents=null,s.default.TransportEvent.prototype.dispose.call(this),this.duration=null,this._interval=null,this},e.default=s.default.TransportRepeatEvent},function(t,e,i){"use strict";i.r(e);var s=i(0);i(4);s.default.IntervalTimeline=function(){s.default.call(this),this._root=null,this._length=0},s.default.extend(s.default.IntervalTimeline),s.default.IntervalTimeline.prototype.add=function(t){if(s.default.isUndef(t.time)||s.default.isUndef(t.duration))throw new Error("Tone.IntervalTimeline: events must have time and duration parameters");t.time=t.time.valueOf();var e=new n(t.time,t.time+t.duration,t);for(null===this._root?this._root=e:this._root.insert(e),this._length++;null!==e;)e.updateHeight(),e.updateMax(),this._rebalance(e),e=e.parent;return this},s.default.IntervalTimeline.prototype.remove=function(t){if(null!==this._root){var e=[];this._root.search(t.time,e);for(var i=0;i<e.length;i++){var s=e[i];if(s.event===t){this._removeNode(s),this._length--;break}}}return this},Object.defineProperty(s.default.IntervalTimeline.prototype,"length",{get:function(){return this._length}}),s.default.IntervalTimeline.prototype.cancel=function(t){return this.forEachFrom(t,function(t){this.remove(t)}.bind(this)),this},s.default.IntervalTimeline.prototype._setRoot=function(t){this._root=t,null!==this._root&&(this._root.parent=null)},s.default.IntervalTimeline.prototype._replaceNodeInParent=function(t,e){null!==t.parent?(t.isLeftChild()?t.parent.left=e:t.parent.right=e,this._rebalance(t.parent)):this._setRoot(e)},s.default.IntervalTimeline.prototype._removeNode=function(t){if(null===t.left&&null===t.right)this._replaceNodeInParent(t,null);else if(null===t.right)this._replaceNodeInParent(t,t.left);else if(null===t.left)this._replaceNodeInParent(t,t.right);else{var e,i;if(t.getBalance()>0)if(null===t.left.right)(e=t.left).right=t.right,i=e;else{for(e=t.left.right;null!==e.right;)e=e.right;e.parent.right=e.left,i=e.parent,e.left=t.left,e.right=t.right}else if(null===t.right.left)(e=t.right).left=t.left,i=e;else{for(e=t.right.left;null!==e.left;)e=e.left;e.parent.left=e.right,i=e.parent,e.left=t.left,e.right=t.right}null!==t.parent?t.isLeftChild()?t.parent.left=e:t.parent.right=e:this._setRoot(e),this._rebalance(i)}t.dispose()},s.default.IntervalTimeline.prototype._rotateLeft=function(t){var e=t.parent,i=t.isLeftChild(),s=t.right;t.right=s.left,s.left=t,null!==e?i?e.left=s:e.right=s:this._setRoot(s)},s.default.IntervalTimeline.prototype._rotateRight=function(t){var e=t.parent,i=t.isLeftChild(),s=t.left;t.left=s.right,s.right=t,null!==e?i?e.left=s:e.right=s:this._setRoot(s)},s.default.IntervalTimeline.prototype._rebalance=function(t){var e=t.getBalance();e>1?t.left.getBalance()<0?this._rotateLeft(t.left):this._rotateRight(t):e<-1&&(t.right.getBalance()>0?this._rotateRight(t.right):this._rotateLeft(t))},s.default.IntervalTimeline.prototype.get=function(t){if(null!==this._root){var e=[];if(this._root.search(t,e),e.length>0){for(var i=e[0],s=1;s<e.length;s++)e[s].low>i.low&&(i=e[s]);return i.event}}return null},s.default.IntervalTimeline.prototype.forEach=function(t){if(null!==this._root){var e=[];this._root.traverse(function(t){e.push(t)});for(var i=0;i<e.length;i++){var s=e[i].event;s&&t(s)}}return this},s.default.IntervalTimeline.prototype.forEachAtTime=function(t,e){if(null!==this._root){var i=[];this._root.search(t,i);for(var s=i.length-1;s>=0;s--){var n=i[s].event;n&&e(n)}}return this},s.default.IntervalTimeline.prototype.forEachFrom=function(t,e){if(null!==this._root){var i=[];this._root.searchAfter(t,i);for(var s=i.length-1;s>=0;s--){e(i[s].event)}}return this},s.default.IntervalTimeline.prototype.dispose=function(){var t=[];null!==this._root&&this._root.traverse(function(e){t.push(e)});for(var e=0;e<t.length;e++)t[e].dispose();return t=null,this._root=null,this};var n=function(t,e,i){this.event=i,this.low=t,this.high=e,this.max=this.high,this._left=null,this._right=null,this.parent=null,this.height=0};n.prototype.insert=function(t){t.low<=this.low?null===this.left?this.left=t:this.left.insert(t):null===this.right?this.right=t:this.right.insert(t)},n.prototype.search=function(t,e){t>this.max||(null!==this.left&&this.left.search(t,e),this.low<=t&&this.high>t&&e.push(this),this.low>t||null!==this.right&&this.right.search(t,e))},n.prototype.searchAfter=function(t,e){this.low>=t&&(e.push(this),null!==this.left&&this.left.searchAfter(t,e)),null!==this.right&&this.right.searchAfter(t,e)},n.prototype.traverse=function(t){t(this),null!==this.left&&this.left.traverse(t),null!==this.right&&this.right.traverse(t)},n.prototype.updateHeight=function(){null!==this.left&&null!==this.right?this.height=Math.max(this.left.height,this.right.height)+1:null!==this.right?this.height=this.right.height+1:null!==this.left?this.height=this.left.height+1:this.height=0},n.prototype.updateMax=function(){this.max=this.high,null!==this.left&&(this.max=Math.max(this.max,this.left.max)),null!==this.right&&(this.max=Math.max(this.max,this.right.max))},n.prototype.getBalance=function(){var t=0;return null!==this.left&&null!==this.right?t=this.left.height-this.right.height:null!==this.left?t=this.left.height+1:null!==this.right&&(t=-(this.right.height+1)),t},n.prototype.isLeftChild=function(){return null!==this.parent&&this.parent.left===this},Object.defineProperty(n.prototype,"left",{get:function(){return this._left},set:function(t){this._left=t,null!==t&&(t.parent=this),this.updateHeight(),this.updateMax()}}),Object.defineProperty(n.prototype,"right",{get:function(){return this._right},set:function(t){this._right=t,null!==t&&(t.parent=this),this.updateHeight(),this.updateMax()}}),n.prototype.dispose=function(){this.parent=null,this._left=null,this._right=null,this.event=null},e.default=s.default.IntervalTimeline},function(t,e,i){"use strict";i.r(e);var s=i(0);i(2);function n(t){return function(e,i){i=this.toSeconds(i),t.apply(this,arguments);var s=this._events.get(i),n=this._events.previousEvent(s),o=this._getTicksUntilEvent(n,i);return s.ticks=Math.max(o,0),this}}s.default.TickSignal=function(t){t=s.default.defaultArg(t,1),s.default.Signal.call(this,{units:s.default.Type.Ticks,value:t}),this._events.memory=1/0,this.cancelScheduledValues(0),this._events.add({type:s.default.Param.AutomationType.SetValue,time:0,value:t})},s.default.extend(s.default.TickSignal,s.default.Signal),s.default.TickSignal.prototype.setValueAtTime=n(s.default.Signal.prototype.setValueAtTime),s.default.TickSignal.prototype.linearRampToValueAtTime=n(s.default.Signal.prototype.linearRampToValueAtTime),s.default.TickSignal.prototype.setTargetAtTime=function(t,e,i){e=this.toSeconds(e),this.setRampPoint(e),t=this._fromUnits(t);for(var s=this._events.get(e),n=Math.round(Math.max(1/i,1)),o=0;o<=n;o++){var a=i*o+e,r=this._exponentialApproach(s.time,s.value,t,i,a);this.linearRampToValueAtTime(this._toUnits(r),a)}return this},s.default.TickSignal.prototype.exponentialRampToValueAtTime=function(t,e){e=this.toSeconds(e),t=this._fromUnits(t);for(var i=this._events.get(e),s=Math.round(Math.max(10*(e-i.time),1)),n=(e-i.time)/s,o=0;o<=s;o++){var a=n*o+i.time,r=this._exponentialInterpolate(i.time,i.value,e,t,a);this.linearRampToValueAtTime(this._toUnits(r),a)}return this},s.default.TickSignal.prototype._getTicksUntilEvent=function(t,e){if(null===t)t={ticks:0,time:0};else if(s.default.isUndef(t.ticks)){var i=this._events.previousEvent(t);t.ticks=this._getTicksUntilEvent(i,t.time)}var n=this.getValueAtTime(t.time),o=this.getValueAtTime(e);return this._events.get(e).time===e&&this._events.get(e).type===s.default.Param.AutomationType.SetValue&&(o=this.getValueAtTime(e-this.sampleTime)),.5*(e-t.time)*(n+o)+t.ticks},s.default.TickSignal.prototype.getTicksAtTime=function(t){t=this.toSeconds(t);var e=this._events.get(t);return Math.max(this._getTicksUntilEvent(e,t),0)},s.default.TickSignal.prototype.getDurationOfTicks=function(t,e){e=this.toSeconds(e);var i=this.getTicksAtTime(e);return this.getTimeOfTick(i+t)-e},s.default.TickSignal.prototype.getTimeOfTick=function(t){var e=this._events.get(t,"ticks"),i=this._events.getAfter(t,"ticks");if(e&&e.ticks===t)return e.time;if(e&&i&&i.type===s.default.Param.AutomationType.Linear&&e.value!==i.value){var n=this.getValueAtTime(e.time),o=(this.getValueAtTime(i.time)-n)/(i.time-e.time),a=Math.sqrt(Math.pow(n,2)-2*o*(e.ticks-t)),r=(-n+a)/o;return(r>0?r:(-n-a)/o)+e.time}return e?0===e.value?1/0:e.time+(t-e.ticks)/e.value:t/this._initialValue},s.default.TickSignal.prototype.ticksToTime=function(t,e){return e=this.toSeconds(e),new s.default.Time(this.getDurationOfTicks(t,e))},s.default.TickSignal.prototype.timeToTicks=function(t,e){e=this.toSeconds(e),t=this.toSeconds(t);var i=this.getTicksAtTime(e),n=this.getTicksAtTime(e+t);return new s.default.Ticks(n-i)},e.default=s.default.TickSignal},function(t,e,i){"use strict";i.r(e);var s=i(0);i(57),i(34),i(35),i(20);s.default.Clock=function(){var t=s.default.defaults(arguments,["callback","frequency"],s.default.Clock);s.default.Emitter.call(this),this.callback=t.callback,this._nextTick=0,this._tickSource=new s.default.TickSource(t.frequency),this._lastUpdate=0,this.frequency=this._tickSource.frequency,this._readOnly("frequency"),this._state=new s.default.TimelineState(s.default.State.Stopped),this._state.setStateAtTime(s.default.State.Stopped,0),this._boundLoop=this._loop.bind(this),this.context.on("tick",this._boundLoop)},s.default.extend(s.default.Clock,s.default.Emitter),s.default.Clock.defaults={callback:s.default.noOp,frequency:1},Object.defineProperty(s.default.Clock.prototype,"state",{get:function(){return this._state.getValueAtTime(this.now())}}),s.default.Clock.prototype.start=function(t,e){return this.context.resume(),t=this.toSeconds(t),this._state.getValueAtTime(t)!==s.default.State.Started&&(this._state.setStateAtTime(s.default.State.Started,t),this._tickSource.start(t,e),t<this._lastUpdate&&this.emit("start",t,e)),this},s.default.Clock.prototype.stop=function(t){return t=this.toSeconds(t),this._state.cancel(t),this._state.setStateAtTime(s.default.State.Stopped,t),this._tickSource.stop(t),t<this._lastUpdate&&this.emit("stop",t),this},s.default.Clock.prototype.pause=function(t){return t=this.toSeconds(t),this._state.getValueAtTime(t)===s.default.State.Started&&(this._state.setStateAtTime(s.default.State.Paused,t),this._tickSource.pause(t),t<this._lastUpdate&&this.emit("pause",t)),this},Object.defineProperty(s.default.Clock.prototype,"ticks",{get:function(){return Math.ceil(this.getTicksAtTime(this.now()))},set:function(t){this._tickSource.ticks=t}}),Object.defineProperty(s.default.Clock.prototype,"seconds",{get:function(){return this._tickSource.seconds},set:function(t){this._tickSource.seconds=t}}),s.default.Clock.prototype.getSecondsAtTime=function(t){return this._tickSource.getSecondsAtTime(t)},s.default.Clock.prototype.setTicksAtTime=function(t,e){return this._tickSource.setTicksAtTime(t,e),this},s.default.Clock.prototype.getTicksAtTime=function(t){return this._tickSource.getTicksAtTime(t)},s.default.Clock.prototype.nextTickTime=function(t,e){e=this.toSeconds(e);var i=this.getTicksAtTime(e);return this._tickSource.getTimeOfTick(i+t,e)},s.default.Clock.prototype._loop=function(){var t=this._lastUpdate,e=this.now();this._lastUpdate=e,t!==e&&(this._state.forEachBetween(t,e,function(t){switch(t.state){case s.default.State.Started:var e=this._tickSource.getTicksAtTime(t.time);this.emit("start",t.time,e);break;case s.default.State.Stopped:0!==t.time&&this.emit("stop",t.time);break;case s.default.State.Paused:this.emit("pause",t.time)}}.bind(this)),this._tickSource.forEachTickBetween(t,e,function(t,e){this.callback(t,e)}.bind(this)))},s.default.Clock.prototype.getStateAtTime=function(t){return t=this.toSeconds(t),this._state.getValueAtTime(t)},s.default.Clock.prototype.dispose=function(){s.default.Emitter.prototype.dispose.call(this),this.context.off("tick",this._boundLoop),this._writable("frequency"),this._tickSource.dispose(),this._tickSource=null,this.frequency=null,this._boundLoop=null,this._nextTick=1/0,this.callback=null,this._state.dispose(),this._state=null},e.default=s.default.Clock},function(t,e,i){"use strict";i.r(e);var s=i(0);i(2),i(5),i(7);s.default.GreaterThanZero=function(){s.default.SignalBase.call(this),this._thresh=this.output=new s.default.WaveShaper(function(t){return t<=0?0:1},127),this._scale=this.input=new s.default.Multiply(1e4),this._scale.connect(this._thresh)},s.default.extend(s.default.GreaterThanZero,s.default.SignalBase),s.default.GreaterThanZero.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._scale.dispose(),this._scale=null,this._thresh.dispose(),this._thresh=null,this},e.default=s.default.GreaterThanZero},function(t,e,i){"use strict";i.r(e);var s=i(0);i(84),i(13),i(2);s.default.GreaterThan=function(t){s.default.Signal.call(this),this.createInsOuts(2,0),this._param=this.input[0]=new s.default.Subtract(t),this.input[1]=this._param.input[1],this._gtz=this.output=new s.default.GreaterThanZero,this._param.connect(this._gtz)},s.default.extend(s.default.GreaterThan,s.default.Signal),s.default.GreaterThan.prototype.dispose=function(){return s.default.Signal.prototype.dispose.call(this),this._gtz.dispose(),this._gtz=null,this},e.default=s.default.GreaterThan},function(t,e,i){"use strict";i.r(e);var s=i(0);i(47),i(26);s.default.ScaledEnvelope=function(){var t=s.default.defaults(arguments,["attack","decay","sustain","release"],s.default.Envelope);s.default.Envelope.call(this,t),t=s.default.defaultArg(t,s.default.ScaledEnvelope.defaults),this._exp=this.output=new s.default.Pow(t.exponent),this._scale=this.output=new s.default.Scale(t.min,t.max),this._sig.chain(this._exp,this._scale)},s.default.extend(s.default.ScaledEnvelope,s.default.Envelope),s.default.ScaledEnvelope.defaults={min:0,max:1,exponent:1},Object.defineProperty(s.default.ScaledEnvelope.prototype,"min",{get:function(){return this._scale.min},set:function(t){this._scale.min=t}}),Object.defineProperty(s.default.ScaledEnvelope.prototype,"max",{get:function(){return this._scale.max},set:function(t){this._scale.max=t}}),Object.defineProperty(s.default.ScaledEnvelope.prototype,"exponent",{get:function(){return this._exp.value},set:function(t){this._exp.value=t}}),s.default.ScaledEnvelope.prototype.dispose=function(){return s.default.Envelope.prototype.dispose.call(this),this._scale.dispose(),this._scale=null,this._exp.dispose(),this._exp=null,this},e.default=s.default.ScaledEnvelope},function(t,e,i){"use strict";i.r(e);var s=i(0);i(7),i(30);s.default.Abs=function(){s.default.SignalBase.call(this),this._abs=this.input=this.output=new s.default.WaveShaper(function(t){return Math.abs(t)<.001?0:Math.abs(t)},1024)},s.default.extend(s.default.Abs,s.default.SignalBase),s.default.Abs.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._abs.dispose(),this._abs=null,this},e.default=s.default.Abs},function(t,e,i){"use strict";i.r(e);var s=i(0);i(3),i(1);s.default.Solo=function(){var t=s.default.defaults(arguments,["solo"],s.default.Solo);s.default.AudioNode.call(this),this.input=this.output=new s.default.Gain,this._soloBind=this._soloed.bind(this),this.context.on("solo",this._soloBind),this.solo=t.solo},s.default.extend(s.default.Solo,s.default.AudioNode),s.default.Solo.defaults={solo:!1},Object.defineProperty(s.default.Solo.prototype,"solo",{get:function(){return this._isSoloed()},set:function(t){t?this._addSolo():this._removeSolo(),this.context.emit("solo",this)}}),Object.defineProperty(s.default.Solo.prototype,"muted",{get:function(){return 0===this.input.gain.value}}),s.default.Solo.prototype._addSolo=function(){s.default.isArray(this.context._currentSolo)||(this.context._currentSolo=[]),this._isSoloed()||this.context._currentSolo.push(this)},s.default.Solo.prototype._removeSolo=function(){if(this._isSoloed()){var t=this.context._currentSolo.indexOf(this);this.context._currentSolo.splice(t,1)}},s.default.Solo.prototype._isSoloed=function(){return!!s.default.isArray(this.context._currentSolo)&&(0!==this.context._currentSolo.length&&-1!==this.context._currentSolo.indexOf(this))},s.default.Solo.prototype._noSolos=function(){return!s.default.isArray(this.context._currentSolo)||0===this.context._currentSolo.length},s.default.Solo.prototype._soloed=function(){this._isSoloed()?this.input.gain.value=1:this._noSolos()?this.input.gain.value=1:this.input.gain.value=0},s.default.Solo.prototype.dispose=function(){return this.context.off("solo",this._soloBind),this._removeSolo(),this._soloBind=null,s.default.AudioNode.prototype.dispose.call(this),this},e.default=s.default.Solo},function(t,e,i){"use strict";i.r(e);var s=i(0);i(7);s.default.EqualPowerGain=function(){s.default.SignalBase.call(this),this._eqPower=this.input=this.output=new s.default.WaveShaper(function(t){return Math.abs(t)<.001?0:s.default.equalPowerScale(t)}.bind(this),4096)},s.default.extend(s.default.EqualPowerGain,s.default.SignalBase),s.default.EqualPowerGain.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._eqPower.dispose(),this._eqPower=null,this},e.default=s.default.EqualPowerGain},function(t,e,i){"use strict";i.r(e);var s=i(0);i(5),i(2);s.default.Negate=function(){s.default.SignalBase.call(this),this._multiply=this.input=this.output=new s.default.Multiply(-1)},s.default.extend(s.default.Negate,s.default.SignalBase),s.default.Negate.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._multiply.dispose(),this._multiply=null,this},e.default=s.default.Negate},function(t,e,i){"use strict";i.r(e);var s=i(0);i(48),i(27),i(1);s.default.PanVol=function(){var t=s.default.defaults(arguments,["pan","volume"],s.default.PanVol);s.default.AudioNode.call(this),this._panner=this.input=new s.default.Panner(t.pan),this.pan=this._panner.pan,this._volume=this.output=new s.default.Volume(t.volume),this.volume=this._volume.volume,this._panner.connect(this._volume),this.mute=t.mute,this._readOnly(["pan","volume"])},s.default.extend(s.default.PanVol,s.default.AudioNode),s.default.PanVol.defaults={pan:0,volume:0,mute:!1},Object.defineProperty(s.default.PanVol.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t}}),s.default.PanVol.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["pan","volume"]),this._panner.dispose(),this._panner=null,this.pan=null,this._volume.dispose(),this._volume=null,this.volume=null,this},e.default=s.default.PanVol},function(t,e,i){"use strict";var s=i(0);if(s.default.supported){!s.default.global.hasOwnProperty("OfflineAudioContext")&&s.default.global.hasOwnProperty("webkitOfflineAudioContext")&&(s.default.global.OfflineAudioContext=s.default.global.webkitOfflineAudioContext);var n=new OfflineAudioContext(1,1,44100).startRendering();n&&s.default.isFunction(n.then)||(OfflineAudioContext.prototype._native_startRendering=OfflineAudioContext.prototype.startRendering,OfflineAudioContext.prototype.startRendering=function(){return new Promise(function(t){this.oncomplete=function(e){t(e.renderedBuffer)},this._native_startRendering()}.bind(this))})}},function(t,e,i){"use strict";e.a="13.8.25"},function(t,e,i){"use strict";i.r(e);var s=i(0);i(46);s.default.Midi=function(t,e){if(!(this instanceof s.default.Midi))return new s.default.Midi(t,e);s.default.Frequency.call(this,t,e)},s.default.extend(s.default.Midi,s.default.Frequency),s.default.Midi.prototype._defaultUnits="midi",s.default.Midi.prototype._frequencyToUnits=function(t){return s.default.Frequency.ftom(s.default.Frequency.prototype._frequencyToUnits.call(this,t))},s.default.Midi.prototype._ticksToUnits=function(t){return s.default.Frequency.ftom(s.default.Frequency.prototype._ticksToUnits.call(this,t))},s.default.Midi.prototype._beatsToUnits=function(t){return s.default.Frequency.ftom(s.default.Frequency.prototype._beatsToUnits.call(this,t))},s.default.Midi.prototype._secondsToUnits=function(t){return s.default.Frequency.ftom(s.default.Frequency.prototype._secondsToUnits.call(this,t))},s.default.Midi.prototype.toMidi=function(){return this.valueOf()},s.default.Midi.prototype.toFrequency=function(){return s.default.Frequency.mtof(this.toMidi())},s.default.Midi.prototype.transpose=function(t){return new this.constructor(this.toMidi()+t)},e.default=s.default.Midi},function(t,e,i){"use strict";i.r(e);var s=i(0);i(27),i(1);s.default.UserMedia=function(){var t=s.default.defaults(arguments,["volume"],s.default.UserMedia);s.default.AudioNode.call(this),this._mediaStream=null,this._stream=null,this._device=null,this._volume=this.output=new s.default.Volume(t.volume),this.volume=this._volume.volume,this._readOnly("volume"),this.mute=t.mute},s.default.extend(s.default.UserMedia,s.default.AudioNode),s.default.UserMedia.defaults={volume:0,mute:!1},s.default.UserMedia.prototype.open=function(t){return this.state===s.default.State.Started&&this.close(),s.default.UserMedia.enumerateDevices().then(function(e){var i;if(s.default.isNumber(t))i=e[t];else if(!(i=e.find(function(e){return e.label===t||e.deviceId===t}))&&e.length>0)i=e[0];else if(!i&&s.default.isDefined(t))throw new Error("Tone.UserMedia: no matching device: "+t);this._device=i;var n={audio:{echoCancellation:!1,sampleRate:this.context.sampleRate,noiseSuppression:!1,mozNoiseSuppression:!1}};return i&&(n.audio.deviceId=i.deviceId),navigator.mediaDevices.getUserMedia(n).then(function(t){return this._stream||(this._stream=t,this._mediaStream=this.context.createMediaStreamSource(t),s.default.connect(this._mediaStream,this.output)),this}.bind(this))}.bind(this))},s.default.UserMedia.prototype.close=function(){return this._stream&&(this._stream.getAudioTracks().forEach(function(t){t.stop()}),this._stream=null,this._mediaStream.disconnect(),this._mediaStream=null),this._device=null,this},s.default.UserMedia.enumerateDevices=function(){return navigator.mediaDevices.enumerateDevices().then(function(t){return t.filter(function(t){return"audioinput"===t.kind})})},Object.defineProperty(s.default.UserMedia.prototype,"state",{get:function(){return this._stream&&this._stream.active?s.default.State.Started:s.default.State.Stopped}}),Object.defineProperty(s.default.UserMedia.prototype,"deviceId",{get:function(){return this._device?this._device.deviceId:null}}),Object.defineProperty(s.default.UserMedia.prototype,"groupId",{get:function(){return this._device?this._device.groupId:null}}),Object.defineProperty(s.default.UserMedia.prototype,"label",{get:function(){return this._device?this._device.label:null}}),Object.defineProperty(s.default.UserMedia.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t}}),s.default.UserMedia.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this.close(),this._writable("volume"),this._volume.dispose(),this._volume=null,this.volume=null,this},Object.defineProperty(s.default.UserMedia,"supported",{get:function(){return s.default.isDefined(navigator.mediaDevices)&&s.default.isFunction(navigator.mediaDevices.getUserMedia)}}),e.default=s.default.UserMedia},function(t,e,i){"use strict";i.r(e);var s=i(0);i(65),i(27),i(1);s.default.Players=function(t){var e=Array.prototype.slice.call(arguments);e.shift();var i=s.default.defaults(e,["onload"],s.default.Players);for(var n in s.default.AudioNode.call(this,i),this._volume=this.output=new s.default.Volume(i.volume),this.volume=this._volume.volume,this._readOnly("volume"),this._volume.output.output.channelCount=2,this._volume.output.output.channelCountMode="explicit",this.mute=i.mute,this._players={},this._loadingCount=0,this._fadeIn=i.fadeIn,this._fadeOut=i.fadeOut,t)this._loadingCount++,this.add(n,t[n],this._bufferLoaded.bind(this,i.onload))},s.default.extend(s.default.Players,s.default.AudioNode),s.default.Players.defaults={volume:0,mute:!1,onload:s.default.noOp,fadeIn:0,fadeOut:0},s.default.Players.prototype._bufferLoaded=function(t){this._loadingCount--,0===this._loadingCount&&t&&t(this)},Object.defineProperty(s.default.Players.prototype,"mute",{get:function(){return this._volume.mute},set:function(t){this._volume.mute=t}}),Object.defineProperty(s.default.Players.prototype,"fadeIn",{get:function(){return this._fadeIn},set:function(t){this._fadeIn=t,this._forEach(function(e){e.fadeIn=t})}}),Object.defineProperty(s.default.Players.prototype,"fadeOut",{get:function(){return this._fadeOut},set:function(t){this._fadeOut=t,this._forEach(function(e){e.fadeOut=t})}}),Object.defineProperty(s.default.Players.prototype,"state",{get:function(){var t=!1;return this._forEach(function(e){t=t||e.state===s.default.State.Started}),t?s.default.State.Started:s.default.State.Stopped}}),s.default.Players.prototype.has=function(t){return this._players.hasOwnProperty(t)},s.default.Players.prototype.get=function(t){if(this.has(t))return this._players[t];throw new Error("Tone.Players: no player named "+t)},s.default.Players.prototype._forEach=function(t){for(var e in this._players)t(this._players[e],e);return this},Object.defineProperty(s.default.Players.prototype,"loaded",{get:function(){var t=!0;return this._forEach(function(e){t=t&&e.loaded}),t}}),s.default.Players.prototype.add=function(t,e,i){return this._players[t]=new s.default.Player(e,i).connect(this.output),this._players[t].fadeIn=this._fadeIn,this._players[t].fadeOut=this._fadeOut,this},s.default.Players.prototype.stopAll=function(t){this._forEach(function(e){e.stop(t)})},s.default.Players.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._volume.dispose(),this._volume=null,this._writable("volume"),this.volume=null,this.output=null,this._forEach(function(t){t.dispose()}),this._players=null,this},e.default=s.default.Players},function(t,e,i){"use strict";i.r(e);var s=i(0);i(6),i(11),i(32);s.default.GrainPlayer=function(){var t=s.default.defaults(arguments,["url","onload"],s.default.GrainPlayer);s.default.Source.call(this,t),this.buffer=new s.default.Buffer(t.url,t.onload.bind(void 0,this)),this._clock=new s.default.Clock(this._tick.bind(this),t.grainSize),this._loopStart=0,this._loopEnd=0,this._activeSources=[],this._playbackRate=t.playbackRate,this._grainSize=t.grainSize,this._overlap=t.overlap,this.detune=t.detune,this.overlap=t.overlap,this.loop=t.loop,this.playbackRate=t.playbackRate,this.grainSize=t.grainSize,this.loopStart=t.loopStart,this.loopEnd=t.loopEnd,this.reverse=t.reverse,this._clock.on("stop",this._onstop.bind(this))},s.default.extend(s.default.GrainPlayer,s.default.Source),s.default.GrainPlayer.defaults={onload:s.default.noOp,overlap:.1,grainSize:.2,playbackRate:1,detune:0,loop:!1,loopStart:0,loopEnd:0,reverse:!1},s.default.GrainPlayer.prototype._start=function(t,e,i){e=s.default.defaultArg(e,0),e=this.toSeconds(e),t=this.toSeconds(t),this._offset=e,this._clock.start(t),i&&this.stop(t+this.toSeconds(i))},s.default.GrainPlayer.prototype._stop=function(t){this._clock.stop(t)},s.default.GrainPlayer.prototype._onstop=function(t){this._activeSources.forEach(function(e){e.fadeOut=0,e.stop(t)})},s.default.GrainPlayer.prototype._tick=function(t){if(!this.loop&&this._offset>this.buffer.duration)this.stop(t);else{var e=this._offset<this._overlap?0:this._overlap,i=new s.default.BufferSource({buffer:this.buffer,fadeIn:e,fadeOut:this._overlap,loop:this.loop,loopStart:this._loopStart,loopEnd:this._loopEnd,playbackRate:s.default.intervalToFrequencyRatio(this.detune/100)}).connect(this.output);i.start(t,this._offset),this._offset+=this.grainSize,i.stop(t+this.grainSize/this.playbackRate),this._activeSources.push(i),i.onended=function(){var t=this._activeSources.indexOf(i);-1!==t&&this._activeSources.splice(t,1)}.bind(this)}},Object.defineProperty(s.default.GrainPlayer.prototype,"playbackRate",{get:function(){return this._playbackRate},set:function(t){this._playbackRate=t,this.grainSize=this._grainSize}}),Object.defineProperty(s.default.GrainPlayer.prototype,"loopStart",{get:function(){return this._loopStart},set:function(t){this._loopStart=this.toSeconds(t)}}),Object.defineProperty(s.default.GrainPlayer.prototype,"loopEnd",{get:function(){return this._loopEnd},set:function(t){this._loopEnd=this.toSeconds(t)}}),Object.defineProperty(s.default.GrainPlayer.prototype,"reverse",{get:function(){return this.buffer.reverse},set:function(t){this.buffer.reverse=t}}),Object.defineProperty(s.default.GrainPlayer.prototype,"grainSize",{get:function(){return this._grainSize},set:function(t){this._grainSize=this.toSeconds(t),this._clock.frequency.value=this._playbackRate/this._grainSize}}),Object.defineProperty(s.default.GrainPlayer.prototype,"overlap",{get:function(){return this._overlap},set:function(t){this._overlap=this.toSeconds(t)}}),Object.defineProperty(s.default.GrainPlayer.prototype,"loaded",{get:function(){return this.buffer.loaded}}),s.default.GrainPlayer.prototype.dispose=function(){return s.default.Source.prototype.dispose.call(this),this.buffer.dispose(),this.buffer=null,this._clock.dispose(),this._clock=null,this._activeSources.forEach(function(t){t.dispose()}),this._activeSources=null,this},e.default=s.default.GrainPlayer},function(t,e,i){"use strict";i.r(e);var s=i(0);i(16),i(2),i(45);s.default.TransportTimelineSignal=function(){s.default.Signal.apply(this,arguments),this.output=this._outputSig=new s.default.Signal(this._initialValue),this._lastVal=this.value,this._synced=s.default.Transport.scheduleRepeat(this._onTick.bind(this),"1i"),this._bindAnchorValue=this._anchorValue.bind(this),s.default.Transport.on("start stop pause",this._bindAnchorValue),this._events.memory=1/0},s.default.extend(s.default.TransportTimelineSignal,s.default.Signal),s.default.TransportTimelineSignal.prototype._onTick=function(t){var e=this.getValueAtTime(s.default.Transport.seconds);this._lastVal!==e&&(this._lastVal=e,this._outputSig.linearRampToValueAtTime(e,t))},s.default.TransportTimelineSignal.prototype._anchorValue=function(t){var e=this.getValueAtTime(s.default.Transport.seconds);return this._lastVal=e,this._outputSig.cancelScheduledValues(t),this._outputSig.setValueAtTime(e,t),this},s.default.TransportTimelineSignal.prototype.getValueAtTime=function(t){return t=s.default.TransportTime(t),s.default.Signal.prototype.getValueAtTime.call(this,t)},s.default.TransportTimelineSignal.prototype.setValueAtTime=function(t,e){return e=s.default.TransportTime(e),s.default.Signal.prototype.setValueAtTime.call(this,t,e),this},s.default.TransportTimelineSignal.prototype.linearRampToValueAtTime=function(t,e){return e=s.default.TransportTime(e),s.default.Signal.prototype.linearRampToValueAtTime.call(this,t,e),this},s.default.TransportTimelineSignal.prototype.exponentialRampToValueAtTime=function(t,e){return e=s.default.TransportTime(e),s.default.Signal.prototype.exponentialRampToValueAtTime.call(this,t,e),this},s.default.TransportTimelineSignal.prototype.setTargetAtTime=function(t,e,i){return e=s.default.TransportTime(e),s.default.Signal.prototype.setTargetAtTime.call(this,t,e,i),this},s.default.TransportTimelineSignal.prototype.cancelScheduledValues=function(t){return t=s.default.TransportTime(t),s.default.Signal.prototype.cancelScheduledValues.call(this,t),this},s.default.TransportTimelineSignal.prototype.setValueCurveAtTime=function(t,e,i,n){return e=s.default.TransportTime(e),i=s.default.TransportTime(i),s.default.Signal.prototype.setValueCurveAtTime.call(this,t,e,i,n),this},s.default.TransportTimelineSignal.prototype.cancelAndHoldAtTime=function(t){return s.default.Signal.prototype.cancelAndHoldAtTime.call(this,s.default.TransportTime(t))},s.default.TransportTimelineSignal.prototype.dispose=function(){s.default.Transport.clear(this._synced),s.default.Transport.off("start stop pause",this._syncedCallback),this._events.cancel(0),s.default.Signal.prototype.dispose.call(this),this._outputSig.dispose(),this._outputSig=null},e.default=s.default.TransportTimelineSignal},function(t,e,i){"use strict";i.r(e);var s=i(0);i(29),i(5);s.default.Normalize=function(t,e){s.default.SignalBase.call(this),this._inputMin=s.default.defaultArg(t,0),this._inputMax=s.default.defaultArg(e,1),this._sub=this.input=new s.default.Add(0),this._div=this.output=new s.default.Multiply(1),this._sub.connect(this._div),this._setRange()},s.default.extend(s.default.Normalize,s.default.SignalBase),Object.defineProperty(s.default.Normalize.prototype,"min",{get:function(){return this._inputMin},set:function(t){this._inputMin=t,this._setRange()}}),Object.defineProperty(s.default.Normalize.prototype,"max",{get:function(){return this._inputMax},set:function(t){this._inputMax=t,this._setRange()}}),s.default.Normalize.prototype._setRange=function(){this._sub.value=-this._inputMin,this._div.value=1/(this._inputMax-this._inputMin)},s.default.Normalize.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._sub.dispose(),this._sub=null,this._div.dispose(),this._div=null,this},e.default=s.default.Normalize},function(t,e,i){"use strict";i.r(e);var s=i(0);i(7),i(2);s.default.GainToAudio=function(){s.default.SignalBase.call(this),this._norm=this.input=this.output=new s.default.WaveShaper(function(t){return 2*Math.abs(t)-1})},s.default.extend(s.default.GainToAudio,s.default.SignalBase),s.default.GainToAudio.prototype.dispose=function(){return s.default.SignalBase.prototype.dispose.call(this),this._norm.dispose(),this._norm=null,this},e.default=s.default.GainToAudio},function(t,e,i){"use strict";i.r(e);var s=i(0);i(21),i(78),i(32);s.default.Sampler=function(t){var e=Array.prototype.slice.call(arguments);e.shift();var i=s.default.defaults(e,["onload","baseUrl"],s.default.Sampler);s.default.Instrument.call(this,i);var n={};for(var o in t)if(s.default.isNote(o)){n[s.default.Frequency(o).toMidi()]=t[o]}else{if(isNaN(parseFloat(o)))throw new Error("Tone.Sampler: url keys must be the note's pitch");n[o]=t[o]}this._buffers=new s.default.Buffers(n,i.onload,i.baseUrl),this._activeSources={},this.attack=i.attack,this.release=i.release,this.curve=i.curve},s.default.extend(s.default.Sampler,s.default.Instrument),s.default.Sampler.defaults={attack:0,release:.1,onload:s.default.noOp,baseUrl:"",curve:"exponential"},s.default.Sampler.prototype._findClosest=function(t){for(var e=0;e<96;){if(this._buffers.has(t+e))return-e;if(this._buffers.has(t-e))return e;e++}throw new Error("No available buffers for note: "+t)},s.default.Sampler.prototype.triggerAttack=function(t,e,i){this.log("triggerAttack",t,e,i),Array.isArray(t)||(t=[t]);for(var n=0;n<t.length;n++){var o=s.default.Frequency(t[n]).toMidi(),a=this._findClosest(o),r=o-a,l=this._buffers.get(r),u=s.default.intervalToFrequencyRatio(a),d=new s.default.BufferSource({buffer:l,playbackRate:u,fadeIn:this.attack,fadeOut:this.release,curve:this.curve}).connect(this.output);d.start(e,0,l.duration/u,i),s.default.isArray(this._activeSources[o])||(this._activeSources[o]=[]),this._activeSources[o].push(d),d.onended=function(){if(this._activeSources&&this._activeSources[o]){var t=this._activeSources[o].indexOf(d);-1!==t&&this._activeSources[o].splice(t,1)}}.bind(this)}return this},s.default.Sampler.prototype.triggerRelease=function(t,e){this.log("triggerRelease",t,e),Array.isArray(t)||(t=[t]);for(var i=0;i<t.length;i++){var n=s.default.Frequency(t[i]).toMidi();this._activeSources[n]&&this._activeSources[n].length&&(e=this.toSeconds(e),this._activeSources[n].forEach(function(t){t.stop(e)}),this._activeSources[n]=[])}return this},s.default.Sampler.prototype.releaseAll=function(t){for(var e in t=this.toSeconds(t),this._activeSources)for(var i=this._activeSources[e];i.length;){i.shift().stop(t)}return this},s.default.Sampler.prototype.sync=function(){return this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1),this},s.default.Sampler.prototype.triggerAttackRelease=function(t,e,i,n){if(i=this.toSeconds(i),this.triggerAttack(t,i,n),s.default.isArray(e)&&s.default.isArray(t))for(var o=0;o<t.length;o++){var a=e[Math.min(o,e.length-1)];this.triggerRelease(t[o],i+this.toSeconds(a))}else this.triggerRelease(t,i+this.toSeconds(e));return this},s.default.Sampler.prototype.add=function(t,e,i){if(s.default.isNote(t)){var n=s.default.Frequency(t).toMidi();this._buffers.add(n,e,i)}else{if(isNaN(parseFloat(t)))throw new Error("Tone.Sampler: note must be the note's pitch. Instead got "+t);this._buffers.add(t,e,i)}},Object.defineProperty(s.default.Sampler.prototype,"loaded",{get:function(){return this._buffers.loaded}}),s.default.Sampler.prototype.dispose=function(){for(var t in s.default.Instrument.prototype.dispose.call(this),this._buffers.dispose(),this._buffers=null,this._activeSources)this._activeSources[t].forEach(function(t){t.dispose()});return this._activeSources=null,this},e.default=s.default.Sampler},function(t,e,i){"use strict";i.r(e);var s=i(0);i(38),i(6);s.default.PolySynth=function(){var t=s.default.defaults(arguments,["polyphony","voice"],s.default.PolySynth);s.default.Instrument.call(this,t),(t=s.default.defaultArg(t,s.default.Instrument.defaults)).polyphony=Math.min(s.default.PolySynth.MAX_POLYPHONY,t.polyphony),this.voices=new Array(t.polyphony),this.assert(t.polyphony>0,"polyphony must be greater than 0"),this.detune=new s.default.Signal(t.detune,s.default.Type.Cents),this._readOnly("detune");for(var e=0;e<t.polyphony;e++){var i=new t.voice(arguments[2],arguments[3]);if(!(i instanceof s.default.Monophonic))throw new Error("Synth constructor must be instance of Tone.Monophonic");this.voices[e]=i,i.index=e,i.connect(this.output),i.hasOwnProperty("detune")&&this.detune.connect(i.detune)}},s.default.extend(s.default.PolySynth,s.default.Instrument),s.default.PolySynth.defaults={polyphony:4,volume:0,detune:0,voice:s.default.Synth},s.default.PolySynth.prototype._getClosestVoice=function(t,e){var i=this.voices.find(function(i){if(Math.abs(i.frequency.getValueAtTime(t)-s.default.Frequency(e))<1e-4&&i.getLevelAtTime(t)>1e-5)return i});return i||this.voices.slice().sort(function(e,i){var s=e.getLevelAtTime(t+this.blockTime),n=i.getLevelAtTime(t+this.blockTime);return s<1e-5&&(s=0),n<1e-5&&(n=0),s-n}.bind(this))[0]},s.default.PolySynth.prototype.triggerAttack=function(t,e,i){return Array.isArray(t)||(t=[t]),e=this.toSeconds(e),t.forEach(function(t){var s=this._getClosestVoice(e,t);s.triggerAttack(t,e,i),this.log("triggerAttack",s.index,t)}.bind(this)),this},s.default.PolySynth.prototype.triggerRelease=function(t,e){return Array.isArray(t)||(t=[t]),e=this.toSeconds(e),t.forEach(function(t){var i=this._getClosestVoice(e,t);this.log("triggerRelease",i.index,t),i.triggerRelease(e)}.bind(this)),this},s.default.PolySynth.prototype.triggerAttackRelease=function(t,e,i,n){if(i=this.toSeconds(i),this.triggerAttack(t,i,n),s.default.isArray(e)&&s.default.isArray(t))for(var o=0;o<t.length;o++){var a=e[Math.min(o,e.length-1)];this.triggerRelease(t[o],i+this.toSeconds(a))}else this.triggerRelease(t,i+this.toSeconds(e));return this},s.default.PolySynth.prototype.sync=function(){return this._syncMethod("triggerAttack",1),this._syncMethod("triggerRelease",1),this},s.default.PolySynth.prototype.set=function(t,e,i){for(var s=0;s<this.voices.length;s++)this.voices[s].set(t,e,i);return this},s.default.PolySynth.prototype.get=function(t){return this.voices[0].get(t)},s.default.PolySynth.prototype.releaseAll=function(t){return t=this.toSeconds(t),this.voices.forEach(function(e){e.triggerRelease(t)}),this},s.default.PolySynth.prototype.dispose=function(){return s.default.Instrument.prototype.dispose.call(this),this.voices.forEach(function(t){t.dispose()}),this._writable("detune"),this.detune.dispose(),this.detune=null,this.voices=null,this},s.default.PolySynth.MAX_POLYPHONY=20,e.default=s.default.PolySynth},function(t,e,i){"use strict";i.r(e);var s=i(0);i(21),i(39),i(54);s.default.PluckSynth=function(t){t=s.default.defaultArg(t,s.default.PluckSynth.defaults),s.default.Instrument.call(this,t),this._noise=new s.default.Noise("pink"),this.attackNoise=t.attackNoise,this._lfcf=new s.default.LowpassCombFilter({resonance:t.resonance,dampening:t.dampening}),this.resonance=this._lfcf.resonance,this.dampening=this._lfcf.dampening,this._noise.connect(this._lfcf),this._lfcf.connect(this.output),this._readOnly(["resonance","dampening"])},s.default.extend(s.default.PluckSynth,s.default.Instrument),s.default.PluckSynth.defaults={attackNoise:1,dampening:4e3,resonance:.7},s.default.PluckSynth.prototype.triggerAttack=function(t,e){t=this.toFrequency(t),e=this.toSeconds(e);var i=1/t;return this._lfcf.delayTime.setValueAtTime(i,e),this._noise.start(e),this._noise.stop(e+i*this.attackNoise),this},s.default.PluckSynth.prototype.dispose=function(){return s.default.Instrument.prototype.dispose.call(this),this._noise.dispose(),this._lfcf.dispose(),this._noise=null,this._lfcf=null,this._writable(["resonance","dampening"]),this.dampening=null,this.resonance=null,this},e.default=s.default.PluckSynth},function(t,e,i){"use strict";i.r(e);var s=i(0);i(31),i(41),i(39),i(2),i(9),i(21);s.default.NoiseSynth=function(t){t=s.default.defaultArg(t,s.default.NoiseSynth.defaults),s.default.Instrument.call(this,t),this.noise=new s.default.Noise(t.noise),this.envelope=new s.default.AmplitudeEnvelope(t.envelope),this.noise.chain(this.envelope,this.output),this._readOnly(["noise","envelope"])},s.default.extend(s.default.NoiseSynth,s.default.Instrument),s.default.NoiseSynth.defaults={noise:{type:"white"},envelope:{attack:.005,decay:.1,sustain:0}},s.default.NoiseSynth.prototype.triggerAttack=function(t,e){return t=this.toSeconds(t),this.envelope.triggerAttack(t,e),this.noise.start(t),0===this.envelope.sustain&&this.noise.stop(t+this.envelope.attack+this.envelope.decay),this},s.default.NoiseSynth.prototype.triggerRelease=function(t){return t=this.toSeconds(t),this.envelope.triggerRelease(t),this.noise.stop(t+this.envelope.release),this},s.default.NoiseSynth.prototype.sync=function(){return this._syncMethod("triggerAttack",0),this._syncMethod("triggerRelease",0),this},s.default.NoiseSynth.prototype.triggerAttackRelease=function(t,e,i){return e=this.toSeconds(e),t=this.toSeconds(t),this.triggerAttack(e,i),this.triggerRelease(e+t),this},s.default.NoiseSynth.prototype.dispose=function(){return s.default.Instrument.prototype.dispose.call(this),this._writable(["noise","envelope"]),this.noise.dispose(),this.noise=null,this.envelope.dispose(),this.envelope=null,this},e.default=s.default.NoiseSynth},function(t,e,i){"use strict";i.r(e);var s=i(0),n=(i(21),i(49),i(9),i(41),i(31),i(3),i(26),i(5),[1,1.483,1.932,2.546,2.63,3.897]);s.default.MetalSynth=function(t){t=s.default.defaultArg(t,s.default.MetalSynth.defaults),s.default.Instrument.call(this,t),this.frequency=new s.default.Signal(t.frequency,s.default.Type.Frequency),this._oscillators=[],this._freqMultipliers=[],this._amplitue=new s.default.Gain(0).connect(this.output),this._highpass=new s.default.Filter({type:"highpass",Q:-3.0102999566398125}).connect(this._amplitue),this._octaves=t.octaves,this._filterFreqScaler=new s.default.Scale(t.resonance,7e3),this.envelope=new s.default.Envelope({attack:t.envelope.attack,attackCurve:"linear",decay:t.envelope.decay,sustain:0,release:t.envelope.release}).chain(this._filterFreqScaler,this._highpass.frequency),this.envelope.connect(this._amplitue.gain);for(var e=0;e<n.length;e++){var i=new s.default.FMOscillator({type:"square",modulationType:"square",harmonicity:t.harmonicity,modulationIndex:t.modulationIndex});i.connect(this._highpass),this._oscillators[e]=i;var o=new s.default.Multiply(n[e]);this._freqMultipliers[e]=o,this.frequency.chain(o,i.frequency)}this.octaves=t.octaves},s.default.extend(s.default.MetalSynth,s.default.Instrument),s.default.MetalSynth.defaults={frequency:200,envelope:{attack:.001,decay:1.4,release:.2},harmonicity:5.1,modulationIndex:32,resonance:4e3,octaves:1.5},s.default.MetalSynth.prototype.triggerAttack=function(t,e){return t=this.toSeconds(t),e=s.default.defaultArg(e,1),this.envelope.triggerAttack(t,e),this._oscillators.forEach(function(e){e.start(t)}),0===this.envelope.sustain&&this._oscillators.forEach(function(e){e.stop(t+this.envelope.attack+this.envelope.decay)}.bind(this)),this},s.default.MetalSynth.prototype.triggerRelease=function(t){return t=this.toSeconds(t),this.envelope.triggerRelease(t),this._oscillators.forEach(function(e){e.stop(t+this.envelope.release)}.bind(this)),this},s.default.MetalSynth.prototype.sync=function(){return this._syncMethod("triggerAttack",0),this._syncMethod("triggerRelease",0),this},s.default.MetalSynth.prototype.triggerAttackRelease=function(t,e,i){return e=this.toSeconds(e),t=this.toSeconds(t),this.triggerAttack(e,i),this.triggerRelease(e+t),this},Object.defineProperty(s.default.MetalSynth.prototype,"modulationIndex",{get:function(){return this._oscillators[0].modulationIndex.value},set:function(t){for(var e=0;e<this._oscillators.length;e++)this._oscillators[e].modulationIndex.value=t}}),Object.defineProperty(s.default.MetalSynth.prototype,"harmonicity",{get:function(){return this._oscillators[0].harmonicity.value},set:function(t){for(var e=0;e<this._oscillators.length;e++)this._oscillators[e].harmonicity.value=t}}),Object.defineProperty(s.default.MetalSynth.prototype,"resonance",{get:function(){return this._filterFreqScaler.min},set:function(t){this._filterFreqScaler.min=t,this.octaves=this._octaves}}),Object.defineProperty(s.default.MetalSynth.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t,this._filterFreqScaler.max=this._filterFreqScaler.min*Math.pow(2,t)}}),s.default.MetalSynth.prototype.dispose=function(){s.default.Instrument.prototype.dispose.call(this);for(var t=0;t<this._oscillators.length;t++)this._oscillators[t].dispose(),this._freqMultipliers[t].dispose();this._oscillators=null,this._freqMultipliers=null,this.frequency.dispose(),this.frequency=null,this._filterFreqScaler.dispose(),this._filterFreqScaler=null,this._amplitue.dispose(),this._amplitue=null,this.envelope.dispose(),this.envelope=null,this._highpass.dispose(),this._highpass=null},e.default=s.default.MetalSynth},function(t,e,i){"use strict";i.r(e);var s=i(0);i(37),i(21),i(31);s.default.MembraneSynth=function(t){t=s.default.defaultArg(t,s.default.MembraneSynth.defaults),s.default.Instrument.call(this,t),this.oscillator=new s.default.OmniOscillator(t.oscillator),this.envelope=new s.default.AmplitudeEnvelope(t.envelope),this.octaves=t.octaves,this.pitchDecay=t.pitchDecay,this.oscillator.chain(this.envelope,this.output),this._readOnly(["oscillator","envelope"])},s.default.extend(s.default.MembraneSynth,s.default.Instrument),s.default.MembraneSynth.defaults={pitchDecay:.05,octaves:10,oscillator:{type:"sine"},envelope:{attack:.001,decay:.4,sustain:.01,release:1.4,attackCurve:"exponential"}},s.default.MembraneSynth.prototype.triggerAttack=function(t,e,i){e=this.toSeconds(e);var s=(t=this.toFrequency(t))*this.octaves;return this.oscillator.frequency.setValueAtTime(s,e),this.oscillator.frequency.exponentialRampToValueAtTime(t,e+this.toSeconds(this.pitchDecay)),this.envelope.triggerAttack(e,i),this.oscillator.start(e),0===this.envelope.sustain&&this.oscillator.stop(e+this.envelope.attack+this.envelope.decay),this},s.default.MembraneSynth.prototype.triggerRelease=function(t){return t=this.toSeconds(t),this.envelope.triggerRelease(t),this.oscillator.stop(t+this.envelope.release),this},s.default.MembraneSynth.prototype.dispose=function(){return s.default.Instrument.prototype.dispose.call(this),this._writable(["oscillator","envelope"]),this.oscillator.dispose(),this.oscillator=null,this.envelope.dispose(),this.envelope=null,this},e.default=s.default.MembraneSynth},function(t,e,i){"use strict";i.r(e);var s=i(0);i(38),i(2),i(5),i(25);s.default.FMSynth=function(t){t=s.default.defaultArg(t,s.default.FMSynth.defaults),s.default.Monophonic.call(this,t),this._carrier=new s.default.Synth(t.carrier),this._carrier.volume.value=-10,this.oscillator=this._carrier.oscillator,this.envelope=this._carrier.envelope.set(t.envelope),this._modulator=new s.default.Synth(t.modulator),this._modulator.volume.value=-10,this.modulation=this._modulator.oscillator.set(t.modulation),this.modulationEnvelope=this._modulator.envelope.set(t.modulationEnvelope),this.frequency=new s.default.Signal(440,s.default.Type.Frequency),this.detune=new s.default.Signal(t.detune,s.default.Type.Cents),this.harmonicity=new s.default.Multiply(t.harmonicity),this.harmonicity.units=s.default.Type.Positive,this.modulationIndex=new s.default.Multiply(t.modulationIndex),this.modulationIndex.units=s.default.Type.Positive,this._modulationNode=new s.default.Gain(0),this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.frequency.chain(this.modulationIndex,this._modulationNode),this.detune.fan(this._carrier.detune,this._modulator.detune),this._modulator.connect(this._modulationNode.gain),this._modulationNode.connect(this._carrier.frequency),this._carrier.connect(this.output),this._readOnly(["frequency","harmonicity","modulationIndex","oscillator","envelope","modulation","modulationEnvelope","detune"])},s.default.extend(s.default.FMSynth,s.default.Monophonic),s.default.FMSynth.defaults={harmonicity:3,modulationIndex:10,detune:0,oscillator:{type:"sine"},envelope:{attack:.01,decay:.01,sustain:1,release:.5},modulation:{type:"square"},modulationEnvelope:{attack:.5,decay:0,sustain:1,release:.5}},s.default.FMSynth.prototype._triggerEnvelopeAttack=function(t,e){return t=this.toSeconds(t),this._carrier._triggerEnvelopeAttack(t,e),this._modulator._triggerEnvelopeAttack(t),this},s.default.FMSynth.prototype._triggerEnvelopeRelease=function(t){return t=this.toSeconds(t),this._carrier._triggerEnvelopeRelease(t),this._modulator._triggerEnvelopeRelease(t),this},s.default.FMSynth.prototype.dispose=function(){return s.default.Monophonic.prototype.dispose.call(this),this._writable(["frequency","harmonicity","modulationIndex","oscillator","envelope","modulation","modulationEnvelope","detune"]),this._carrier.dispose(),this._carrier=null,this._modulator.dispose(),this._modulator=null,this.frequency.dispose(),this.frequency=null,this.detune.dispose(),this.detune=null,this.modulationIndex.dispose(),this.modulationIndex=null,this.harmonicity.dispose(),this.harmonicity=null,this._modulationNode.dispose(),this._modulationNode=null,this.oscillator=null,this.envelope=null,this.modulationEnvelope=null,this.modulation=null,this},e.default=s.default.FMSynth},function(t,e,i){"use strict";i.r(e);var s=i(0);i(66),i(12),i(2),i(5),i(25),i(14);s.default.DuoSynth=function(t){t=s.default.defaultArg(t,s.default.DuoSynth.defaults),s.default.Monophonic.call(this,t),this.voice0=new s.default.MonoSynth(t.voice0),this.voice0.volume.value=-10,this.voice1=new s.default.MonoSynth(t.voice1),this.voice1.volume.value=-10,this._vibrato=new s.default.LFO(t.vibratoRate,-50,50),this._vibrato.start(),this.vibratoRate=this._vibrato.frequency,this._vibratoGain=new s.default.Gain(t.vibratoAmount,s.default.Type.Positive),this.vibratoAmount=this._vibratoGain.gain,this.frequency=new s.default.Signal(440,s.default.Type.Frequency),this.harmonicity=new s.default.Multiply(t.harmonicity),this.harmonicity.units=s.default.Type.Positive,this.frequency.connect(this.voice0.frequency),this.frequency.chain(this.harmonicity,this.voice1.frequency),this._vibrato.connect(this._vibratoGain),this._vibratoGain.fan(this.voice0.detune,this.voice1.detune),this.voice0.connect(this.output),this.voice1.connect(this.output),this._readOnly(["voice0","voice1","frequency","vibratoAmount","vibratoRate"])},s.default.extend(s.default.DuoSynth,s.default.Monophonic),s.default.DuoSynth.defaults={vibratoAmount:.5,vibratoRate:5,harmonicity:1.5,voice0:{volume:-10,portamento:0,oscillator:{type:"sine"},filterEnvelope:{attack:.01,decay:0,sustain:1,release:.5},envelope:{attack:.01,decay:0,sustain:1,release:.5}},voice1:{volume:-10,portamento:0,oscillator:{type:"sine"},filterEnvelope:{attack:.01,decay:0,sustain:1,release:.5},envelope:{attack:.01,decay:0,sustain:1,release:.5}}},s.default.DuoSynth.prototype._triggerEnvelopeAttack=function(t,e){return t=this.toSeconds(t),this.voice0._triggerEnvelopeAttack(t,e),this.voice1._triggerEnvelopeAttack(t,e),this},s.default.DuoSynth.prototype._triggerEnvelopeRelease=function(t){return this.voice0._triggerEnvelopeRelease(t),this.voice1._triggerEnvelopeRelease(t),this},s.default.DuoSynth.prototype.getLevelAtTime=function(t){return(this.voice0.getLevelAtTime(t)+this.voice1.getLevelAtTime(t))/2},s.default.DuoSynth.prototype.dispose=function(){return s.default.Monophonic.prototype.dispose.call(this),this._writable(["voice0","voice1","frequency","vibratoAmount","vibratoRate"]),this.voice0.dispose(),this.voice0=null,this.voice1.dispose(),this.voice1=null,this.frequency.dispose(),this.frequency=null,this._vibratoGain.dispose(),this._vibratoGain=null,this._vibrato=null,this.harmonicity.dispose(),this.harmonicity=null,this.vibratoAmount.dispose(),this.vibratoAmount=null,this.vibratoRate=null,this},e.default=s.default.DuoSynth},function(t,e,i){"use strict";i.r(e);var s=i(0);i(38),i(2),i(5),i(25),i(22),i(3);s.default.AMSynth=function(t){t=s.default.defaultArg(t,s.default.AMSynth.defaults),s.default.Monophonic.call(this,t),this._carrier=new s.default.Synth,this._carrier.volume.value=-10,this.oscillator=this._carrier.oscillator.set(t.oscillator),this.envelope=this._carrier.envelope.set(t.envelope),this._modulator=new s.default.Synth,this._modulator.volume.value=-10,this.modulation=this._modulator.oscillator.set(t.modulation),this.modulationEnvelope=this._modulator.envelope.set(t.modulationEnvelope),this.frequency=new s.default.Signal(440,s.default.Type.Frequency),this.detune=new s.default.Signal(t.detune,s.default.Type.Cents),this.harmonicity=new s.default.Multiply(t.harmonicity),this.harmonicity.units=s.default.Type.Positive,this._modulationScale=new s.default.AudioToGain,this._modulationNode=new s.default.Gain,this.frequency.connect(this._carrier.frequency),this.frequency.chain(this.harmonicity,this._modulator.frequency),this.detune.fan(this._carrier.detune,this._modulator.detune),this._modulator.chain(this._modulationScale,this._modulationNode.gain),this._carrier.chain(this._modulationNode,this.output),this._readOnly(["frequency","harmonicity","oscillator","envelope","modulation","modulationEnvelope","detune"])},s.default.extend(s.default.AMSynth,s.default.Monophonic),s.default.AMSynth.defaults={harmonicity:3,detune:0,oscillator:{type:"sine"},envelope:{attack:.01,decay:.01,sustain:1,release:.5},modulation:{type:"square"},modulationEnvelope:{attack:.5,decay:0,sustain:1,release:.5}},s.default.AMSynth.prototype._triggerEnvelopeAttack=function(t,e){return t=this.toSeconds(t),this._carrier._triggerEnvelopeAttack(t,e),this._modulator._triggerEnvelopeAttack(t),this},s.default.AMSynth.prototype._triggerEnvelopeRelease=function(t){return this._carrier._triggerEnvelopeRelease(t),this._modulator._triggerEnvelopeRelease(t),this},s.default.AMSynth.prototype.dispose=function(){return s.default.Monophonic.prototype.dispose.call(this),this._writable(["frequency","harmonicity","oscillator","envelope","modulation","modulationEnvelope","detune"]),this._carrier.dispose(),this._carrier=null,this._modulator.dispose(),this._modulator=null,this.frequency.dispose(),this.frequency=null,this.detune.dispose(),this.detune=null,this.harmonicity.dispose(),this.harmonicity=null,this._modulationScale.dispose(),this._modulationScale=null,this._modulationNode.dispose(),this._modulationNode=null,this.oscillator=null,this.envelope=null,this.modulationEnvelope=null,this.modulation=null,this},e.default=s.default.AMSynth},function(t,e,i){"use strict";i.r(e);var s=i(0);i(70),i(16);s.default.Sequence=function(){var t=s.default.defaults(arguments,["callback","events","subdivision"],s.default.Sequence),e=t.events;if(delete t.events,s.default.Part.call(this,t),this._subdivision=this.toTicks(t.subdivision),s.default.isUndef(t.loopEnd)&&s.default.isDefined(e)&&(this._loopEnd=e.length*this._subdivision),this._loop=!0,s.default.isDefined(e))for(var i=0;i<e.length;i++)this.add(i,e[i])},s.default.extend(s.default.Sequence,s.default.Part),s.default.Sequence.defaults={subdivision:"4n"},Object.defineProperty(s.default.Sequence.prototype,"subdivision",{get:function(){return s.default.Ticks(this._subdivision).toSeconds()}}),s.default.Sequence.prototype.at=function(t,e){return s.default.isArray(e)&&this.remove(t),s.default.Part.prototype.at.call(this,this._indexTime(t),e)},s.default.Sequence.prototype.add=function(t,e){if(null===e)return this;if(s.default.isArray(e)){var i=Math.round(this._subdivision/e.length);e=new s.default.Sequence(this._tick.bind(this),e,s.default.Ticks(i))}return s.default.Part.prototype.add.call(this,this._indexTime(t),e),this},s.default.Sequence.prototype.remove=function(t,e){return s.default.Part.prototype.remove.call(this,this._indexTime(t),e),this},s.default.Sequence.prototype._indexTime=function(t){return t instanceof s.default.TransportTime?t:s.default.Ticks(t*this._subdivision+this.startOffset).toSeconds()},s.default.Sequence.prototype.dispose=function(){return s.default.Part.prototype.dispose.call(this),this},e.default=s.default.Sequence},function(t,e,i){"use strict";i.r(e);var s=i(0);i(71),i(79);s.default.Pattern=function(){var t=s.default.defaults(arguments,["callback","values","pattern"],s.default.Pattern);s.default.Loop.call(this,t),this._pattern=new s.default.CtrlPattern({values:t.values,type:t.pattern,index:t.index})},s.default.extend(s.default.Pattern,s.default.Loop),s.default.Pattern.defaults={pattern:s.default.CtrlPattern.Type.Up,callback:s.default.noOp,values:[]},s.default.Pattern.prototype._tick=function(t){this.callback(t,this._pattern.value),this._pattern.next()},Object.defineProperty(s.default.Pattern.prototype,"index",{get:function(){return this._pattern.index},set:function(t){this._pattern.index=t}}),Object.defineProperty(s.default.Pattern.prototype,"values",{get:function(){return this._pattern.values},set:function(t){this._pattern.values=t}}),Object.defineProperty(s.default.Pattern.prototype,"value",{get:function(){return this._pattern.value}}),Object.defineProperty(s.default.Pattern.prototype,"pattern",{get:function(){return this._pattern.type},set:function(t){this._pattern.type=t}}),s.default.Pattern.prototype.dispose=function(){s.default.Loop.prototype.dispose.call(this),this._pattern.dispose(),this._pattern=null},e.default=s.default.Pattern},function(t,e,i){"use strict";i.r(e);var s=i(0);i(8),i(18),i(12);s.default.Vibrato=function(){var t=s.default.defaults(arguments,["frequency","depth"],s.default.Vibrato);s.default.Effect.call(this,t),this._delayNode=new s.default.Delay(0,t.maxDelay),this._lfo=new s.default.LFO({type:t.type,min:0,max:t.maxDelay,frequency:t.frequency,phase:-90}).start().connect(this._delayNode.delayTime),this.frequency=this._lfo.frequency,this.depth=this._lfo.amplitude,this.depth.value=t.depth,this._readOnly(["frequency","depth"]),this.effectSend.chain(this._delayNode,this.effectReturn)},s.default.extend(s.default.Vibrato,s.default.Effect),s.default.Vibrato.defaults={maxDelay:.005,frequency:5,depth:.1,type:"sine"},Object.defineProperty(s.default.Vibrato.prototype,"type",{get:function(){return this._lfo.type},set:function(t){this._lfo.type=t}}),s.default.Vibrato.prototype.dispose=function(){s.default.Effect.prototype.dispose.call(this),this._delayNode.dispose(),this._delayNode=null,this._lfo.dispose(),this._lfo=null,this._writable(["frequency","depth"]),this.frequency=null,this.depth=null},e.default=s.default.Vibrato},function(t,e,i){"use strict";i.r(e);var s=i(0);i(12),i(15);s.default.Tremolo=function(){var t=s.default.defaults(arguments,["frequency","depth"],s.default.Tremolo);s.default.StereoEffect.call(this,t),this._lfoL=new s.default.LFO({phase:t.spread,min:1,max:0}),this._lfoR=new s.default.LFO({phase:t.spread,min:1,max:0}),this._amplitudeL=new s.default.Gain,this._amplitudeR=new s.default.Gain,this.frequency=new s.default.Signal(t.frequency,s.default.Type.Frequency),this.depth=new s.default.Signal(t.depth,s.default.Type.NormalRange),this._readOnly(["frequency","depth"]),this.effectSendL.chain(this._amplitudeL,this.effectReturnL),this.effectSendR.chain(this._amplitudeR,this.effectReturnR),this._lfoL.connect(this._amplitudeL.gain),this._lfoR.connect(this._amplitudeR.gain),this.frequency.fan(this._lfoL.frequency,this._lfoR.frequency),this.depth.fan(this._lfoR.amplitude,this._lfoL.amplitude),this.type=t.type,this.spread=t.spread},s.default.extend(s.default.Tremolo,s.default.StereoEffect),s.default.Tremolo.defaults={frequency:10,type:"sine",depth:.5,spread:180},s.default.Tremolo.prototype.start=function(t){return this._lfoL.start(t),this._lfoR.start(t),this},s.default.Tremolo.prototype.stop=function(t){return this._lfoL.stop(t),this._lfoR.stop(t),this},s.default.Tremolo.prototype.sync=function(t){return this._lfoL.sync(t),this._lfoR.sync(t),s.default.Transport.syncSignal(this.frequency),this},s.default.Tremolo.prototype.unsync=function(){return this._lfoL.unsync(),this._lfoR.unsync(),s.default.Transport.unsyncSignal(this.frequency),this},Object.defineProperty(s.default.Tremolo.prototype,"type",{get:function(){return this._lfoL.type},set:function(t){this._lfoL.type=t,this._lfoR.type=t}}),Object.defineProperty(s.default.Tremolo.prototype,"spread",{get:function(){return this._lfoR.phase-this._lfoL.phase},set:function(t){this._lfoL.phase=90-t/2,this._lfoR.phase=t/2+90}}),s.default.Tremolo.prototype.dispose=function(){return s.default.StereoEffect.prototype.dispose.call(this),this._writable(["frequency","depth"]),this._lfoL.dispose(),this._lfoL=null,this._lfoR.dispose(),this._lfoR=null,this._amplitudeL.dispose(),this._amplitudeL=null,this._amplitudeR.dispose(),this._amplitudeR=null,this.frequency=null,this.depth=null,this},e.default=s.default.Tremolo},function(t,e,i){"use strict";i.r(e);var s=i(0);i(73),i(2),i(5),i(13);s.default.StereoWidener=function(){var t=s.default.defaults(arguments,["width"],s.default.StereoWidener);s.default.MidSideEffect.call(this,t),this.width=new s.default.Signal(t.width,s.default.Type.NormalRange),this._readOnly(["width"]),this._twoTimesWidthMid=new s.default.Multiply(2),this._twoTimesWidthSide=new s.default.Multiply(2),this._midMult=new s.default.Multiply,this._twoTimesWidthMid.connect(this._midMult,0,1),this.midSend.chain(this._midMult,this.midReturn),this._oneMinusWidth=new s.default.Subtract,this._oneMinusWidth.connect(this._twoTimesWidthMid),s.default.connect(this.context.getConstant(1),this._oneMinusWidth,0,0),this.width.connect(this._oneMinusWidth,0,1),this._sideMult=new s.default.Multiply,this.width.connect(this._twoTimesWidthSide),this._twoTimesWidthSide.connect(this._sideMult,0,1),this.sideSend.chain(this._sideMult,this.sideReturn)},s.default.extend(s.default.StereoWidener,s.default.MidSideEffect),s.default.StereoWidener.defaults={width:.5},s.default.StereoWidener.prototype.dispose=function(){return s.default.MidSideEffect.prototype.dispose.call(this),this._writable(["width"]),this.width.dispose(),this.width=null,this._midMult.dispose(),this._midMult=null,this._sideMult.dispose(),this._sideMult=null,this._twoTimesWidthMid.dispose(),this._twoTimesWidthMid=null,this._twoTimesWidthSide.dispose(),this._twoTimesWidthSide=null,this._oneMinusWidth.dispose(),this._oneMinusWidth=null,this},e.default=s.default.StereoWidener},function(t,e,i){"use strict";i.r(e);var s=i(0);i(15),i(33),i(3);s.default.StereoFeedbackEffect=function(){var t=s.default.defaults(arguments,["feedback"],s.default.FeedbackEffect);s.default.StereoEffect.call(this,t),this.feedback=new s.default.Signal(t.feedback,s.default.Type.NormalRange),this._feedbackL=new s.default.Gain,this._feedbackR=new s.default.Gain,this.effectReturnL.chain(this._feedbackL,this.effectSendL),this.effectReturnR.chain(this._feedbackR,this.effectSendR),this.feedback.fan(this._feedbackL.gain,this._feedbackR.gain),this._readOnly(["feedback"])},s.default.extend(s.default.StereoFeedbackEffect,s.default.StereoEffect),s.default.StereoFeedbackEffect.prototype.dispose=function(){return s.default.StereoEffect.prototype.dispose.call(this),this._writable(["feedback"]),this.feedback.dispose(),this.feedback=null,this._feedbackL.dispose(),this._feedbackL=null,this._feedbackR.dispose(),this._feedbackR=null,this},e.default=s.default.StereoFeedbackEffect},function(t,e,i){"use strict";i.r(e);var s=i(0);i(77),i(9),i(10),i(39),i(3),i(74);s.default.Reverb=function(){var t=s.default.defaults(arguments,["decay"],s.default.Reverb);s.default.Effect.call(this,t),this._convolver=this.context.createConvolver(),this.decay=t.decay,this.preDelay=t.preDelay,this.connectEffect(this._convolver)},s.default.extend(s.default.Reverb,s.default.Effect),s.default.Reverb.defaults={decay:1.5,preDelay:.01},s.default.Reverb.prototype.generate=function(){return s.default.Offline(function(){var t=new s.default.Noise,e=new s.default.Noise,i=new s.default.Merge;t.connect(i.left),e.connect(i.right);var n=(new s.default.Gain).toMaster();i.connect(n),t.start(0),e.start(0),n.gain.setValueAtTime(0,0),n.gain.setValueAtTime(1,this.preDelay),n.gain.exponentialApproachValueAtTime(0,this.preDelay,this.decay+this.preDelay)}.bind(this),this.decay+this.preDelay).then(function(t){return this._convolver.buffer=t.get(),this}.bind(this))},s.default.Reverb.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._convolver.disconnect(),this._convolver=null,this},e.default=s.default.Reverb},function(t,e,i){"use strict";i.r(e);var s=i(0);i(12),i(23),i(2),i(33),i(18);s.default.PitchShift=function(){var t=s.default.defaults(arguments,["pitch"],s.default.PitchShift);s.default.FeedbackEffect.call(this,t),this._frequency=new s.default.Signal(0),this._delayA=new s.default.Delay(0,1),this._lfoA=new s.default.LFO({min:0,max:.1,type:"sawtooth"}).connect(this._delayA.delayTime),this._delayB=new s.default.Delay(0,1),this._lfoB=new s.default.LFO({min:0,max:.1,type:"sawtooth",phase:180}).connect(this._delayB.delayTime),this._crossFade=new s.default.CrossFade,this._crossFadeLFO=new s.default.LFO({min:0,max:1,type:"triangle",phase:90}).connect(this._crossFade.fade),this._feedbackDelay=new s.default.Delay(t.delayTime),this.delayTime=this._feedbackDelay.delayTime,this._readOnly("delayTime"),this._pitch=t.pitch,this._windowSize=t.windowSize,this._delayA.connect(this._crossFade.a),this._delayB.connect(this._crossFade.b),this._frequency.fan(this._lfoA.frequency,this._lfoB.frequency,this._crossFadeLFO.frequency),this.effectSend.fan(this._delayA,this._delayB),this._crossFade.chain(this._feedbackDelay,this.effectReturn);var e=this.now();this._lfoA.start(e),this._lfoB.start(e),this._crossFadeLFO.start(e),this.windowSize=this._windowSize},s.default.extend(s.default.PitchShift,s.default.FeedbackEffect),s.default.PitchShift.defaults={pitch:0,windowSize:.1,delayTime:0,feedback:0},Object.defineProperty(s.default.PitchShift.prototype,"pitch",{get:function(){return this._pitch},set:function(t){this._pitch=t;var e=0;t<0?(this._lfoA.min=0,this._lfoA.max=this._windowSize,this._lfoB.min=0,this._lfoB.max=this._windowSize,e=s.default.intervalToFrequencyRatio(t-1)+1):(this._lfoA.min=this._windowSize,this._lfoA.max=0,this._lfoB.min=this._windowSize,this._lfoB.max=0,e=s.default.intervalToFrequencyRatio(t)-1),this._frequency.value=e*(1.2/this._windowSize)}}),Object.defineProperty(s.default.PitchShift.prototype,"windowSize",{get:function(){return this._windowSize},set:function(t){this._windowSize=this.toSeconds(t),this.pitch=this._pitch}}),s.default.PitchShift.prototype.dispose=function(){return s.default.FeedbackEffect.prototype.dispose.call(this),this._frequency.dispose(),this._frequency=null,this._delayA.disconnect(),this._delayA=null,this._delayB.disconnect(),this._delayB=null,this._lfoA.dispose(),this._lfoA=null,this._lfoB.dispose(),this._lfoB=null,this._crossFade.dispose(),this._crossFade=null,this._crossFadeLFO.dispose(),this._crossFadeLFO=null,this._writable("delayTime"),this._feedbackDelay.dispose(),this._feedbackDelay=null,this.delayTime=null,this},e.default=s.default.PitchShift},function(t,e,i){"use strict";i.r(e);var s=i(0);i(72),i(2),i(18);s.default.PingPongDelay=function(){var t=s.default.defaults(arguments,["delayTime","feedback"],s.default.PingPongDelay);s.default.StereoXFeedbackEffect.call(this,t),this._leftDelay=new s.default.Delay(0,t.maxDelayTime),this._rightDelay=new s.default.Delay(0,t.maxDelayTime),this._rightPreDelay=new s.default.Delay(0,t.maxDelayTime),this.delayTime=new s.default.Signal(t.delayTime,s.default.Type.Time),this.effectSendL.chain(this._leftDelay,this.effectReturnL),this.effectSendR.chain(this._rightPreDelay,this._rightDelay,this.effectReturnR),this.delayTime.fan(this._leftDelay.delayTime,this._rightDelay.delayTime,this._rightPreDelay.delayTime),this._feedbackLR.disconnect(),this._feedbackLR.connect(this._rightDelay),this._readOnly(["delayTime"])},s.default.extend(s.default.PingPongDelay,s.default.StereoXFeedbackEffect),s.default.PingPongDelay.defaults={delayTime:.25,maxDelayTime:1},s.default.PingPongDelay.prototype.dispose=function(){return s.default.StereoXFeedbackEffect.prototype.dispose.call(this),this._leftDelay.dispose(),this._leftDelay=null,this._rightDelay.dispose(),this._rightDelay=null,this._rightPreDelay.dispose(),this._rightPreDelay=null,this._writable(["delayTime"]),this.delayTime.dispose(),this.delayTime=null,this},e.default=s.default.PingPongDelay},function(t,e,i){"use strict";i.r(e);var s=i(0);i(12),i(9),i(15);s.default.Phaser=function(){var t=s.default.defaults(arguments,["frequency","octaves","baseFrequency"],s.default.Phaser);s.default.StereoEffect.call(this,t),this._lfoL=new s.default.LFO(t.frequency,0,1),this._lfoR=new s.default.LFO(t.frequency,0,1),this._lfoR.phase=180,this._baseFrequency=t.baseFrequency,this._octaves=t.octaves,this.Q=new s.default.Signal(t.Q,s.default.Type.Positive),this._filtersL=this._makeFilters(t.stages,this._lfoL,this.Q),this._filtersR=this._makeFilters(t.stages,this._lfoR,this.Q),this.frequency=this._lfoL.frequency,this.frequency.value=t.frequency,this.effectSendL.connect(this._filtersL[0]),this.effectSendR.connect(this._filtersR[0]),s.default.connect(this._filtersL[t.stages-1],this.effectReturnL),s.default.connect(this._filtersR[t.stages-1],this.effectReturnR),this._lfoL.frequency.connect(this._lfoR.frequency),this.baseFrequency=t.baseFrequency,this.octaves=t.octaves,this._lfoL.start(),this._lfoR.start(),this._readOnly(["frequency","Q"])},s.default.extend(s.default.Phaser,s.default.StereoEffect),s.default.Phaser.defaults={frequency:.5,octaves:3,stages:10,Q:10,baseFrequency:350},s.default.Phaser.prototype._makeFilters=function(t,e,i){for(var n=new Array(t),o=0;o<t;o++){var a=this.context.createBiquadFilter();a.type="allpass",i.connect(a.Q),e.connect(a.frequency),n[o]=a}return s.default.connectSeries.apply(s.default,n),n},Object.defineProperty(s.default.Phaser.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t;var e=this._baseFrequency*Math.pow(2,t);this._lfoL.max=e,this._lfoR.max=e}}),Object.defineProperty(s.default.Phaser.prototype,"baseFrequency",{get:function(){return this._baseFrequency},set:function(t){this._baseFrequency=t,this._lfoL.min=t,this._lfoR.min=t,this.octaves=this._octaves}}),s.default.Phaser.prototype.dispose=function(){s.default.StereoEffect.prototype.dispose.call(this),this._writable(["frequency","Q"]),this.Q.dispose(),this.Q=null,this._lfoL.dispose(),this._lfoL=null,this._lfoR.dispose(),this._lfoR=null;for(var t=0;t<this._filtersL.length;t++)this._filtersL[t].disconnect(),this._filtersL[t]=null;this._filtersL=null;for(var e=0;e<this._filtersR.length;e++)this._filtersR[e].disconnect(),this._filtersR[e]=null;return this._filtersR=null,this.frequency=null,this},e.default=s.default.Phaser},function(t,e,i){"use strict";i.r(e);var s=i(0),n=(i(59),i(15),i(26),[.06748,.06404,.08212,.09004]),o=[.773,.802,.753,.733],a=[347,113,37];s.default.JCReverb=function(){var t=s.default.defaults(arguments,["roomSize"],s.default.JCReverb);s.default.StereoEffect.call(this,t),this.roomSize=new s.default.Signal(t.roomSize,s.default.Type.NormalRange),this._scaleRoomSize=new s.default.Scale(-.733,.197),this._allpassFilters=[],this._feedbackCombFilters=[];for(var e=0;e<a.length;e++){var i=this.context.createBiquadFilter();i.type="allpass",i.frequency.value=a[e],this._allpassFilters.push(i)}for(var r=0;r<n.length;r++){var l=new s.default.FeedbackCombFilter(n[r],.1);this._scaleRoomSize.connect(l.resonance),l.resonance.value=o[r],s.default.connect(this._allpassFilters[this._allpassFilters.length-1],l),r<n.length/2?l.connect(this.effectReturnL):l.connect(this.effectReturnR),this._feedbackCombFilters.push(l)}this.roomSize.connect(this._scaleRoomSize),s.default.connectSeries.apply(s.default,this._allpassFilters),this.effectSendL.connect(this._allpassFilters[0]),this.effectSendR.connect(this._allpassFilters[0]),this._readOnly(["roomSize"])},s.default.extend(s.default.JCReverb,s.default.StereoEffect),s.default.JCReverb.defaults={roomSize:.5},s.default.JCReverb.prototype.dispose=function(){s.default.StereoEffect.prototype.dispose.call(this);for(var t=0;t<this._allpassFilters.length;t++)this._allpassFilters[t].disconnect(),this._allpassFilters[t]=null;this._allpassFilters=null;for(var e=0;e<this._feedbackCombFilters.length;e++)this._feedbackCombFilters[e].dispose(),this._feedbackCombFilters[e]=null;return this._feedbackCombFilters=null,this._writable(["roomSize"]),this.roomSize.dispose(),this.roomSize=null,this._scaleRoomSize.dispose(),this._scaleRoomSize=null,this},e.default=s.default.JCReverb},function(t,e,i){"use strict";i.r(e);var s=i(0),n=(i(54),i(15),i(2),i(19),i(10),i(42),[1557/44100,1617/44100,1491/44100,1422/44100,1277/44100,1356/44100,1188/44100,1116/44100]),o=[225,556,441,341];s.default.Freeverb=function(){var t=s.default.defaults(arguments,["roomSize","dampening"],s.default.Freeverb);s.default.StereoEffect.call(this,t),this.roomSize=new s.default.Signal(t.roomSize,s.default.Type.NormalRange),this.dampening=new s.default.Signal(t.dampening,s.default.Type.Frequency),this._combFilters=[],this._allpassFiltersL=[],this._allpassFiltersR=[];for(var e=0;e<o.length;e++){var i=this.context.createBiquadFilter();i.type="allpass",i.frequency.value=o[e],this._allpassFiltersL.push(i)}for(var a=0;a<o.length;a++){var r=this.context.createBiquadFilter();r.type="allpass",r.frequency.value=o[a],this._allpassFiltersR.push(r)}for(var l=0;l<n.length;l++){var u=new s.default.LowpassCombFilter(n[l]);l<n.length/2?this.effectSendL.chain(u,this._allpassFiltersL[0]):this.effectSendR.chain(u,this._allpassFiltersR[0]),this.roomSize.connect(u.resonance),this.dampening.connect(u.dampening),this._combFilters.push(u)}s.default.connectSeries.apply(s.default,this._allpassFiltersL),s.default.connectSeries.apply(s.default,this._allpassFiltersR),s.default.connect(this._allpassFiltersL[this._allpassFiltersL.length-1],this.effectReturnL),s.default.connect(this._allpassFiltersR[this._allpassFiltersR.length-1],this.effectReturnR),this._readOnly(["roomSize","dampening"])},s.default.extend(s.default.Freeverb,s.default.StereoEffect),s.default.Freeverb.defaults={roomSize:.7,dampening:3e3},s.default.Freeverb.prototype.dispose=function(){s.default.StereoEffect.prototype.dispose.call(this);for(var t=0;t<this._allpassFiltersL.length;t++)this._allpassFiltersL[t].disconnect(),this._allpassFiltersL[t]=null;this._allpassFiltersL=null;for(var e=0;e<this._allpassFiltersR.length;e++)this._allpassFiltersR[e].disconnect(),this._allpassFiltersR[e]=null;this._allpassFiltersR=null;for(var i=0;i<this._combFilters.length;i++)this._combFilters[i].dispose(),this._combFilters[i]=null;return this._combFilters=null,this._writable(["roomSize","dampening"]),this.roomSize.dispose(),this.roomSize=null,this.dampening.dispose(),this.dampening=null,this},e.default=s.default.Freeverb},function(t,e,i){"use strict";i.r(e);var s=i(0);i(33),i(2),i(18);s.default.FeedbackDelay=function(){var t=s.default.defaults(arguments,["delayTime","feedback"],s.default.FeedbackDelay);s.default.FeedbackEffect.call(this,t),this._delayNode=new s.default.Delay(t.delayTime,t.maxDelay),this.delayTime=this._delayNode.delayTime,this.connectEffect(this._delayNode),this._readOnly(["delayTime"])},s.default.extend(s.default.FeedbackDelay,s.default.FeedbackEffect),s.default.FeedbackDelay.defaults={delayTime:.25,maxDelay:1},s.default.FeedbackDelay.prototype.dispose=function(){return s.default.FeedbackEffect.prototype.dispose.call(this),this._delayNode.dispose(),this._delayNode=null,this._writable(["delayTime"]),this.delayTime=null,this},e.default=s.default.FeedbackDelay},function(t,e,i){"use strict";i.r(e);var s=i(0);i(8),i(7);s.default.Distortion=function(){var t=s.default.defaults(arguments,["distortion"],s.default.Distortion);s.default.Effect.call(this,t),this._shaper=new s.default.WaveShaper(4096),this._distortion=t.distortion,this.connectEffect(this._shaper),this.distortion=t.distortion,this.oversample=t.oversample},s.default.extend(s.default.Distortion,s.default.Effect),s.default.Distortion.defaults={distortion:.4,oversample:"none"},Object.defineProperty(s.default.Distortion.prototype,"distortion",{get:function(){return this._distortion},set:function(t){this._distortion=t;var e=100*t,i=Math.PI/180;this._shaper.setMap(function(t){return Math.abs(t)<.001?0:(3+e)*t*20*i/(Math.PI+e*Math.abs(t))})}}),Object.defineProperty(s.default.Distortion.prototype,"oversample",{get:function(){return this._shaper.oversample},set:function(t){this._shaper.oversample=t}}),s.default.Distortion.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._shaper.dispose(),this._shaper=null,this},e.default=s.default.Distortion},function(t,e,i){"use strict";i.r(e);var s=i(0);i(12),i(15),i(18);s.default.Chorus=function(){var t=s.default.defaults(arguments,["frequency","delayTime","depth"],s.default.Chorus);s.default.StereoEffect.call(this,t),this._depth=t.depth,this._delayTime=t.delayTime/1e3,this._lfoL=new s.default.LFO({frequency:t.frequency,min:0,max:1}),this._lfoR=new s.default.LFO({frequency:t.frequency,min:0,max:1,phase:180}),this._delayNodeL=new s.default.Delay,this._delayNodeR=new s.default.Delay,this.frequency=this._lfoL.frequency,this.effectSendL.chain(this._delayNodeL,this.effectReturnL),this.effectSendR.chain(this._delayNodeR,this.effectReturnR),this.effectSendL.connect(this.effectReturnL),this.effectSendR.connect(this.effectReturnR),this._lfoL.connect(this._delayNodeL.delayTime),this._lfoR.connect(this._delayNodeR.delayTime),this._lfoL.start(),this._lfoR.start(),this._lfoL.frequency.connect(this._lfoR.frequency),this.depth=this._depth,this.frequency.value=t.frequency,this.type=t.type,this._readOnly(["frequency"]),this.spread=t.spread},s.default.extend(s.default.Chorus,s.default.StereoEffect),s.default.Chorus.defaults={frequency:1.5,delayTime:3.5,depth:.7,type:"sine",spread:180},Object.defineProperty(s.default.Chorus.prototype,"depth",{get:function(){return this._depth},set:function(t){this._depth=t;var e=this._delayTime*t;this._lfoL.min=Math.max(this._delayTime-e,0),this._lfoL.max=this._delayTime+e,this._lfoR.min=Math.max(this._delayTime-e,0),this._lfoR.max=this._delayTime+e}}),Object.defineProperty(s.default.Chorus.prototype,"delayTime",{get:function(){return 1e3*this._delayTime},set:function(t){this._delayTime=t/1e3,this.depth=this._depth}}),Object.defineProperty(s.default.Chorus.prototype,"type",{get:function(){return this._lfoL.type},set:function(t){this._lfoL.type=t,this._lfoR.type=t}}),Object.defineProperty(s.default.Chorus.prototype,"spread",{get:function(){return this._lfoR.phase-this._lfoL.phase},set:function(t){this._lfoL.phase=90-t/2,this._lfoR.phase=t/2+90}}),s.default.Chorus.prototype.dispose=function(){return s.default.StereoEffect.prototype.dispose.call(this),this._lfoL.dispose(),this._lfoL=null,this._lfoR.dispose(),this._lfoR=null,this._delayNodeL.dispose(),this._delayNodeL=null,this._delayNodeR.dispose(),this._delayNodeR=null,this._writable("frequency"),this.frequency=null,this},e.default=s.default.Chorus},function(t,e,i){"use strict";i.r(e);var s=i(0);i(8),i(7);s.default.Chebyshev=function(){var t=s.default.defaults(arguments,["order"],s.default.Chebyshev);s.default.Effect.call(this,t),this._shaper=new s.default.WaveShaper(4096),this._order=t.order,this.connectEffect(this._shaper),this.order=t.order,this.oversample=t.oversample},s.default.extend(s.default.Chebyshev,s.default.Effect),s.default.Chebyshev.defaults={order:1,oversample:"none"},s.default.Chebyshev.prototype._getCoefficient=function(t,e,i){return i.hasOwnProperty(e)?i[e]:(i[e]=0===e?0:1===e?t:2*t*this._getCoefficient(t,e-1,i)-this._getCoefficient(t,e-2,i),i[e])},Object.defineProperty(s.default.Chebyshev.prototype,"order",{get:function(){return this._order},set:function(t){this._order=t;for(var e=new Array(4096),i=e.length,s=0;s<i;++s){var n=2*s/i-1;e[s]=0===n?0:this._getCoefficient(n,t,{})}this._shaper.curve=e}}),Object.defineProperty(s.default.Chebyshev.prototype,"oversample",{get:function(){return this._shaper.oversample},set:function(t){this._shaper.oversample=t}}),s.default.Chebyshev.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._shaper.dispose(),this._shaper=null,this},e.default=s.default.Chebyshev},function(t,e,i){"use strict";i.r(e);var s=i(0);i(8),i(13),i(75);s.default.BitCrusher=function(){var t=s.default.defaults(arguments,["bits"],s.default.BitCrusher);s.default.Effect.call(this,t);var e=1/Math.pow(2,t.bits-1);this._subtract=new s.default.Subtract,this._modulo=new s.default.Modulo(e),this._bits=t.bits,this.effectSend.fan(this._subtract,this._modulo),this._modulo.connect(this._subtract,0,1),this._subtract.connect(this.effectReturn)},s.default.extend(s.default.BitCrusher,s.default.Effect),s.default.BitCrusher.defaults={bits:4},Object.defineProperty(s.default.BitCrusher.prototype,"bits",{get:function(){return this._bits},set:function(t){this._bits=t;var e=1/Math.pow(2,t-1);this._modulo.value=e}}),s.default.BitCrusher.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._subtract.dispose(),this._subtract=null,this._modulo.dispose(),this._modulo=null,this},e.default=s.default.BitCrusher},function(t,e,i){"use strict";i.r(e);var s=i(0);i(58),i(42),i(8),i(9);s.default.AutoWah=function(){var t=s.default.defaults(arguments,["baseFrequency","octaves","sensitivity"],s.default.AutoWah);s.default.Effect.call(this,t),this.follower=new s.default.Follower(t.follower),this._sweepRange=new s.default.ScaleExp(0,1,.5),this._baseFrequency=t.baseFrequency,this._octaves=t.octaves,this._inputBoost=new s.default.Gain,this._bandpass=new s.default.Filter({rolloff:-48,frequency:0,Q:t.Q}),this._peaking=new s.default.Filter(0,"peaking"),this._peaking.gain.value=t.gain,this.gain=this._peaking.gain,this.Q=this._bandpass.Q,this.effectSend.chain(this._inputBoost,this.follower,this._sweepRange),this._sweepRange.connect(this._bandpass.frequency),this._sweepRange.connect(this._peaking.frequency),this.effectSend.chain(this._bandpass,this._peaking,this.effectReturn),this._setSweepRange(),this.sensitivity=t.sensitivity,this._readOnly(["gain","Q"])},s.default.extend(s.default.AutoWah,s.default.Effect),s.default.AutoWah.defaults={baseFrequency:100,octaves:6,sensitivity:0,Q:2,gain:2,follower:{attack:.3,release:.5}},Object.defineProperty(s.default.AutoWah.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t,this._setSweepRange()}}),Object.defineProperty(s.default.AutoWah.prototype,"baseFrequency",{get:function(){return this._baseFrequency},set:function(t){this._baseFrequency=t,this._setSweepRange()}}),Object.defineProperty(s.default.AutoWah.prototype,"sensitivity",{get:function(){return s.default.gainToDb(1/this._inputBoost.gain.value)},set:function(t){this._inputBoost.gain.value=1/s.default.dbToGain(t)}}),s.default.AutoWah.prototype._setSweepRange=function(){this._sweepRange.min=this._baseFrequency,this._sweepRange.max=Math.min(this._baseFrequency*Math.pow(2,this._octaves),this.context.sampleRate/2)},s.default.AutoWah.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this.follower.dispose(),this.follower=null,this._sweepRange.dispose(),this._sweepRange=null,this._bandpass.dispose(),this._bandpass=null,this._peaking.dispose(),this._peaking=null,this._inputBoost.dispose(),this._inputBoost=null,this._writable(["gain","Q"]),this.gain=null,this.Q=null,this},e.default=s.default.AutoWah},function(t,e,i){"use strict";i.r(e);var s=i(0);i(8),i(12),i(48);s.default.AutoPanner=function(){var t=s.default.defaults(arguments,["frequency"],s.default.AutoPanner);s.default.Effect.call(this,t),this._lfo=new s.default.LFO({frequency:t.frequency,amplitude:t.depth,min:-1,max:1}),this.depth=this._lfo.amplitude,this._panner=new s.default.Panner,this.frequency=this._lfo.frequency,this.connectEffect(this._panner),this._lfo.connect(this._panner.pan),this.type=t.type,this._readOnly(["depth","frequency"])},s.default.extend(s.default.AutoPanner,s.default.Effect),s.default.AutoPanner.defaults={frequency:1,type:"sine",depth:1},s.default.AutoPanner.prototype.start=function(t){return this._lfo.start(t),this},s.default.AutoPanner.prototype.stop=function(t){return this._lfo.stop(t),this},s.default.AutoPanner.prototype.sync=function(t){return this._lfo.sync(t),this},s.default.AutoPanner.prototype.unsync=function(){return this._lfo.unsync(),this},Object.defineProperty(s.default.AutoPanner.prototype,"type",{get:function(){return this._lfo.type},set:function(t){this._lfo.type=t}}),s.default.AutoPanner.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._lfo.dispose(),this._lfo=null,this._panner.dispose(),this._panner=null,this._writable(["depth","frequency"]),this.frequency=null,this.depth=null,this},e.default=s.default.AutoPanner},function(t,e,i){"use strict";i.r(e);var s=i(0);i(8),i(12),i(9);s.default.AutoFilter=function(){var t=s.default.defaults(arguments,["frequency","baseFrequency","octaves"],s.default.AutoFilter);s.default.Effect.call(this,t),this._lfo=new s.default.LFO({frequency:t.frequency,amplitude:t.depth}),this.depth=this._lfo.amplitude,this.frequency=this._lfo.frequency,this.filter=new s.default.Filter(t.filter),this._octaves=0,this.connectEffect(this.filter),this._lfo.connect(this.filter.frequency),this.type=t.type,this._readOnly(["frequency","depth"]),this.octaves=t.octaves,this.baseFrequency=t.baseFrequency},s.default.extend(s.default.AutoFilter,s.default.Effect),s.default.AutoFilter.defaults={frequency:1,type:"sine",depth:1,baseFrequency:200,octaves:2.6,filter:{type:"lowpass",rolloff:-12,Q:1}},s.default.AutoFilter.prototype.start=function(t){return this._lfo.start(t),this},s.default.AutoFilter.prototype.stop=function(t){return this._lfo.stop(t),this},s.default.AutoFilter.prototype.sync=function(t){return this._lfo.sync(t),this},s.default.AutoFilter.prototype.unsync=function(){return this._lfo.unsync(),this},Object.defineProperty(s.default.AutoFilter.prototype,"type",{get:function(){return this._lfo.type},set:function(t){this._lfo.type=t}}),Object.defineProperty(s.default.AutoFilter.prototype,"baseFrequency",{get:function(){return this._lfo.min},set:function(t){this._lfo.min=this.toFrequency(t),this.octaves=this._octaves}}),Object.defineProperty(s.default.AutoFilter.prototype,"octaves",{get:function(){return this._octaves},set:function(t){this._octaves=t,this._lfo.max=this.baseFrequency*Math.pow(2,t)}}),s.default.AutoFilter.prototype.dispose=function(){return s.default.Effect.prototype.dispose.call(this),this._lfo.dispose(),this._lfo=null,this.filter.dispose(),this.filter=null,this._writable(["frequency","depth"]),this.frequency=null,this.depth=null,this},e.default=s.default.AutoFilter},function(t,e,i){"use strict";i.r(e);var s=i(0);i(23),i(10),i(19),i(2),i(22),i(28);s.default.Listener=function(){s.default.call(this),this._orientation=[0,0,0,0,0,0],this._position=[0,0,0],s.default.getContext(function(){this.set(n.defaults)}.bind(this))},s.default.extend(s.default.Listener),s.default.Listener.defaults={positionX:0,positionY:0,positionZ:0,forwardX:0,forwardY:0,forwardZ:1,upX:0,upY:1,upZ:0},s.default.Listener.prototype.isListener=!0,s.default.Listener.prototype._rampTimeConstant=.01,s.default.Listener.prototype.setPosition=function(t,e,i){if(this.context.rawContext.listener.positionX){var s=this.now();this.context.rawContext.listener.positionX.setTargetAtTime(t,s,this._rampTimeConstant),this.context.rawContext.listener.positionY.setTargetAtTime(e,s,this._rampTimeConstant),this.context.rawContext.listener.positionZ.setTargetAtTime(i,s,this._rampTimeConstant)}else this.context.rawContext.listener.setPosition(t,e,i);return this._position=Array.prototype.slice.call(arguments),this},s.default.Listener.prototype.setOrientation=function(t,e,i,s,n,o){if(this.context.rawContext.listener.forwardX){var a=this.now();this.context.rawContext.listener.forwardX.setTargetAtTime(t,a,this._rampTimeConstant),this.context.rawContext.listener.forwardY.setTargetAtTime(e,a,this._rampTimeConstant),this.context.rawContext.listener.forwardZ.setTargetAtTime(i,a,this._rampTimeConstant),this.context.rawContext.listener.upX.setTargetAtTime(s,a,this._rampTimeConstant),this.context.rawContext.listener.upY.setTargetAtTime(n,a,this._rampTimeConstant),this.context.rawContext.listener.upZ.setTargetAtTime(o,a,this._rampTimeConstant)}else this.context.rawContext.listener.setOrientation(t,e,i,s,n,o);return this._orientation=Array.prototype.slice.call(arguments),this},Object.defineProperty(s.default.Listener.prototype,"positionX",{set:function(t){this._position[0]=t,this.setPosition.apply(this,this._position)},get:function(){return this._position[0]}}),Object.defineProperty(s.default.Listener.prototype,"positionY",{set:function(t){this._position[1]=t,this.setPosition.apply(this,this._position)},get:function(){return this._position[1]}}),Object.defineProperty(s.default.Listener.prototype,"positionZ",{set:function(t){this._position[2]=t,this.setPosition.apply(this,this._position)},get:function(){return this._position[2]}}),Object.defineProperty(s.default.Listener.prototype,"forwardX",{set:function(t){this._orientation[0]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[0]}}),Object.defineProperty(s.default.Listener.prototype,"forwardY",{set:function(t){this._orientation[1]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[1]}}),Object.defineProperty(s.default.Listener.prototype,"forwardZ",{set:function(t){this._orientation[2]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[2]}}),Object.defineProperty(s.default.Listener.prototype,"upX",{set:function(t){this._orientation[3]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[3]}}),Object.defineProperty(s.default.Listener.prototype,"upY",{set:function(t){this._orientation[4]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[4]}}),Object.defineProperty(s.default.Listener.prototype,"upZ",{set:function(t){this._orientation[5]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[5]}}),s.default.Listener.prototype.dispose=function(){return this._orientation=null,this._position=null,this};var n=s.default.Listener;s.default.Listener=new n,s.default.Context.on("init",function(t){t.listener&&t.listener.isListener?s.default.Listener=t.listener:s.default.Listener=new n}),e.default=s.default.Listener},function(t,e,i){"use strict";i.r(e);var s=i(0);i(24);s.default.Draw=function(){s.default.call(this),this._events=new s.default.Timeline,this.expiration=.25,this.anticipation=.008,this._boundDrawLoop=this._drawLoop.bind(this)},s.default.extend(s.default.Draw),s.default.Draw.prototype.schedule=function(t,e){return this._events.add({callback:t,time:this.toSeconds(e)}),1===this._events.length&&requestAnimationFrame(this._boundDrawLoop),this},s.default.Draw.prototype.cancel=function(t){return this._events.cancel(this.toSeconds(t)),this},s.default.Draw.prototype._drawLoop=function(){for(var t=s.default.context.currentTime;this._events.length&&this._events.peek().time-this.anticipation<=t;){var e=this._events.shift();t-e.time<=this.expiration&&e.callback()}this._events.length>0&&requestAnimationFrame(this._boundDrawLoop)},s.default.Draw=new s.default.Draw,e.default=s.default.Draw},function(t,e,i){"use strict";i.r(e);var s=i(0),n=(i(3),{});s.default.prototype.send=function(t,e){n.hasOwnProperty(t)||(n[t]=this.context.createGain()),e=s.default.defaultArg(e,0);var i=new s.default.Gain(e,s.default.Type.Decibels);return this.connect(i),i.connect(n[t]),i},s.default.prototype.receive=function(t,e){return n.hasOwnProperty(t)||(n[t]=this.context.createGain()),s.default.connect(n[t],this,0,e),this},s.default.Context.on("init",function(t){t.buses?n=t.buses:(n={},t.buses=n)}),e.default=s.default},function(t,e,i){"use strict";i.r(e);var s=i(0);i(4);s.default.CtrlRandom=function(){var t=s.default.defaults(arguments,["min","max"],s.default.CtrlRandom);s.default.call(this),this.min=t.min,this.max=t.max,this.integer=t.integer},s.default.extend(s.default.CtrlRandom),s.default.CtrlRandom.defaults={min:0,max:1,integer:!1},Object.defineProperty(s.default.CtrlRandom.prototype,"value",{get:function(){var t=this.toSeconds(this.min),e=this.toSeconds(this.max),i=Math.random(),s=i*t+(1-i)*e;return this.integer&&(s=Math.floor(s)),s}}),e.default=s.default.CtrlRandom},function(t,e,i){"use strict";i.r(e);var s=i(0);s.default.CtrlMarkov=function(t,e){s.default.call(this),this.values=s.default.defaultArg(t,{}),this.value=s.default.defaultArg(e,Object.keys(this.values)[0])},s.default.extend(s.default.CtrlMarkov),s.default.CtrlMarkov.prototype.next=function(){if(this.values.hasOwnProperty(this.value)){var t=this.values[this.value];if(s.default.isArray(t))for(var e=this._getProbDistribution(t),i=Math.random(),n=0,o=0;o<e.length;o++){var a=e[o];if(i>n&&i<n+a){var r=t[o];s.default.isObject(r)?this.value=r.value:this.value=r}n+=a}else this.value=t}return this.value},s.default.CtrlMarkov.prototype._getProbDistribution=function(t){for(var e=[],i=0,n=!1,o=0;o<t.length;o++){var a=t[o];s.default.isObject(a)?(n=!0,e[o]=a.probability):e[o]=1/t.length,i+=e[o]}if(n)for(var r=0;r<e.length;r++)e[r]=e[r]/i;return e},s.default.CtrlMarkov.prototype.dispose=function(){this.values=null},e.default=s.default.CtrlMarkov},function(t,e,i){"use strict";i.r(e);var s=i(0);i(4);s.default.CtrlInterpolate=function(){var t=s.default.defaults(arguments,["values","index"],s.default.CtrlInterpolate);s.default.call(this),this.values=t.values,this.index=t.index},s.default.extend(s.default.CtrlInterpolate),s.default.CtrlInterpolate.defaults={index:0,values:[]},Object.defineProperty(s.default.CtrlInterpolate.prototype,"value",{get:function(){var t=this.index;t=Math.min(t,this.values.length-1);var e=Math.floor(t),i=this.values[e],s=this.values[Math.ceil(t)];return this._interpolate(t-e,i,s)}}),s.default.CtrlInterpolate.prototype._interpolate=function(t,e,i){if(s.default.isArray(e)){for(var n=[],o=0;o<e.length;o++)n[o]=this._interpolate(t,e[o],i[o]);return n}if(s.default.isObject(e)){var a={};for(var r in e)a[r]=this._interpolate(t,e[r],i[r]);return a}return(1-t)*(e=this._toNumber(e))+t*(i=this._toNumber(i))},s.default.CtrlInterpolate.prototype._toNumber=function(t){return s.default.isNumber(t)?t:this.toSeconds(t)},s.default.CtrlInterpolate.prototype.dispose=function(){this.values=null},e.default=s.default.CtrlInterpolate},function(t,e,i){"use strict";i.r(e);var s=i(0);i(36),i(1);s.default.Waveform=function(){var t=s.default.defaults(arguments,["size"],s.default.Waveform);t.type=s.default.Analyser.Type.Waveform,s.default.AudioNode.call(this),this._analyser=this.input=this.output=new s.default.Analyser(t)},s.default.extend(s.default.Waveform,s.default.AudioNode),s.default.Waveform.defaults={size:1024},s.default.Waveform.prototype.getValue=function(){return this._analyser.getValue()},Object.defineProperty(s.default.Waveform.prototype,"size",{get:function(){return this._analyser.size},set:function(t){this._analyser.size=t}}),s.default.Waveform.prototype.dispose=function(){s.default.AudioNode.prototype.dispose.call(this),this._analyser.dispose(),this._analyser=null},e.default=s.default.Waveform},function(t,e,i){"use strict";i.r(e);var s=i(0);i(23),i(10),i(19),i(2),i(22),i(28),i(1);s.default.Panner3D=function(){var t=s.default.defaults(arguments,["positionX","positionY","positionZ"],s.default.Panner3D);s.default.AudioNode.call(this),this._panner=this.input=this.output=this.context.createPanner(),this._panner.panningModel=t.panningModel,this._panner.maxDistance=t.maxDistance,this._panner.distanceModel=t.distanceModel,this._panner.coneOuterGain=t.coneOuterGain,this._panner.coneOuterAngle=t.coneOuterAngle,this._panner.coneInnerAngle=t.coneInnerAngle,this._panner.refDistance=t.refDistance,this._panner.rolloffFactor=t.rolloffFactor,this._orientation=[t.orientationX,t.orientationY,t.orientationZ],this._position=[t.positionX,t.positionY,t.positionZ],this.orientationX=t.orientationX,this.orientationY=t.orientationY,this.orientationZ=t.orientationZ,this.positionX=t.positionX,this.positionY=t.positionY,this.positionZ=t.positionZ},s.default.extend(s.default.Panner3D,s.default.AudioNode),s.default.Panner3D.defaults={positionX:0,positionY:0,positionZ:0,orientationX:0,orientationY:0,orientationZ:0,panningModel:"equalpower",maxDistance:1e4,distanceModel:"inverse",coneOuterGain:0,coneOuterAngle:360,coneInnerAngle:360,refDistance:1,rolloffFactor:1},s.default.Panner3D.prototype._rampTimeConstant=.01,s.default.Panner3D.prototype.setPosition=function(t,e,i){if(this._panner.positionX){var s=this.now();this._panner.positionX.setTargetAtTime(t,s,this._rampTimeConstant),this._panner.positionY.setTargetAtTime(e,s,this._rampTimeConstant),this._panner.positionZ.setTargetAtTime(i,s,this._rampTimeConstant)}else this._panner.setPosition(t,e,i);return this._position=Array.prototype.slice.call(arguments),this},s.default.Panner3D.prototype.setOrientation=function(t,e,i){if(this._panner.orientationX){var s=this.now();this._panner.orientationX.setTargetAtTime(t,s,this._rampTimeConstant),this._panner.orientationY.setTargetAtTime(e,s,this._rampTimeConstant),this._panner.orientationZ.setTargetAtTime(i,s,this._rampTimeConstant)}else this._panner.setOrientation(t,e,i);return this._orientation=Array.prototype.slice.call(arguments),this},Object.defineProperty(s.default.Panner3D.prototype,"positionX",{set:function(t){this._position[0]=t,this.setPosition.apply(this,this._position)},get:function(){return this._position[0]}}),Object.defineProperty(s.default.Panner3D.prototype,"positionY",{set:function(t){this._position[1]=t,this.setPosition.apply(this,this._position)},get:function(){return this._position[1]}}),Object.defineProperty(s.default.Panner3D.prototype,"positionZ",{set:function(t){this._position[2]=t,this.setPosition.apply(this,this._position)},get:function(){return this._position[2]}}),Object.defineProperty(s.default.Panner3D.prototype,"orientationX",{set:function(t){this._orientation[0]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[0]}}),Object.defineProperty(s.default.Panner3D.prototype,"orientationY",{set:function(t){this._orientation[1]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[1]}}),Object.defineProperty(s.default.Panner3D.prototype,"orientationZ",{set:function(t){this._orientation[2]=t,this.setOrientation.apply(this,this._orientation)},get:function(){return this._orientation[2]}}),s.default.Panner3D._aliasProperty=function(t){Object.defineProperty(s.default.Panner3D.prototype,t,{set:function(e){this._panner[t]=e},get:function(){return this._panner[t]}})},s.default.Panner3D._aliasProperty("panningModel"),s.default.Panner3D._aliasProperty("refDistance"),s.default.Panner3D._aliasProperty("rolloffFactor"),s.default.Panner3D._aliasProperty("distanceModel"),s.default.Panner3D._aliasProperty("coneInnerAngle"),s.default.Panner3D._aliasProperty("coneOuterAngle"),s.default.Panner3D._aliasProperty("coneOuterGain"),s.default.Panner3D._aliasProperty("maxDistance"),s.default.Panner3D.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._panner.disconnect(),this._panner=null,this._orientation=null,this._position=null,this},e.default=s.default.Panner3D},function(t,e,i){"use strict";i.r(e);var s=i(0);i(60),i(43),i(1);s.default.MultibandCompressor=function(t){s.default.AudioNode.call(this),t=s.default.defaultArg(arguments,s.default.MultibandCompressor.defaults),this._splitter=this.input=new s.default.MultibandSplit({lowFrequency:t.lowFrequency,highFrequency:t.highFrequency}),this.lowFrequency=this._splitter.lowFrequency,this.highFrequency=this._splitter.highFrequency,this.output=new s.default.Gain,this.low=new s.default.Compressor(t.low),this.mid=new s.default.Compressor(t.mid),this.high=new s.default.Compressor(t.high),this._splitter.low.chain(this.low,this.output),this._splitter.mid.chain(this.mid,this.output),this._splitter.high.chain(this.high,this.output),this._readOnly(["high","mid","low","highFrequency","lowFrequency"])},s.default.extend(s.default.MultibandCompressor,s.default.AudioNode),s.default.MultibandCompressor.defaults={low:s.default.Compressor.defaults,mid:s.default.Compressor.defaults,high:s.default.Compressor.defaults,lowFrequency:250,highFrequency:2e3},s.default.MultibandCompressor.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._splitter.dispose(),this._writable(["high","mid","low","highFrequency","lowFrequency"]),this.low.dispose(),this.mid.dispose(),this.high.dispose(),this._splitter=null,this.low=null,this.mid=null,this.high=null,this.lowFrequency=null,this.highFrequency=null,this},e.default=s.default.MultibandCompressor},function(t,e,i){"use strict";i.r(e);var s=i(0);i(10),i(1);s.default.Mono=function(){s.default.AudioNode.call(this),this.createInsOuts(1,0),this._merge=this.output=new s.default.Merge,s.default.connect(this.input,this._merge,0,0),s.default.connect(this.input,this._merge,0,1)},s.default.extend(s.default.Mono,s.default.AudioNode),s.default.Mono.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._merge.dispose(),this._merge=null,this},e.default=s.default.Mono},function(t,e,i){"use strict";i.r(e);var s=i(0);i(53),i(52),i(43),i(1);s.default.MidSideCompressor=function(t){s.default.AudioNode.call(this),t=s.default.defaultArg(t,s.default.MidSideCompressor.defaults),this._midSideSplit=this.input=new s.default.MidSideSplit,this._midSideMerge=this.output=new s.default.MidSideMerge,this.mid=new s.default.Compressor(t.mid),this.side=new s.default.Compressor(t.side),this._midSideSplit.mid.chain(this.mid,this._midSideMerge.mid),this._midSideSplit.side.chain(this.side,this._midSideMerge.side),this._readOnly(["mid","side"])},s.default.extend(s.default.MidSideCompressor,s.default.AudioNode),s.default.MidSideCompressor.defaults={mid:{ratio:3,threshold:-24,release:.03,attack:.02,knee:16},side:{ratio:6,threshold:-30,release:.25,attack:.03,knee:10}},s.default.MidSideCompressor.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["mid","side"]),this.mid.dispose(),this.mid=null,this.side.dispose(),this.side=null,this._midSideSplit.dispose(),this._midSideSplit=null,this._midSideMerge.dispose(),this._midSideMerge=null,this},e.default=s.default.MidSideCompressor},function(t,e,i){"use strict";i.r(e);var s=i(0);i(36),i(1);s.default.Meter=function(){var t=s.default.defaults(arguments,["smoothing"],s.default.Meter);s.default.AudioNode.call(this),this.smoothing=t.smoothing,this._rms=0,this.input=this.output=this._analyser=new s.default.Analyser("waveform",256)},s.default.extend(s.default.Meter,s.default.AudioNode),s.default.Meter.defaults={smoothing:.8},s.default.Meter.prototype.getLevel=function(){for(var t=this._analyser.getValue(),e=0,i=0;i<t.length;i++){var n=t[i];e+=n*n}var o=Math.sqrt(e/t.length);return this._rms=Math.max(o,this._rms*this.smoothing),s.default.gainToDb(this._rms)},s.default.Meter.prototype.getValue=function(){return this._analyser.getValue()[0]},s.default.Meter.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._analyser.dispose(),this._analyser=null,this},e.default=s.default.Meter},function(t,e,i){"use strict";i.r(e);var s=i(0);i(43),i(1);s.default.Limiter=function(){var t=s.default.defaults(arguments,["threshold"],s.default.Limiter);s.default.AudioNode.call(this),this._compressor=this.input=this.output=new s.default.Compressor({attack:.001,decay:.001,threshold:t.threshold}),this.threshold=this._compressor.threshold,this._readOnly("threshold")},s.default.extend(s.default.Limiter,s.default.AudioNode),s.default.Limiter.defaults={threshold:-12},s.default.Limiter.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._compressor.dispose(),this._compressor=null,this._writable("threshold"),this.threshold=null,this},e.default=s.default.Limiter},function(t,e,i){"use strict";i.r(e);var s=i(0);i(58),i(85),i(1);s.default.Gate=function(){var t=s.default.defaults(arguments,["threshold","smoothing"],s.default.Gate);s.default.AudioNode.call(this),this.createInsOuts(1,1),this._follower=new s.default.Follower(t.smoothing),this._gt=new s.default.GreaterThan(s.default.dbToGain(t.threshold)),s.default.connect(this.input,this.output),s.default.connectSeries(this.input,this._follower,this._gt,this.output.gain)},s.default.extend(s.default.Gate,s.default.AudioNode),s.default.Gate.defaults={smoothing:.1,threshold:-40},Object.defineProperty(s.default.Gate.prototype,"threshold",{get:function(){return s.default.gainToDb(this._gt.value)},set:function(t){this._gt.value=s.default.dbToGain(t)}}),Object.defineProperty(s.default.Gate.prototype,"smoothing",{get:function(){return this._follower.smoothing},set:function(t){this._follower.smoothing=t}}),s.default.Gate.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._follower.dispose(),this._gt.dispose(),this._follower=null,this._gt=null,this},e.default=s.default.Gate},function(t,e,i){"use strict";i.r(e);var s=i(0);i(36),i(1);s.default.FFT=function(){var t=s.default.defaults(arguments,["size"],s.default.FFT);t.type=s.default.Analyser.Type.FFT,s.default.AudioNode.call(this),this._analyser=this.input=this.output=new s.default.Analyser(t)},s.default.extend(s.default.FFT,s.default.AudioNode),s.default.FFT.defaults={size:1024},s.default.FFT.prototype.getValue=function(){return this._analyser.getValue()},Object.defineProperty(s.default.FFT.prototype,"size",{get:function(){return this._analyser.size},set:function(t){this._analyser.size=t}}),s.default.FFT.prototype.dispose=function(){s.default.AudioNode.prototype.dispose.call(this),this._analyser.dispose(),this._analyser=null},e.default=s.default.FFT},function(t,e,i){"use strict";i.r(e);var s=i(0);i(60),i(3),i(1);s.default.EQ3=function(){var t=s.default.defaults(arguments,["low","mid","high"],s.default.EQ3);s.default.AudioNode.call(this),this.output=new s.default.Gain,this._multibandSplit=this.input=new s.default.MultibandSplit({lowFrequency:t.lowFrequency,highFrequency:t.highFrequency}),this._lowGain=new s.default.Gain(t.low,s.default.Type.Decibels),this._midGain=new s.default.Gain(t.mid,s.default.Type.Decibels),this._highGain=new s.default.Gain(t.high,s.default.Type.Decibels),this.low=this._lowGain.gain,this.mid=this._midGain.gain,this.high=this._highGain.gain,this.Q=this._multibandSplit.Q,this.lowFrequency=this._multibandSplit.lowFrequency,this.highFrequency=this._multibandSplit.highFrequency,this._multibandSplit.low.chain(this._lowGain,this.output),this._multibandSplit.mid.chain(this._midGain,this.output),this._multibandSplit.high.chain(this._highGain,this.output),this._readOnly(["low","mid","high","lowFrequency","highFrequency"])},s.default.extend(s.default.EQ3,s.default.AudioNode),s.default.EQ3.defaults={low:0,mid:0,high:0,lowFrequency:400,highFrequency:2500},s.default.EQ3.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["low","mid","high","lowFrequency","highFrequency"]),this._multibandSplit.dispose(),this._multibandSplit=null,this.lowFrequency=null,this.highFrequency=null,this._lowGain.dispose(),this._lowGain=null,this._midGain.dispose(),this._midGain=null,this._highGain.dispose(),this._highGain=null,this.low=null,this.mid=null,this.high=null,this.Q=null,this},e.default=s.default.EQ3},function(t,e,i){"use strict";i.r(e);var s=i(0);i(91),i(88),i(1);s.default.Channel=function(){var t=s.default.defaults(arguments,["volume","pan"],s.default.PanVol);s.default.AudioNode.call(this,t),this._solo=this.input=new s.default.Solo(t.solo),this._panVol=this.output=new s.default.PanVol({pan:t.pan,volume:t.volume,mute:t.mute}),this.pan=this._panVol.pan,this.volume=this._panVol.volume,this._solo.connect(this._panVol),this._readOnly(["pan","volume"])},s.default.extend(s.default.Channel,s.default.AudioNode),s.default.Channel.defaults={pan:0,volume:0,mute:!1,solo:!1},Object.defineProperty(s.default.Channel.prototype,"solo",{get:function(){return this._solo.solo},set:function(t){this._solo.solo=t}}),Object.defineProperty(s.default.Channel.prototype,"muted",{get:function(){return this._solo.muted||this.mute}}),Object.defineProperty(s.default.Channel.prototype,"mute",{get:function(){return this._panVol.mute},set:function(t){this._panVol.mute=t}}),s.default.Channel.prototype.dispose=function(){return s.default.AudioNode.prototype.dispose.call(this),this._writable(["pan","volume"]),this._panVol.dispose(),this._panVol=null,this.pan=null,this.volume=null,this._solo.dispose(),this._solo=null,this},e.default=s.default.Channel},function(t,e){var i;i=function(){return this}();try{i=i||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e,i){i(31),i(36),i(146),i(43),i(23),i(47),i(145),i(59),i(144),i(9),i(58),i(41),i(143),i(12),i(142),i(54),i(10),i(141),i(140),i(52),i(53),i(139),i(138),i(60),i(48),i(137),i(91),i(86),i(88),i(19),i(27),i(136),i(135),i(134),i(79),i(133),i(1),i(11),i(78),i(132),i(83),i(20),i(18),i(131),i(35),i(3),i(81),i(130),i(40),i(77),i(76),i(14),i(24),i(34),i(16),i(56),i(80),i(129),i(128),i(127),i(126),i(125),i(124),i(74),i(123),i(8),i(122),i(33),i(121),i(120),i(73),i(119),i(118),i(117),i(116),i(15),i(115),i(114),i(72),i(113),i(112),i(51),i(71),i(70),i(111),i(110),i(109),i(108),i(107),i(21),i(106),i(105),i(25),i(66),i(104),i(103),i(102),i(101),i(38),i(87),i(29),i(22),i(89),i(100),i(85),i(84),i(75),i(5),i(90),i(99),i(61),i(26),i(42),i(2),i(30),i(13),i(82),i(98),i(7),i(28),i(68),i(32),i(67),i(49),i(97),i(39),i(37),i(17),i(64),i(65),i(96),i(50),i(69),i(6),i(57),i(95),i(46),i(94),i(55),i(63),i(62),i(45),i(4),t.exports=i(0).default}])});

},{}],"ts/ChordProgression.ts":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var Chord_1 = require("./music-theory/Chord");

var tone_1 = require("tone");
/**
 * Holds information for sequence of chords.
 */


var ChordProgression =
/** @class */
function () {
  function ChordProgression() {
    this.chordsList = []; // An array to store each chord in the progression as an array of notes

    this.curIndex = -1; // The current index of the chord in the list

    this.curChord = null; // The current chord

    this.curChordNameBtn = null; // The current chord name button

    this.chordNameBtns = []; // An array of chord name buttons

    this._playButton = document.getElementById("playBtn"); // The button to play the chord progression
    // Callback events

    this.onActivate = function () {};

    this.onPlay = function () {};

    this._appendChord(new Chord_1.Chord(48), null);

    this._appendAddBtn();

    this._addEventListeners();
  }
  /**
   * Add event listeners to the elements
   * @private
   */


  ChordProgression.prototype._addEventListeners = function () {
    var _this = this;

    var resetBtn = document.getElementById("resetBtn");
    resetBtn.addEventListener("pointerup", function () {
      _this._reset();
    });

    this._playButton.addEventListener("pointerup", function () {
      _this._play();
    });
  };
  /**
   * Append an add button to the progression container
   * @private
   */


  ChordProgression.prototype._appendAddBtn = function () {
    var _this = this;

    var btnContainer = document.createElement("div");
    btnContainer.classList.add("btn-chord");
    var btn = document.createElement("div");
    btn.classList.add("button-chord-name", "add", "shadow");
    var icon = document.createElement("i");
    icon.classList.add("material-icons");
    icon.innerText = "add";
    btn.appendChild(icon);
    btn.addEventListener("pointerup", function () {
      var chord = new Chord_1.Chord(48);

      _this._appendChord(chord, btnContainer);
    });
    btnContainer.appendChild(btn);
    var progressionContainer = document.getElementById("progressionChordsContainer");
    progressionContainer.appendChild(btnContainer);
  };
  /**
   * Insert a chord in front of the add button
   * @param chord
   * @param addBtn
   * @private
   */


  ChordProgression.prototype._appendChord = function (chord, addBtn) {
    if (this.curChordNameBtn !== null) {
      this.curChordNameBtn.parentElement.classList.remove("active"); // Deactivate the current button
    }

    this.chordsList.push(chord);
    this.curChord = chord;
    this.curIndex = this.chordsList.length - 1;
    var btnContainer = document.createElement("div");
    btnContainer.classList.add("btn-chord", "active");

    this._appendChordNameBtn(btnContainer);

    this._appendDeleteBtn(btnContainer);

    var progressionContainer = document.getElementById("progressionChordsContainer");
    progressionContainer.insertBefore(btnContainer, addBtn); // Insert the new chord btn before add btn

    console.log("Append a new chord " + this.curChord + " at " + this.curIndex);

    this._disableDeleteFirstChord();
  };
  /**
   * Append a delete button in the container
   * @param container
   * @private
   */


  ChordProgression.prototype._appendDeleteBtn = function (container) {
    var _this = this;

    var deleteBtn = document.createElement("div");
    deleteBtn.classList.add("btn-chord-delete", "shadow-sm");
    var icon = document.createElement("i");
    icon.classList.add("material-icons");
    icon.innerText = "clear";
    deleteBtn.appendChild(icon);
    deleteBtn.addEventListener("pointerup", function () {
      _this._delete(deleteBtn);
    });
    container.appendChild(deleteBtn);
  };
  /**
   * Append a chord name button to the container
   * @param container
   * @private
   */


  ChordProgression.prototype._appendChordNameBtn = function (container) {
    var _this = this;

    var btn = document.createElement("div");
    btn.classList.add("button-chord-name", "shadow");
    var text = document.createElement("div");
    this.curChord = new Chord_1.Chord(); // Initialize the current chord to a C4 major chord

    text.innerHTML = this.curChord.getChordName(); // Set the text to the name of the current chord

    btn.appendChild(text);
    btn.addEventListener("pointerup", function () {
      _this._activate(btn);
    });
    container.appendChild(btn);
    this.chordNameBtns.push(btn);
    this.curChordNameBtn = btn;
    this.onActivate(this.curChord);
  };
  /**
   * Activate the chord name button. and setChord the current index, btn, and chord
   * @param chordNameBtn
   * @private
   */


  ChordProgression.prototype._activate = function (chordNameBtn) {
    if (this.curChordNameBtn !== null) {
      this.curChordNameBtn.parentElement.classList.remove("active"); // Deactivate the current button
    }

    this.curIndex = this.chordNameBtns.indexOf(chordNameBtn);
    this.curChord = this.chordsList[this.curIndex];
    chordNameBtn.parentElement.classList.add("active");
    this.curChordNameBtn = chordNameBtn;
    console.log("Activate chord " + this.curChord + " at " + this.curIndex);
    this.onActivate(this.curChord);
  };

  ChordProgression.prototype._disableDeleteFirstChord = function () {
    if (this.chordsList.length <= 1) {
      var button = this.chordNameBtns[0];
      var deleteButton = button.nextElementSibling;
      deleteButton.remove();
      console.log("The first delete button is deleted");
    } else {
      var button = this.chordNameBtns[0];
      var container = button.parentElement;

      this._appendDeleteBtn(container);

      console.log("The first delete button is added");
    }
  };

  ;
  /**
   * Delete the chord button that the delete button is in, and activate the adjacent chord if the current chord is activated
   * @param deleteBtn
   * @private
   */

  ChordProgression.prototype._delete = function (deleteBtn) {
    var chordNameBtn = deleteBtn.previousSibling;
    var index = this.chordNameBtns.indexOf(chordNameBtn);
    this.chordsList.splice(index, 1); // Remove the chord at index

    this.chordNameBtns.splice(index, 1);

    if (this.curIndex > index) {
      // Delete a button before current button
      this.curIndex -= 1; // Since an chord before has been removed, the current index decreased by 1
    } else if (this.curIndex == 0 && this.chordsList.length >= 1) {
      // Delete an active button at index 0
      this.curIndex = 0;
      this.curChord = this.chordsList[0];
      var newChordNameBtn = this.chordNameBtns[0];

      this._activate(newChordNameBtn); // Activate the new button at index 0

    } else if (this.curIndex == index) {
      // Delete the last button
      this.curIndex -= 1; // Shift to previous item

      this.curChord = this.chordsList[this.curIndex]; // Update current chord

      if (this.curIndex >= 0) {
        // Activate the previous node if it exists
        var newChordNameBtn = this.chordNameBtns[this.curIndex];

        this._activate(newChordNameBtn);
      }
    }

    console.log("Delete chord at index " + index + ". Change the chord to " + this.curChord + " at " + this.curIndex);
    deleteBtn.parentElement.remove(); // Remove the chord button that the delete btn is in

    this._disableDeleteFirstChord();
  };
  /**
   * Update the current chord, the chord list and the text of the current button
   * @param chord
   */


  ChordProgression.prototype.setChord = function (chord) {
    this.curChord = chord;
    this.chordsList[this.curIndex] = chord;

    this._setChordName();
  };

  ChordProgression.prototype._setChordName = function () {
    this.curChordNameBtn.innerHTML = ""; // Reset text

    var text = document.createElement("div");

    if (this.curChord == null) {
      throw new Error("curChord is null");
    }

    text.innerHTML = this.curChord.getChordName(); // Set the text to the name of the current chord

    this.curChordNameBtn.appendChild(text);
  };

  ChordProgression.prototype.setChordType = function (family, type) {
    if (this.curChord == null) {
      throw new Error("curChord is null");
    }

    this.curChord.type = type;
    this.curChord.family = family;
    this.chordsList[this.curIndex] = this.curChord;

    this._setChordName();
  };

  ChordProgression.prototype.setInversion = function (inversion) {
    if (inversion < 0) {
      throw new Error("Invalid inversion, inversion < 0");
    }

    if (this.curChord == null) {
      throw new Error("curChord is null");
    }

    this.curChord.inversionNum = inversion;
    this.chordsList[this.curIndex] = this.curChord;

    this._setChordName();
  };
  /**
   * Reset the chord progression, and initialize with a C chord
   * @private
   */


  ChordProgression.prototype._reset = function () {
    // Clear data
    this.chordsList = [];
    this.curChord = null;
    this.curIndex = -1;
    this.curChordNameBtn = null;
    this.chordNameBtns = []; // Clear html

    var container = document.getElementById("progressionChordsContainer");
    container.innerHTML = ""; // Clear the progression

    this._appendChord(new Chord_1.Chord(48), null);

    this._appendAddBtn();
  };

  ChordProgression.prototype._getNotesList = function () {
    var notesList = [];

    for (var _i = 0, _a = this.chordsList; _i < _a.length; _i++) {
      var chord = _a[_i];
      var notes = chord.getNotes();
      notesList.push(notes);
    }

    return notesList;
  };

  ChordProgression.prototype._play = function () {
    if (tone_1.Transport.state === 'started') {
      this._playButton.innerHTML = "<i class=\"fas fa-play\"></i>";

      this._playButton.classList.remove("active");

      tone_1.Transport.stop();
    } else {
      this._playButton.innerHTML = "<i class=\"fas fa-pause\"></i>";

      this._playButton.classList.add("active");

      tone_1.Transport.start('+0.1');
    }

    var notesList = this._getNotesList();

    this.onPlay(notesList);
  };

  return ChordProgression;
}();

exports.ChordProgression = ChordProgression;
},{"./music-theory/Chord":"ts/music-theory/Chord.ts","tone":"../node_modules/tone/build/Tone.js"}],"ts/index.ts":[function(require,module,exports) {
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
}); // Third-party modules

require("bootstrap");

require("bootstrap/dist/css/bootstrap.css"); // Import precompiled Bootstrap css


require("@fortawesome/fontawesome-free/css/all.css");

require("material-design-icons");

require("bootstrap-submenu/dist/css/bootstrap-submenu.css");

require("bootstrap-submenu/dist/js/bootstrap-submenu");

require("jquery");

var Piano_1 = require("./keyboard/Piano");

var PianoSound_1 = require("./sound/PianoSound");

var Loader_1 = require("./interface/Loader");

var ChordTypeBtn_1 = require("./setting-toolbar/ChordTypeBtn");

var InversionBtn_1 = require("./setting-toolbar/InversionBtn");

var Chord_1 = require("./music-theory/Chord");

var ChordProgression_1 = require("./ChordProgression");

var tone_1 = require("tone");

new Loader_1.Loader();
var chordTypeBtn = new ChordTypeBtn_1.ChordTypeBtn();
var inversionBtn = new InversionBtn_1.InversionBtn();
var pianoContainer = document.getElementById("pianoContainer");
var piano = new Piano_1.Piano(pianoContainer);
var sound = new PianoSound_1.PianoSound(0, 100);
sound.load();
var progression = new ChordProgression_1.ChordProgression();

piano.onKeyDown = function (chord) {
  progression.setChord(chord);
  var notes = chord.getNotes();
  sound.keyDown(notes);
};

piano.onKeyUp = function (chord) {
  sound.keyUp(chord);
};

piano.onSetChord = function (chord) {
  var notes = chord.getNotes();
  sound.keyDownUp(notes);
};

chordTypeBtn.onSetChordType = function (type, family) {
  console.log("Set the type to " + type);
  var chordLen = Chord_1.Chord.getLen(family, type);
  inversionBtn.reset(chordLen); // Reset the chord progression to none

  piano.setChordType(family, type);
  progression.setChordType(family, type);
};

inversionBtn.onSetInversion = function (inversionNum) {
  piano.setInversion(inversionNum);
  progression.setInversion(inversionNum);
  console.log("Set the inversion to " + inversionNum);
};

progression.onActivate = function (chord) {
  piano.setChord(chord);
  chordTypeBtn.setTypeText(chord.type);
  inversionBtn.setInversionText(chord);
  console.log("Set the chord to " + chord);
};

var part = new tone_1.Part(function h() {}, []); // Declaring an outside part to remove the part as soon as you call it

progression.onPlay = function (chords) {
  // @ts-ignore
  part.removeAll();
  var events = [];

  for (var i = 0; i < chords.length; i++) {
    var event = {
      "time": i,
      "chord": chords[i]
    };
    events.push(event);
  }

  part = new tone_1.Part(function (time, value) {
    //the value is an object which contains both the note and the velocity
    // @ts-ignore
    sound.keyDownUp(value.chord, 0.8, time); // @ts-ignore

    console.log("Play the chord " + value.chord); //@ts-ignore
  }, events).start(0);
  part.loop = true;
  part.loopStart = 0;
  part.loopEnd = chords.length + .5;
};
},{"bootstrap":"../node_modules/bootstrap/dist/js/bootstrap.js","bootstrap/dist/css/bootstrap.css":"../node_modules/bootstrap/dist/css/bootstrap.css","@fortawesome/fontawesome-free/css/all.css":"../node_modules/@fortawesome/fontawesome-free/css/all.css","material-design-icons":"../node_modules/material-design-icons/index.js","bootstrap-submenu/dist/css/bootstrap-submenu.css":"../node_modules/bootstrap-submenu/dist/css/bootstrap-submenu.css","bootstrap-submenu/dist/js/bootstrap-submenu":"../node_modules/bootstrap-submenu/dist/js/bootstrap-submenu.js","jquery":"../node_modules/jquery/dist/jquery.js","./keyboard/Piano":"ts/keyboard/Piano.ts","./sound/PianoSound":"ts/sound/PianoSound.ts","./interface/Loader":"ts/interface/Loader.ts","./setting-toolbar/ChordTypeBtn":"ts/setting-toolbar/ChordTypeBtn.ts","./setting-toolbar/InversionBtn":"ts/setting-toolbar/InversionBtn.ts","./music-theory/Chord":"ts/music-theory/Chord.ts","./ChordProgression":"ts/ChordProgression.ts","tone":"../node_modules/tone/build/Tone.js"}],"../node_modules/parcel-bundler/src/builtins/hmr-runtime.js":[function(require,module,exports) {
var global = arguments[3];
var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;

function Module(moduleName) {
  OldModule.call(this, moduleName);
  this.hot = {
    data: module.bundle.hotData,
    _acceptCallbacks: [],
    _disposeCallbacks: [],
    accept: function (fn) {
      this._acceptCallbacks.push(fn || function () {});
    },
    dispose: function (fn) {
      this._disposeCallbacks.push(fn);
    }
  };
  module.bundle.hotData = null;
}

module.bundle.Module = Module;
var checkedAssets, assetsToAccept;
var parent = module.bundle.parent;

if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
  var hostname = "" || location.hostname;
  var protocol = location.protocol === 'https:' ? 'wss' : 'ws';
  var ws = new WebSocket(protocol + '://' + hostname + ':' + "51916" + '/');

  ws.onmessage = function (event) {
    checkedAssets = {};
    assetsToAccept = [];
    var data = JSON.parse(event.data);

    if (data.type === 'update') {
      var handled = false;
      data.assets.forEach(function (asset) {
        if (!asset.isNew) {
          var didAccept = hmrAcceptCheck(global.parcelRequire, asset.id);

          if (didAccept) {
            handled = true;
          }
        }
      }); // Enable HMR for CSS by default.

      handled = handled || data.assets.every(function (asset) {
        return asset.type === 'css' && asset.generated.js;
      });

      if (handled) {
        console.clear();
        data.assets.forEach(function (asset) {
          hmrApply(global.parcelRequire, asset);
        });
        assetsToAccept.forEach(function (v) {
          hmrAcceptRun(v[0], v[1]);
        });
      } else if (location.reload) {
        // `location` global exists in a web worker context but lacks `.reload()` function.
        location.reload();
      }
    }

    if (data.type === 'reload') {
      ws.close();

      ws.onclose = function () {
        location.reload();
      };
    }

    if (data.type === 'error-resolved') {
      console.log('[parcel] ✨ Error resolved');
      removeErrorOverlay();
    }

    if (data.type === 'error') {
      console.error('[parcel] 🚨  ' + data.error.message + '\n' + data.error.stack);
      removeErrorOverlay();
      var overlay = createErrorOverlay(data);
      document.body.appendChild(overlay);
    }
  };
}

function removeErrorOverlay() {
  var overlay = document.getElementById(OVERLAY_ID);

  if (overlay) {
    overlay.remove();
  }
}

function createErrorOverlay(data) {
  var overlay = document.createElement('div');
  overlay.id = OVERLAY_ID; // html encode message and stack trace

  var message = document.createElement('div');
  var stackTrace = document.createElement('pre');
  message.innerText = data.error.message;
  stackTrace.innerText = data.error.stack;
  overlay.innerHTML = '<div style="background: black; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; opacity: 0.85; font-family: Menlo, Consolas, monospace; z-index: 9999;">' + '<span style="background: red; padding: 2px 4px; border-radius: 2px;">ERROR</span>' + '<span style="top: 2px; margin-left: 5px; position: relative;">🚨</span>' + '<div style="font-size: 18px; font-weight: bold; margin-top: 20px;">' + message.innerHTML + '</div>' + '<pre>' + stackTrace.innerHTML + '</pre>' + '</div>';
  return overlay;
}

function getParents(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return [];
  }

  var parents = [];
  var k, d, dep;

  for (k in modules) {
    for (d in modules[k][1]) {
      dep = modules[k][1][d];

      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {
        parents.push(k);
      }
    }
  }

  if (bundle.parent) {
    parents = parents.concat(getParents(bundle.parent, id));
  }

  return parents;
}

function hmrApply(bundle, asset) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (modules[asset.id] || !bundle.parent) {
    var fn = new Function('require', 'module', 'exports', asset.generated.js);
    asset.isNew = !modules[asset.id];
    modules[asset.id] = [fn, asset.deps];
  } else if (bundle.parent) {
    hmrApply(bundle.parent, asset);
  }
}

function hmrAcceptCheck(bundle, id) {
  var modules = bundle.modules;

  if (!modules) {
    return;
  }

  if (!modules[id] && bundle.parent) {
    return hmrAcceptCheck(bundle.parent, id);
  }

  if (checkedAssets[id]) {
    return;
  }

  checkedAssets[id] = true;
  var cached = bundle.cache[id];
  assetsToAccept.push([bundle, id]);

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    return true;
  }

  return getParents(global.parcelRequire, id).some(function (id) {
    return hmrAcceptCheck(global.parcelRequire, id);
  });
}

function hmrAcceptRun(bundle, id) {
  var cached = bundle.cache[id];
  bundle.hotData = {};

  if (cached) {
    cached.hot.data = bundle.hotData;
  }

  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {
    cached.hot._disposeCallbacks.forEach(function (cb) {
      cb(bundle.hotData);
    });
  }

  delete bundle.cache[id];
  bundle(id);
  cached = bundle.cache[id];

  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {
    cached.hot._acceptCallbacks.forEach(function (cb) {
      cb();
    });

    return true;
  }
}
},{}]},{},["../node_modules/parcel-bundler/src/builtins/hmr-runtime.js","ts/index.ts"], null)
//# sourceMappingURL=/ts.841fc46b.js.map